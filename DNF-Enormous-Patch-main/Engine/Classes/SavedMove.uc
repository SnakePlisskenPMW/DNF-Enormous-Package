/*******************************************************************************
 * SavedMove generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class SavedMove extends Info
    native
    collapsecategories
    notplaceable
    hidecategories(movement,Collision,Lighting,LightColor);

cpptext
{
// Stripped
}

var SavedMove NextMove;
var SavedMove PreviousMove;
var float Timestamp;
var float DeltaTime;
var Rotator StartViewRotation;
var Vector endLocation;
var bool bForward;
var bool bBackward;
var bool bStrafeLeft;
var bool bStrafeRight;
var bool bDuck;
var bool bJump;
var bool bFire;
var bool bFireServer;
var bool bMelee;
var bool bUse;
var bool bWasDuck;
var bool bWasJump;
var bool bWasFire;
var bool bWasFireServer;
var bool bWasMelee;
var bool bWasUse;
var bool bAdjustStepHeight;
var bool bToggleCrouch;
var bool bCrouchOn;
var bool bIsFiringBulletThisFrame;
var Vector WeaponTraceStartOffset;
var float aForward;
var float aStrafe;
var Object.EPhysics Physics;
var bool bJumpInProgress;
var bool bIsJumpPadLaunching;
var bool bIsInAirFromJumpPad;
var bool bIsSubmerged;
var float DrawScale;
var Actor.EPostureStateEx PostureState;
var float CollisionRadius;
var float CollisionHeight;
var Vector StartVelocity;
var bool StoredPlayerbForward;
var bool StoredPlayerbBackward;
var bool StoredPlayerbStrafeLeft;
var bool StoredPlayerbStrafeRight;
var bool StoredPlayerbJump;
var bool StoredPlayerbDuck;
var bool StoredPlayerbFire;
var bool StoredPlayerbFireServer;
var bool StoredPlayerbMelee;
var bool StoredPlayerbUse;
var bool StoredPlayerbWasJump;
var bool StoredPlayerbWasDuck;
var bool StoredPlayerbWasFire;
var bool StoredPlayerbWasFireServer;
var bool StoredPlayerbWasMelee;
var bool StoredPlayerbWasUse;
var bool StoredPlayerbAdjustStepHeight;
var bool StoredPlayerbToggleCrouch;
var bool StoredPlayerbCrouchOn;
var float StoredPlayer_aForward;
var float StoredPlayer_aStrafe;
var Rotator StoredPlayerViewRotation;
var Object.EPhysics StoredPlayerPhysics;
var bool StoredPlayerbJumpInProgress;
var bool StoredPlayerbIsJumpPadLaunching;
var bool StoredPlayerbIsInAirFromJumpPad;
var bool StoredPlayerbIsSubmerged;
var float StoredPlayerDrawScale;
var Actor.EPostureStateEx StoredPlayerPostureState;
var float StoredPlayerCollisionRadius;
var float StoredPlayerCollisionHeight;

event CallServerMove(PlayerPawn P)
{
    local Vector LocationToSend;

    // End:0x17
    if(bIsFiringBulletThisFrame)
    {
        LocationToSend = WeaponTraceStartOffset;        
    }
    else
    {
        LocationToSend = endLocation;
    }
    P.CompressedServerMove(Timestamp, LocationToSend, self);
    return;
}

defaultproperties
{
    RemoteRole=0
}