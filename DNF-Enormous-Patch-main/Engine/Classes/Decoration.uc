/*******************************************************************************
 * Decoration generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Decoration extends InteractiveActor
    abstract
    native
    collapsecategories
    notplaceable;

enum EDukeSauceType
{
    DUKESAUCE_Classic,
    DUKESAUCE_Ketchup,
    DUKESAUCE_Mayo,
    DUKESAUCE_Mustard,
    DUKESAUCE_HotSauce
};

var() noexport bool bEnemy "Should this decoration be treated as an enemy pawn";
var() noexport bool bIgnoreAimAssist "If bEnemy is set, should this be considered in aim assist";

simulated function AttachToUser()
{
    return;
}

simulated function DetachFromUser()
{
    return;
}

simulated event ControlRemapperEx GetInternalControlRemapper()
{
    return none;
    return;
}

function PerformAttachPawnSuccess(Pawn Attachee, optional bool bForced)
{
    return;
}

event DetachPawn(optional bool bForceDetach)
{
    return;
}

simulated function bool ForceStateTransition(name NewStateName)
{
    return;
}

function TriggerFunc_ForcePlayerDetachComplete()
{
    return;
}

function NotePawnLost()
{
    return;
}

simulated function ShowControls()
{
    return;
}

simulated event QueryInteractKeyInfoState(HUD HUD)
{
    return;
}

simulated event PostUserTick(float DeltaTime)
{
    return;
}

simulated event PostUserAnimTick()
{
    return;
}

simulated event bool UsableSomethingUsesHomePose()
{
    return true;
    return;
}

simulated event bool UsableSomethingInterpolatingOut()
{
    return false;
    return;
}

simulated function float UsableSomethingGetDamageScale(Pawn Pawn, class<DamageType> DamageType)
{
    return 1;
    return;
}

simulated event bool UsableSomethingOverrideFOV()
{
    return false;
    return;
}

simulated event float UsableSomethingGetOverrideFOV()
{
    return 90;
    return;
}

simulated event bool UsableSomething_AIShouldIgnoreUser()
{
    return false;
    return;
}

simulated event Actor GetIKActor(name LimbID)
{
    return none;
    return;
}

simulated function float GetShakeViewScale()
{
    return 1;
    return;
}

function bool ToggleHeadlights()
{
    return false;
    return;
}

simulated event bool IsVehicleSpace()
{
    return false;
    return;
}

function VehicleHandBrakeEnable()
{
    return;
}

function VehicleHandBrakeDisable()
{
    return;
}

function VehicleBoostEnable()
{
    return;
}

function VehicleBoostDisable()
{
    return;
}

function VehicleFireDown()
{
    return;
}

function VehicleFireUp()
{
    return;
}

function VehicleZoomDown()
{
    return;
}

function VehicleZoomUp()
{
    return;
}

function VehicleViewChange()
{
    return;
}

function VehicleRadioChange()
{
    return;
}

function VehicleUpActionEnable()
{
    return;
}

function VehicleUpActionDisable()
{
    return;
}

function VehicleDownActionEnable()
{
    return;
}

function VehicleDownActionDisable()
{
    return;
}

simulated event bool ShouldDrawCrosshair()
{
    return true;
    return;
}

defaultproperties
{
    bIgnoresPhysicsDamage=false
    bIsDecoration=true
    bTickOnlyRecent=true
    bTickOnlyZoneRecent=true
    bNeverTravel=true
    bForceCollisionRep=true
}