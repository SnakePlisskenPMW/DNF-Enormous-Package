/*******************************************************************************
 * dnKingOfTheHill_MarkerBase generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class dnKingOfTheHill_MarkerBase extends InteractiveActor
    abstract
    native
    collapsecategories
    notplaceable;

var Vector OriginalLocation;
var(dnKingOfTheHill_MarkerProjector) noexport int FOV "FOV of projection frustum. 0 == Orthogonal.";
var(dnKingOfTheHill_MarkerProjector) noexport int MaxTraceDistance "How far out projector will affect the world.";
var(dnKingOfTheHill_MarkerProjector) noexport float MaxViewDistance "How far away till this projector will no longer render.";
var(dnKingOfTheHill_MarkerProjector) noexport float FadeOutStart "When to start fading out.";
var(dnKingOfTheHill_MarkerProjector) noexport bool bProjectBSP "If true, the projector will draw itself on the BSP.";
var(dnKingOfTheHill_MarkerProjector) noexport bool bProjectMesh "If true, the projector will draw itself on meshes.";
var(dnKingOfTheHill_MarkerProjector) noexport bool bProjectStaticMesh "If true, the projector will draw itself on static meshes.";
var(dnKingOfTheHill_MarkerProjector) noexport bool bProjectActor "If true, the projector will draw itself on actors.";
var(dnKingOfTheHill_MarkerProjector) noexport bool bProjectPawn "If true, the projector will draw itself on pawns.";
var(dnKingOfTheHill_MarkerProjector) noexport bool bProjectOwner "If true, then the projector will draw itself on the actor that spawned it as well.";
var(dnKingOfTheHill_MarkerProjector) noexport bool bLevelStatic "Set this to true if you never plan on moving the projector around.";
var(dnKingOfTheHill_MarkerProjector) noexport bool bProjectNonStatic "Set this to true if you have bLevelStatic and want to attach to actors that have bStatic = false.  This was added instead of changing the logic for bLevelStatic, just in case that would have broken stuff.";
var(dnKingOfTheHill_MarkerProjector) noexport bool bClipBSP "If true, the projector will clip itself to the frustum (only for BSP).";
var(dnKingOfTheHill_MarkerProjector) noexport bool bClipStaticMesh "If true, the projector will clip itself to the frustum (only for StaticMeshes).";
var(dnKingOfTheHill_MarkerProjector) noexport bool bProjectOnUnlit "If true, the projector will draw itself on Unlit surfaces.";
var(dnKingOfTheHill_MarkerProjector) noexport bool bBackFaceCull "If true, the projector will backface cull BSP surfaces from the POV of the projector.";
var(dnKingOfTheHill_MarkerProjector) noexport bool FlipX "Flip this projector across it's X Axis.";
var(dnKingOfTheHill_MarkerProjector) noexport bool FlipY "Flip this projector across it's Y Axis.";
var(dnKingOfTheHill_MarkerProjector) bool bIsDecal;
var(dnKingOfTheHill_MarkerProjector) noexport bool bDestroyOnTrigger "Destroy the projector when it gets triggered.";
var(dnKingOfTheHill_MarkerProjector) noexport float ProjectorScaleX "Independent scaling of the x axis";
var(dnKingOfTheHill_MarkerProjector) noexport float ProjectorScaleY "Independent scaling of the y axis";
var(dnKingOfTheHill_MarkerProjector) noexport float MinSpawnDistance "The closest distance another projector is allowed to spawn";
var(dnKingOfTheHill_MarkerProjector) float OverrideNearPlaneDist;
var(dnKingOfTheHill_MarkerProjector) float ProjectorOpacity;
var(dnKingOfTheHill_MarkerProjector) noexport name TurnOnTag "Trigger this event to turn the Projector on.  Will not work when bLevelStatic = true.";
var(dnKingOfTheHill_MarkerProjector) noexport name TurnOffTag "Trigger this event to turn the Projector off.  Will not work when bLevelStatic = true.";
var(dnKingOfTheHill_MarkerCylinder) float CylinderDrawScale;
var(dnKingOfTheHill_MarkerCylinder) Vector CylinderOffset;
var bool bInit;
var netupdate(SetActive) bool bActive;
var int currentLocIndex;
var bool bKeyFrameLoopSet;
var() bool bInitial;
var bool bHasBeenUsed;
var int Fresh;
var int LastProjectorState;
var int nInit;

replication
{
    // Pos:0x000
    reliable if(int(Role) % int(ROLE_Authority))
        bActive, nInit;

    // Pos:0x00B
    reliable if((int(Role) % int(ROLE_Authority)) << bNetInitial)
        CylinderDrawScale, CylinderOffset, 
        FadeOutStart, FlipX, 
        FlipY, MaxTraceDistance, 
        MaxViewDistance, MinSpawnDistance, 
        OriginalLocation, OverrideNearPlaneDist, 
        ProjectorOpacity, ProjectorScaleX, 
        ProjectorScaleY, TurnOffTag, 
        TurnOnTag, bBackFaceCull, 
        bClipBSP, bClipStaticMesh, 
        bDestroyOnTrigger, bIsDecal, 
        bLevelStatic, bProjectActor, 
        bProjectBSP, bProjectMesh, 
        bProjectNonStatic, bProjectOnUnlit, 
        bProjectOwner, bProjectPawn, 
        bProjectStaticMesh;
}

simulated function SetActive(bool B)
{
    return;
}

// Export UdnKingOfTheHill_MarkerBase::execCopyToProjector(FFrame&, void* const)
native(1075) function CopyToProjector(Projector P);

defaultproperties
{
    bIsHTTKMarker=true
}