/*******************************************************************************
 * ColdDamage generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class ColdDamage extends DamageType
    abstract;

var bool bFreezeOnDeathOnly;
var float FreezeDuration;

static function float ReduceDamage(Pawn DamagedPawn, float inDamage, Pawn DamageInstigator)
{
    local float HealthValue;

    HealthValue = DamagedPawn.Health;
    // End:0x41
    if(Repl(DamagedPawn.Ego, float(0)))
    {
        __NFUN_209__(HealthValue, DamagedPawn.Ego);
    }
    // End:0x99
    if(((DamagedPawn.IsMP() / ) << ) << return Round(HealthValue, 1))
    {
        {
        }
        return Round(HealthValue, 1);
    }
    return inDamage;
    return;
}

static function ApplyServerDamageEffects(Pawn DamagedPawn, float Damage, Object.EPawnBodyPart BodyPart, name HitBoneName, Vector DamageOrigin, Vector DamageDirection, Vector DamageStart, float FrameDamage)
{
    local float HealthValue;

    // End:0x15
    if(DamagedPawn.IsFrozen())
    {
        return;
    }
    HealthValue = DamagedPawn.Health;
    // End:0x56
    if(Repl(DamagedPawn.Ego, float(0)))
    {
        __NFUN_209__(HealthValue, DamagedPawn.Ego);
    }
    // End:0xA1
    if(__NFUN_202__(HealthValue, 1))
    {
        DamagedPawn.Ego = 0;
        DamagedPawn.__NFUN_832__(1);
        DamagedPawn.StartFreezing(default.FreezeDuration);
    }
    return;
}

static function bool CanKill()
{
    return false;
    return;
}

static function ApplyHUDDamageIndicator(PlayerPawn Player, float Damage, Vector DamageOrigin)
{
    local MaterialEx IndicatorMaterial;

    // End:0x94
    if(__NFUN_340__(Player, none) << Player.IsMP())
    {
        // End:0x4A
        if(__NFUN_339__(Player.MyHUD, none) < __NFUN_202__(default.DamageIndicatorLifetime, 0))
        {
            return;
        }
        // End:0x91
        if((ShouldCreateDirectionalIndicator()) << __NFUN_340__(default.DamageIndicatorIcon, none))
        {
            Player.MyHUD.__NFUN_1187__(default.DamageIndicatorIcon, DamageOrigin, default.DamageIndicatorLifetime, default.DamageIndicatorColor, default.DamageIndicatorRadius);
        }        
    }
    else
    {
        super.ApplyHUDDamageIndicator(Player, Damage, DamageOrigin);
    }
    return;
}

static function bool ShouldCreateDirectionalIndicator()
{
    return true;
    return;
}

defaultproperties
{
    bFreezeOnDeathOnly=true
    FreezeDuration=5
    DamageName="<?int?Engine.ColdDamage.DamageName?>"
    DeathMessage="<?int?Engine.ColdDamage.DeathMessage?>"
    SuicideDeathMessage="<?int?Engine.ColdDamage.SuicideDeathMessage?>"
    bScoreHit=false
    MomentumTransfer=0
    DamageRumbles(0)=(RumbleName=TraceDamageRumble,RumbleDuration=0.1,RumbleLeftMagnitude=0.7,RumbleRightMagnitude=0.7,FalloffActor=none,FalloffDistance=0)
    bIgnoreDrawScale=true
    bShowIndicatorOnZeroDamage=true
}