<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAAAAACoCAAAFgAAACgAAAAgAAAAQAAAAAEACAAAAAAAgAQAAAAAAAAAAAAAAAAAAAAA
        AAD///8AaJDAAEB4uAAgWKgAEDiYAABAmAAYYKAAOIC4AGiYwABwkMAAGGiwAABYsAAAQKAAAEigABBA
        oAAAYKgAAGCwACBgqABoiLgAgJC4ABBYoAAAWKgAEDiIABggcAAoIGAAMChgACAYWAAgIGgAGDB4ABBA
        iAAAWKAAEGCYAHiIsABAWJgAADCIABhIoAAgGGAAIBBIACAYUAAoGFAAIBhIACAQQAAgAEgAGCBoABBQ
        kAAAcLAAQGCYAChAkAAYWJgAICBgABgAOAAYEEgAGABAABAAOAAYEEAAEEiQABBwuAAAaLAAKFCQADAw
        cAAAUKgAIFCgAChAgAAASJgAEAAwAAAAKAAQIFgAGFigABBQmAAYUKAAWEh4ABBIqAAAKHAAEAAoAAAA
        OAAoOHgAMDiAABBQoAAQaKgAACB4ABhAmAAQUKgAAGC4AAAYUAAAOHgAAHC4AICAqAAgQJAAAGjAAABo
        uAAAIFAAAHDAABBYqAAAeMgAEEiYAHCAuAAoQIgAAGDAAAAoaAAAeMAAEGCwAGh4sAAoUKAAEFiwAAAA
        QAAAcMgAAEioABhgqAAQGFAAGFioAChImAAQaMAAAHjQAHiIuAAAOKAAGDiAACAQUAAgQIgAOECIACBI
        mAAYaLgAYGigABhQsAAAgNAAKABIABAAQAAQIGAAACBYAAAAMAAYGFgAGGCwADhwqABQSHgAKDiIADBI
        iAAQaLgAKChwACAAQAAAEEAAAFCgABgASAAAcNAAAGjIAChYoAAAgMgAMChoABA4oAAoWJgAODhwABBg
        qAAQYLgAKBhYAAAweAAAEEgAGChwABhguAAYUJgAIDiIACggWAAwMGgAMDBgABAweAAAeNgAEBBQAEA4
        cAA4MGgAAIDYACBguAAAWMAAEBBAACgQUAAYcLgASGiwAABYyAAQEEgAIBBYABgwgAAgAFAAAAAgAAAw
        cAAAiOAAOHi4AABAqAAASIgAAEjAAAA4mAAAGEgAIGDAAACA4ABwmNAAAFDIABAocAAoKGAAIIDQAACI
        6AAAGFgAAHDYAHCIwAAYEDgAQDhoAChosAAAmPAAAJDoAAA4gAAAeOgAmJjAABg4kAAoSKgAAJjoABAo
        aACIkLgAUHC4ABBw2AAAgOgAAKDwAABo2ABAYKAAWFiIACg4gAAwaLgAIHjIABhw0AAAkOAAAHjwADBY
        sABYWIAAECBoABhgyAAQcNAAaGiQABhQuAAAiPAAAJDwAACo8AAQiOAAEJjgACBouAAAgPAASHCwAJCY
        wAAAaOgAKGjIACCI0AAggMgAGHjIAICg2AAweMgAGGjIAABw4AAoeNAAIHDQAHigyAB4qNgAQJjgACiA
        0ABYYJgAsrKysrKysrKysrKyAQIDBAUGBwiysrKysrKysrKysrKysrKysrKysrKyCgsMDQ4EDA0PEA8R
        AbKysrKysrKysrKysrKysrITBgsLFhcYGBkYGBscHQ8PBhOysrKysrKysrKysrKyISIjFhglGicmJiYl
        JSUqFywtDy6ysrKysrKysrKysi8LBhgyJSUlKjIyMjIqJSUlJSw4LTqysrKysrKysrI7CwM+DTIyMioq
        KioqKjIqMkFCAxQDDzqysrKysrKyRiIDRwsQSEAyKioqKiolJTJBSj5MCxQKLSGysrKyshNPI1FSUlIQ
        UzIyKioqKioqMkFUCwstVQZVC1aysrKyL1FRWFVVWFgFMjIqKioqKipAWlVbVRBVVVxdI7Kysl8FLwNY
        UlVYW1hIQTIqKioqMkoLWFVbVVVdCgoQX7KyZgsUC1JSZFhbXVFoMioqKjJBVFgQW1tVW11bFFUDsrI8
        URAKUlJSUlVbXQ0yKioyMkIDZgNYVVhVb3BSCw+ysgwjWFVVXVtVVVtbcxoqMjIyGi92ZFhYW2Q9cHhc
        WwF5PA56XXtwW1JVWyN8MjQrf0oyGgNdXV1bVVsKA1xbg0YvPD2GcHA4UlhYOyqKFVhYSDIqFnBpWFWP
        XVt7ZFsKOw5Hj5QKCgoKb1EYMlRwXWlYUzIceAMDCgMDCgowcBAvDCUYO587GTs7OxgyHKJwaVJsKhik
        lJSUlJQZJyumVadhMzIlJSUlJSUlKioaC3BpFioqGicaGhoaJyVAf6arrK0zMioqJSUqKioqMioacxwq
        KioqKioqKiqxKkFUtAITaitAMioqKioqKioyQTIyMjIyKioqJSUlJSoyQbdbAbK4BUEyJSolJSoqKkpI
        SFNTSFMyKhoaJyUaJTJKAwOysrsLMzIqKioqJSoyU6K0cF2mDUoqGicnGhoqQUiiq7Kyva0cSjIqJSUl
        KkoZwcK0pqaifzIaJycaJUpKEKIJsrKyjz0zMiolJSoyKaTIycm0prQVMiUYJxo0QcvMeLKysrLNI1Bo
        MioqKkocz6LJwrTCwsKaMiUaNDJ/oq3SsrKysrLTrT4yMioyQtTCwta0wsLWyVhoNDRKU2nE2LKysrKy
        srLY2aQ0Mmg+28LCycHdytbWyRxKQVNp3+CysrKysrKysrLZRoYaF9Tj1KKi1NTJydbJAzRUoszgsrKy
        srKysrKysrLlhsTmp93UwufJ6cnq68Hsaeei07KysrKysrKysrKysrLN4/Ci3d3x8fLywcHB6snCwc2y
        srKysrKysrKysrKysrKy9fbdzMzd+fm0ycm0wfuysrKysrKysrKysrKysrKysrKysrL8/f55A/79/LKy
        srKysrKysrKysv/wD///wAH//gAAf/wAAD/4AAAf8AAAD+AAAAfAAAADwAAAA4AAAAGAAAABgAAAAYAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAGAAAABwAAAA8AAAAPgAAAH8AAAD/gA
        AB/8AAA//gAAf/+AAf//8A//
</value>
  </data>
</root>