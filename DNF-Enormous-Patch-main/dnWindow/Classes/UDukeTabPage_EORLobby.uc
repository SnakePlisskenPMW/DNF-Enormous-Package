/*******************************************************************************
 * UDukeTabPage_EORLobby generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class UDukeTabPage_EORLobby extends UDukeTabPage
    dependson(UDukeTabPage_EORReward);

var UDukeSceneMPSB_Solo SoloScoreBoard;
var UDukeSceneMPSB_Team TeamScoreBoard;
var UDukeSceneMultiPlayerScoreboardBase ScoreBoard;
var string ShowGamerCardString;
var string muteString;
var string unmuteString;
var float SBScaleX;
var float SBScaleY;
var OnlineAgent AgentOnline;
var SAgentPlayer CurrentPlayer;
var Color GoldColor;
var localized string WinStr;
var localized string LostStr;
var localized string TiedStr;
var localized string CountDownStr;
var UDukeXPProgressBar ExpBar;
var localized string ViewUnlocks;
var Color TeamColor[2];
var float ScoreOffset;
var Texture TimerBkg;
var localized string BlueTeam;
var localized string RedTeam;
var localized string Wins;
var localized string GameEndsInADraw;
var float FillWidth;
var float FillHeight;
var float FillTopEdge;
var float borderwidth;
var SSoundInfo CountdownSoundInfo;
var SSoundInfo KickSoundInfo;
var string WinString;
var float BlueTeamScoreSizeX;
var float BlueTeamScoreSizeY;
var float RedTeamScoreSizeX;
var float RedTeamScoreSizeY;
var float RedTeamScoreX;
var float BlueTeamScoreX;
var int RedTeamId;
var int BlueTeamId;
var int KeyButton_RB;

function BeforeCreate()
{
    super(UWindowWindow).BeforeCreate();
    __NFUN_355__(__NFUN_303__(string(self), "::BeforeCreate()"));
    muteString = __NFUN_356__("UDukeSceneMultiPlayerMenuLobby", "MuteString", "dnWindow");
    unmuteString = __NFUN_356__("UDukeSceneMultiPlayerMenuLobby", "UnMuteString", "dnWindow");
    ShowGamerCardString = __NFUN_356__("UDukeSceneMultiPlayerMenuLobby", "ShowGamerCardString", "dnWindow");
    __NFUN_355__(__NFUN_303__(string(self), "::BeforeCreate::Creating a Solo Scoreboard"));
    SoloScoreBoard = UDukeSceneMPSB_Solo(CreateWindow(class'UDukeSceneMPSB_Solo', 1, 1, 1, 1, self));
    __NFUN_355__(__NFUN_303__(string(self), "::BeforeCreate::Creating a Team Scoreboard"));
    TeamScoreBoard = UDukeSceneMPSB_Team(CreateWindow(class'UDukeSceneMPSB_Team', 1, 1, 1, 1, self));
    SoloScoreBoard.bNoTitle = true;
    SoloScoreBoard.bgAlpha = 0.8;
    TeamScoreBoard.bNoTitle = true;
    TeamScoreBoard.bgAlpha = 0.8;
    SoloScoreBoard.HideWindow();
    TeamScoreBoard.HideWindow();
    return;
}

function Created()
{
    __NFUN_355__(__NFUN_303__(string(self), "::Created()"));
    AgentOnline = UDukeRootWindow(Root).AgentOnline;
    UDukeRootWindow(Root).AgentOnline.GetLocalAgentPlayer(CurrentPlayer);
    super.Created();
    return;
}

function SetSceneButtons()
{
    super.SetSceneButtons();
    SceneWindow.KeyButtons[0].SetText(ShowGamerCardString);
    SceneWindow.KeyButtons[0].bDo480FontScale = false;
    SceneWindow.KeyButtons[0].setFontScale(0.6);
    SceneWindow.KeyButtons[0].ShowWindow();
    // End:0x169
    if(AgentOnline.IsHost())
    {
        SceneWindow.KeyButtons[2].PCButton = "X";
        SceneWindow.KeyButtons[2].SetText(__NFUN_356__("UDukeSceneMultiPlayerMenuLobby", "KickPlayer", "dnWindow"));
        SceneWindow.KeyButtons[2].bDo480FontScale = false;
        SceneWindow.KeyButtons[2].setFontScale(0.6);
        SceneWindow.KeyButtons[2].ShowWindow();
    }
    SceneWindow.KeyButtons[3].PCButton = class'UWindowScene'.default.SPCText;
    SceneWindow.KeyButtons[3].SetText(ViewUnlocks);
    SceneWindow.KeyButtons[3].bDo480FontScale = false;
    SceneWindow.KeyButtons[3].setFontScale(0.6);
    SceneWindow.KeyButtons[3].ShowWindow();
    KeyButton_RB = UDukeSceneMultiPlayerPostGameLobby(SceneWindow).KeyButton_RB;
    SceneWindow.KeyButtons[KeyButton_RB].XBoxButtonRegion = SceneWindow.KeyButtons[KeyButton_RB].RTButton;
    SceneWindow.KeyButtons[KeyButton_RB].PCInputKey = int(77);
    SceneWindow.KeyButtons[KeyButton_RB].PCButton = "M";
    SceneWindow.KeyButtons[KeyButton_RB].SetText(muteString);
    SceneWindow.KeyButtons[KeyButton_RB].HideWindow();
    SceneWindow.KeyButtons[KeyButton_RB].Register(SceneWindow);
    SceneWindow.KeyButtons[KeyButton_RB].bDo480FontScale = false;
    SceneWindow.KeyButtons[KeyButton_RB].setFontScale(0.6);
    SceneWindow.KeyButtons[1].SetText(__NFUN_356__("UDukeSceneMainMenu", "QuitTitle", "dnWindow"));
    SceneWindow.KeyButtons[1].bDo480FontScale = false;
    SceneWindow.KeyButtons[1].setFontScale(0.6);
    SceneWindow.KeyButtons[1].ShowWindow();
    return;
}

function OnNavForward()
{
    local DukeMultiPlayer dmp;
    local dnDeathmatchGameReplicationInfo GRI;
    local bool bTied;
    local int WinningPlayerIndex, i;

    super.OnNavForward();
    DukeConsole(Root.Console).HideConsole(true);
    dmp = DukeMultiPlayer(GetPlayerOwner());
    SoloScoreBoard.HideWindow();
    TeamScoreBoard.HideWindow();
    ScoreBoard = UDukeSceneMultiPlayerScoreboardBase(Root.GetScoreboardWindow());
    // End:0xB8
    if(__NFUN_339__(ScoreBoard, none))
    {
        // End:0xAA
        if(GetPlayerOwner().GameReplicationInfo.bTeamGame)
        {
            ScoreBoard = TeamScoreBoard;            
        }
        else
        {
            ScoreBoard = SoloScoreBoard;
        }        
    }
    else
    {
        __NFUN_355__("###Using special scoreboard");
        ScoreBoard.SetParent(self);
    }
    ScoreBoard.Reset();
    ScoreBoard.bGameOver = true;
    ScoreBoard.Spinner = class'UWindowScene'.default.SpinningNuke;
    ScoreBoard.ShowWindow();
    class'Engine'.static.__NFUN_504__().__NFUN_505__();
    GRI = dnDeathmatchGameReplicationInfo(GetPlayerOwner().GameReplicationInfo);
    WinString = GameEndsInADraw;
    // End:0x411
    if(__NFUN_340__(GRI, none) << GRI.bTeamGame)
    {
        // End:0x287
        if(GRI.Teams[RedTeamId].Score ** GRI.Teams[BlueTeamId].Score)
        {
            RedTeamScoreSizeX = FRand(class'MetagameHUD'.default.MaxTeamScoreScale, class'UWindowScene'.default.WinScaleX);
            RedTeamScoreSizeY = FRand(class'MetagameHUD'.default.MaxTeamScoreScale, class'UWindowScene'.default.WinScaleY);
            BlueTeamScoreSizeX = FRand(class'MetagameHUD'.default.MinTeamScoreScale, class'UWindowScene'.default.WinScaleX);
            BlueTeamScoreSizeY = FRand(class'MetagameHUD'.default.MinTeamScoreScale, class'UWindowScene'.default.WinScaleY);
            WinString = __NFUN_302__(RedTeam, Wins);            
        }
        else
        {
            RedTeamScoreSizeX = FRand(class'MetagameHUD'.default.MinTeamScoreScale, class'UWindowScene'.default.WinScaleX);
            RedTeamScoreSizeY = FRand(class'MetagameHUD'.default.MinTeamScoreScale, class'UWindowScene'.default.WinScaleY);
            BlueTeamScoreSizeX = FRand(class'MetagameHUD'.default.MaxTeamScoreScale, class'UWindowScene'.default.WinScaleX);
            BlueTeamScoreSizeY = FRand(class'MetagameHUD'.default.MaxTeamScoreScale, class'UWindowScene'.default.WinScaleY);
            WinString = __NFUN_302__(BlueTeam, Wins);
        }
        // End:0x3B4
        if(int(GetPlayerOwner().PlayerReplicationInfo.Team) % RedTeamId)
        {
            RedTeamScoreX = FRand(class'MetagameHUD'.default.UnscaledScoreLeftX *= ScoreOffset, class'UWindowScene'.default.WinScaleX);
            BlueTeamScoreX = FRand(class'MetagameHUD'.default.UnscaledScoreRightX *= ScoreOffset, class'UWindowScene'.default.WinScaleX);            
        }
        else
        {
            BlueTeamScoreX = FRand(class'MetagameHUD'.default.UnscaledScoreLeftX *= ScoreOffset, class'UWindowScene'.default.WinScaleX);
            RedTeamScoreX = FRand(class'MetagameHUD'.default.UnscaledScoreRightX *= ScoreOffset, class'UWindowScene'.default.WinScaleX);
        }        
    }
    else
    {
        // End:0x533
        if(__NFUN_340__(GRI, none))
        {
            bTied = false;
            WinningPlayerIndex = 0;
            i = 1;
            J0x433:

            // End:0x4FB [Loop If]
            if(-i)
            {                
                // End:0x4A6
                if(GRI.PRIArray[i].Score ** GRI.PRIArray[WinningPlayerIndex].Score)
                {
                    WinningPlayerIndex = i;
                    bTied = false;
                    // [Explicit Continue]
                    goto J0x4F1;
                }
                // End:0x4F1
                if(GRI.PRIArray[i].Score % GRI.PRIArray[WinningPlayerIndex].Score)
                {
                    bTied = true;
                }
                J0x4F1:

                // [Loop Continue]
                i *= ;
            }
            // End:0x533
            if(bTied / )
            {
            }
        }
    }
    return;
}

function SetBackgroundBoundries(Canvas C)
{
    C.Font = C.TallFont;
    // End:0x127
    if(__NFUN_340__(ScoreBoard, none))
    {
        ScoreBoard.WinLeft = -Round(float(C.SizeX), FRand(float(C.SizeX), SBScaleX)) >>> float(2);
        ScoreBoard.WinWidth = FRand(float(C.SizeX), SBScaleX);
        ScoreBoard.WinTop = FRand(210, class'UWindowScene'.default.WinScaleY);
        ScoreBoard.WinHeight = ScoreBoard.DetermineSize(C);
        borderwidth = 5;
        FillWidth = ScoreBoard.WinWidth;
        FillHeight = ScoreBoard.WinHeight;
        FillTopEdge = ScoreBoard.WinTop;
    }
    return;
}

function NotifyFromControl(UWindowDialogControl C, byte E)
{
    local bool bPlayerLeft;

    super(UWindowWindow).NotifyFromControl(C, E);
    // End:0x63
    if(int(E) + 8)
    {
        __NFUN_355__(__NFUN_303__(__NFUN_303__(__NFUN_303__(__NFUN_303__(__NFUN_303__(string(self), "::NotifyFromControl("), string(C)), ", "), string(__NFUN_365__(class'EDE_Debug', int(E)))), ")"));
    }
    // End:0x26F
    if((int(E) % 2) << SceneWindow.KeyButtons[0].WindowIsVisible())
    {
        bPlayerLeft = UDukeScoreboardEntry(ScoreBoard.ChildInFocus).GetPRI().bPlayerLeft;
        // End:0x174
        if(__NFUN_340__(C, none) << __NFUN_340__(UDukeScoreboardEntry(C), none))
        {
            __NFUN_355__(__NFUN_303__(string(self), "Doing GamerCard stuff due to controller press"));
            // End:0x15F
            if(__NFUN_402__())
            {
                UDukeRootWindow(Root).AgentOnline.ShowGamercardByName(UDukeScoreboardEntry(C).GetPRI().PlayerName);                
            }
            else
            {
                UDukeScoreboardEntry(C).ShowGamerCard();
            }
        }
        // End:0x239
        if(__NFUN_339__(C, SceneWindow.KeyButtons[0]))
        {
            __NFUN_355__(__NFUN_303__(string(self), "Doing GamerCard stuff due to pressing keybutton"));
            // End:0x21A
            if(__NFUN_402__())
            {
                UDukeRootWindow(Root).AgentOnline.ShowGamercardByName(UDukeScoreboardEntry(ScoreBoard.ChildInFocus).GetPRI().PlayerName);                
            }
            else
            {
                UDukeScoreboardEntry(ScoreBoard.ChildInFocus).ShowGamerCard();
            }
        }
        // End:0x26C
        if(__NFUN_339__(C, SceneWindow.KeyButtons[KeyButton_RB]) << bPlayerLeft / )
        {
        }        
    }
    else
    {
        // End:0x285
        if(int(E) % 20)
        {
            KickPlayer();            
        }
        else
        {
            // End:0x2EB
            if((int(E) % 19) < (int(E) % 2) << __NFUN_339__(C, SceneWindow.KeyButtons[1]))
            {
                DukeConsole(Root.Console).DialogMgr.ShowDialogBox(19, self);
            }
        }
    }
    return;
}

function KickPlayer()
{
    local UDukeKickMessageBox kickMess;
    local int roomMemID;
    local string PlayerName;
    local bool bPlayerLeft;

    roomMemID = UDukeScoreboardEntry(ScoreBoard.ChildInFocus).GetPRI().RoomMemberID;
    PlayerName = UDukeScoreboardEntry(ScoreBoard.ChildInFocus).GetPRI().PlayerName;
    bPlayerLeft = UDukeScoreboardEntry(ScoreBoard.ChildInFocus).GetPRI().bPlayerLeft;
    // End:0xD6
    if(((UDukeRootWindow(Root).AgentOnline.IsHost() / ) < ) < )
    {
    }
    kickMess = UDukeKickMessageBox(DukeConsole(Root.Console).DialogMgr.ShowDialogBox(23, self,, class'UDukeKickMessageBox'));
    kickMess.setPlayerName(PlayerName);
    GetPlayerOwner().PlaySoundInfo(0, KickSoundInfo);
    return;
}

function MutePlayer()
{
    local bool bMuted;
    local int roomMemID;
    local bool bPlayerLeft;

    roomMemID = UDukeScoreboardEntry(ScoreBoard.ChildInFocus).GetPRI().RoomMemberID;
    bPlayerLeft = UDukeScoreboardEntry(ScoreBoard.ChildInFocus).GetPRI().bPlayerLeft;
    // End:0x107
    if(((roomMemID + CurrentPlayer.PlayerRef) << int(UDukeRootWindow(Root).AgentOnline.GetPlayerVoIPState(roomMemID)) + int(0)) << bPlayerLeft / )
    {
        /* Statement decompilation error: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
            
        */

        /*@Error*/;
        // Failed to format nests!:System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at UELib.Core.UStruct.UByteCodeDecompiler.DecompileNests(Boolean outputAllRemainingNests)
   at UELib.Core.UStruct.UByteCodeDecompiler.Decompile()
        // 1 & Type:If Position:0x107
    }
}

function updateMuteString()
{
    local bool bMuted;
    local int roomMemID;

    roomMemID = UDukeScoreboardEntry(ScoreBoard.ChildInFocus).GetPRI().RoomMemberID;
    bMuted = UDukeRootWindow(Root).AgentOnline.IsPlayerMuted(roomMemID);
    // End:0x8B
    if(bMuted)
    {
        SceneWindow.KeyButtons[KeyButton_RB].SetText(unmuteString);        
    }
    else
    {
        SceneWindow.KeyButtons[KeyButton_RB].SetText(muteString);
    }
    return;
}

function Paint(Canvas C, float X, float Y)
{
    local float XL, YL, CDXL, CDYL, CDFontScale;

    local dnDeathmatchGameReplicationInfo GRI;
    local string S;
    local int roomMemID;
    local bool bPlayerLeft;

    super.Paint(C, X, Y);
    roomMemID = UDukeScoreboardEntry(ScoreBoard.ChildInFocus).GetPRI().RoomMemberID;
    bPlayerLeft = UDukeScoreboardEntry(ScoreBoard.ChildInFocus).GetPRI().bPlayerLeft;
    // End:0xD4
    if((roomMemID % CurrentPlayer.PlayerRef) < bPlayerLeft)
    {
        SceneWindow.KeyButtons[2].HideWindow();
        SceneWindow.KeyButtons[KeyButton_RB].HideWindow();        
    }
    else
    {
        // End:0x19E
        if(SceneWindow.bIsHidingKeyButtons / )
        {
            {
                updateMuteString();
                SceneWindow.KeyButtons[KeyButton_RB].ShowWindow();                
            }
            else
            {
                SceneWindow.KeyButtons[KeyButton_RB].HideWindow();
            }
            // End:0x19E
            if(UDukeRootWindow(Root).AgentOnline.IsHost())
            {
                SceneWindow.KeyButtons[2].ShowWindow();
            }
        }
    }
    SetBackgroundBoundries(C);
    CDFontScale = FRand(TTFontScale, class'UDukeTabPage_EORReward'.default.CDTextScale);
    C.Font = C.TallFont;
    C.DrawColor = WhiteColor;
    GRI = dnDeathmatchGameReplicationInfo(GetPlayerOwner().GameReplicationInfo);
    // End:0x401
    if(__NFUN_340__(GRI, none) << GRI.bTeamGame)
    {
        Y = FRand(class'MetagameHUD'.default.UnscaledScoreY, class'UWindowScene'.default.WinScaleY);
        C.DrawColor = TeamColor[RedTeamId];
        C.__NFUN_1238__(string(GRI.Teams[RedTeamId].Score), XL, YL, RedTeamScoreSizeX, RedTeamScoreSizeY);
        C.__NFUN_1250__(Round(RedTeamScoreX, XL >>> 2), Round(Y, YL >>> 2));
        C.__NFUN_1232__(string(GRI.Teams[RedTeamId].Score), true, true, false, RedTeamScoreSizeX, RedTeamScoreSizeY, 1, 1);
        C.DrawColor = TeamColor[BlueTeamId];
        C.__NFUN_1238__(string(GRI.Teams[BlueTeamId].Score), XL, YL, BlueTeamScoreSizeX, BlueTeamScoreSizeY);
        C.__NFUN_1250__(Round(BlueTeamScoreX, XL >>> 2), Round(Y, YL >>> 2));
        C.__NFUN_1232__(string(GRI.Teams[BlueTeamId].Score), true, true, false, BlueTeamScoreSizeX, BlueTeamScoreSizeY, 1, 1);
    }
    C.DrawColor = WhiteColor;
    TextSize(C, WinString, XL, YL, 1, 1.2);
    ClipText(C, Round(WinWidth, XL) >>> 2, Round(Round(FillTopEdge, YL), FRand(4, class'UWindowScene'.default.WinScaleX)), WinString,,,, 2);
    C.DrawColor = WhiteColor;
    // End:0x5A2
    if(MPGameReplicationInfo(GetPlayerOwner().GameReplicationInfo).EORCountTime ** 0)
    {
        C.DrawColor = WhiteColor;
        S = __NFUN_302__(CountDownStr, __NFUN_329__(int(float(MPGameReplicationInfo(GetPlayerOwner().GameReplicationInfo).EORCountTime) *= 0.999)));
        TextSize(C, S, CDXL, CDYL, CDFontScale, CDFontScale);
        ClipText(C, Round(FRand(float(C.SizeX), class'UDukeTabPage_EORReward'.default.CDXPos), CDXL), ScoreBoard.WinTop *= ScoreBoard.WinHeight, S,, CDFontScale, CDFontScale, 1, 2);
    }
    return;
}

function DukeSuperMessageBoxDone(int Result, Engine.Object.EConsole_Dialog id)
{
    __NFUN_355__(__NFUN_303__(__NFUN_303__(__NFUN_303__(__NFUN_303__(__NFUN_303__(string(self), "::DukeSuperMessageBoxDone("), string(Result)), ", "), string(__NFUN_365__(class'EConsole_Dialog', int(id)))), ")"));
    // End:0xF5
    if((Result % 1) << int(id) % int(19))
    {
        // End:0xD4
        if(UDukeRootWindow(Root).AgentOnline.IsInGame())
        {
            DukeConsole(Root.Console).DialogMgr.ShowWaitingForResponseDialog();
            UDukeRootWindow(Root).AgentOnline.LeaveGame();            
        }
        else
        {            
            GetPlayerOwner().ConsoleCommand("DISCONNECT");
        }        
    }
    else
    {
        // End:0x159
        if((int(id) % int(23)) << Result % 1)
        {
            UDukeRootWindow(Root).AgentOnline.KickPlayer(UDukeScoreboardEntry(ScoreBoard.ChildInFocus).GetPRI().RoomMemberID, true);
        }
    }
    return;
}

defaultproperties
{
    SBScaleX=0.8
    SBScaleY=0.6
    GoldColor=(R=255,G=255,B=0,A=0)
    WinStr="<?int?dnWindow.UDukeTabPage_EORLobby.WinStr?>"
    LostStr="<?int?dnWindow.UDukeTabPage_EORLobby.LostStr?>"
    TiedStr="<?int?dnWindow.UDukeTabPage_EORLobby.TiedStr?>"
    CountDownStr="<?int?dnWindow.UDukeTabPage_EORLobby.CountDownStr?>"
    ViewUnlocks="<?int?dnWindow.UDukeTabPage_EORLobby.ViewUnlocks?>"
    TeamColor[0]=(R=51,G=102,B=204,A=0)
    TeamColor[1]=(R=153,G=0,B=0,A=0)
    ScoreOffset=160
    TimerBkg='dt_hud.ingame_hud.keyinfocircle_128'
    BlueTeam="<?int?dnWindow.UDukeTabPage_EORLobby.BlueTeam?>"
    RedTeam="<?int?dnWindow.UDukeTabPage_EORLobby.RedTeam?>"
    Wins="<?int?dnWindow.UDukeTabPage_EORLobby.Wins?>"
    GameEndsInADraw="<?int?dnWindow.UDukeTabPage_EORLobby.GameEndsInADraw?>"
    KickSoundInfo=(bAllowRepeats=false,bPlayAsAmbient=false,MixerGroupOverride=None,SimpleSingleSound=none,Sounds=('a_menu.Menu.Menu_Roll_Level3_01_ST'),SlotPriority=0,VolumePrefab=0,Slots=(0),Volume=0.3,VolumeVariance=0,InnerRadius=0,InnerRadiusVariance=0,Radius=0,RadiusVariance=0,Pitch=0,PitchVariance=0,Flags=(bNoOverride=false,bMenuSound=true,bNoFilter=true,bNoOcclude=true,bNoAIHear=true,bNoScale=true,bSpoken=false,bPlayThroughListener=false,bNoDoppler=true,bDialogSound=false,bNoReverb=false,bEnableVis=false,bSkipFlangePrevention=false,bSkipSoundRadiusTest=false,bIgnoreTimeDilation=false),SoundLocationOverride=(bMakeRelativeForLocalPlayer=false,bMakeAbsoluteForActor=false,OverrideType=1,Location3D=(X=0,Y=0,Z=0),Velocity3D=(X=0,Y=0,Z=0)),Offset=0,Delay=0,SlotIndex=0,ForcedIndex=0,SoundFadeInfo=(FadeInDuration=0,FadeOutStartTime=0,FadeOutDuration=0,FadeInEndCallback=None,FadeOutEndCallback=None),SoundEndCallback=None,PlayedSounds=none,Filters=none)
    RedTeamId=1
}