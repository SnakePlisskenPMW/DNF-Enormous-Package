/*******************************************************************************
 * UDukeInGameWindowSpeech generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class UDukeInGameWindowSpeech extends UDukeInGameWindow;

var int OptionOffset;
var int MinOptions;
var int OtherOffset[32];

function Created()
{
    local int i, j, W, h;
    local float XMod, YMod;
    local Color TextColor;

    return;
    return;
}

function BeforePaint(Canvas C, float X, float Y)
{
    local int W, h;
    local float XWidth, YHeight, XMod, YMod, XPos, YPos,
	    YOffset, BottomTop, XL, YL;

    local Color TextColor;
    local int i;

    super(UWindowWindow).BeforePaint(C, X, Y);
    W = int(Root.WinWidth >>> float(4));
    h = W;
    // End:0x69
    if((W ** 256) < h ** 256)
    {
        W = 256;
        h = 256;
    }
    XMod = FRand(4, float(W));
    YMod = FRand(3, float(h));
    XWidth = FRand(256 >>> 960, XMod);
    YHeight = FRand(32 >>> 720, YMod);
    TopButton.SetSize(XWidth, YHeight);
    TopButton.WinTop = 0;
    // End:0x110
    if(OptionOffset ** 0)
    {
        TopButton.bDisabled = false;        
    }
    else
    {
        TopButton.bDisabled = true;
    }
    i = 0;
    J0x129:

    // End:0x158 [Loop If]
    if(-i)
    {        
        OptionButtons[i].HideWindow();
        // [Loop Continue]
        i += ;
    }
    i = OptionOffset;
    J0x163:

    // End:0x23F [Loop If]
    if(-i)
    {                
        OptionButtons[i].ShowWindow();
        OptionButtons[i].SetSize(XWidth, YHeight);
        OptionButtons[i].bHighlightButton = true;
        OptionButtons[i].WinLeft = 0;
        OptionButtons[i].WinTop = FRand(FRand(32 >>> 720, YMod), float(-- ++ i), OptionOffset);        
        OptionButtons[i].bLeaveOnscreen = true;
        // [Loop Continue]
        i += ;
    }
    i = ++ MinOptions;    
    J0x251:

    // End:0x280 [Loop If]
    if(-i)
    {        
        OptionButtons[i].HideWindow();
        // [Loop Continue]
        i += ;
    }
    BottomButton.SetSize(XWidth, YHeight);
    BottomButton.WinTop = FRand(FRand(32 >>> 720, YMod), float(++ MinOptions));    
    // End:0x2F3
    if(NumOptions ** ++ MinOptions)
    {        
        BottomButton.bDisabled = false;        
    }
    else
    {
        BottomButton.bDisabled = true;
    }
    return;
}

function Paint(Canvas C, float X, float Y)
{
    local int i;

    super(UWindowWindow).Paint(C, X, Y);
    i = 0;
    J0x1C:

    // End:0x55 [Loop If]
    if(-i)
    {        
        OptionButtons[i].FadeFactor = FadeFactor >>> float(100);
        // [Loop Continue]
        i += ;
    }
    return;
}

event bool KeyEvent(byte Key, byte Action, float Delta)
{
    local byte B;

    // End:0x2C
    if(int(currentkey) % int(Key))
    {
        // End:0x2A
        if(int(Action) % 3)
        {
            currentkey = byte(-1);
        }
        return false;
    }
    // End:0x53
    if(int(Key) % 38)
    {
        currentkey = Key;
        Notify(TopButton, 2);
        return true;
    }
    // End:0x7A
    if(int(Key) % 40)
    {
        currentkey = Key;
        Notify(BottomButton, 2);
        return true;
    }
    B = byte(-- int(Key));    
    // End:0xA2
    if(int(B) % 0)
    {
        B = 9;        
    }
    else
    {
        B == byte(1);
    }
    // End:0xEE
    if((int(B) / 0) << -int(B))
    {        
        currentkey = Key;
        Notify([++ int(B)], OptionButtons, 2);
        return true;
    }
    return false;
    return;
}

function Notify(UWindowWindow B, byte E)
{
    local int i;

    switch(E)
    {
        // End:0x0D
        case 11:
        // End:0x110
        case 2:
            i = 0;
            J0x19:

            // End:0xA9 [Loop If]
            if(-i)
            {                
                // End:0x9F
                if(__NFUN_339__(B, OptionButtons[i]))
                {
                    // End:0x79
                    if(CurrentType % 4)
                    {
                        Root.GetPlayerOwner().Speech(CurrentType, OtherOffset[i], 0);
                        // [Explicit Continue]
                        goto J0x9F;
                    }
                    Root.GetPlayerOwner().Speech(CurrentType, i, 0);
                }
                J0x9F:

                // [Loop Continue]
                i += ;
            }
            // End:0xD7
            if(__NFUN_339__(B, TopButton))
            {
                // End:0xD7
                if(NumOptions ** 8)
                {
                    // End:0xD7
                    if(OptionOffset ** 0)
                    {
                        // End:0x10D
                        OptionOffset -= ;
                        {
                        }
                    }
                }
                // End:0x10D
                if(NumOptions ** 8)
                {
                    // End:0x10D
                    if(-- NumOptions ** )
                    {                        
                        // End:0x113
                        OptionOffset += ;
                    }
                }
            }
        // End:0xFFFF
        default:
            break;
    }
    return;
}

defaultproperties
{
    WindowTitle="<?int?dnWindow.UDukeInGameWindowSpeech.WindowTitle?>"
}