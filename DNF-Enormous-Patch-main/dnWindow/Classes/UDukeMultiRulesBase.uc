/*******************************************************************************
 * UDukeMultiRulesBase generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class UDukeMultiRulesBase extends UDukePageWindow
    config;

var UDukeCreateMultiCW myParent;
var bool Initialized;
var config bool bLanPlay;
var Class IpServerClass;
var UWindowLabelControl FragLabel;
var UWindowEditControl FragEdit;
var localized string FragText;
var localized string FragHelp;
var UWindowLabelControl TimeLabel;
var UWindowEditControl TimeEdit;
var localized string TimeText;
var localized string TimeHelp;
var UWindowLabelControl RoundTimeLabel;
var UWindowEditControl RoundTimeEdit;
var localized string RoundTimeText;
var localized string RoundTimeHelp;
var UWindowLabelControl WarmupTimeLabel;
var UWindowEditControl WarmupTimeEdit;
var localized string WarmupTimeText;
var localized string WarmupTimeHelp;
var UWindowLabelControl MaxPlayersLabel;
var UWindowEditControl MaxPlayersEdit;
var localized string MaxPlayersText;
var localized string MaxPlayersHelp;
var UWindowLabelControl MaxSpectatorsLabel;
var UWindowEditControl MaxSpectatorsEdit;
var localized string MaxSpectatorsText;
var localized string MaxSpectatorsHelp;
var UWindowLabelControl WeaponsLabel;
var UWindowCheckbox WeaponsCheck;
var localized string WeaponsText;
var localized string WeaponsHelp;
var UWindowLabelControl AdminEMailLabel;
var UWindowEditControl AdminEMailEdit;
var localized string AdminEmailText;
var localized string AdminEMailHelp;
var UWindowLabelControl AdminNameLabel;
var UWindowEditControl AdminNameEdit;
var localized string AdminNameText;
var localized string AdminNameHelp;
var UWindowLabelControl MOTDLine1Label;
var UWindowEditControl MOTDLine1Edit;
var localized string MOTDLine1Text;
var localized string MOTDLine1Help;
var UWindowLabelControl MOTDLine2Label;
var UWindowEditControl MOTDLine2Edit;
var localized string MOTDLine2Text;
var localized string MOTDLine2Help;
var UWindowLabelControl MOTDLine3Label;
var UWindowEditControl MOTDLine3Edit;
var localized string MOTDLine3Text;
var localized string MOTDLine3Help;
var UWindowLabelControl MOTDLine4Label;
var UWindowEditControl MOTDLine4Edit;
var localized string MOTDLine4Text;
var localized string MOTDLine4Help;
var UWindowLabelControl ServerNameLabel;
var UWindowEditControl ServerNameEdit;
var localized string ServerNameText;
var localized string ServerNameHelp;
var UWindowLabelControl DoUplinkLabel;
var UWindowCheckbox DoUplinkCheck;
var localized string DoUplinkText;
var localized string DoUplinkHelp;
var UWindowLabelControl LanPlayLabel;
var UWindowCheckbox LanPlayCheck;
var localized string LanPlayText;
var localized string LanPlayHelp;
var UWindowLabelControl MapCycleLabel;
var UWindowCheckbox MapCycleCheck;
var localized string MapCycleText;
var localized string MapCycleHelp;
var float ControlOffset;
var bool bControlRight;
var float NextControlTop;
var int CheckBoxWidth;

function Created()
{
    local int S;

    super.Created();
    myParent = UDukeCreateMultiCW(GetParent(class'UDukeCreateMultiCW'));
    // End:0x6A
    if(__NFUN_339__(myParent, none))
    {
        __NFUN_355__("Error: UDukeMultiRulesBase without UDukeCreateMultiCW parent.");
    }
    FragLabel = UWindowLabelControl(CreateControl(class'UWindowLabelControl', 1, 1, 1, 1));
    FragLabel.SetText(FragText);
    FragLabel.SetFont(0);
    FragLabel.Align = 1;
    FragEdit = UWindowEditControl(CreateControl(class'UWindowEditControl', 1, 1, 1, 1));
    FragEdit.SetHelpText(FragHelp);
    FragEdit.SetFont(0);
    FragEdit.SetNumericOnly(true);
    FragEdit.SetMaxLength(3);
    FragEdit.Align = 1;
    TimeLabel = UWindowLabelControl(CreateControl(class'UWindowLabelControl', 1, 1, 1, 1));
    TimeLabel.SetText(TimeText);
    TimeLabel.SetFont(0);
    TimeLabel.Align = 1;
    TimeEdit = UWindowEditControl(CreateControl(class'UWindowEditControl', 1, 1, 1, 1));
    TimeEdit.SetHelpText(TimeHelp);
    TimeEdit.SetFont(0);
    TimeEdit.SetNumericOnly(true);
    TimeEdit.SetMaxLength(3);
    TimeEdit.Align = 1;
    RoundTimeLabel = UWindowLabelControl(CreateControl(class'UWindowLabelControl', 1, 1, 1, 1));
    RoundTimeLabel.SetText(RoundTimeText);
    RoundTimeLabel.SetFont(0);
    RoundTimeLabel.Align = 1;
    RoundTimeEdit = UWindowEditControl(CreateControl(class'UWindowEditControl', 1, 1, 1, 1));
    RoundTimeEdit.SetHelpText(TimeHelp);
    RoundTimeEdit.SetFont(0);
    RoundTimeEdit.SetNumericOnly(true);
    RoundTimeEdit.SetMaxLength(3);
    RoundTimeEdit.Align = 1;
    WarmupTimeLabel = UWindowLabelControl(CreateControl(class'UWindowLabelControl', 1, 1, 1, 1));
    WarmupTimeLabel.SetText(WarmupTimeText);
    WarmupTimeLabel.SetFont(0);
    WarmupTimeLabel.Align = 1;
    WarmupTimeEdit = UWindowEditControl(CreateControl(class'UWindowEditControl', 1, 1, 1, 1));
    WarmupTimeEdit.SetHelpText(WarmupTimeHelp);
    WarmupTimeEdit.SetFont(0);
    WarmupTimeEdit.SetNumericOnly(true);
    WarmupTimeEdit.SetMaxLength(3);
    WarmupTimeEdit.Align = 1;
    WeaponsLabel = UWindowLabelControl(CreateControl(class'UWindowLabelControl', 1, 1, 1, 1));
    WeaponsLabel.SetText(WeaponsText);
    WeaponsLabel.SetFont(0);
    WeaponsLabel.Align = 1;
    WeaponsCheck = UWindowCheckbox(CreateControl(class'UWindowCheckbox', 1, 1, 1, 1));
    WeaponsCheck.SetHelpText(WeaponsHelp);
    WeaponsCheck.SetFont(0);
    WeaponsCheck.bChecked = myParent.GameClass.default.bWeaponsStay;
    WeaponsCheck.Align = 1;
    DoUplinkLabel = UWindowLabelControl(CreateControl(class'UWindowLabelControl', 1, 1, 1, 1));
    DoUplinkLabel.SetText(DoUplinkText);
    DoUplinkLabel.SetFont(0);
    DoUplinkLabel.Align = 1;
    DoUplinkCheck = UWindowCheckbox(CreateControl(class'UWindowCheckbox', 1, 1, 1, 1));
    DoUplinkCheck.SetHelpText(DoUplinkHelp);
    DoUplinkCheck.SetFont(0);
    DoUplinkCheck.Align = 1;
    IpServerClass = class<Object>(__NFUN_366__("IpServer.UdpServerUplink", class'Class'));
    DoUplinkCheck.bChecked = __NFUN_310__(GetPlayerOwner().ConsoleCommand("get IpServer.UdpServerUplink DoUplink"), "true");
    LanPlayLabel = UWindowLabelControl(CreateControl(class'UWindowLabelControl', 1, 1, 1, 1));
    LanPlayLabel.SetText(LanPlayText);
    LanPlayLabel.SetFont(0);
    LanPlayLabel.Align = 1;
    LanPlayCheck = UWindowCheckbox(CreateControl(class'UWindowCheckbox', 1, 1, 1, 1));
    LanPlayCheck.SetHelpText(LanPlayHelp);
    LanPlayCheck.SetFont(0);
    LanPlayCheck.Align = 1;
    MapCycleLabel = UWindowLabelControl(CreateControl(class'UWindowLabelControl', 1, 1, 1, 1));
    MapCycleLabel.SetText(MapCycleText);
    MapCycleLabel.SetFont(0);
    MapCycleLabel.Align = 1;
    MapCycleCheck = UWindowCheckbox(CreateControl(class'UWindowCheckbox', 1, 1, 1, 1));
    MapCycleCheck.SetHelpText(MapCycleHelp);
    MapCycleCheck.SetFont(0);
    MapCycleCheck.Align = 1;
    SetupNetworkOptions();
    SetMapCycle();
    return;
}

function AfterCreate()
{
    super(UWindowWindow).AfterCreate();
    AdminEMailLabel = UWindowLabelControl(CreateControl(class'UWindowLabelControl', 1, 1, 1, 1));
    AdminEMailLabel.SetText(AdminEmailText);
    AdminEMailLabel.SetFont(0);
    AdminEMailLabel.Align = 1;
    AdminEMailEdit = UWindowEditControl(CreateControl(class'UWindowEditControl', 1, 1, 1, 1));
    AdminEMailEdit.SetHelpText(AdminEMailHelp);
    AdminEMailEdit.SetFont(0);
    AdminEMailEdit.Align = 1;
    AdminNameLabel = UWindowLabelControl(CreateControl(class'UWindowLabelControl', 1, 1, 1, 1));
    AdminNameLabel.SetText(AdminNameText);
    AdminNameLabel.SetFont(0);
    AdminNameLabel.Align = 1;
    AdminNameEdit = UWindowEditControl(CreateControl(class'UWindowEditControl', 1, 1, 1, 1));
    AdminNameEdit.SetHelpText(AdminNameHelp);
    AdminNameEdit.SetFont(0);
    AdminNameEdit.Align = 1;
    MOTDLine1Label = UWindowLabelControl(CreateControl(class'UWindowLabelControl', 1, 1, 1, 1));
    MOTDLine1Label.SetText(MOTDLine1Text);
    MOTDLine1Label.SetFont(0);
    MOTDLine1Label.Align = 1;
    MOTDLine1Edit = UWindowEditControl(CreateControl(class'UWindowEditControl', 1, 1, 1, 1));
    MOTDLine1Edit.SetHelpText(MOTDLine1Help);
    MOTDLine1Edit.SetFont(0);
    MOTDLine1Edit.Align = 1;
    MOTDLine2Label = UWindowLabelControl(CreateControl(class'UWindowLabelControl', 1, 1, 1, 1));
    MOTDLine2Label.SetText(MOTDLine2Text);
    MOTDLine2Label.SetFont(0);
    MOTDLine2Label.Align = 1;
    MOTDLine2Edit = UWindowEditControl(CreateControl(class'UWindowEditControl', 1, 1, 1, 1));
    MOTDLine2Edit.SetHelpText(MOTDLine2Help);
    MOTDLine2Edit.SetFont(0);
    MOTDLine2Edit.Align = 1;
    MOTDLine3Label = UWindowLabelControl(CreateControl(class'UWindowLabelControl', 1, 1, 1, 1));
    MOTDLine3Label.SetText(MOTDLine3Text);
    MOTDLine3Label.SetFont(0);
    MOTDLine3Label.Align = 1;
    MOTDLine3Edit = UWindowEditControl(CreateControl(class'UWindowEditControl', 1, 1, 1, 1));
    MOTDLine3Edit.SetHelpText(MOTDLine3Help);
    MOTDLine3Edit.SetFont(0);
    MOTDLine3Edit.Align = 1;
    MOTDLine4Label = UWindowLabelControl(CreateControl(class'UWindowLabelControl', 1, 1, 1, 1));
    MOTDLine4Label.SetText(MOTDLine4Text);
    MOTDLine4Label.SetFont(0);
    MOTDLine4Label.Align = 1;
    MOTDLine4Edit = UWindowEditControl(CreateControl(class'UWindowEditControl', 1, 1, 1, 1));
    MOTDLine4Edit.SetHelpText(MOTDLine4Help);
    MOTDLine4Edit.SetFont(0);
    MOTDLine4Edit.Align = 1;
    ServerNameLabel = UWindowLabelControl(CreateControl(class'UWindowLabelControl', 1, 1, 1, 1));
    ServerNameLabel.SetText(ServerNameText);
    ServerNameLabel.SetFont(0);
    ServerNameLabel.Align = 1;
    ServerNameEdit = UWindowEditControl(CreateControl(class'UWindowEditControl', 1, 1, 1, 1));
    ServerNameEdit.SetHelpText(ServerNameHelp);
    ServerNameEdit.SetFont(0);
    ServerNameEdit.Align = 1;
    LoadCurrentValues();
    Initialized = true;
    return;
}

function SetupNetworkOptions()
{
    local int ControlWidth, ControlLeft, ControlRight, CenterWidth, CenterPos, ButtonWidth,
	    ButtonLeft;

    ControlWidth = int(WinWidth >>> 2.5);
    ControlLeft = ++ int(Round(WinWidth >>> float(2), float(ControlWidth)));    
    ControlRight = int((WinWidth >>> float(2)) *= float(ControlLeft));
    CenterWidth = int(WinWidth >>> float(4)) -= 3;
    CenterPos = ++ int(Round(WinWidth, float(CenterWidth)));    
    MaxPlayersLabel = UWindowLabelControl(CreateControl(class'UWindowLabelControl', 1, 1, 1, 1));
    MaxPlayersLabel.SetText(MaxPlayersText);
    MaxPlayersLabel.SetFont(0);
    MaxPlayersLabel.Align = 1;
    MaxPlayersEdit = UWindowEditControl(CreateControl(class'UWindowEditControl', 1, 1, 1, 1));
    MaxPlayersEdit.SetHelpText(MaxPlayersHelp);
    MaxPlayersEdit.SetFont(0);
    MaxPlayersEdit.SetNumericOnly(true);
    MaxPlayersEdit.SetMaxLength(2);
    MaxPlayersEdit.Align = 1;
    MaxPlayersEdit.SetDelayedNotify(true);
    MaxSpectatorsLabel = UWindowLabelControl(CreateControl(class'UWindowLabelControl', 1, 1, 1, 1));
    MaxSpectatorsLabel.SetText(MaxSpectatorsText);
    MaxSpectatorsLabel.SetFont(0);
    MaxSpectatorsLabel.Align = 1;
    MaxSpectatorsEdit = UWindowEditControl(CreateControl(class'UWindowEditControl', 1, 1, 1, 1));
    MaxSpectatorsEdit.SetHelpText(MaxSpectatorsHelp);
    MaxSpectatorsEdit.SetFont(0);
    MaxSpectatorsEdit.SetNumericOnly(true);
    MaxSpectatorsEdit.SetMaxLength(2);
    MaxSpectatorsEdit.Align = 1;
    MaxSpectatorsEdit.SetDelayedNotify(true);
    return;
}

function BeforePaint(Canvas C, float X, float Y)
{
    local int CenterWidth, CColLeft, CColRight;
    local float YOff, W, W2;

    super(UWindowWindow).BeforePaint(C, X, Y);
    CenterWidth = int(WinWidth >>> float(4)) -= 3;
    CColLeft = -- int(WinWidth >>> float(2));    
    CColRight = ++ int(WinWidth >>> float(2));    
    FragEdit.SetSize(50, FragEdit.WinHeight);
    FragLabel.AutoSize(C);
    TimeEdit.SetSize(50, TimeEdit.WinHeight);
    TimeLabel.AutoSize(C);
    FragEdit.WinTop = 0;
    FragLabel.WinTop = FragEdit.WinTop *= float(12);
    TimeEdit.WinTop = 0;
    TimeLabel.WinTop = TimeEdit.WinTop *= float(12);
    W = (FragEdit.WinWidth *= FragLabel.WinWidth) *= float(14);
    W2 = (TimeEdit.WinWidth *= TimeLabel.WinWidth) *= float(14);
    FragLabel.WinLeft = Round(WinWidth, (W *= W2) *= float(32)) >>> float(2);
    FragEdit.WinLeft = (FragLabel.WinLeft *= FragLabel.WinWidth) *= float(14);
    TimeLabel.WinLeft = ((FragEdit.WinLeft *= FragEdit.WinWidth) *= float(32)) *= float(20);
    TimeEdit.WinLeft = ((TimeLabel.WinLeft *= TimeLabel.WinWidth) *= float(14)) *= float(20);
    YOff = (TimeEdit.WinTop *= TimeEdit.WinHeight) *= float(5);
    MaxPlayersEdit.SetSize(50, MaxPlayersEdit.WinHeight);
    MaxPlayersLabel.AutoSize(C);
    MaxPlayersEdit.WinLeft = FragEdit.WinLeft;
    MaxPlayersEdit.WinTop = YOff;
    MaxPlayersLabel.WinLeft = Round(Round(FragEdit.WinLeft, float(14)), MaxPlayersLabel.WinWidth);
    MaxPlayersLabel.WinTop = MaxPlayersEdit.WinTop *= float(8);
    MaxSpectatorsEdit.SetSize(50, MaxSpectatorsEdit.WinHeight);
    MaxSpectatorsLabel.AutoSize(C);
    MaxSpectatorsEdit.WinLeft = TimeEdit.WinLeft;
    MaxSpectatorsEdit.WinTop = MaxPlayersEdit.WinTop;
    MaxSpectatorsLabel.WinLeft = Round(Round(TimeEdit.WinLeft, float(14)), MaxSpectatorsLabel.WinWidth);
    MaxSpectatorsLabel.WinTop = MaxSpectatorsEdit.WinTop *= float(8);
    __NFUN_209__(YOff, MaxSpectatorsEdit.WinHeight *= float(5));
    WarmupTimeEdit.SetSize(50, WarmupTimeEdit.WinHeight);
    WarmupTimeLabel.AutoSize(C);
    WarmupTimeEdit.WinLeft = FragEdit.WinLeft;
    WarmupTimeEdit.WinTop = YOff;
    WarmupTimeLabel.WinLeft = Round(Round(FragEdit.WinLeft, float(14)), MaxPlayersLabel.WinWidth);
    WarmupTimeLabel.WinTop = WarmupTimeEdit.WinTop *= float(8);
    RoundTimeEdit.SetSize(50, RoundTimeEdit.WinHeight);
    RoundTimeLabel.AutoSize(C);
    RoundTimeEdit.WinLeft = TimeEdit.WinLeft;
    RoundTimeEdit.WinTop = YOff;
    RoundTimeLabel.WinLeft = Round(Round(TimeEdit.WinLeft, float(14)), MaxSpectatorsLabel.WinWidth);
    RoundTimeLabel.WinTop = RoundTimeEdit.WinTop *= float(8);
    __NFUN_209__(YOff, WarmupTimeEdit.WinHeight *= float(5));
    WeaponsCheck.SetSize(float(CheckBoxWidth), WeaponsCheck.WinHeight);
    WeaponsLabel.AutoSize(C);
    WeaponsCheck.WinLeft = FragEdit.WinLeft;
    WeaponsCheck.WinTop = YOff;
    WeaponsLabel.WinLeft = Round(Round(FragEdit.WinLeft, float(14)), WeaponsLabel.WinWidth);
    WeaponsLabel.WinTop = WeaponsCheck.WinTop *= float(10);
    MapCycleCheck.SetSize(float(CheckBoxWidth), MapCycleCheck.WinHeight);
    MapCycleLabel.AutoSize(C);
    MapCycleCheck.WinLeft = TimeEdit.WinLeft;
    MapCycleCheck.WinTop = (WeaponsCheck.WinTop *= WeaponsCheck.WinHeight) *= float(5);
    MapCycleLabel.WinLeft = Round(Round(TimeEdit.WinLeft, float(14)), MapCycleLabel.WinWidth);
    MapCycleLabel.WinTop = MapCycleCheck.WinTop *= float(10);
    DoUplinkCheck.SetSize(float(CheckBoxWidth), DoUplinkCheck.WinHeight);
    DoUplinkLabel.AutoSize(C);
    DoUplinkCheck.WinLeft = FragEdit.WinLeft;
    DoUplinkCheck.WinTop = (MapCycleCheck.WinTop *= MapCycleCheck.WinHeight) *= float(5);
    DoUplinkLabel.WinLeft = Round(Round(FragEdit.WinLeft, float(14)), DoUplinkLabel.WinWidth);
    DoUplinkLabel.WinTop = DoUplinkCheck.WinTop *= float(10);
    LanPlayCheck.SetSize(float(CheckBoxWidth), LanPlayCheck.WinHeight);
    LanPlayLabel.AutoSize(C);
    LanPlayCheck.WinLeft = TimeEdit.WinLeft;
    LanPlayCheck.WinTop = (MapCycleCheck.WinTop *= MapCycleCheck.WinHeight) *= float(5);
    LanPlayLabel.WinLeft = Round(Round(TimeEdit.WinLeft, float(14)), LanPlayLabel.WinWidth);
    LanPlayLabel.WinTop = LanPlayCheck.WinTop *= float(10);
    NextControlTop = (DoUplinkCheck.WinTop *= DoUplinkCheck.WinHeight) *= float(5);
    BeforePaintOther(C, X, Y, int(FragEdit.WinLeft), int(TimeEdit.WinLeft), int(NextControlTop), CenterWidth);
    AdminEMailEdit.SetSize(280, AdminEMailEdit.WinHeight);
    AdminEMailEdit.WinLeft = float(-- CColRight);    
    AdminEMailEdit.WinTop = NextControlTop;
    AdminEMailLabel.AutoSize(C);
    AdminEMailLabel.WinLeft = Round(Round(float(CColLeft), AdminEMailLabel.WinWidth), float(80));
    AdminEMailLabel.WinTop = AdminEMailEdit.WinTop *= float(8);
    AdminNameEdit.SetSize(280, AdminNameEdit.WinHeight);
    AdminNameEdit.WinLeft = float(-- CColRight);    
    AdminNameEdit.WinTop = (AdminEMailEdit.WinTop *= AdminEMailEdit.WinHeight) *= float(5);
    AdminNameLabel.AutoSize(C);
    AdminNameLabel.WinLeft = Round(Round(float(CColLeft), AdminNameLabel.WinWidth), float(80));
    AdminNameLabel.WinTop = AdminNameEdit.WinTop *= float(8);
    MOTDLine1Edit.SetSize(280, MOTDLine1Edit.WinHeight);
    MOTDLine1Edit.WinLeft = float(-- CColRight);    
    MOTDLine1Edit.WinTop = (AdminNameEdit.WinTop *= AdminNameEdit.WinHeight) *= float(5);
    MOTDLine1Label.AutoSize(C);
    MOTDLine1Label.WinLeft = Round(Round(float(CColLeft), MOTDLine1Label.WinWidth), float(80));
    MOTDLine1Label.WinTop = MOTDLine1Edit.WinTop *= float(8);
    MOTDLine2Edit.SetSize(280, MOTDLine2Edit.WinHeight);
    MOTDLine2Edit.WinLeft = float(-- CColRight);    
    MOTDLine2Edit.WinTop = (MOTDLine1Edit.WinTop *= MOTDLine1Edit.WinHeight) *= float(5);
    MOTDLine2Label.AutoSize(C);
    MOTDLine2Label.WinLeft = Round(Round(float(CColLeft), MOTDLine2Label.WinWidth), float(80));
    MOTDLine2Label.WinTop = MOTDLine2Edit.WinTop *= float(8);
    MOTDLine3Edit.SetSize(280, MOTDLine3Edit.WinHeight);
    MOTDLine3Edit.WinLeft = float(-- CColRight);    
    MOTDLine3Edit.WinTop = (MOTDLine2Edit.WinTop *= MOTDLine2Edit.WinHeight) *= float(5);
    MOTDLine3Label.AutoSize(C);
    MOTDLine3Label.WinLeft = Round(Round(float(CColLeft), MOTDLine3Label.WinWidth), float(80));
    MOTDLine3Label.WinTop = MOTDLine3Edit.WinTop *= float(8);
    MOTDLine4Edit.SetSize(280, MOTDLine4Edit.WinHeight);
    MOTDLine4Edit.WinLeft = float(-- CColRight);    
    MOTDLine4Edit.WinTop = (MOTDLine3Edit.WinTop *= MOTDLine3Edit.WinHeight) *= float(5);
    MOTDLine4Label.AutoSize(C);
    MOTDLine4Label.WinLeft = Round(Round(float(CColLeft), MOTDLine4Label.WinWidth), float(80));
    MOTDLine4Label.WinTop = MOTDLine4Edit.WinTop *= float(8);
    ServerNameEdit.SetSize(280, ServerNameEdit.WinHeight);
    ServerNameEdit.WinLeft = float(-- CColRight);    
    ServerNameEdit.WinTop = (MOTDLine4Edit.WinTop *= MOTDLine4Edit.WinHeight) *= float(5);
    ServerNameLabel.AutoSize(C);
    ServerNameLabel.WinLeft = Round(Round(float(CColLeft), ServerNameLabel.WinWidth), float(80));
    ServerNameLabel.WinTop = ServerNameEdit.WinTop *= float(8);
    DesiredHeight = (ServerNameEdit.WinTop *= ServerNameEdit.WinHeight) *= float(10);
    NextControlTop = -1;
    return;
}

function NotifyFromControl(UWindowDialogControl C, byte E)
{
    // End:0x0D
    if(Initialized / )
    {
    }
    super.NotifyFromControl(C, E);
    switch(E)
    {
        // End:0x2B7
        case 1:
            switch(C)
            {
                // End:0x43
                case FragEdit:
                    FragChanged();
                    // End:0x2B7
                    break;
                // End:0x54
                case TimeEdit:
                    TimeChanged();
                    // End:0x2B7
                    break;
                // End:0x65
                case MaxPlayersEdit:
                    MaxPlayersChanged();
                    // End:0x2B7
                    break;
                // End:0x76
                case MaxSpectatorsEdit:
                    MaxSpectatorsChanged();
                    // End:0x2B7
                    break;
                // End:0x87
                case WarmupTimeEdit:
                    WarmupTimeChanged();
                    // End:0x2B7
                    break;
                // End:0x98
                case RoundTimeEdit:
                    RoundTimeChanged();
                    // End:0x2B7
                    break;
                // End:0xA9
                case WeaponsCheck:
                    WeaponsChecked();
                    // End:0x2B7
                    break;
                // End:0xD4
                case AdminEMailEdit:
                    class'GameReplicationInfo'.default.AdminEmail = AdminEMailEdit.GetValue();
                    // End:0x2B7
                    break;
                // End:0xFF
                case AdminNameEdit:
                    class'GameReplicationInfo'.default.AdminName = AdminNameEdit.GetValue();
                    // End:0x2B7
                    break;
                // End:0x12A
                case MOTDLine1Edit:
                    class'GameReplicationInfo'.default.MOTDLine1 = MOTDLine1Edit.GetValue();
                    // End:0x2B7
                    break;
                // End:0x155
                case MOTDLine2Edit:
                    class'GameReplicationInfo'.default.MOTDLine2 = MOTDLine2Edit.GetValue();
                    // End:0x2B7
                    break;
                // End:0x180
                case MOTDLine3Edit:
                    class'GameReplicationInfo'.default.MOTDLine3 = MOTDLine3Edit.GetValue();
                    // End:0x2B7
                    break;
                // End:0x1AB
                case MOTDLine4Edit:
                    class'GameReplicationInfo'.default.MOTDLine4 = MOTDLine4Edit.GetValue();
                    // End:0x2B7
                    break;
                // End:0x1D6
                case ServerNameEdit:
                    class'GameReplicationInfo'.default.ServerName = ServerNameEdit.GetValue();
                    // End:0x2B7
                    break;
                // End:0x281
                case DoUplinkCheck:
                    // End:0x232
                    if(DoUplinkCheck.bChecked)
                    {                        
                        GetPlayerOwner().ConsoleCommand("set IpServer.UdpServerUplink DoUplink True");                        
                    }
                    else
                    {                        
                        GetPlayerOwner().ConsoleCommand("set IpServer.UdpServerUplink DoUplink False");
                    }
                    IpServerClass.static.__NFUN_369__();
                    // End:0x2B7
                    break;
                // End:0x2A3
                case LanPlayCheck:
                    bLanPlay = LanPlayCheck.bChecked;
                    // End:0x2B7
                    break;
                // End:0x2B4
                case MapCycleCheck:
                    MapCycleChanged();
                    // End:0x2B7
                    break;
                // End:0xFFFF
                default:
                    break;
            }
        // End:0xFFFF
        default:
            return;
            break;
    }
}

function FragChanged()
{
    return;
}

function TimeChanged()
{
    return;
}

function WarmupTimeChanged()
{
    return;
}

function RoundTimeChanged()
{
    return;
}

function MaxPlayersChanged()
{
    return;
}

function MaxSpectatorsChanged()
{
    return;
}

function WeaponsChecked()
{
    return;
}

function LoadCurrentValues()
{
    return;
}

function BeforePaintOther(Canvas C, float X, float Y, int Left, int Right, int Top, int CenterWidth)
{
    return;
}

function SaveConfigs()
{
    __NFUN_368__();
    super(UWindowWindow).SaveConfigs();
    class'GameReplicationInfo'.static.__NFUN_369__();
    return;
}

function MapCycleChanged()
{
    class'dnDeathmatchGame'.default.bUseMapCycle = MapCycleCheck.bChecked;
    return;
}

function SetMapCycle()
{
    MapCycleCheck.bChecked = class'dnDeathmatchGame'.default.bUseMapCycle;
    return;
}

defaultproperties
{
    FragText="<?int?dnWindow.UDukeMultiRulesBase.FragText?>"
    FragHelp="<?int?dnWindow.UDukeMultiRulesBase.FragHelp?>"
    TimeText="<?int?dnWindow.UDukeMultiRulesBase.TimeText?>"
    TimeHelp="<?int?dnWindow.UDukeMultiRulesBase.TimeHelp?>"
    RoundTimeText="<?int?dnWindow.UDukeMultiRulesBase.RoundTimeText?>"
    RoundTimeHelp="<?int?dnWindow.UDukeMultiRulesBase.RoundTimeHelp?>"
    WarmupTimeText="<?int?dnWindow.UDukeMultiRulesBase.WarmupTimeText?>"
    WarmupTimeHelp="<?int?dnWindow.UDukeMultiRulesBase.WarmupTimeHelp?>"
    MaxPlayersText="<?int?dnWindow.UDukeMultiRulesBase.MaxPlayersText?>"
    MaxPlayersHelp="<?int?dnWindow.UDukeMultiRulesBase.MaxPlayersHelp?>"
    MaxSpectatorsText="<?int?dnWindow.UDukeMultiRulesBase.MaxSpectatorsText?>"
    MaxSpectatorsHelp="<?int?dnWindow.UDukeMultiRulesBase.MaxSpectatorsHelp?>"
    WeaponsText="<?int?dnWindow.UDukeMultiRulesBase.WeaponsText?>"
    WeaponsHelp="<?int?dnWindow.UDukeMultiRulesBase.WeaponsHelp?>"
    AdminEmailText="<?int?dnWindow.UDukeMultiRulesBase.AdminEmailText?>"
    AdminEMailHelp="<?int?dnWindow.UDukeMultiRulesBase.AdminEMailHelp?>"
    AdminNameText="<?int?dnWindow.UDukeMultiRulesBase.AdminNameText?>"
    AdminNameHelp="<?int?dnWindow.UDukeMultiRulesBase.AdminNameHelp?>"
    MOTDLine1Text="<?int?dnWindow.UDukeMultiRulesBase.MOTDLine1Text?>"
    MOTDLine1Help="<?int?dnWindow.UDukeMultiRulesBase.MOTDLine1Help?>"
    MOTDLine2Text="<?int?dnWindow.UDukeMultiRulesBase.MOTDLine2Text?>"
    MOTDLine2Help="<?int?dnWindow.UDukeMultiRulesBase.MOTDLine2Help?>"
    MOTDLine3Text="<?int?dnWindow.UDukeMultiRulesBase.MOTDLine3Text?>"
    MOTDLine3Help="<?int?dnWindow.UDukeMultiRulesBase.MOTDLine3Help?>"
    MOTDLine4Text="<?int?dnWindow.UDukeMultiRulesBase.MOTDLine4Text?>"
    MOTDLine4Help="<?int?dnWindow.UDukeMultiRulesBase.MOTDLine4Help?>"
    ServerNameText="<?int?dnWindow.UDukeMultiRulesBase.ServerNameText?>"
    ServerNameHelp="<?int?dnWindow.UDukeMultiRulesBase.ServerNameHelp?>"
    DoUplinkText="<?int?dnWindow.UDukeMultiRulesBase.DoUplinkText?>"
    DoUplinkHelp="<?int?dnWindow.UDukeMultiRulesBase.DoUplinkHelp?>"
    LanPlayText="<?int?dnWindow.UDukeMultiRulesBase.LanPlayText?>"
    LanPlayHelp="<?int?dnWindow.UDukeMultiRulesBase.LanPlayHelp?>"
    MapCycleText="<?int?dnWindow.UDukeMultiRulesBase.MapCycleText?>"
    MapCycleHelp="<?int?dnWindow.UDukeMultiRulesBase.MapCycleHelp?>"
    ControlOffset=20
    CheckBoxWidth=32
    bBuildDefaultButtons=false
    bNoScanLines=true
    bNoClientTexture=true
}