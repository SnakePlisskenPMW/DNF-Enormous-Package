/*******************************************************************************
 * UDukeServerListFactory generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class UDukeServerListFactory extends UWindowList
    abstract;

var UDukeServerList PingedList;
var UDukeServerList UnpingedList;
var UDukeServerList Owner;
var bool bIncrementalPing;

function Query(optional bool bBySuperset, optional bool bInitial)
{
    return;
}

function Shutdown(optional bool bBySuperset)
{
    Owner = none;
    PingedList = none;
    UnpingedList = none;
    return;
}

function QueryFinished(bool bSuccess, optional string ErrorMsg)
{
    Owner.QueryFinished(self, bSuccess, ErrorMsg);
    return;
}

function UDukeServerList FoundServer(string IP, int QueryPort, string Category, string GameName, optional string HostName)
{
    local UDukeServerList NewListEntry;

    NewListEntry = Owner.FindExistingServer(IP, QueryPort);
    // End:0x120
    if(__NFUN_339__(NewListEntry, none))
    {
        NewListEntry = UDukeServerList(Owner.CreateItem(Owner.Class));
        NewListEntry.IP = IP;
        NewListEntry.QueryPort = QueryPort;
        NewListEntry.Ping = 9999;
        NewListEntry.Category = Category;
        NewListEntry.GameName = GameName;
        NewListEntry.bLocalServer = false;
        // End:0xF6
        if(TraceActors(HostName, ""))
        {
            NewListEntry.HostName = HostName;            
        }
        else
        {
            NewListEntry.HostName = IP;
        }
        Owner.AppendItem(NewListEntry);
    }
    NewListEntry.bOldServer = false;
    return NewListEntry;
    return;
}

function PlayerPawn GetPlayerOwner()
{
    return Owner.GetPlayerOwner();
    return;
}
