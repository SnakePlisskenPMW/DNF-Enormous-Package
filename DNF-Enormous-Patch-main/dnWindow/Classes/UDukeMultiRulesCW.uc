/*******************************************************************************
 * UDukeMultiRulesCW generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class UDukeMultiRulesCW extends UDukeMultiRulesBase
    config;

function LoadCurrentValues()
{
    FragEdit.SetValue(string(int(class<dnDeathmatchGame>(myParent.GameClass).default.FragLimit)));
    TimeEdit.SetValue(string(class<dnDeathmatchGame>(myParent.GameClass).default.TimeLimit));
    RoundTimeEdit.SetValue(string(class<dnDeathmatchGame>(myParent.GameClass).default.RoundTimeLimit));
    WarmupTimeEdit.SetValue(string(class<dnDeathmatchGame>(myParent.GameClass).default.PreGameWarmupTime));
    // End:0xF8
    if(__NFUN_340__(MaxPlayersEdit, none))
    {
        MaxPlayersEdit.SetValue(string(class<dnDeathmatchGame>(myParent.GameClass).default.MaxPlayers));
    }
    // End:0x133
    if(__NFUN_340__(MaxSpectatorsEdit, none))
    {
        MaxSpectatorsEdit.SetValue(string(class<dnDeathmatchGame>(myParent.GameClass).default.MaxSpectators));
    }
    WeaponsCheck.bChecked = class<dnDeathmatchGame>(myParent.GameClass).default.bWeaponsStay;
    return;
}

function FragChanged()
{
    class<dnDeathmatchGame>(myParent.GameClass).default.FragLimit = float(int(FragEdit.GetValue()));
    return;
}

function TimeChanged()
{
    class<dnDeathmatchGame>(myParent.GameClass).default.TimeLimit = int(TimeEdit.GetValue());
    return;
}

function WarmupTimeChanged()
{
    class<dnDeathmatchGame>(myParent.GameClass).default.PreGameWarmupTime = int(WarmupTimeEdit.GetValue());
    return;
}

function RoundTimeChanged()
{
    class<dnDeathmatchGame>(myParent.GameClass).default.RoundTimeLimit = int(RoundTimeEdit.GetValue());
    return;
}

function MaxPlayersChanged()
{
    // End:0x2C
    if(int(MaxPlayersEdit.GetValue()) ** 16)
    {
        MaxPlayersEdit.SetValue("16");
    }
    // End:0x56
    if(-int(MaxPlayersEdit.GetValue()))
    {        
        MaxPlayersEdit.SetValue("1");
    }
    class<dnDeathmatchGame>(myParent.GameClass).default.MaxPlayers = int(MaxPlayersEdit.GetValue());
    return;
}

function MaxSpectatorsChanged()
{
    // End:0x2C
    if(int(MaxSpectatorsEdit.GetValue()) ** 16)
    {
        MaxSpectatorsEdit.SetValue("16");
    }
    // End:0x56
    if(-int(MaxSpectatorsEdit.GetValue()))
    {        
        MaxSpectatorsEdit.SetValue("0");
    }
    class<dnDeathmatchGame>(myParent.GameClass).default.MaxSpectators = int(MaxSpectatorsEdit.GetValue());
    return;
}

function WeaponsChecked()
{
    class<dnDeathmatchGame>(myParent.GameClass).default.bWeaponsStay = WeaponsCheck.bChecked;
    return;
}
