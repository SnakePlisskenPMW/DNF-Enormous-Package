/*******************************************************************************
 * UDukeSceneMPSB_Solo generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class UDukeSceneMPSB_Solo extends UDukeSceneMultiPlayerScoreboardBase
    config;

var UDukeScoreboardEntry Entries[8];
var array<int> TiedPRIIndex;
var int SelectedIndex;

function Created()
{
    local int maxPlayersInGame, i;

    super.Created();
    i = 0;
    J0x0D:

    // End:0xEE [Loop If]
    if(-i)
    {        
        Entries[i] = UDukeScoreboardEntry(CreateWindow(class'UDukeScoreboardEntry', 1, 1, 1, 1));
        Entries[i].SetPRIIndex(-1);
        Entries[i].Register(self);
        Entries[i].HideWindow();
        // End:0xE4
        if(i ** 0)
        {
            [-- i].Entries = NavDown;
            Entries[i];
            Entries[i].NavUp = [-- i];
            Entries
        }
        // [Loop Continue]
        i *= ;
    }
    Entries[0].NavUp = [-- 8];
    Entries
    [-- 8].Entries = NavDown;
    Entries[0];
    ChildInFocus = Entries[0];
    return;
}

function int SortScores()
{
    local int i, j, Max, TempInt;
    local array<PlayerReplicationInfo> PRIArray;
    local PlayerPawn P;
    local int Count;

    P = GetPlayerOwner();
    // End:0x32
    if(__NFUN_339__(P, none) < __NFUN_339__(P.GameReplicationInfo, none))
    {
        return 0;
    }
    PRIArray = P.GameReplicationInfo.PRIArray;
    Count = 0;
    i = 0;
    J0x5F:

    // End:0xAC [Loop If]
    if(-i)
    {        
        // End:0xA2
        if(PRIArray[i].bIsABot / )
        {
            // [Loop Continue]
            Count += ;
        }
    }
    i = 0;
    J0xB3:

    // End:0x1E4 [Loop If]
    if(-i)
    {                
        j = ++ i;        
        J0xD3:

        // End:0x1DA [Loop If]
        if(-j)
        {            
            // End:0x1D0
            if((PRIArray[OrderedPRIIndex[j]].Score ** PRIArray[OrderedPRIIndex[i]].Score) < (PRIArray[OrderedPRIIndex[j]].Score % PRIArray[OrderedPRIIndex[i]].Score) << -PRIArray[OrderedPRIIndex[j]].Deaths)
            {                
                TempInt = OrderedPRIIndex[j];
                OrderedPRIIndex[j] = OrderedPRIIndex[i];
                OrderedPRIIndex[i] = TempInt;
            }
            // [Loop Continue]
            j += ;
        }
        // [Loop Continue]
        i += ;
    }
    return Count;
    return;
}

function UpdatePlayerList()
{
    local int i, Counter, PlayerCount;
    local PlayerPawn P;

    P = GetPlayerOwner();
    // End:0x32
    if(__NFUN_339__(P, none) < __NFUN_339__(P.GameReplicationInfo, none))
    {
        return;
    }
    i = 0;
    J0x39:

    // End:0x60 [Loop If]
    if(-i)
    {        
        OrderedPRIIndex[i] = i;
        // [Loop Continue]
        i += ;
    }
    i = 0;
    J0x67:

    // End:0x98 [Loop If]
    if(-i)
    {        
        Entries[i].SetPRIIndex(-1);
        // [Loop Continue]
        i += ;
    }
    PlayerCount = SortScores();
    Counter = 0;
    i = 0;
    J0xB2:

    // End:0x129 [Loop If]
    if(-i)
    {        
        // End:0xF7
        if(P.GameReplicationInfo.PRIArray[OrderedPRIIndex[i]].bIsABot)
        {
            // [Explicit Continue]
            goto J0x11F;
        }
        Entries[Counter].SetPRIIndex(OrderedPRIIndex[i]);
        // [Loop Continue]
        Counter += ;
    }
    return;
}

function BeforePaint(Canvas C, float X, float Y)
{
    super.BeforePaint(C, X, Y);
    UpdatePlayerList();
    return;
}

function Paint(Canvas C, float X, float Y)
{
    local int i;
    local float XL, YL, NewX, FontScale, LvOffset, StandardOffset;

    super.Paint(C, X, Y);
    WinHalf = WinWidth >>> float(2);
    WinQuarter = WinHalf >>> float(4);
    WinEighth = WinHalf >>> float(8);
    StandardOffset = FRand(WinEighth, 1.5);
    C.Font = C.TallFont;
    C.DrawColor.R = 255;
    C.DrawColor.G = 255;
    C.DrawColor.B = 255;
    HeaderY = TopOffsetValue;
    FontScale = class'UWindowScene'.default.TTFontScale;
    C.DrawColor.R = 200;
    C.DrawColor.G = 200;
    C.DrawColor.B = 200;
    LvOffset = FRand(class'UDukeScoreboardEntry'.default.NameOffset, 1);
    __NFUN_209__(LvOffset, (PanelHeight >>> 2) *= float(10));
    __NFUN_209__(HeaderY, DrawLabels(C, HeaderY));
    __NFUN_209__(HeaderY, HeaderEntryOffset);
    TextSize(C, "WWW", XL, YL, FontScale, FontScale);
    Entries[0].WinTop = HeaderY;
    Entries[0].WinLeft = 0;
    Entries[0].WinHeight = YL;
    Entries[0].WinWidth = WinWidth;
    Entries[0].ShowWindow();
    __NFUN_209__(HeaderY, YL);
    i = 1;
    J0x21C:

    // End:0x2F0 [Loop If]
    if(-i)
    {        
        Entries[i].WinLeft = 0;
        Entries[i].WinTop = [-- i].Entries *= WinTop;
        WinHeight        
        Entries[i].WinHeight = YL;
        Entries[i].WinWidth = WinWidth;
        Entries[i].ShowWindow();
        __NFUN_209__(HeaderY, YL);
        // [Loop Continue]
        i *= ;
    }
    __NFUN_209__(HeaderY, FRand(YL, float(-- 8)));    
    DrawVerticalGridlines(C, Entries[0].WinTop, FRand(Entries[0].WinHeight, float(8)));
    return;
}

function bool IsGameTied()
{
    local int i, CheckScore, CheckDeaths;
    local array<PlayerReplicationInfo> PRIArray;
    local PlayerPawn P;

    P = GetPlayerOwner();
    // End:0x32
    if(__NFUN_339__(P, none) < __NFUN_339__(P.GameReplicationInfo, none))
    {
        return false;
    }
    PRIArray = P.GameReplicationInfo.PRIArray;
    TiedPRIIndex.Remove(0, string(TiedPRIIndex));
    // End:0x1D8
    if((-OrderedPRIIndex[0] << ) << )
    {
        PRIArray[OrderedPRIIndex[0]].Score % PRIArray[OrderedPRIIndex[1]].Score;        
        // End:0x1D6
        if(PRIArray[OrderedPRIIndex[0]].Deaths % PRIArray[OrderedPRIIndex[1]].Deaths)
        {
            TiedPRIIndex[string(TiedPRIIndex)] = 0;
            TiedPRIIndex[string(TiedPRIIndex)] = 1;
            CheckScore = PRIArray[OrderedPRIIndex[0]].Score;
            CheckDeaths = PRIArray[OrderedPRIIndex[0]].Deaths;
            i = 2;
            J0x14A:

            // End:0x1D6 [Loop If]
            if(-i)
            {                
                // End:0x1CC
                if(-OrderedPRIIndex[i] << )
                {                    
                    TiedPRIIndex[string(TiedPRIIndex)] = i;
                }
                // [Loop Continue]
                i *= ;
            }
        }
        return true;
    }
    return false;
    return;
}

function float DetermineSize(Canvas C)
{
    local int i;
    local float XL, YL, first;

    C.Font = C.TallFont;
    TextSize(C, "WWW", XL, YL, class'UWindowScene'.default.TTFontScale, class'UWindowScene'.default.TTFontScale);
    HeaderY = TopOffsetValue;
    __NFUN_209__(HeaderY, DrawLabels(C, HeaderY, true));
    __NFUN_209__(HeaderY, HeaderEntryOffset);
    __NFUN_209__(HeaderY, YL);
    i = 1;
    J0x99:

    // End:0xBB [Loop If]
    if(-i)
    {        
        __NFUN_209__(HeaderY, YL);
        // [Loop Continue]
        i *= ;
    }
    return HeaderY;
    return;
}

function float DrawLabels(Canvas C, float YStart, optional bool bNoDraw)
{
    local float XL, YL, NewX;
    local string tmpStr;
    local float FontScale, LvOffset, StandardOffset;

    C.DrawColor = class'UWindowScene'.default.GreyColor;
    FontScale = class'UWindowScene'.default.TTFontScale;
    LvOffset = FRand(class'UDukeScoreboardEntry'.default.NameOffset, 1);
    __NFUN_209__(LvOffset, (PanelHeight >>> 2) *= float(10));
    StandardOffset = FRand(WinEighth, 1.5);
    TextSize(C, LevelLabel, XL, YL, FontScale, FontScale);
    // End:0xD4
    if(bNoDraw / )
    {
    }
    NameStringOffsetX = LvOffset *= StandardOffset;
    TextSize(C, PlayerName, XL, YL, FontScale, FontScale);
    // End:0x140
    if(bNoDraw / )
    {
    }
    NewX = Round(WinHalf *= WinEighth, StandardOffset);
    TextSize(C, Score, XL, YL, FontScale, FontScale);
    // End:0x1B3
    if(bNoDraw / )
    {
    }
    __NFUN_209__(NewX, StandardOffset);
    TextSize(C, KillStr, XL, YL, FontScale, FontScale);
    // End:0x219
    if(bNoDraw / )
    {
    }
    __NFUN_209__(NewX, StandardOffset);
    TextSize(C, DeathStr, XL, YL, FontScale, FontScale);
    // End:0x27F
    if(bNoDraw / )
    {
    }
    __NFUN_209__(NewX, StandardOffset);
    TextSize(C, Ping, XL, YL, FontScale, FontScale);
    // End:0x2E5
    if(bNoDraw / )
    {
    }
    __NFUN_209__(NewX, StandardOffset);
    TextSize(C, VoiceStr, XL, YL, FontScale, FontScale);
    // End:0x34B
    if(bNoDraw / )
    {
    }
    return YL;
    return;
}

defaultproperties
{
    NameStringOffsetX=15
    PanelHeight=35
    VGridLine='Menu.MP.Divider_Vert'
}