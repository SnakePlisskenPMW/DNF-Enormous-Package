/*******************************************************************************
 * PopUpCfg generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class PopUpCfg extends Object
    abstract
    native
    exportstructs
    hidecategories(Object);

cpptext
{
// Stripped
}

var() noexport Engine.BaseAI.EAIAnimController AnimCtrler "Required AnimCtrler";
var() noexport string AnimExtension "This is appended to the basic popup anim names (e.g. 'Up', 'Left', 'Right')";
var() noexport bool SingleAnim "Is this a single anim popup (with optional interval)?";
var() noexport bool FullAnim "Ignore collision?";
var() noexport bool WaitMustFinish "True if the wait anim must not be interrupted?";
var() noexport bool OutMustFinish "True if the out anim must not be interrupted?";
var() noexport bool HoldMustFinish "True if the hold anim must not be interrupted?";
var() noexport bool InMustFinish "True if the in anim must not be interrupted?";
var() noexport Vector UserOffset "An optional vector to offset the user location by. Note: X is reciprocal to the ref fwd dir.";
var() noexport float YawOffset "Degrees offset from straight ahead.";
var() noexport bool RequiresTarget "Do we need a valid target to perform this popup?";
var() noexport int MinAngleToTarget "Minimum allowable angle to target relative to fwd.  +ve angle is in direction of popup.";
var() noexport int MaxAngleToTarget "Maximum allowable angle to target relative to fwd.  +ve angle is in direction of popup.";
var() noexport bool AllowFireOnOut "Do we allow firing during the out mode of this popup?";
var() noexport bool AllowFireOnHold "Do we allow firing during the hold mode of this popup?";
var() noexport float IntervalMin "Minimum time to spend in hiding when performing the popup move (<0.0 means one animation cycle).";
var() noexport float IntervalRnd "Extra random amount of time to spend in hiding when performing the popup move";
var() noexport float IntervalMinDamaged "Minimum time to spend in hiding if you have recently took damage (this applies to the start of a popup)";
var() noexport float IntervalDamageWin "If taken damage within this amount of time, we'll use IntervalMinDamaged instead of IntervalMin";
var() noexport float IntervalDamageThresh "Damage threshold for taking an IntervalMinDamaged during a wait sequence";
var() noexport float ExposureMin "Minimum time to spend exposed during the popup move (<=0.0 means one animation cycle).";
var() noexport float ExposureRnd "Extra random amount of time to spend exposed during the popup move";
var() noexport float Priority "Priority of this PopUpCfg - popups with higher priority will be attempted first";
var() noexport bool bRestoreLocation "after popin animation finishes, force location to be restored to starting position ";
var() noexport bool bDebugCanUse "Forcing debugging in UPopUpCfg::CanUse";
var Vector UserLocation;
var() noexport float MaxWaitDamage "Max damage to take during the Wait state before we gtfo";
var() noexport float MaxHoldDamage "Max damage to take during the holdt state before we popin or quit";
var() noexport int MinHoldShots "Minimum shots you must take in the hold state";
var() noexport bool bUsesWeaponIdle "Does this popup use upper body weapon idle animations in addition to the full body wait, out, hold, in set";
var() noexport bool bCheckLOS "If true, we'll do a LOS check before trying to us this popup";
var() noexport Vector LOSOffset "Offset from location to do LOS check";
var() noexport bool bDisableBoneAimerOnWait "Disable bone aimer while in this popup - on the wait animation";
var() noexport bool bDisableBoneAimerOnIn "Disable bone aimer while in this popup - on the in animation";
var() noexport bool bDisableBoneAimerOnOut "Disable bone aimer while in this popup - on the out animation";
var() noexport bool bDisableBoneAimer "Disable bone aimer while in this popup - everywhere";
var() noexport bool bDisableForceDirectShot "ForceDirectShot will be disabled while using this popup";
var() bool bHasTurnToIdleAnim;
var bool BoneAimerDisabled;
var() bool OverrideHoldTime;
var() noexport bool AvoidDanger "Can we run/avoid danger while at this popup";
var() noexport bool AllowPain "Can we pain while at this popup";
var() bool bCanSkipPopIn;

defaultproperties
{
    AnimCtrler=5
    InMustFinish=true
    RequiresTarget=true
    MinAngleToTarget=-60
    MaxAngleToTarget=60
    AllowFireOnHold=true
    IntervalMin=0.5
    IntervalRnd=1
    ExposureMin=1
    ExposureRnd=7
    Priority=1
    bRestoreLocation=true
    AvoidDanger=true
    AllowPain=true
}