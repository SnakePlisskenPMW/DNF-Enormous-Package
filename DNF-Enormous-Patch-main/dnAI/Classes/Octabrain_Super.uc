/*******************************************************************************
 * Octabrain_Super generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Octabrain_Super extends AIActor
    config;

var dnOctabrainFX_BrainChargeA Eyebrow;
var dnOctabrainBrainLightningA Charge;
var float ProjectileGate;
var float PickupTKObjGate;
var bool MeleeLocked;
var() noexport float MinProjectileInterval "Minimum time between projectiles";
var() noexport float RndProjectileInterval "Random time between projectiles (added to MinProjectileInterval)";
var() noexport float PickupTKObjInterval "Wait at least this long in between picking up tk objects";
var() noexport float ChanceLockMelee "Percentage chance of locking melee after each melee attack";
var() noexport float ChanceUnlockMelee "Percentage chance of unlocking melee after each shot fired";
var() float PainKLinearDamping;
var() float CorpseImpulseMomentumScale;
var() float LightFadeOutTime;
var() float LightFadeInTime;
var() bool FadeLightIn;
var float EffectScale;
var MaterialEx ChargeMaterial;

simulated event bool CanBreatheNormally()
{
    return true;
    return;
}

event PostBeginPlay()
{
    super.PostBeginPlay();
    /* Statement decompilation error: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
        
    */

    // End:0x58
    /*@Error*/;
    // Failed to format nests!:System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at UELib.Core.UStruct.UByteCodeDecompiler.DecompileNests(Boolean outputAllRemainingNests)
   at UELib.Core.UStruct.UByteCodeDecompiler.Decompile()
    // 2 & Type:If Position:0x058
    // Failed to format remaining nests!:System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at UELib.Core.UStruct.UByteCodeDecompiler.DecompileNests(Boolean outputAllRemainingNests)
   at UELib.Core.UStruct.UByteCodeDecompiler.Decompile()
    // 2 & Type:If Position:0x058
}

event bool ShouldCatchTKObj(InteractiveActor CandidateTKObj, optional bool bCheckLOS)
{
    local Engine.BaseAI.EAIOp MyOp;
    local Vector CandidateVel;
    local bool IsThrownOrFired;

    // End:0x0B
    if(IsFrozen())
    {
        return false;
    }
    // End:0x30
    if(__NFUN_339__(CandidateTKObj, none) < CandidateTKObj.bTelekineticable / )
    {
    }
    // End:0x3B
    if(CurrentOpMustFinish)
    {
        return false;
    }
    // End:0x83
    if((__NFUN_339__(CandidateTKObj.Owner, self) < __NFUN_340__(CandidateTKObj.CarriedBy, none)) < __NFUN_339__(CandidateTKObj.Instigator, self))
    {
        return false;
    }
    // End:0x8B
    if(__NFUN_921__())
    {
        return false;
    }
    // End:0xB7
    if(__NFUN_202__(FMin(__NFUN_239__(CandidateTKObj.Location, Location) % ), MinTKDot))
    {
        return false;
    }
    // End:0xC8
    if(int(GetExecutive()) % int(1))
    {
        return true;
    }
    // End:0xEB
    if(__NFUN_340__(TKObj, none) << CandidateTKObj.bTelekineticableSingleOnly)
    {
        return false;
    }
    MyOp = GetCurrentOp();
    // End:0x107
    if(IsTKIgnoreClass(CandidateTKObj))
    {
        return false;
    }
    // End:0x178
    if((__NFUN_340__(Projectile(CandidateTKObj), none) << __NFUN_340__(Projectile(CandidateTKObj).Instigator, self)) < __NFUN_340__(Instigator, none) << CandidateTKObj.__NFUN_794__(CandidateVel) << Repl(VRand(CandidateVel), 300))
    {
        IsThrownOrFired = true;        
    }
    else
    {
        IsThrownOrFired = false;
    }
    // End:0x236
    if(IsThrownOrFired / )
    {
        {
            return false;
        }
        // End:0x1A9
        if(int(AttackConstraint) % int(3))
        {
            return false;
        }
        // End:0x1C4
        if(Repl(PickupTKObjGate, Level.GameTimeSeconds))
        {
            return false;
        }
        // End:0x1D5
        if(int(GetCurrentOp()) % int(62))
        {
            return false;
        }
        // End:0x208
        if((PrimaryTarget.IsValidTarget() / ) < )
        {
        }
        // End:0x236
        if(bCheckLOS)
        {
            // End:0x236
            if(CandidateTKObj.Region.iZone + Region.iZone)
            {
                return false;
            }
        }
    }
    return true;
    return;
}

event NotifySetTargetActor()
{
    super.NotifySetTargetActor();
    return;
}

event CreateShootProjectileEffects()
{
    CreateEyebrow();
    CreateCharge();
    return;
}

event DestroyShootProjectileEffects()
{
    // End:0x20
    if(__NFUN_340__(Eyebrow, none))
    {
        Eyebrow.__NFUN_614__();
        Eyebrow = none;
    }
    // End:0x40
    if(__NFUN_340__(Charge, none))
    {
        Charge.__NFUN_614__();
        Charge = none;
    }
    return;
}

function bool CreateEyebrow()
{
    // End:0xB5
    if(__NFUN_339__(Eyebrow, none))
    {
        Eyebrow = __NFUN_615__(class'dnOctabrainFX_BrainChargeA', self);
        // End:0x3F
        if(__NFUN_204__(DrawScale, 1))
        {
            Eyebrow.__NFUN_591__(EffectScale);            
        }
        else
        {
            Eyebrow.__NFUN_591__(DrawScale);
        }
        // End:0x5F
        if(__NFUN_339__(Eyebrow, none))
        {
            return false;
        }
        Eyebrow.MountType = 2;
        Eyebrow.MountMeshItem = 'eyelid_m1';
        Eyebrow.__NFUN_635__(self);
        Eyebrow.__NFUN_567__(Name);
        Eyebrow.__NFUN_642__(9);
    }
    return true;
    return;
}

function bool CreateCharge()
{
    bDoOverlayEffect = true;
    OverlayMaterial = ChargeMaterial;
    OverlayEffectAlpha = 0;
    FadeOverlayEffect(1, 0.1);
    __NFUN_589__('Generic1', NewColorBytes(140, 168, 215), 0.1);
    return true;
    return;
}

function NotifyTeleKinesisStarted(InteractiveActor TeleKinesisActor)
{
    super.NotifyTeleKinesisStarted(TeleKinesisActor);
    CreateShootProjectileEffects();
    FindSoundAndSpeak('Sound_Telekinesis');
    return;
}

function NotifyTeleKinesisStopped(InteractiveActor TeleKinesisActor)
{
    super.NotifyTeleKinesisStopped(TeleKinesisActor);
    // End:0x20
    if(int(GetCurrentOp()) + int(117))
    {
        DestroyShootProjectileEffects();
    }
    bDoOverlayEffect = false;
    FadeOverlayEffect(0, 0.1);
    __NFUN_589__('Generic1', NewColorBytes(0, 0, 0), 0.1);
    PickupTKObjGate = Level.GameTimeSeconds *= PickupTKObjInterval;
    __NFUN_698__(14, 0.25, 0, 1);
    return;
}

function DischargeTKObj(Vector Vel, bool Constrain)
{
    // End:0x37
    if(DebugTK)
    {
        DrawArrow(TKObj.Location, Vel % , 255, 0, 0, 255, 5);
    }
    TKObj.TelekineticThrow(Vel, Constrain);
    TKObj = none;
    // End:0x9F
    ProjectileGate = (Level.GameTimeSeconds *= MinProjectileInterval) *= FRand( /= RndProjectileInterval);
    {
    }
    // End:0xB6
    if(Constrain)
    {
        FindSoundAndSpeak('Sound_Telekinesis_Throw');        
    }
    else
    {
        __NFUN_698__(14, 0.25, 0, 1);
    }
    return;
}

simulated function TeleKinesisSoundFadedOut()
{
    __NFUN_695__(14);
    return;
}

function float RateHackTilAnimsReady()
{
    // End:0x18
    if(int(GetCurrentOp()) % int(62))
    {
        return 1.66;        
    }
    else
    {
        return 1;
    }
    return;
}

function Anim_MoveTo_StrafeLeft(Engine.BaseAI.EAIMoveSpeed eMoveSpeed)
{
    FindSoundAndSpeak('Sound_Pursuit');
    PlayAnim('Anim_SidestepLeft', RateHackTilAnimsReady());
    return;
}

function Anim_MoveTo_StrafeRight(Engine.BaseAI.EAIMoveSpeed eMoveSpeed)
{
    FindSoundAndSpeak('Sound_Pursuit');
    PlayAnim('Anim_SidestepRight', RateHackTilAnimsReady());
    return;
}

function Anim_Run()
{
    FindSoundAndSpeak('Sound_Pursuit');
    PlayAnim('Anim_Run', RateHackTilAnimsReady());
    return;
}

function Anim_RunBackward()
{
    FindSoundAndSpeak('Sound_Pursuit');
    PlayAnim('Anim_RunBackwards', RateHackTilAnimsReady());
    return;
}

animevent simulated function NotifySlash(optional EventInfo AnimEventInfo)
{
    // End:0x31
    if(((MeleeLocked / ) << ) << MeleeLocked = true)
    {
    }
    // End:0x62
    if(ApplyDamage(class'TentacleDamage', int(ClawDamageAmount), ClawDamageVel, 4))
    {
        FindSoundAndSpeak('Sound_Enemy_Thrown');
    }
    return;
}

animevent simulated function NotifyBite(optional EventInfo AnimEventInfo)
{
    // End:0x31
    if(((MeleeLocked / ) << ) << MeleeLocked = true)
    {
    }
    // End:0x62
    if(ApplyDamage(class'BiteDamage', int(BiteDamageAmount), BiteDamageVel, 4))
    {
        FindSoundAndSpeak('Sound_Enemy_Thrown');
    }
    return;
}

animevent simulated function NotifyCharge(optional EventInfo AnimEventInfo)
{
    FindSoundAndSpeak('Sound_Charge');
    return;
}

animevent simulated function NotifyFire(optional EventInfo AnimEventInfo)
{
    local dnProjectile Proj;

    Proj = FireProjectile('None', ProjectileClass, CalcLeadTime(ProjectileClass.default.MaxSpeed), false);
    // End:0xF0
    if(__NFUN_340__(Proj, none))
    {
        // End:0x5C
        if(__NFUN_204__(DrawScale, 1))
        {
            Proj.__NFUN_591__(EffectScale);            
        }
        else
        {
            Proj.__NFUN_591__(DrawScale);
        }
        bDoOverlayEffect = false;
        FadeOverlayEffect(0, 0.1);
        __NFUN_589__('Generic1', NewColorBytes(0, 0, 0), 0.1);
        FindSoundAndSpeak('Sound_FireBrainBlast');
        // End:0xF0
        ProjectileGate = (Level.GameTimeSeconds *= MinProjectileInterval) *= FRand( /= RndProjectileInterval);
        {
        }
    }
    // End:0x102
    if(__NFUN_339__(TKObj, none))
    {
        DestroyShootProjectileEffects();
    }
    // End:0x116
    if(__NFUN_340__(MountedLightEx, none))
    {
        FadeLightIn = false;
    }
    return;
}

animevent simulated function NotifyIdle(optional EventInfo AnimEventInfo)
{
    // End:0x2E
    if((PrimaryTarget.IsValidTarget() / ) < )
    {
    }
    return;
}

event Engine.BaseAI.EAICode COND_NeedToMoveToAttack()
{
    // End:0x18
    if(PrimaryTarget.IsValidTarget() / )
    {
    }
    return 0;
    return;
}

event Engine.BaseAI.EAICode COND_ShouldGotoAttack()
{
    local Engine.BaseAI.EAICode Code;

    Code = COND_NeedToMoveToAttack();
    // End:0x20
    if(int(Code) + int(0))
    {
        return Code;
    }
    // End:0x3F
    if(((SetGoal(9)) / ) << return 53)
    {
    }
    return;
}

event Engine.BaseAI.EAICode COND_ShouldShootProjectile()
{
    local Engine.BaseAI.EAICode Code;

    // End:0x0F
    if(__NFUN_340__(TKObj, none))
    {
        return 30;
    }
    // End:0x27
    if(PrimaryTarget.IsValidTarget() / )
    {
    }
    // End:0x38
    if(int(AttackConstraint) % int(3))
    {
        return 72;
    }
    // End:0x54
    if(__NFUN_200__(Level.GameTimeSeconds, ProjectileGate))
    {
        return 60;
    }
    Code = CheckCondition(45);
    // End:0x76
    if(int(Code) + int(0))
    {
        return Code;
    }
    return 0;
    return;
}

event Engine.BaseAI.EAICode COND_ShouldMelee()
{
    local Engine.BaseAI.EAICode Code;
    local float DistToTarget;
    local Pawn pawnTarget;

    // End:0x07
    if(true)
    {
        return 72;
    }
    pawnTarget = Pawn(PrimaryTargetActor);
    // End:0x3E
    if(__NFUN_340__(pawnTarget, none) << __NFUN_340__(pawnTarget.InteractiveDecoration, none))
    {
        return 1;
    }
    // End:0x5F
    if((int(AttackConstraint) % int(1)) < int(AttackConstraint) % int(3))
    {
        return 0;
    }
    // End:0x73
    if(int(CheckCondition(20)) + int(0))
    {
        return 1;
    }
    // End:0x84
    if(int(AttackConstraint) % int(2))
    {
        return 72;
    }
    // End:0x90
    if(MeleeLocked)
    {
        return 1;
    }
    return CheckCondition(91);
    return;
}

event Engine.BaseAI.EAICode COND_ShouldEndMelee()
{
    // End:0x21
    if((int(AttackConstraint) % int(1)) < int(AttackConstraint) % int(3))
    {
        return 73;
    }
    // End:0x3D
    if((int(AttackConstraint) % int(2)) < MeleeLocked)
    {
        return 0;
    }
    return 1;
    return;
}

function DiedActivity(optional Pawn Killer, optional int Damage, optional Vector DamageOrigin, optional Vector DamageDirection, optional class<DamageType> DamageType, optional name HitBoneName)
{
    // End:0x18
    if(__NFUN_357__(DamageType, class'ExplosionDamage'))
    {
        bInstaGib = true;
    }
    // End:0x3B
    if(__NFUN_340__(TKObj, none))
    {
        TKObj.StopTelekinesis();
        TKObj = none;
    }
    __NFUN_589__('Generic1', NewColorBytes(0, 0, 0), 0.025);
    super.DiedActivity(Killer, Damage, DamageOrigin, DamageDirection, DamageType, HitBoneName);
    return;
}

event NotifyOpStarted(Engine.BaseAI.EAIOp NewOp, Engine.BaseAI.EAIOp OldOp)
{
    super.NotifyOpStarted(NewOp, OldOp);
    // End:0x29
    if(int(NewOp) % int(96))
    {
        KLinearDamping = PainKLinearDamping;
    }
    // End:0x58
    if(int(NewOp) % int(117))
    {
        FadeLightIn = true;
        __NFUN_589__('Generic1', NewColorBytes(255, 255, 255), 0.5);
    }
    // End:0xAC
    if(__NFUN_340__(TKObj, none) << int(GetExecutive()) + int(1))
    {
        switch(NewOp)
        {
            // End:0x82
            case 13:
            // End:0x87
            case 141:
            // End:0x8F
            case 103:
                // End:0xAC
                break;
            // End:0xFFFF
            default:
                TKObj.StopTelekinesis();
                TKObj = none;
                // End:0xAC
                break;
                break;
        }
    }
    return;
}

event NotifyOpEnded(Engine.BaseAI.EAIOp Op, Engine.BaseAI.EAIOpStatus Status)
{
    super.NotifyOpEnded(Op, Status);
    // End:0x29
    if(int(Op) % int(96))
    {
        KLinearDamping = default.KLinearDamping;
    }
    return;
}

function dnProjectile FireProjectile(name MuzzleName, class<dnProjectile> ProjClass, float LeadTime, bool CheckLOS)
{
    __NFUN_589__('Generic1', NewColorBytes(0, 0, 0), 0.025);
    return super.FireProjectile(MuzzleName, ProjClass, LeadTime, CheckLOS);
    return;
}

function float CalculateFlyContraintStrengthScalar(float DeltaTime)
{
    return super.CalculateFlyContraintStrengthScalar(DeltaTime);
    return;
}

simulated function ApplyDeathImpulse(KarmaActor ImpulseCorpse, int Damage, class<DamageType> DamageType, Vector DamageOrigin, Vector DamageDir, name BoneName, Pawn DeathInstigator)
{
    local float DirectionalDot, DrawScaleDifference;
    local Vector CorpseGravity, DamageMomentum;
    local bool bSteroids;

    // End:0x110
    if(__NFUN_340__(DamageType, none) << __NFUN_340__(ImpulseCorpse, none))
    {
        CorpseGravity = ImpulseCorpse.__NFUN_640__();
        DrawScaleDifference = 1;
        // End:0x8F
        if(__NFUN_340__(DeathInstigator, none) << __NFUN_206__(DeathInstigator.DrawScale, DeathInstigator.default.DrawScale))
        {
            DrawScaleDifference = DeathInstigator.DrawScale >>> DeathInstigator.default.DrawScale;
        }
        // End:0xB2
        if(__NFUN_340__(DeathInstigator, none))
        {
            bSteroids = DeathInstigator.bOnSteroids;
        }
        DamageMomentum = Right(Right(Caps(DrawScaleDifference, ImpulseCorpse.GenerateDamageMomentum(DamageDir, DamageType, DrawScaleDifference, bSteroids)), DamageType.default.DeathMomentumScale), CorpseImpulseMomentumScale);
        ImpulseCorpse.__NFUN_790__(DamageMomentum, 3);
    }
    return;
}

event float GetDefaultGotoXRange(float Range)
{
    return 35;
    return;
}

function AIScaleDamage(Pawn Instigator, out float Damage, Engine.Object.EPawnBodyPart Part, Vector DamageOrigin, Vector DamageDirection, class<DamageType> DamageType, optional name HitBoneName, optional Vector DamageStart)
{
    // End:0x0E
    if(__NFUN_339__(Instigator, self))
    {
        return;
    }
    super.AIScaleDamage(Instigator, Damage, Part, DamageOrigin, DamageDirection, DamageType, HitBoneName, DamageStart);
    return;
}

function Vector GetFireAimAtPos()
{
    local Vector EndPos;

    EndPos = PrimaryTarget.GetBodyPos();
    return EndPos;
    return;
}

event Tick(float DeltaSeconds)
{
    super(Actor).Tick(DeltaSeconds);
    // End:0x16C
    if(__NFUN_340__(MountedLightEx, none))
    {
        // End:0xD2
        if((int(GetCurrentOp()) % int(117)) << FadeLightIn)
        {
            MountedLightEx.LightRadius = (MountedLightEx.LightRadius *= FRand(MountedLightEx.default.LightRadius, DeltaSeconds >>> LightFadeInTime)) -= MountedLightEx.default.LightRadius;
            MountedLightEx.LightIntensity = (MountedLightEx.LightIntensity *= FRand(MountedLightEx.default.LightIntensity, DeltaSeconds >>> LightFadeInTime)) -= MountedLightEx.default.LightIntensity;            
        }
        else
        {
            MountedLightEx.LightRadius = VSize(Round(MountedLightEx.LightRadius, FRand(MountedLightEx.default.LightRadius, DeltaSeconds >>> LightFadeOutTime)), 0);
            MountedLightEx.LightIntensity = VSize(Round(MountedLightEx.LightIntensity, FRand(MountedLightEx.default.LightIntensity, DeltaSeconds >>> LightFadeOutTime)), 0);
        }
        MountedLightEx.MarkDirty();
    }
    return;
}

simulated function TripMineAttached(Actor TripMineActor, float AutoDetonateTime)
{
    bForceHaywire = true;
    CanUseOp(80);
    HaywireParms.HitNormal = Vector(TripMineActor.Rotation);
    CurrentOpMustFinish = false;
    SuspendExecutive(true);
    SuspendWeaponTargetEvaluation(true);
    SuspendLookTargetEvaluation(true);
    ExecuteOp(80);
    bForceHaywire = false;
    return;
}

simulated function BecomeFrozen()
{
    CurrentOpMustFinish = false;
    ExecuteOp(85);
    CurrentOpMustFinish = true;
    super.BecomeFrozen();
    DestroyShootProjectileEffects();
    bDoOverlayEffect = false;
    FadeOverlayEffect(0, 0.1);
    __NFUN_589__('Generic1', NewColorBytes(0, 0, 0), 0.1);
    DropTKObjStraightDown();
    return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
    local InteractiveActor TKObj;

    super(Pawn).RegisterPrecacheComponents(PrecacheIndex);
    PrecacheIndex.__NFUN_1266__(class'dnOctabrainFX_BrainChargeA');
    // End:0xC8
    foreach __NFUN_747__(class'InteractiveActor', TKObj)
    {
        // End:0x46
        if(TKObj.bTelekineticable / )
        {            
        }
        // End:0x87
        if(TraceActors(TKObj.TelekinesisChargeClassName, ""))
        {
            PrecacheIndex.__NFUN_1266__(class<Actor>(__NFUN_366__(string(TKObj.TelekinesisCharge), class'Class')));
        }
        // End:0xC7
        if(TraceActors(TKObj.TelekinesisBeamSystemClassName, ""))
        {
            PrecacheIndex.__NFUN_1266__(class<Actor>(__NFUN_366__(TKObj.TelekinesisBeamSystemClassName, class'Class')));
        }        
    }    
    PrecacheIndex.__NFUN_1269__(ChargeMaterial);
    RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_Idle');
    RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_Run');
    RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_RunBackwards');
    RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_TurnLeft45');
    RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_TurnLeft180');
    RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_TurnRight45');
    RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_TurnRight180');
    RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_SidestepLeft');
    RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_SidestepRight');
    RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_Attack');
    RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_ShootProjectile');
    RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_CatchTKObj0');
    RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_ThrowTKObj0');
    RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_ReleaseTKObj');
    PrecacheIndex.__NFUN_1279__(class'BiteDamage');
    PrecacheIndex.__NFUN_1279__(class'TentacleDamage');
    PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_Attack_Bite');
    PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_Attack_Throw');
    PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_Charge');
    PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_Enemy_Thrown');
    PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_FireBrainBlast');
    PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_Idle');
    PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_PreFire');
    PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_Pursuit');
    PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_Telekinesis');
    PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_Telekinesis_Throw');
    return;
}

event EnumerateUsableAnimationControllers(PrecacheIndex PrecacheIndex, out array<Engine.BaseAI.EAIAnimController> UsableControllers)
{
    UsableControllers[string(UsableControllers)] = 1;
    return;
}

state AnimX
{
    event BeginState()
    {
        local Engine.BaseAI.EAIOp MyOp;

        super.BeginState();
        MyOp = GetCurrentOp();
        // End:0x23
        if(int(MyOp) % int(92))
        {            
        }
        else
        {
            // End:0x3C
            if(int(MyOp) % int(117))
            {
                FindSoundAndSpeak('Sound_PreFire');
            }
        }
        return;
    }

    function MovementFudgeActor(Actor MoveTarget, float Speed)
    {
        __NFUN_889__(MoveTarget);
        return;
    }
    stop;
}

defaultproperties
{
    MeleeLocked=true
    MinProjectileInterval=1
    RndProjectileInterval=4
    PickupTKObjInterval=1
    ChanceLockMelee=0.25
    ChanceUnlockMelee=0.35
    PainKLinearDamping=0.5
    CorpseImpulseMomentumScale=0.1
    LightFadeOutTime=0.25
    LightFadeInTime=0.25
    EffectScale=1
    ChargeMaterial='dt_Effects2.Overlays.EnergyOverlay_FB'
    MountedLightExMountPrefab=(bSkipVerifySelf=false,SpawnClass='Octabrain_MountedLightEx',SpawnChance=1,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=true,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=None,ForceEvent=None,MountMeshItem=None,MountOrigin=(X=0,Y=0,Z=0),MountOriginVariance=(X=0,Y=0,Z=0),MountAngles=(Pitch=0,Yaw=0,Roll=0),MountAnglesVariance=(Pitch=0,Yaw=0,Roll=0),MountType=0,DismountPhysics=0),RenderObject=none,DrawScale=0)
    Nodes(0)=(Ident=Root,Status=0,ReportedInvalid=false,SucCond=1,SucFunc=None,FailCond=1,FailFunc=None,Op=0,OpRef=0,SharedTransitions=none,StateTable=none,CurStateIndex=0)
    Nodes(1)=(Ident=Guard,Status=0,ReportedInvalid=false,SucCond=76,SucFunc=None,FailCond=1,FailFunc=None,Op=0,OpRef=0,SharedTransitions=none,StateTable=none,CurStateIndex=0)
    Nodes(2)=(Ident=GotoGuardAttack,Status=0,ReportedInvalid=false,SucCond=61,SucFunc=None,FailCond=1,FailFunc=None,Op=0,OpRef=0,SharedTransitions=none,StateTable=none,CurStateIndex=0)
    Nodes(3)=(Ident=GotoGuardPos,Status=0,ReportedInvalid=false,SucCond=79,SucFunc=None,FailCond=1,FailFunc=None,Op=0,OpRef=0,SharedTransitions=none,StateTable=none,CurStateIndex=0)
    Nodes(4)=(Ident=Attack,Status=0,ReportedInvalid=false,SucCond=7,SucFunc=None,FailCond=10,FailFunc=None,Op=0,OpRef=0,SharedTransitions=none,StateTable=none,CurStateIndex=0)
    Nodes(5)=(Ident=AttackMelee,Status=0,ReportedInvalid=false,SucCond=7,SucFunc=None,FailCond=1,FailFunc=None,Op=0,OpRef=0,SharedTransitions=none,StateTable=none,CurStateIndex=0)
    Nodes(6)=(Ident=AttackWeapon,Status=0,ReportedInvalid=false,SucCond=7,SucFunc=None,FailCond=1,FailFunc=None,Op=0,OpRef=0,SharedTransitions=none,StateTable=none,CurStateIndex=0)
    Nodes(7)=(Ident=AttackActionPoint,Status=0,ReportedInvalid=false,SucCond=7,SucFunc=None,FailCond=1,FailFunc=None,Op=0,OpRef=0,SharedTransitions=none,StateTable=none,CurStateIndex=0)
    Nodes(8)=(Ident=TK,Status=0,ReportedInvalid=false,SucCond=1,SucFunc=None,FailCond=89,FailFunc=None,Op=0,OpRef=0,SharedTransitions=none,StateTable=none,CurStateIndex=0)
    Nodes(9)=(Ident=AvoidDanger,Status=0,ReportedInvalid=false,SucCond=1,SucFunc=None,FailCond=1,FailFunc=None,Op=0,OpRef=0,SharedTransitions=none,StateTable=none,CurStateIndex=0)
    Nodes(10)=(Ident=Wait,Status=0,ReportedInvalid=false,SucCond=1,SucFunc=None,FailCond=1,FailFunc=None,Op=0,OpRef=0,SharedTransitions=none,StateTable=none,CurStateIndex=0)
    Nodes(11)=(Ident=Default,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=85,OpRef=0,SharedTransitions=none,StateTable=none,CurStateIndex=0)
    Nodes(12)=(Ident=Pain,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=96,OpRef=0,SharedTransitions=none,StateTable=none,CurStateIndex=0)
    Nodes(13)=(Ident=idle,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=85,OpRef=0,SharedTransitions=none,StateTable=none,CurStateIndex=0)
    Nodes(14)=(Ident=IdleEx,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=86,OpRef=0,SharedTransitions=none,StateTable=none,CurStateIndex=0)
    Nodes(15)=(Ident=FaceTarget,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=145,OpRef=0,SharedTransitions=none,StateTable=none,CurStateIndex=0)
    Nodes(16)=(Ident=FaceGuardedActor,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=143,OpRef=0,SharedTransitions=none,StateTable=none,CurStateIndex=0)
    Nodes(17)=(Ident=GotoGoalFacePosOneStep,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=48,OpRef=0,SharedTransitions=none,StateTable=none,CurStateIndex=0)
    Nodes(18)=(Ident=GotoMeleeRangeFocusActor,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=66,OpRef=0,SharedTransitions=none,StateTable=none,CurStateIndex=0)
    Nodes(19)=(Ident=GotoGuardMeleeAttack,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=66,OpRef=0,SharedTransitions=none,StateTable=none,CurStateIndex=0)
    Nodes(20)=(Ident=Search,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=71,OpRef=0,SharedTransitions=none,StateTable=none,CurStateIndex=0)
    Nodes(21)=(Ident=GotoGoalFocusTargetFullBody,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=53,OpRef=0,SharedTransitions=none,StateTable=none,CurStateIndex=0)
    Nodes(22)=(Ident=GotoGoalFocusGuardedActorFullBody,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=45,OpRef=0,SharedTransitions=none,StateTable=none,CurStateIndex=0)
    Nodes(23)=(Ident=StepAside,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=45,OpRef=0,SharedTransitions=none,StateTable=none,CurStateIndex=0)
    Nodes(24)=(Ident=MeleeAttack,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=92,OpRef=0,SharedTransitions=none,StateTable=none,CurStateIndex=0)
    Nodes(25)=(Ident=ShootProjectile,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=117,OpRef=0,SharedTransitions=none,StateTable=none,CurStateIndex=0)
    Nodes(26)=(Ident=CatchTK,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=13,OpRef=0,SharedTransitions=none,StateTable=none,CurStateIndex=0)
    Nodes(27)=(Ident=ThrowTK,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=141,OpRef=0,SharedTransitions=none,StateTable=none,CurStateIndex=0)
    Nodes(28)=(Ident=ReleaseTK,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=103,OpRef=0,SharedTransitions=none,StateTable=none,CurStateIndex=0)
    FSMStates(0)=(FSM=Root,Ident=Default,FSMSucc=false,FSMFail=false,Transitions=((Ident=Pain,Cond=0,Func=None,Win=0,Code=0,StateTableIndex=0),(Ident=AvoidDanger,Cond=0,Func=COND_ShouldAvoidTarget,Win=0,Code=0,StateTableIndex=0),(Ident=TK,Cond=0,Func=COND_ShouldCatchTKObj,Win=0,Code=0,StateTableIndex=0),(Ident=Guard,Cond=75,Func=None,Win=0,Code=0,StateTableIndex=0),(Ident=Attack,Cond=6,Func=None,Win=1,Code=0,StateTableIndex=0),(Ident=Wait,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(1)=(FSM=Root,Ident=Pain,FSMSucc=false,FSMFail=false,Transitions=((Ident=Attack,Cond=2,Func=None,Win=0,Code=0,StateTableIndex=0),(Ident=TK,Cond=0,Func=COND_ShouldCatchTKObj,Win=0,Code=0,StateTableIndex=0),(Ident=ShootProjectile,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0),(Ident=AvoidDanger,Cond=0,Func=COND_ShouldAvoidTarget,Win=1,Code=0,StateTableIndex=0),(Ident=TK,Cond=0,Func=COND_ShouldCatchTKObj,Win=1,Code=0,StateTableIndex=0),(Ident=Guard,Cond=75,Func=None,Win=1,Code=0,StateTableIndex=0),(Ident=Attack,Cond=6,Func=None,Win=1,Code=0,StateTableIndex=0),(Ident=Search,Cond=3,Func=None,Win=1,Code=0,StateTableIndex=0),(Ident=Wait,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(2)=(FSM=Root,Ident=Attack,FSMSucc=false,FSMFail=false,Transitions=((Ident=Pain,Cond=0,Func=None,Win=0,Code=0,StateTableIndex=0),(Ident=AvoidDanger,Cond=0,Func=COND_ShouldAvoidTarget,Win=0,Code=0,StateTableIndex=0),(Ident=TK,Cond=0,Func=COND_ShouldCatchTKObj,Win=0,Code=0,StateTableIndex=0),(Ident=Guard,Cond=75,Func=None,Win=0,Code=0,StateTableIndex=0),(Ident=Attack,Cond=6,Func=None,Win=1,Code=0,StateTableIndex=0),(Ident=Search,Cond=3,Func=None,Win=1,Code=0,StateTableIndex=0),(Ident=Wait,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(3)=(FSM=Root,Ident=Wait,FSMSucc=false,FSMFail=false,Transitions=((Ident=Pain,Cond=0,Func=None,Win=0,Code=0,StateTableIndex=0),(Ident=AvoidDanger,Cond=0,Func=COND_ShouldAvoidTarget,Win=0,Code=0,StateTableIndex=0),(Ident=TK,Cond=0,Func=COND_ShouldCatchTKObj,Win=0,Code=0,StateTableIndex=0),(Ident=Guard,Cond=75,Func=None,Win=0,Code=0,StateTableIndex=0),(Ident=Attack,Cond=6,Func=None,Win=0,Code=0,StateTableIndex=0),(Ident=Search,Cond=3,Func=None,Win=0,Code=0,StateTableIndex=0),(Ident=Wait,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(4)=(FSM=Root,Ident=Guard,FSMSucc=false,FSMFail=false,Transitions=((Ident=Pain,Cond=0,Func=None,Win=0,Code=0,StateTableIndex=0),(Ident=AvoidDanger,Cond=0,Func=COND_ShouldAvoidTarget,Win=0,Code=0,StateTableIndex=0),(Ident=TK,Cond=0,Func=COND_ShouldCatchTKObj,Win=0,Code=0,StateTableIndex=0),(Ident=Attack,Cond=6,Func=None,Win=1,Code=0,StateTableIndex=0),(Ident=Search,Cond=3,Func=None,Win=1,Code=0,StateTableIndex=0),(Ident=Wait,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(5)=(FSM=Root,Ident=TK,FSMSucc=false,FSMFail=false,Transitions=((Ident=Pain,Cond=0,Func=None,Win=0,Code=0,StateTableIndex=0),(Ident=TK,Cond=0,Func=COND_ShouldCatchTKObj,Win=1,Code=0,StateTableIndex=0),(Ident=Guard,Cond=75,Func=None,Win=1,Code=0,StateTableIndex=0),(Ident=Attack,Cond=5,Func=None,Win=1,Code=0,StateTableIndex=0),(Ident=Search,Cond=3,Func=None,Win=1,Code=0,StateTableIndex=0),(Ident=Wait,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(6)=(FSM=Root,Ident=AvoidDanger,FSMSucc=false,FSMFail=false,Transitions=((Ident=AvoidDanger,Cond=0,Func=COND_ShouldAvoidTarget,Win=1,Code=0,StateTableIndex=0),(Ident=Attack,Cond=2,Func=None,Win=1,Code=0,StateTableIndex=0),(Ident=Attack,Cond=5,Func=None,Win=0,Code=0,StateTableIndex=0),(Ident=Wait,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(7)=(FSM=Root,Ident=ShootProjectile,FSMSucc=false,FSMFail=false,Transitions=((Ident=Pain,Cond=0,Func=None,Win=0,Code=0,StateTableIndex=0),(Ident=AvoidDanger,Cond=0,Func=COND_ShouldAvoidTarget,Win=0,Code=0,StateTableIndex=0),(Ident=TK,Cond=0,Func=COND_ShouldCatchTKObj,Win=0,Code=0,StateTableIndex=0),(Ident=Guard,Cond=75,Func=None,Win=0,Code=0,StateTableIndex=0),(Ident=Attack,Cond=6,Func=None,Win=1,Code=0,StateTableIndex=0),(Ident=Wait,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(8)=(FSM=Root,Ident=Search,FSMSucc=false,FSMFail=false,Transitions=((Ident=Pain,Cond=0,Func=None,Win=0,Code=0,StateTableIndex=0),(Ident=TK,Cond=0,Func=COND_ShouldCatchTKObj,Win=0,Code=0,StateTableIndex=0),(Ident=AvoidDanger,Cond=0,Func=COND_ShouldAvoidTarget,Win=0,Code=0,StateTableIndex=0),(Ident=Attack,Cond=3,Func=None,Win=0,Code=0,StateTableIndex=0),(Ident=Wait,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(9)=(FSM=Guard,Ident=Default,FSMSucc=true,FSMFail=true,Transitions=((Ident=MeleeAttack,Cond=0,Func=COND_ShouldGuardAttackMelee,Win=0,Code=0,StateTableIndex=0),(Ident=GotoGuardMeleeAttack,Cond=85,Func=None,Win=1,Code=0,StateTableIndex=0),(Ident=AttackActionPoint,Cond=0,Func=COND_ShouldGotoActionPointFlyer,Win=0,Code=0,StateTableIndex=0),(Ident=GotoGuardAttack,Cond=0,Func=COND_ShouldGotoGuardAttack,Win=1,Code=0,StateTableIndex=0),(Ident=GotoGuardPos,Cond=0,Func=COND_ShouldGotoGuardPos,Win=1,Code=0,StateTableIndex=0),(Ident=ShootProjectile,Cond=24,Func=None,Win=1,Code=0,StateTableIndex=0),(Ident=Wait,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(10)=(FSM=Guard,Ident=GotoGuardAttack,FSMSucc=false,FSMFail=false,Transitions=((Ident=MeleeAttack,Cond=0,Func=COND_ShouldGuardAttackMelee,Win=0,Code=0,StateTableIndex=0),(Ident=ShootProjectile,Cond=24,Func=None,Win=1,Code=0,StateTableIndex=0),(Ident=GotoGuardMeleeAttack,Cond=85,Func=None,Win=1,Code=0,StateTableIndex=0),(Ident=GotoGuardPos,Cond=0,Func=COND_ShouldGotoGuardPos,Win=1,Code=0,StateTableIndex=0),(Ident=Wait,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(11)=(FSM=Guard,Ident=GotoGuardMeleeAttack,FSMSucc=false,FSMFail=false,Transitions=((Ident=MeleeAttack,Cond=0,Func=COND_ShouldGuardAttackMelee,Win=0,Code=0,StateTableIndex=0),(Ident=ShootProjectile,Cond=24,Func=None,Win=1,Code=0,StateTableIndex=0),(Ident=GotoGuardPos,Cond=0,Func=COND_ShouldGotoGuardPos,Win=1,Code=0,StateTableIndex=0),(Ident=GotoGuardAttack,Cond=0,Func=COND_ShouldGotoGuardAttack,Win=1,Code=0,StateTableIndex=0),(Ident=Wait,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(12)=(FSM=Guard,Ident=GotoGuardPos,FSMSucc=false,FSMFail=false,Transitions=((Ident=MeleeAttack,Cond=0,Func=COND_ShouldGuardAttackMelee,Win=0,Code=0,StateTableIndex=0),(Ident=GotoGuardMeleeAttack,Cond=85,Func=None,Win=1,Code=0,StateTableIndex=0),(Ident=GotoGuardAttack,Cond=0,Func=COND_ShouldGotoGuardAttack,Win=1,Code=0,StateTableIndex=0),(Ident=ShootProjectile,Cond=24,Func=None,Win=1,Code=0,StateTableIndex=0),(Ident=Wait,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(13)=(FSM=Guard,Ident=MeleeAttack,FSMSucc=false,FSMFail=false,Transitions=((Ident=AttackActionPoint,Cond=0,Func=COND_ShouldGotoActionPointFlyer,Win=1,Code=0,StateTableIndex=0),(Ident=MeleeAttack,Cond=0,Func=COND_ShouldGuardAttackMelee,Win=1,Code=0,StateTableIndex=0),(Ident=GotoGuardMeleeAttack,Cond=85,Func=None,Win=1,Code=0,StateTableIndex=0),(Ident=GotoGuardAttack,Cond=0,Func=COND_ShouldGotoGuardAttack,Win=1,Code=0,StateTableIndex=0),(Ident=GotoGuardPos,Cond=0,Func=COND_ShouldGotoGuardPos,Win=0,Code=0,StateTableIndex=0),(Ident=ShootProjectile,Cond=24,Func=None,Win=1,Code=0,StateTableIndex=0),(Ident=Wait,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(14)=(FSM=Guard,Ident=ShootProjectile,FSMSucc=false,FSMFail=false,Transitions=((Ident=AttackActionPoint,Cond=0,Func=COND_ShouldGotoActionPointFlyer,Win=1,Code=0,StateTableIndex=0),(Ident=MeleeAttack,Cond=0,Func=COND_ShouldGuardAttackMelee,Win=1,Code=0,StateTableIndex=0),(Ident=GotoGuardMeleeAttack,Cond=85,Func=None,Win=1,Code=0,StateTableIndex=0),(Ident=GotoGuardAttack,Cond=0,Func=COND_ShouldGotoGuardAttack,Win=1,Code=0,StateTableIndex=0),(Ident=GotoGuardPos,Cond=0,Func=COND_ShouldGotoGuardPos,Win=1,Code=0,StateTableIndex=0),(Ident=ShootProjectile,Cond=24,Func=None,Win=1,Code=0,StateTableIndex=0),(Ident=Wait,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(15)=(FSM=Guard,Ident=Wait,FSMSucc=false,FSMFail=false,Transitions=((Ident=MeleeAttack,Cond=0,Func=COND_ShouldGuardAttackMelee,Win=0,Code=0,StateTableIndex=0),(Ident=GotoGuardMeleeAttack,Cond=85,Func=None,Win=0,Code=0,StateTableIndex=0),(Ident=GotoGuardPos,Cond=0,Func=COND_ShouldGotoGuardPos,Win=0,Code=0,StateTableIndex=0),(Ident=GotoGuardAttack,Cond=0,Func=COND_ShouldGotoGuardAttack,Win=0,Code=0,StateTableIndex=0),(Ident=ShootProjectile,Cond=24,Func=None,Win=0,Code=0,StateTableIndex=0),(Ident=Wait,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(16)=(FSM=Guard,Ident=AttackActionPoint,FSMSucc=false,FSMFail=false,Transitions=((Ident=MeleeAttack,Cond=0,Func=COND_ShouldGuardAttackMelee,Win=0,Code=0,StateTableIndex=0),(Ident=GotoGuardMeleeAttack,Cond=85,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(17)=(FSM=GotoGuardAttack,Ident=Default,FSMSucc=true,FSMFail=true,Transitions=((Ident=GotoGoalFocusTargetFullBody,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(18)=(FSM=GotoGuardAttack,Ident=GotoGoalFocusTargetFullBody,FSMSucc=true,FSMFail=true,Transitions=none,NodeIndex=0)
    FSMStates(19)=(FSM=GotoGuardPos,Ident=Default,FSMSucc=true,FSMFail=true,Transitions=((Ident=GotoGoalFocusTargetFullBody,Cond=5,Func=None,Win=1,Code=0,StateTableIndex=0),(Ident=GotoGoalFocusGuardedActorFullBody,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(20)=(FSM=GotoGuardPos,Ident=GotoGoalFocusTargetFullBody,FSMSucc=true,FSMFail=true,Transitions=((Ident=GotoGoalFocusGuardedActorFullBody,Cond=9,Func=None,Win=0,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(21)=(FSM=GotoGuardPos,Ident=GotoGoalFocusGuardedActorFullBody,FSMSucc=true,FSMFail=true,Transitions=((Ident=GotoGoalFocusTargetFullBody,Cond=5,Func=None,Win=0,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(22)=(FSM=Attack,Ident=Default,FSMSucc=true,FSMFail=true,Transitions=((Ident=AttackMelee,Cond=0,Func=COND_ShouldMelee,Win=1,Code=0,StateTableIndex=0),(Ident=AttackActionPoint,Cond=0,Func=COND_ShouldGotoActionPointFlyer,Win=1,Code=0,StateTableIndex=0),(Ident=AttackWeapon,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(23)=(FSM=Attack,Ident=AttackMelee,FSMSucc=false,FSMFail=false,Transitions=((Ident=AttackActionPoint,Cond=0,Func=COND_ShouldGotoActionPointFlyer,Win=1,Code=0,StateTableIndex=0),(Ident=AttackMelee,Cond=0,Func=COND_ShouldMelee,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(24)=(FSM=Attack,Ident=AttackWeapon,FSMSucc=false,FSMFail=false,Transitions=((Ident=AttackMelee,Cond=0,Func=COND_ShouldMelee,Win=0,Code=0,StateTableIndex=0),(Ident=AttackActionPoint,Cond=0,Func=COND_ShouldGotoActionPointFlyer,Win=0,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(25)=(FSM=Attack,Ident=AttackActionPoint,FSMSucc=false,FSMFail=false,Transitions=((Ident=AttackMelee,Cond=0,Func=COND_ShouldMelee,Win=0,Code=0,StateTableIndex=0),(Ident=AttackActionPoint,Cond=0,Func=COND_ShouldGotoActionPointFlyer,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(26)=(FSM=AttackMelee,Ident=Default,FSMSucc=true,FSMFail=true,Transitions=((Ident=MeleeAttack,Cond=41,Func=None,Win=1,Code=0,StateTableIndex=0),(Ident=GotoMeleeRangeFocusActor,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0),(Ident=Wait,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(27)=(FSM=AttackMelee,Ident=MeleeAttack,FSMSucc=true,FSMFail=true,Transitions=((Ident=GotoMeleeRangeFocusActor,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0),(Ident=Wait,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(28)=(FSM=AttackMelee,Ident=GotoMeleeRangeFocusActor,FSMSucc=false,FSMFail=false,Transitions=((Ident=ShootProjectile,Cond=0,Func=COND_ShouldShootProjectile,Win=0,Code=0,StateTableIndex=0),(Ident=MeleeAttack,Cond=0,Func=None,Win=0,Code=0,StateTableIndex=0),(Ident=Wait,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(29)=(FSM=AttackMelee,Ident=Wait,FSMSucc=false,FSMFail=false,Transitions=((Ident=ShootProjectile,Cond=0,Func=COND_ShouldShootProjectile,Win=0,Code=0,StateTableIndex=0),(Ident=GotoMeleeRangeFocusActor,Cond=0,Func=None,Win=0,Code=0,StateTableIndex=0),(Ident=MeleeAttack,Cond=41,Func=None,Win=0,Code=0,StateTableIndex=0),(Ident=Wait,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(30)=(FSM=AttackMelee,Ident=ShootProjectile,FSMSucc=false,FSMFail=false,Transitions=((Ident=MeleeAttack,Cond=41,Func=None,Win=1,Code=0,StateTableIndex=0),(Ident=GotoMeleeRangeFocusActor,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0),(Ident=Wait,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(31)=(FSM=AttackWeapon,Ident=Default,FSMSucc=true,FSMFail=true,Transitions=((Ident=ShootProjectile,Cond=0,Func=COND_ShouldShootProjectile,Win=1,Code=0,StateTableIndex=0),(Ident=GotoGoalFocusTargetFullBody,Cond=0,Func=COND_ShouldGotoAttack,Win=1,Code=0,StateTableIndex=0),(Ident=Wait,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(32)=(FSM=AttackWeapon,Ident=ShootProjectile,FSMSucc=false,FSMFail=false,Transitions=((Ident=GotoGoalFocusTargetFullBody,Cond=0,Func=COND_ShouldGotoAttack,Win=1,Code=0,StateTableIndex=0),(Ident=Wait,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(33)=(FSM=AttackWeapon,Ident=GotoGoalFocusTargetFullBody,FSMSucc=false,FSMFail=false,Transitions=((Ident=ShootProjectile,Cond=0,Func=COND_ShouldShootProjectile,Win=0,Code=0,StateTableIndex=0),(Ident=GotoGoalFocusTargetFullBody,Cond=0,Func=COND_ShouldGotoAttack,Win=1,Code=0,StateTableIndex=0),(Ident=Wait,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(34)=(FSM=AttackWeapon,Ident=Wait,FSMSucc=false,FSMFail=false,Transitions=((Ident=ShootProjectile,Cond=0,Func=COND_ShouldShootProjectile,Win=0,Code=0,StateTableIndex=0),(Ident=GotoGoalFocusTargetFullBody,Cond=0,Func=COND_ShouldGotoAttack,Win=0,Code=0,StateTableIndex=0),(Ident=Wait,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(35)=(FSM=AttackActionPoint,Ident=Default,FSMSucc=true,FSMFail=true,Transitions=((Ident=GotoGoalFocusTargetFullBody,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0),(Ident=TK,Cond=0,Func=COND_ShouldPickupTKObj,Win=1,Code=0,StateTableIndex=0),(Ident=ShootProjectile,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0),(Ident=IdleEx,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(36)=(FSM=AttackActionPoint,Ident=GotoGoalFocusTargetFullBody,FSMSucc=false,FSMFail=false,Transitions=((Ident=TK,Cond=0,Func=COND_ShouldPickupTKObj,Win=1,Code=0,StateTableIndex=0),(Ident=ShootProjectile,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0),(Ident=IdleEx,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(37)=(FSM=AttackActionPoint,Ident=ShootProjectile,FSMSucc=false,FSMFail=false,Transitions=((Ident=GotoGoalFocusTargetFullBody,Cond=15,Func=COND_ShouldFlyToNextAP,Win=1,Code=0,StateTableIndex=0),(Ident=TK,Cond=0,Func=COND_ShouldPickupTKObj,Win=1,Code=0,StateTableIndex=0),(Ident=ShootProjectile,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0),(Ident=IdleEx,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(38)=(FSM=AttackActionPoint,Ident=IdleEx,FSMSucc=false,FSMFail=false,Transitions=((Ident=GotoGoalFocusTargetFullBody,Cond=0,Func=COND_ShouldFlyToNextAP,Win=1,Code=0,StateTableIndex=0),(Ident=GotoGoalFocusTargetFullBody,Cond=0,Func=COND_ShouldGotoActionPointFlyer,Win=1,Code=0,StateTableIndex=0),(Ident=TK,Cond=0,Func=COND_ShouldPickupTKObj,Win=1,Code=0,StateTableIndex=0),(Ident=ShootProjectile,Cond=0,Func=None,Win=0,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(39)=(FSM=AttackActionPoint,Ident=TK,FSMSucc=false,FSMFail=false,Transitions=((Ident=GotoGoalFocusTargetFullBody,Cond=15,Func=COND_ShouldFlyToNextAP,Win=1,Code=0,StateTableIndex=0),(Ident=TK,Cond=0,Func=COND_ShouldPickupTKObj,Win=1,Code=0,StateTableIndex=0),(Ident=ShootProjectile,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0),(Ident=IdleEx,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(40)=(FSM=TK,Ident=Default,FSMSucc=true,FSMFail=true,Transitions=((Ident=CatchTK,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(41)=(FSM=TK,Ident=CatchTK,FSMSucc=false,FSMFail=false,Transitions=((Ident=ThrowTK,Cond=0,Func=COND_ShouldThrowTKObj,Win=1,Code=0,StateTableIndex=0),(Ident=ReleaseTK,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(42)=(FSM=TK,Ident=ThrowTK,FSMSucc=true,FSMFail=true,Transitions=((Ident=CatchTK,Cond=0,Func=COND_ShouldCatchTKObj,Win=0,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(43)=(FSM=TK,Ident=ReleaseTK,FSMSucc=true,FSMFail=true,Transitions=((Ident=CatchTK,Cond=0,Func=COND_ShouldCatchTKObj,Win=0,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(44)=(FSM=AvoidDanger,Ident=Default,FSMSucc=true,FSMFail=true,Transitions=((Ident=GotoGoalFacePosOneStep,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0),(Ident=Wait,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(45)=(FSM=AvoidDanger,Ident=GotoGoalFacePosOneStep,FSMSucc=true,FSMFail=true,Transitions=none,NodeIndex=0)
    FSMStates(46)=(FSM=AvoidDanger,Ident=Wait,FSMSucc=true,FSMFail=true,Transitions=none,NodeIndex=0)
    FSMStates(47)=(FSM=Wait,Ident=Default,FSMSucc=true,FSMFail=true,Transitions=((Ident=FaceTarget,Cond=6,Func=None,Win=1,Code=0,StateTableIndex=0),(Ident=StepAside,Cond=0,Func=COND_ShouldStepAside,Win=0,Code=0,StateTableIndex=0),(Ident=FaceGuardedActor,Cond=9,Func=None,Win=1,Code=0,StateTableIndex=0),(Ident=idle,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(48)=(FSM=Wait,Ident=FaceTarget,FSMSucc=false,FSMFail=false,Transitions=((Ident=StepAside,Cond=0,Func=COND_ShouldStepAside,Win=0,Code=0,StateTableIndex=0),(Ident=FaceGuardedActor,Cond=9,Func=None,Win=1,Code=0,StateTableIndex=0),(Ident=idle,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(49)=(FSM=Wait,Ident=idle,FSMSucc=false,FSMFail=false,Transitions=((Ident=FaceTarget,Cond=6,Func=None,Win=0,Code=0,StateTableIndex=0),(Ident=StepAside,Cond=0,Func=COND_ShouldStepAside,Win=0,Code=0,StateTableIndex=0),(Ident=FaceGuardedActor,Cond=9,Func=None,Win=0,Code=0,StateTableIndex=0),(Ident=idle,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(50)=(FSM=Wait,Ident=StepAside,FSMSucc=false,FSMFail=false,Transitions=((Ident=FaceTarget,Cond=6,Func=None,Win=0,Code=0,StateTableIndex=0),(Ident=StepAside,Cond=0,Func=COND_ShouldStepAside,Win=1,Code=0,StateTableIndex=0),(Ident=FaceGuardedActor,Cond=9,Func=None,Win=1,Code=0,StateTableIndex=0),(Ident=idle,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    FSMStates(51)=(FSM=Wait,Ident=FaceGuardedActor,FSMSucc=false,FSMFail=false,Transitions=((Ident=FaceTarget,Cond=6,Func=None,Win=0,Code=0,StateTableIndex=0),(Ident=StepAside,Cond=0,Func=COND_ShouldStepAside,Win=0,Code=0,StateTableIndex=0),(Ident=idle,Cond=0,Func=None,Win=1,Code=0,StateTableIndex=0)),NodeIndex=0)
    WeaponConfig='WeaponCfg_Octabrain'
    ForceWeaponActive=true
    WpnSteadyHorizError=50
    WpnSteadyVertError=50
    WpnMovingHorizError=1000
    WpnMovingVertError=1000
    LeadTimeK=1.3
    ForceDirectShot=true
    UseActionPoints=true
    MinBlinkTime=0
    MaxBlinkTime=0
    HasTKShield=true
    MaxTKDistance=750
    MinTKDot=-1
    Relationships(0)=(m_aClass='Engine.AIFactionHoloduke',m_eAttitude=1,m_fDamageThreshold=1)
    Relationships(1)=(m_aClass='Engine.AIFactionDuke',m_eAttitude=2,m_fDamageThreshold=1)
    Relationships(2)=(m_aClass='Engine.AIFactionHuman',m_eAttitude=2,m_fDamageThreshold=1)
    Relationships(3)=(m_aClass='Engine.AIFactionAlien',m_eAttitude=5,m_fDamageThreshold=1)
    bUseAnimDispDir=false
    BodyAlignRate=4.6
    BodyAlignRateFlying=4.6
    AnimDispSpeedScale=1.75
    IdleInfo(0)=(MinIdleTime=1.5,RndIdleTime=0.5,bFaceTarget=true,AnimName=Anim_Idle)
    AnimControllers[0]=(m_eFallback=0,m_cClass='acOctabrain',m_oController=none)
    AnimControllers[1]=(m_eFallback=1,m_cClass='acOctabrain',m_oController=none)
    AnimControllers[2]=(m_eFallback=1,m_cClass='acOctabrain',m_oController=none)
    AnimControllers[3]=(m_eFallback=1,m_cClass='acOctabrain',m_oController=none)
    AnimControllers[4]=(m_eFallback=1,m_cClass='acOctabrain',m_oController=none)
    AnimControllers[5]=(m_eFallback=1,m_cClass='acOctabrain',m_oController=none)
    AnimControllers[6]=(m_eFallback=1,m_cClass='acOctabrain',m_oController=none)
    AnimControllers[7]=(m_eFallback=1,m_cClass='acOctabrain',m_oController=none)
    AnimControllers[8]=(m_eFallback=1,m_cClass='acOctabrain',m_oController=none)
    HaywireParms=(bAllowHaywire=false,MinTime=0,MaxTime=0,LinearAccel=(X=0,Y=0,Z=0),AngularAccel=(X=0,Y=0,Z=0),HaywireStartTime=0,MinTimeToExplode=0.4,ChanceExplosion=1,HurtRadiusDamage=0,DamageRadius=0,DamageRadiusFallOffStart=0,ExplosionClass=none,ExplosionLight=none,ExplosionSoundName=Sound_HaywireExplosion,HitNormal=(X=0,Y=0,Z=0))
    FaceDeath=false
    MaxConsecutivePainOp=1
    PainImpulseMagnitude=250
    PainImpulseMinDamage=5
    BoneAim(0)=(BoneName=Root,Yaw=0,Pitch=0,Weight=1)
    HasBoneAimer=true
    HasWeaponAimer=true
    ShouldTurnThreshold=10
    FaceThreshold=0
    SideArcTurnSpeedThresh=10
    StartAngleSideSector=60
    StartAngleBackSector=120
    MoveBackwardsDistThresh=50
    SideStepDistThresh=50
    GotoPosRange=1
    GotoPosHeight=1
    GotoPosFlyingRange=1
    GotoPosFlyingHeight=1
    MinDistToGoal=100
    MinMoveAroundDist=100
    RndMoveAroundDist=150
    RndMeleeRange=110
    MinMeleeHeight=50
    RndMeleeHeight=10
    MeleeZone=300
    MeleeZoneHeight=200
    MeleeAttackRange=60
    MeleeAttackArc=1
    MeleeFaceTarget=true
    BiteDamageAmount=10
    BiteDamageVel=(X=250,Y=0,Z=50)
    ClawDamageAmount=10
    ClawDamageVel=(X=250,Y=0,Z=50)
    ProjectileClass='dnGame.dnRocket_BrainBlast'
    MinProjectileFireInterval=3
    MinAirAttackHeight=25
    MaxAirAttackHeight=128
    bIsFlying=true
    PathID=AIPATH_Large
    DynamicPathingPriority=5
    ChanceFly=1
    bCanFly=true
    FluidFrictionScale=0.25
    EyeBone=Head
    BodyBone=torso
    LockOnBone=torso
    CustomKillSoundName=GotKillOctabrain
    CustomKillSoundChance=0.75
    CorpseType='OctabrainCorpse'
    AirSpeed=400
    ExitWoundInfo(0)=(DamageType=none,MinimumDamage=1,RandomChance=1,ExitWoundDecalClass='dnGame.dnExitWound_Human')
    Health=175
    HealthCap=175
    bTakeDamageMomentum=false
    bTakeExplosionDamageMomentum=false
    bIgnoresPhysicsDamage=true
    bCanExistOutOfWorld=false
    CollisionRadius=48
    CollisionHeight=48
    AccelRate=800
    Mass=300
    Mesh='c_characters.Octabrain'
    Skins(0)='dt_Liquids.alienwall.alienwall1bc_main'
    VoicePack='SoundConfig.Enemies.VoicePack_Octabrain'
}