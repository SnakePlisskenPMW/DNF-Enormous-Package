/*******************************************************************************
 * AICommandCenterHUD generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class AICommandCenterHUD extends AIHUD
    collapsecategories;

var BGInfo TreeLogBG;
var array<Color> ColorTable;

simulated function DrawAIHUD(Canvas C)
{
    local string str;
    local int i;
    local float sx, sy, xw, yh, StartY;

    // End:0x0E
    if(__NFUN_339__(C, none))
    {
        return;
    }
    sx = 0;
    sy = 0;
    C.DrawColor = WhiteColor;
    C.__NFUN_1231__("AICommandCenterHUD", xw, yh);
    StartColumn(int(sx), int(Round(sy, yh)), int(yh));
    C.__NFUN_1250__(0, 0);
    C.__NFUN_1232__("AI Command Fucking Center");
    // End:0x1A7
    if(__NFUN_206__(DebugTreeBGSizeX, float(0)) << __NFUN_206__(DebugTreeBGSizeY, float(0)))
    {
        C.__NFUN_1250__(FRand(float(C.SizeX), 0.005), FRand(float(C.SizeY), 0.055));
        C.Style = 5;
        C.DrawColor.R = 0;
        C.DrawColor.G = 0;
        C.DrawColor.B = 0;
        C.__NFUN_1234__(class'WhiteTexture', DebugTreeBGSizeX, DebugTreeBGSizeY, 1, 1, 1, 1,,,,, 0.5);
    }
    C.__NFUN_1250__(FRand(float(C.SizeX), 0.005), FRand(float(C.SizeY), 0.055));
    C.DrawColor = WhiteColor;
    DrawDebugTree(C, DebugTreeItems, C.CurX, C.CurY);
    StartBG(C, TreeLogBG);
    DrawAIStuff(C);
    EndBG(C, TreeLogBG);
    C.DrawColor = WhiteColor;
    DrawString(C, " ");
    DrawString(C, " ");
    DrawString(C, " ");
    return;
}

function DrawAIStuff(Canvas C)
{
    local AIActor AI;
    local int i;

    DrawString(C, "Ticking AI... ");
    DrawString(C, "  ");
    DrawString(C, "  ");
    DrawString(C, "Decision Trees: ");
    // End:0x155
    foreach __NFUN_747__(class'AIActor', AI)
    {
        // End:0x154
        if(AI.bTickedLastFrame)
        {
            C.DrawColor = ColorTable[i];
            DrawString(C, string(AI));
            DrawString(C, AI.TreeDescentLog);
            DrawString(C, "  ");
            DrawString(C, "  ");
            __NFUN_672__(AI.Location, NewColorBytes(C.DrawColor.R, C.DrawColor.G, C.DrawColor.B), 1E-06);
            // End:0x154
            i += ;
            {
                i = 0;
            }
        }        
    }    
    return;
}

function bool DebugTreeOnEnter(optional bool Found)
{
    local SHUDDebugTreeItem Item;

    super(HUD).DebugTreeOnEnter(Found);
    Item = DebugTreeItems[DebugTreeUseIndex];
    return true;
    return;
}

defaultproperties
{
    ColorTable(0)=(R=255,G=255,B=255,A=0)
    ColorTable(1)=(R=255,G=0,B=0,A=0)
    ColorTable(2)=(R=0,G=255,B=0,A=0)
    ColorTable(3)=(R=0,G=0,B=255,A=0)
    ColorTable(4)=(R=255,G=255,B=0,A=0)
    ColorTable(5)=(R=255,G=0,B=255,A=0)
    ColorTable(6)=(R=0,G=255,B=255,A=0)
    ColorTable(7)=(R=255,G=128,B=64,A=0)
    ColorTable(8)=(R=64,G=128,B=255,A=0)
    ColorTable(9)=(R=128,G=64,B=255,A=0)
    ColorTable(10)=(R=64,G=255,B=128,A=0)
}