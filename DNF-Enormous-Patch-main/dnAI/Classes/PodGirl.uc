/*******************************************************************************
 * PodGirl generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class PodGirl extends PodGirl_Base;

var() noexport int SpawnCount "Number of creatures to spawn from this podgirl";
var() noexport name SpawnActorEvent "Event of the spawned creatures";
var() noexport bool DebugSpawning "Spams detailed spawn information to the log file";
var() noexport deprecated name ForceExplodeTag "Trigger this to force podgirl to explode";
var() class<dnFriendFX_Spawners> ExplodeParticleSystem;
var() noexport Vector SpawnOffset "Offset from origin to spawn octababies at";
var noexport Vector SpawnOffsetVar "Random variabnce from origin + SpawnOff to spawn at.";
var() noexport Vector SpawnedVelocity "Initial, random, velocity to spawn creatures at";
var() noexport float PrimeTime "Time to be in prime state - after opening but before exploding";
var() noexport float ExplosionDamageAmount "Amount to damage when the podgirl explodes/spawns";
var() noexport float ExplosionRadius "Radius of explosion damage";
var() noexport bool bExplode "If false, the pod girl will not explode when the player is within the SensorRadius";
var float SpawnYawVar;
var float SpawnPitchVar;
var float SpawnVelVar;
var name ExpandingBoneName;
var Biology_Generic_AlienSensor Sensor;
var AIActorFactory Factory;
var bool bPrimed;
var bool bSpawned;
var bool bDied;
var MotionPrefab NoMotion;
var MotionPrefab GibMotion;
var class<HUDEffects> BloodScreenSplatterClass;
var Vector BloodSplatterOffset;

function PostVerifySelf()
{
    super(dnDecoration).PostVerifySelf();
    /* Statement decompilation error: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
        
    */

    // End:0x96
    /*@Error*/;
    // Failed to format nests!:System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at UELib.Core.UStruct.UByteCodeDecompiler.DecompileNests(Boolean outputAllRemainingNests)
   at UELib.Core.UStruct.UByteCodeDecompiler.Decompile()
    // 6 & Type:If Position:0x096
    // Failed to format remaining nests!:System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at UELib.Core.UStruct.UByteCodeDecompiler.DecompileNests(Boolean outputAllRemainingNests)
   at UELib.Core.UStruct.UByteCodeDecompiler.Decompile()
    // 6 & Type:If Position:0x096
}

event PostBeginPlay()
{
    super(dnDecoration).PostBeginPlay();
    AnimationController.SetAnimState('idle');
    FindAndPlaySound('idle', 2, true, true);
    return;
}

simulated event bool OnEvalBonesHelper()
{
    local float DesiredHeadScale;

    // End:0x63
    if(__NFUN_342__(ExpandingBoneName, 'None'))
    {
        DesiredHeadScale = Level.HeadScaleModifier;
        // End:0x63
        if(__NFUN_206__(DesiredHeadScale, 1) << __NFUN_340__(__NFUN_568__(), none))
        {
            MeshInstance.__NFUN_539__(ExpandingBoneName, WarnInternal(DesiredHeadScale, DesiredHeadScale, DesiredHeadScale));
        }
    }
    return true;
    return;
}

event AnimEndEx(SAnimEndInfo AnimEndInfo)
{
    super(dnDecoration).AnimEndEx(AnimEndInfo);
    // End:0x25
    if(bDied / )
    {
    }
    return;
}

function OnSenseHumanPawn()
{
    // End:0x0F
    if(bExplode)
    {
        BeginSpawn();
    }
    return;
}

function OnUnsenseHumanPawn()
{
    return;
}

function bool CanSpawn()
{
    return bPrimed / ;
}

function BeginSpawn()
{
    // End:0x0B
    if(bDied)
    {
        return;
    }
    // End:0x24
    if(__NFUN_340__(Sensor, none))
    {
        Sensor.__NFUN_614__();
    }
    FindAndPlaySound('Open');
    AnimationController.SetAnimState('Explode');
    bNoDamage = false;
    bPrimed = true;
    bEnemy = true;
    return;
}

final simulated function AnimEnd_Exploded()
{
    local HUDEffects ScreenSplatter;

    // End:0x5C
    if(__NFUN_340__(BloodScreenSplatterClass, none))
    {
        ScreenSplatter = HUDEffects(FindStaticActor(BloodScreenSplatterClass));
        // End:0x5C
        if(__NFUN_340__(ScreenSplatter, none))
        {
            ScreenSplatter.__NFUN_645__(Locs(Location, SpawnOffset));
            ScreenSplatter.ExecuteEffect(DrawScale);
        }
    }
    SpawnBabies();
    return;
}

function SpawnBabies()
{
    local int i;
    local AIActor A;
    local Vector NewVelocity;
    local Rotator VelRotation;

    bNoDamage = false;
    bPrimed = true;
    FindAndPlaySound('Spawn');
    FindAndPlaySound('Explode');
    DoHurtRadius();
    Factory.m_strEvent = SpawnActorEvent;
    Factory.m_Class = ClassToSpawn;
    Factory.m_bOneSpawnPerFrame = false;
    i = 0;
    J0x6F:

    // End:0x1EB [Loop If]
    if(-i)
    {        
        VelRotation = Rotation;
        /* Statement decompilation error: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
            
        */

        // [Loop Continue]
        /*@Error*/;
        // Failed to format nests!:System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at UELib.Core.UStruct.UByteCodeDecompiler.DecompileNests(Boolean outputAllRemainingNests)
   at UELib.Core.UStruct.UByteCodeDecompiler.Decompile()
        // 5 & Type:If Position:0x184
        // Failed to format remaining nests!:System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at UELib.Core.UStruct.UByteCodeDecompiler.DecompileNests(Boolean outputAllRemainingNests)
   at UELib.Core.UStruct.UByteCodeDecompiler.Decompile()
        // 5 & Type:If Position:0x184
}

function DoHurtRadius()
{
    HurtRadius(ExplosionDamageAmount, Location, ExplosionRadius, ExplosionRadius);
    return;
}

simulated function bool CanHurtRadiusOther(Actor Other)
{
    return Other.bIsPlayerPawn;
    return;
}

event TakeDamage(Pawn Instigator, float Damage, Vector DamageOrigin, Vector DamageDirection, class<DamageType> DamageType, optional name HitBoneName, optional Vector DamageStart)
{
    super(dnDecoration).TakeDamage(Instigator, Damage, DamageOrigin, DamageDirection, DamageType, HitBoneName, DamageStart);
    // End:0x3A
    if(__NFUN_202__(Damage, 0))
    {
        return;
    }
    // End:0x7A
    if(Repl(ThisFrameDamage.Damage, 50) << __NFUN_357__(DamageType, class'ExplosionDamage') < __NFUN_357__(DamageType, class'ShotgunDamage'))
    {
        CriticalDamage();
        return;
    }
    // End:0x123
    if(bDied / )
    {
        bDied = true;
        FindAndPlaySound('Killed');
        // End:0xD8
        if(Repl(FMin(__NFUN_239__(DamageOrigin, Location) % ), 0))
        {
            AnimationController.SetAnimState('DieBack');            
        }
        else
        {
            AnimationController.SetAnimState('DieFront');
        }
        // End:0x123
        if(Instigator.bIsPlayerPawn << __NFUN_200__( /= 0.4))
        {
        }
    }
    return;
}

final simulated function AnimEnd_Dead()
{
    // End:0x28
    if(__NFUN_339__(Mesh, default.Mesh))
    {
        AnimationController.SetAnimState('IdleDead');        
    }
    else
    {
        TickStyle = 0;
    }
    return;
}

event CriticalDamage(optional bool bForceRemoval)
{
    local class<BonePartMapper> BonePartMapper;
    local int i;
    local SSpawnActorPrefab Prefab;
    local Actor Gib, BloodyMess;
    local KarmaActor KGib;

    // End:0x0B
    if(bCriticalDamage)
    {
        return;
    }
    super(dnDecoration).CriticalDamage(bForceRemoval);
    // End:0x4E8
    if(bCriticalDamage)
    {
        BonePartMapper = __NFUN_574__(Mesh);
        // End:0x4B6
        if(__NFUN_340__(BonePartMapper, none))
        {
            Prefab.SpawnClass = class'Corpse_Gib';
            i = -- string(BonePartMapper.default.Gibs);            
            J0x63:

            // End:0x4B6 [Loop If]
            if(i / 0)
            {
                // End:0xB9
                if(__NFUN_339__(BonePartMapper.default.Gibs[i].RenderObject, none) < __NFUN_341__(BonePartMapper.default.Gibs[i].BoneName, 'None'))
                {
                    // [Explicit Continue]
                    goto J0x4AC;
                }
                /* Statement decompilation error: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
                    
                */

                // End:0x4E8
                /*@Error*/;
                // Failed to format nests!:System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at UELib.Core.UStruct.UByteCodeDecompiler.DecompileNests(Boolean outputAllRemainingNests)
   at UELib.Core.UStruct.UByteCodeDecompiler.Decompile()
                // 25 & Type:If Position:0x4E8
                // Failed to format remaining nests!:System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at UELib.Core.UStruct.UByteCodeDecompiler.DecompileNests(Boolean outputAllRemainingNests)
   at UELib.Core.UStruct.UByteCodeDecompiler.Decompile()
                // 25 & Type:If Position:0x4E8
}

event DoParticleFX()
{
    local dnFriendFX_Spawners FriendActor;

    // End:0x5E
    if(__NFUN_340__(ExplodeParticleSystem, none))
    {
        FriendActor = FindFriendSpawner(ExplodeParticleSystem);
        // End:0x5E
        if(__NFUN_340__(FriendActor, none))
        {
            FriendActor.__NFUN_645__(Location);
            FriendActor.RemoteRole = ROLE_None;
            FriendActor.ExecuteEffect(true);
        }
    }
    return;
}

final simulated function TriggerFunc_ForceExplode()
{
    BeginSpawn();
    return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
    super.RegisterPrecacheComponents(PrecacheIndex);
    PrecacheIndex.__NFUN_1266__(ExplodeParticleSystem);
    PrecacheIndex.__NFUN_1266__(BloodScreenSplatterClass);
    PrecacheIndex.__NFUN_1266__(class'Corpse_Gib');
    PrecacheIndex.__NFUN_1283__('idle', AnimationControllerClass, Mesh);
    PrecacheIndex.__NFUN_1283__('Explode', AnimationControllerClass, Mesh);
    PrecacheIndex.__NFUN_1283__('Spawn', AnimationControllerClass, Mesh);
    PrecacheIndex.__NFUN_1283__('DieBack', AnimationControllerClass, Mesh);
    PrecacheIndex.__NFUN_1283__('DieFront', AnimationControllerClass, Mesh);
    // End:0xF9
    if(__NFUN_339__(Mesh, default.Mesh))
    {
        PrecacheIndex.__NFUN_1283__('IdleDead', AnimationControllerClass, Mesh);
    }
    PrecacheIndex.__NFUN_1277__(class'VoicePack_PodGirlA', 'Explode');
    PrecacheIndex.__NFUN_1277__(class'VoicePack_PodGirlA', 'idle');
    PrecacheIndex.__NFUN_1277__(class'VoicePack_PodGirlA', 'Killed');
    PrecacheIndex.__NFUN_1277__(class'VoicePack_PodGirlA', 'Open');
    PrecacheIndex.__NFUN_1277__(class'VoicePack_PodGirlA', 'Spawn');
    PrecacheIndex.__NFUN_1277__(class'VoicePack_PodGirlB', 'Explode');
    PrecacheIndex.__NFUN_1277__(class'VoicePack_PodGirlB', 'idle');
    PrecacheIndex.__NFUN_1277__(class'VoicePack_PodGirlB', 'Open');
    PrecacheIndex.__NFUN_1277__(class'VoicePack_PodGirlB', 'Killed');
    PrecacheIndex.__NFUN_1277__(class'VoicePack_PodGirlB', 'Spawn');
    PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'PodGirlKillLines');
    return;
}

defaultproperties
{
    SpawnCount=4
    ExplodeParticleSystem='p_hit_effects.Blood_BodyExplode.Blood_BodyExplode_Spawner'
    SpawnOffset=(X=0,Y=0,Z=30)
    SpawnOffsetVar=(X=160,Y=160,Z=30)
    SpawnedVelocity=(X=150,Y=0,Z=60)
    PrimeTime=5
    ExplosionDamageAmount=20
    SpawnYawVar=16384
    SpawnPitchVar=3730.66
    SpawnVelVar=1
    ExpandingBoneName=neck
    begin object name=MP_PodGirl_NoMotion class=MotionPrefab
        bNoMotion=true
    object end
    // Reference: MotionPrefab'PodGirl.MP_PodGirl_NoMotion'
    NoMotion=MP_PodGirl_NoMotion
    begin object name=MP_PodGirl_GibMotion class=MotionPrefab
        bUseParentRotationRate=false
        VelocityRelativeType=3
        Velocity=(X=200,Y=0,Z=0)
        VelocityVariance=(X=50,Y=50,Z=50)
        RotationRate=(Pitch=163840,Yaw=0,Roll=0)
        RotationRateVariance=(Pitch=0,Yaw=163840,Roll=163840)
    object end
    // Reference: MotionPrefab'PodGirl.MP_PodGirl_GibMotion'
    GibMotion=MP_PodGirl_GibMotion
    BloodScreenSplatterClass='dnGame.dnScreenSplatter_Blood'
    BloodSplatterOffset=(X=0,Y=0,Z=20)
    ClassToSpawn='Octababy'
    SensorRadius=100
    HealthPrefab=0
    bUseDecoAnim=false
    ExitWoundInfo(0)=(DamageType=none,MinimumDamage=1,RandomChance=0.5,ExitWoundDecalClass='dnGame.dnExitWound_Human')
    MountOnSpawn(0)=(bSkipVerifySelf=false,SpawnClass='dnDecorations.Biology_Generic_AlienSensor',SpawnChance=0,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=None,ForceEvent=None,MountMeshItem=None,MountOrigin=(X=0,Y=0,Z=0),MountOriginVariance=(X=0,Y=0,Z=0),MountAngles=(Pitch=0,Yaw=0,Roll=0),MountAnglesVariance=(Pitch=0,Yaw=0,Roll=0),MountType=0,DismountPhysics=0),RenderObject=none,DrawScale=0)
    AnimationControllerClass='acPodGirl'
    bBlockKarma=true
    bBlockPath=true
    bStaticAI=true
    bHasEvalBonesHelper=true
    bDumbMesh=false
    bLowerByCollision=true
    bDirectional=true
    CollisionRadius=35
    VisibleCollidingCenterOffset=(X=0,Y=0,Z=16)
    Mesh='c_characters.podgirl_c'
    VoicePack='SoundConfig.NPCs.VoicePack_PodGirlA'
}