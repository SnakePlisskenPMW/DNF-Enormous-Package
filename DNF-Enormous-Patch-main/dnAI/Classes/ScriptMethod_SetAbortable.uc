/*******************************************************************************
 * ScriptMethod_SetAbortable generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class ScriptMethod_SetAbortable extends ScriptMethod
    native
    exportstructs
    hidecategories(Object);

cpptext
{
// Stripped
}

var(Motives) noexport SAbortScriptMotive_SeeActor MotiveSeeActor "Abort if we see actor?";
var(Motives) noexport SAbortScriptMotive_HearSound MotiveHearSound "Abort if we hear sound?";
var(Motives) noexport SAbortScriptMotive_Damaged MotiveDamaged "Abort if we take damage?";
var(Motives) noexport SAbortScriptMotive_Bumped MotiveBumped "Abort if we bump actor?";
var(Motives) noexport SAbortScriptMotive_Triggered MotiveTriggered "Abort if we get triggered?";
var(Motives) noexport SAbortScriptMotive_Shrunk MotiveShrunk "Abort if we get shrunk?";
var(Actions) noexport bool PlayPainAnimsWithoutAborting "IF true we play pain animations when shot. If false we dont. Either way we wont abort script unless MotiveDamaged is met. Setting this true or false wont abort the script ever!";
var(Actions) noexport bool AllowFall "Can we fall - play a fall animation and abort script?";
var(Actions) noexport int EgoChange "Amount to modify Dukes ego if we abort this script.";
var(Actions) noexport name AbortActorTag "Another actor to also abort scripts on, when I abort.";
var(Actions) noexport name AbortEvent "Trigger this event if we abort.";
var(Actions) noexport bool ChangeScriptTag "Change this actors script tag on abort?";
var(Actions) noexport name ChangedScriptTag "If ChangeScriptTag is true, set this as the new script tag on abort.";
var(Actions) noexport bool KeepProp "Don't drop any prop that we might be carrying if this is true.";
var(Actions) noexport bool bUseAbortEventStuck "Set to true and we will use AbortEventStuck when stuck. if false, stuck aborts just fire off AbortEvents like normal";
var(Actions) noexport name AbortEventStuck "An event to trigger if I abort because I was stuck. If none we will still fire AbortEvent if stuck";

event string GetMethodString()
{
    return __NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__("SetAbortable ((", string(MotiveSeeActor.Aborts)), ", "), string(__NFUN_365__(class'EAIInstigatorType', int(MotiveSeeActor.InstigatorInfo.Type)))), ", "), string(MotiveSeeActor.InstigatorInfo.Tag)), ")"), ", ("), string(MotiveHearSound.Aborts)), ", "), string(__NFUN_365__(class'EAIInstigatorType', int(MotiveHearSound.InstigatorInfo.Type)))), ", "), string(MotiveHearSound.InstigatorInfo.Tag)), ")"), ", ("), string(MotiveDamaged.Aborts)), ", "), string(__NFUN_365__(class'EAIInstigatorType', int(MotiveDamaged.InstigatorInfo.Type)))), ", "), string(MotiveDamaged.InstigatorInfo.Tag)), ", "), string(MotiveDamaged.Threshold)), ")"), ", ("), string(MotiveBumped.Aborts)), ", "), string(__NFUN_365__(class'EAIInstigatorType', int(MotiveBumped.InstigatorInfo.Type)))), ", "), string(MotiveBumped.InstigatorInfo.Tag)), ")"), ", ("), string(MotiveTriggered.Aborts)), ", "), string(__NFUN_365__(class'EAIInstigatorType', int(MotiveTriggered.InstigatorInfo.Type)))), ", "), string(MotiveTriggered.InstigatorInfo.Tag)), ")"), ", ("), string(MotiveShrunk.Aborts)), ")"), ", "), string(EgoChange)), ", "), string(AbortActorTag)), ", "), string(AbortEvent)), ", "), string(ChangeScriptTag)), ", "), string(ChangedScriptTag)), ", "), string(KeepProp)), ")");
    return;
}

defaultproperties
{
    MotiveDamaged=(Aborts=true,InstigatorInfo=(Type=2,Tag=None),DamageCount=0,Threshold=0)
}