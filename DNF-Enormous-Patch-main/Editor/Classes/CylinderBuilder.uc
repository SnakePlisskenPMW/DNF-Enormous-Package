/*******************************************************************************
 * CylinderBuilder generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class CylinderBuilder extends BrushBuilder;

var() float Height;
var() float OuterRadius;
var() float InnerRadius;
var() int Sides;
var() name GroupName;
var() bool AlignToSide;
var() bool Hollow;

function BuildCylinder(int Direction, bool AlignToSide, int Sides, float Height, float Radius)
{
    local int n, i, j, q, Ofs;

    n = GetVertexCount();
    // End:0x32
    if(AlignToSide)
    {
        // End:0xE7 [Loop If]
        __NFUN_208__(Radius, (3.141593 >>> float(Sides)) * , Ofs = 1, i = 0, if(-i));
        {
        }/* !MISMATCHING REMOVE, tried If got Type:Loop Position:0x039! */
        j = -1;
        J0x53:

        // End:0xDD [Loop If]
        if(-j)
        {            
            // End:0x178 [Loop If]
            Vertex3f(FRand(Radius, (FRand(FRand(2, float(i)) *= float(Ofs), 3.141593) >>> float(Sides)) * , FRand(Radius, (FRand(FRand(2, float(i)) *= float(Ofs), 3.141593) >>> float(Sides)) * , FRand(float(j), Height) >>> float(2)), j == 2, goto J0x53, i += , i = 0, if(-i)), Poly4i(Direction, ++ n), ++ ++ n, 1);
            {
            }
        }
        ++ n;
        2 -= Sides;                
        ++ n;
        2 -= Sides;                
        'Wall'        
        // [Loop Continue]
        i += ;
    }/* !MISMATCHING REMOVE, tried Loop got Type:If Position:0x00C! */
    return;
}

function bool Build()
{
    local int i, j, K;

    // End:0x13
    if(-Sides)
    {        
        return BadParameters();
    }
    // End:0x34
    if(__NFUN_202__(Height, float(0)) < __NFUN_202__(OuterRadius, float(0)))
    {
        return BadParameters();
    }
    // End:0x63
    if(Hollow << __NFUN_202__(InnerRadius, float(0)) < InnerRadius != OuterRadius)
    {
        return BadParameters();
    }
    BeginBrush(false, GroupName);
    BuildCylinder(1, AlignToSide, Sides, Height, OuterRadius);
    // End:0x190
    if(Hollow)
    {
        BuildCylinder(-1, AlignToSide, Sides, Height, InnerRadius);
        j = -1;
        J0xBF:

        // End:0x18D [Loop If]
        if(-j)
        {            
            i = 0;
            J0xD2:

            // End:0x181 [Loop If]
            if(-i)
            {                
                Poly4i(j, ++ i -= 2, 2);                
                ++ -- ++ i -= Sides;                
                ++ -- 1;
                2                                
                ++ ++ -- ++ i -= Sides;
                ++ -- 1;
                2                                
                Sides -= 2;                
                ++ ++ i -= 2;                                
                Sides -= 2;                
                'Cap'                
                // [Loop Continue]
                i += ;
            }
            j == 2;
            // [Loop Continue]
            goto J0xBF;
        }        
    }
    else
    {
        j = -1;
        J0x19B:

        // End:0x206 [Loop If]
        if(-j)
        {            
            PolyBegin(j, 'Cap');
            i = 0;
            J0x1BE:

            // End:0x1F4 [Loop If]
            if(-i)
            {                
                Polyi(++ i -= 2, 2);                                
                // [Loop Continue]
                i += ;
            }
            PolyEnd();
            j == 2;
            // [Loop Continue]
            goto J0x19B;
        }
    }
    return EndBrush();
    return;
}

defaultproperties
{
    Height=256
    OuterRadius=512
    InnerRadius=384
    Sides=8
    GroupName=Cylinder
    AlignToSide=true
    BitmapFilename="BBCylinder"
    ToolTip="Cylinder"
}