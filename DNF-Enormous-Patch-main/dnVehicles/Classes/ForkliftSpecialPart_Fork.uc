/*******************************************************************************
 * ForkliftSpecialPart_Fork generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class ForkliftSpecialPart_Fork extends VehicleSpecialPartPhysicsBase;

var Veh_Forklift Forklift;

function KarmaSetConstraintProperties(KConstraint ConstraintActor)
{
	local KFixed FixedConstraint;
	local KLinear LinearConstraint;
	local KLinearJointLimit LinearLimit;
	local KLinearMotorAffector LinearMotor;

	// End:0x1C
	if(__NFUN_339__(Forklift, none))
	{
		Forklift = Veh_Forklift(ParentVehicle);
	}
	__NFUN_354__(__NFUN_340__(Forklift, none));
	FixedConstraint = KFixed(ConstraintActor);
	LinearConstraint = KLinear(ConstraintActor);
	LinearLimit = KLinearJointLimit(ConstraintActor);
	LinearMotor = KLinearMotorAffector(ConstraintActor);
	// End:0x8C
	if(__NFUN_340__(FixedConstraint, none))
	{
		Forklift.FixedC = FixedConstraint;		
	}
	else
	{
		// End:0xB0
		if(__NFUN_340__(LinearConstraint, none))
		{
			Forklift.LinearC = LinearConstraint;			
		}
		else
		{
			// End:0x118
			if(__NFUN_340__(LinearLimit, none))
			{
				LinearLimit.__NFUN_1108__(2);
				LinearLimit.__NFUN_1109__(Forklift.ForkRange.Min, Forklift.ForkRange.Max);
				Forklift.TheLimit = LinearLimit;				
			}
			else
			{
				// End:0x155
				if(__NFUN_340__(LinearMotor, none))
				{
					LinearMotor.__NFUN_1114__(Forklift.ForkMotorMaxForce);
					Forklift.TheMotor = LinearMotor;
				}
			}
		}
	}
	super.KarmaSetConstraintProperties(ConstraintActor);
	ConstraintActor.KConstraintActor1 = Forklift;
	ConstraintActor.KConstraintActor2 = self;
	return;
}
