; ---------------------------------------------------------------------------

GUID            struc ; (sizeof=0x10, align=0x4, copyof_2)
                                        ; XREF: .rdata:10914734/r
Data1           dd ?
Data2           dw ?
Data3           dw ?
Data4           db 8 dup(?)
GUID            ends

; ---------------------------------------------------------------------------

CPPEH_RECORD    struc ; (sizeof=0x18, align=0x4, copyof_7)
                                        ; XREF: __onexit/r
                                        ; ___tmainCRTStartup/r ...
old_esp         dd ?                    ; XREF: ___tmainCRTStartup:$LN36/r
                                        ; ___tmainCRTStartup:$LN32/r ...
exc_ptr         dd ?                    ; XREF: ___tmainCRTStartup:$LN59/r
                                        ; __ArrayUnwind(void *,uint,int,void (*)(void *)):loc_1090FDD8/r ... ; offset
registration    _EH3_EXCEPTION_REGISTRATION ? ; XREF: __onexit+37/w
                                        ; __onexit+87/w ...
CPPEH_RECORD    ends

; ---------------------------------------------------------------------------

_EH3_EXCEPTION_REGISTRATION struc ; (sizeof=0x10, align=0x4, copyof_4)
                                        ; XREF: CPPEH_RECORD/r
Next            dd ?                    ; XREF: __IsNonwritableInCurrentImage+79/r
                                        ; __IsNonwritableInCurrentImage+AB/r ; offset
ExceptionHandler dd ?                   ; offset
ScopeTable      dd ?                    ; XREF: __IsNonwritableInCurrentImage+23/w ; offset
TryLevel        dd ?                    ; XREF: __onexit+37/w
                                        ; __onexit+87/w ...
_EH3_EXCEPTION_REGISTRATION ends

; ---------------------------------------------------------------------------

FuncInfo        struc ; (sizeof=0x24, mappedto_8)
                                        ; XREF: .rdata:stru_10914FF0/r
                                        ; .rdata:stru_1091501C/r ...
magicNumber     dd ?                    ; base 16
maxState        dd ?                    ; base 10
pUnwindMap      dd ?                    ; offset
nTryBlocks      dd ?                    ; base 10
pTryBlockMap    dd ?                    ; offset
nIPMapEntries   dd ?                    ; base 10
pIPtoStateMap   dd ?                    ; offset
pESTypeList     dd ?                    ; offset
EHFlags         dd ?                    ; base 16
FuncInfo        ends

; ---------------------------------------------------------------------------

UnwindMapEntry  struc ; (sizeof=0x8, mappedto_9)
                                        ; XREF: .rdata:stru_10914FE8/r
                                        ; .rdata:stru_10915014/r ...
toState         dd ?                    ; base 10
action          dd ?                    ; offset
UnwindMapEntry  ends

; ---------------------------------------------------------------------------

_EH4_SCOPETABLE struc ; (sizeof=0x10, align=0x4, copyof_11, variable size)
                                        ; XREF: .rdata:stru_10916548/r
                                        ; .rdata:stru_10916568/r ...
GSCookieOffset  dd ?
GSCookieXOROffset dd ?
EHCookieOffset  dd ?
EHCookieXOROffset dd ?
ScopeRecord     _EH4_SCOPETABLE_RECORD 0 dup(?)
_EH4_SCOPETABLE ends

; ---------------------------------------------------------------------------

_EH4_SCOPETABLE_RECORD struc ; (sizeof=0xC, align=0x4, copyof_10)
                                        ; XREF: _EH4_SCOPETABLE/r
EnclosingLevel  dd ?
FilterFunc      dd ?                    ; offset
HandlerFunc     dd ?                    ; offset
_EH4_SCOPETABLE_RECORD ends

; ---------------------------------------------------------------------------

TryBlockMapEntry struc ; (sizeof=0x14, mappedto_12)
                                        ; XREF: .rdata:stru_1091507C/r
tryLow          dd ?                    ; base 10
tryHigh         dd ?                    ; base 10
catchHigh       dd ?                    ; base 10
nCatches        dd ?                    ; base 10
pHandlerArray   dd ?                    ; offset
TryBlockMapEntry ends

; ---------------------------------------------------------------------------

HandlerType     struc ; (sizeof=0x10, mappedto_13)
                                        ; XREF: .rdata:stru_1091506C/r
adjectives      dd ?                    ; base 16
pType           dd ?                    ; offset
dispCatchObj    dd ?                    ; base 10
addressOfHandler dd ?                   ; offset
HandlerType     ends

; ---------------------------------------------------------------------------

_WIN32_FIND_DATAW struc ; (sizeof=0x250, align=0x4, copyof_14)
                                        ; XREF: sub_10905920/r
                                        ; sub_10905920/r ...
dwFileAttributes dd ?                   ; XREF: sub_10905580:loc_109055CE/r
                                        ; sub_10905920:loc_10905A24/r ...
ftCreationTime  FILETIME ?
ftLastAccessTime FILETIME ?
ftLastWriteTime FILETIME ?
nFileSizeHigh   dd ?
nFileSizeLow    dd ?
dwReserved0     dd ?
dwReserved1     dd ?
cFileName       dw 260 dup(?)           ; XREF: sub_10905580+62/o
                                        ; sub_10905580+7B/o ...
cAlternateFileName dw 14 dup(?)
_WIN32_FIND_DATAW ends

; ---------------------------------------------------------------------------

FILETIME        struc ; (sizeof=0x8, align=0x4, copyof_16)
                                        ; XREF: _WIN32_FIND_DATAW/r
                                        ; _WIN32_FIND_DATAW/r ...
dwLowDateTime   dd ?
dwHighDateTime  dd ?
FILETIME        ends

; ---------------------------------------------------------------------------

_STARTUPINFOA   struc ; (sizeof=0x44, align=0x4, copyof_20)
                                        ; XREF: ___tmainCRTStartup/r
cb              dd ?
lpReserved      dd ?                    ; offset
lpDesktop       dd ?                    ; offset
lpTitle         dd ?                    ; offset
dwX             dd ?
dwY             dd ?
dwXSize         dd ?
dwYSize         dd ?
dwXCountChars   dd ?
dwYCountChars   dd ?
dwFillAttribute dd ?
dwFlags         dd ?                    ; XREF: ___tmainCRTStartup:loc_1090FB9D/r
wShowWindow     dw ?                    ; XREF: ___tmainCRTStartup+129/r
cbReserved2     dw ?
lpReserved2     dd ?                    ; offset
hStdInput       dd ?                    ; offset
hStdOutput      dd ?                    ; offset
hStdError       dd ?                    ; offset
_STARTUPINFOA   ends

; ---------------------------------------------------------------------------

_FILETIME       struc ; (sizeof=0x8, align=0x4)
                                        ; XREF: ___security_init_cookie/r
dwLowDateTime   dd ?                    ; XREF: ___security_init_cookie+D/w
                                        ; ___security_init_cookie+40/r
dwHighDateTime  dd ?                    ; XREF: ___security_init_cookie+11/w
                                        ; ___security_init_cookie+3D/r
_FILETIME       ends

; ---------------------------------------------------------------------------

LARGE_INTEGER   union ; (sizeof=0x8, align=0x8, copyof_27)
                                        ; XREF: ___security_init_cookie+65/r
                                        ; ___security_init_cookie+68/r ...
anonymous_0     _LARGE_INTEGER::$837407842DC9087486FDFA5FEB63B74E ?
u               _LARGE_INTEGER::$837407842DC9087486FDFA5FEB63B74E ?
QuadPart        dq ?
LARGE_INTEGER   ends

; ---------------------------------------------------------------------------

_LARGE_INTEGER::$837407842DC9087486FDFA5FEB63B74E struc ; (sizeof=0x8, align=0x4, copyof_29)
                                        ; XREF: LARGE_INTEGER/r
                                        ; LARGE_INTEGER/r
LowPart         dd ?
HighPart        dd ?
_LARGE_INTEGER::$837407842DC9087486FDFA5FEB63B74E ends

; ---------------------------------------------------------------------------

_EXCEPTION_POINTERS struc ; (sizeof=0x8, align=0x4, copyof_32)
                                        ; XREF: .rdata:ExceptionInfo/r
ExceptionRecord dd ?                    ; offset
ContextRecord   dd ?                    ; offset
_EXCEPTION_POINTERS ends

; ---------------------------------------------------------------------------

tagMSG          struc ; (sizeof=0x1C, align=0x4, copyof_43)
                                        ; XREF: sub_10901690/r
                                        ; sub_10901860/r
hwnd            dd ?                    ; offset
message         dd ?
wParam          dd ?
lParam          dd ?
time            dd ?
pt              POINT ?
tagMSG          ends

; ---------------------------------------------------------------------------

POINT           struc ; (sizeof=0x8, align=0x4, copyof_49)
                                        ; XREF: tagMSG/r
x               dd ?
y               dd ?
POINT           ends


;
; +-------------------------------------------------------------------------+
; |   This file has been generated by The Interactive Disassembler (IDA)    |
; |           Copyright (c) 2017 Hex-Rays, <support@hex-rays.com>           |
; |                      License info: 48-3FBD-7F04-2C                      |
; |                      Jiang Ying, Personal license                       |
; +-------------------------------------------------------------------------+
;
; Input SHA256 : 4644851B4BCCC944607D57476BD0668A91555C88E2805DB1C0C8433A3730FF57
; Input MD5    : E428241938C24FF43ED4498078FCFA25
; Input CRC32  : 2B114677

; ---------------------------------------------------------------------------
; File Name   : E:\SteamLibrary\steamapps\common\Duke Nukem Forever\System\DukeForeverEditor.exe
; Format      : Portable executable for 80386 (PE)
; Imagebase   : 10900000
; Timestamp   : 4ED80D2E (Thu Dec 01 23:26:38 2011)
; Section 1. (virtual address 00001000)
; Virtual size                  : 00010A02 (  68098.)
; Section size in file          : 00010C00 (  68608.)
; Offset to raw data for section: 00000400
; Flags 60000020: Text Executable Readable
; Alignment     : default
; PDB File Name : r:\BUCKEYE-PCSTABLE\System\DukeForeverf.pdb
; OS type         :  MS Windows
; Application type:  Executable 32bit

                include uni.inc ; see unicode subdir of ida for info on unicode

                .686p
                .mmx
                .model flat

; ===========================================================================

; Segment type: Pure code
; Segment permissions: Read/Execute
_text           segment para public 'CODE' use32
                assume cs:_text
                ;org 10901000h
                assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
                jmp     ds:__imp_rand
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                call    ds:?GetMalloc@@YAPAVFMalloc@@XZ ; GetMalloc(void)
                mov     ecx, [ebp+8]
                mov     edx, [eax]
                mov     edx, [edx+4]
                push    8
                push    ecx
                mov     ecx, eax
                call    edx
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10901030    proc near               ; CODE XREF: sub_10904290+5B↓p
                                        ; sub_10904570+1C↓p ...

arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                call    ds:?GetMalloc@@YAPAVFMalloc@@XZ ; GetMalloc(void)
                mov     ecx, [ebp+arg_0]
                mov     edx, [eax]
                mov     edx, [edx+10h]
                push    ecx
                mov     ecx, eax
                call    edx
                pop     ebp
                retn
sub_10901030    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10901050    proc near               ; CODE XREF: sub_10904AD0+2C↓p
                                        ; sub_10908690+2C↓p ...

arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                call    ds:?GetMalloc@@YAPAVFMalloc@@XZ ; GetMalloc(void)
                mov     ecx, [ebp+arg_0]
                mov     edx, [eax]
                mov     edx, [edx+4]
                push    8
                push    ecx
                mov     ecx, eax
                call    edx
                pop     ebp
                retn
sub_10901050    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10901070    proc near               ; CODE XREF: sub_1090CEE0+45C3↓p

arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                call    ds:?GetMalloc@@YAPAVFMalloc@@XZ ; GetMalloc(void)
                mov     ecx, [ebp+arg_0]
                mov     edx, [eax]
                mov     edx, [edx+10h]
                push    ecx
                mov     ecx, eax
                call    edx
                pop     ebp
                retn
sub_10901070    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10901090    proc near               ; CODE XREF: .text:10911978↓p

var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp+var_4], ecx
                mov     ecx, [ebp+var_4]
                call    ds:??0dnOutputDevice@@QAE@XZ ; dnOutputDevice::dnOutputDevice(void)
                mov     eax, [ebp+var_4]
                mov     dword ptr [eax], offset off_10912D5C
                mov     ecx, [ebp+var_4]
                mov     dword ptr [ecx+4], 0
                mov     edx, [ebp+var_4]
                mov     dword ptr [edx+808h], 0
                mov     eax, [ebp+var_4]
                mov     dword ptr [eax+80Ch], 0
                mov     ecx, [ebp+var_4]
                mov     dword ptr [ecx+810h], 0
                xor     edx, edx
                mov     eax, [ebp+var_4]
                mov     [eax+8], dx
                mov     eax, [ebp+var_4]
                mov     esp, ebp
                pop     ebp
                retn
sub_10901090    endp

; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                call    ds:?GetMalloc@@YAPAVFMalloc@@XZ ; GetMalloc(void)
                mov     ecx, [ebp+8]
                mov     edx, [eax]
                mov     edx, [edx+4]
                push    8
                push    ecx
                mov     ecx, eax
                call    edx
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                call    ds:?GetMalloc@@YAPAVFMalloc@@XZ ; GetMalloc(void)
                mov     ecx, [ebp+8]
                mov     edx, [eax]
                mov     edx, [edx+10h]
                push    ecx
                mov     ecx, eax
                call    edx
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                call    ds:?GetMalloc@@YAPAVFMalloc@@XZ ; GetMalloc(void)
                mov     ecx, [ebp+8]
                mov     edx, [eax]
                mov     edx, [edx+4]
                push    8
                push    ecx
                mov     ecx, eax
                call    edx
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                call    ds:?GetMalloc@@YAPAVFMalloc@@XZ ; GetMalloc(void)
                mov     ecx, [ebp+8]
                mov     edx, [eax]
                mov     edx, [edx+10h]
                push    ecx
                mov     ecx, eax
                call    edx
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10901170    proc near               ; CODE XREF: sub_109119D0+B↓p

var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                sub     esp, 10h
                mov     [ebp+var_C], ecx
                mov     eax, [ebp+var_C]
                mov     dword ptr [eax], offset off_10912D5C
                mov     ecx, [ebp+var_C]
                cmp     dword ptr [ecx+4], 0
                jz      short loc_109011E2
                call    ds:?dnTimeStamp@@YAPB_WXZ ; dnTimeStamp(void)
                push    eax
                push    offset aLogFileClosedS ; "Log file closed, %s"
                push    2F8h
                mov     edx, [ebp+var_C]
                push    edx
                call    ds:?Logf@dnOutputDevice@@QAAXW4EName@@PB_WZZ ; dnOutputDevice::Logf(EName,wchar_t const *,...)
                add     esp, 10h
                mov     eax, [ebp+var_C]
                mov     ecx, [eax+4]
                mov     [ebp+var_8], ecx
                mov     edx, [ebp+var_8]
                mov     [ebp+var_4], edx
                cmp     [ebp+var_4], 0
                jz      short loc_109011D1
                push    1
                mov     eax, [ebp+var_4]
                mov     edx, [eax]
                mov     ecx, [ebp+var_4]
                mov     eax, [edx]
                call    eax
                mov     [ebp+var_10], eax
                jmp     short loc_109011D8
; ---------------------------------------------------------------------------

loc_109011D1:                           ; CODE XREF: sub_10901170+4C↑j
                mov     [ebp+var_10], 0

loc_109011D8:                           ; CODE XREF: sub_10901170+5F↑j
                mov     ecx, [ebp+var_C]
                mov     dword ptr [ecx+4], 0

loc_109011E2:                           ; CODE XREF: sub_10901170+19↑j
                mov     esp, ebp
                pop     ebp
                retn
sub_10901170    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_109011F0    proc near               ; DATA XREF: .rdata:10912D60↓o

var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp+var_4], ecx
                mov     eax, [ebp+var_4]
                cmp     dword ptr [eax+4], 0
                jz      short loc_10901213
                mov     ecx, [ebp+var_4]
                mov     edx, [ecx+4]
                mov     eax, [ebp+var_4]
                mov     ecx, [eax+4]
                mov     edx, [edx]
                mov     eax, [edx+64h]
                call    eax

loc_10901213:                           ; CODE XREF: sub_109011F0+E↑j
                mov     esp, ebp
                pop     ebp
                retn
sub_109011F0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10901220    proc near               ; CODE XREF: .text:109119A8↓p

var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp+var_4], ecx
                mov     ecx, [ebp+var_4]
                call    ds:??0dnFeedbackContext@@QAE@XZ ; dnFeedbackContext::dnFeedbackContext(void)
                mov     eax, [ebp+var_4]
                mov     dword ptr [eax], offset ??_7dnFeedbackContextWin32@@6B@ ; const dnFeedbackContextWin32::`vftable'
                mov     ecx, [ebp+var_4]
                mov     dword ptr [ecx+0Ch], 0
                mov     edx, [ebp+var_4]
                mov     dword ptr [edx+10h], 0
                mov     eax, [ebp+var_4]
                mov     dword ptr [eax+14h], 0
                mov     ecx, [ebp+var_4]
                mov     dword ptr [ecx+18h], 0
                mov     edx, [ebp+var_4]
                mov     dword ptr [edx+1Ch], 0
                mov     eax, [ebp+var_4]
                mov     dword ptr [eax+20h], 0
                mov     eax, [ebp+var_4]
                mov     esp, ebp
                pop     ebp
                retn
sub_10901220    endp

; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                mov     eax, [ebp+8]
                add     eax, 7
                and     eax, 0FFFFFFF8h
                call    __alloca_probe_16
                mov     eax, esp
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __stdcall sub_109012A0(LPCWSTR lpText, int)
sub_109012A0    proc near               ; DATA XREF: .rdata:const dnFeedbackContextWin32::`vftable'↓o

var_24          = dword ptr -24h
var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_18          = byte ptr -18h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
lpText          = dword ptr  8
arg_4           = dword ptr  0Ch

; FUNCTION CHUNK AT 109103E0 SIZE 00000009 BYTES

; __unwind { // SEH_109012A0
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_109012A0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 18h
                mov     [ebp+var_1C], ecx
                cmp     [ebp+arg_4], 31Ah
                jnz     short loc_10901332
                mov     eax, ds:GIsClient
                cmp     dword ptr [eax], 0
                jnz     short loc_109012DC
                mov     ecx, ds:GIsEditor
                cmp     dword ptr [ecx], 0
                jz      short loc_10901332

loc_109012DC:                           ; CODE XREF: sub_109012A0+2F↑j
                push    0
                push    offset aCore    ; "Core"
                push    offset aWarning ; "Warning"
                lea     edx, [ebp+var_18]
                push    edx
                call    ds:?dnLocalizeError@@YA?BVdnString@@PBDPB_W1@Z ; dnLocalizeError(char const *,wchar_t const *,wchar_t const *)
                add     esp, 10h
                mov     [ebp+var_20], eax
                mov     eax, [ebp+var_20]
                mov     [ebp+var_24], eax
;   try {
                mov     [ebp+var_4], 0
                push    2000h           ; uType
                mov     ecx, [ebp+var_24]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax             ; lpCaption
                mov     ecx, [ebp+lpText]
                push    ecx             ; lpText
                push    0               ; hWnd
                call    ds:MessageBoxW
;   } // starts at 109012FE
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_18]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                jmp     short loc_10901399
; ---------------------------------------------------------------------------

loc_10901332:                           ; CODE XREF: sub_109012A0+25↑j
                                        ; sub_109012A0+3A↑j ...
                mov     edx, [ebp+lpText]
                push    edx
                push    offset Format   ; "%s"
                mov     eax, [ebp+arg_4]
                push    eax
                mov     ecx, ds:?GLog@@3PAVdnOutputDevice@@A ; dnOutputDevice * GLog
                mov     edx, [ecx]
                push    edx
                call    ds:?Logf@dnOutputDevice@@QAAXW4EName@@PB_WZZ ; dnOutputDevice::Logf(EName,wchar_t const *,...)
                add     esp, 10h
                xor     eax, eax
                jnz     short loc_10901332
                cmp     [ebp+arg_4], 315h
                jnz     short loc_1090136F
                mov     ecx, [ebp+var_1C]
                mov     edx, [ecx+8]
                add     edx, 1
                mov     eax, [ebp+var_1C]
                mov     [eax+8], edx
                jmp     short loc_10901399
; ---------------------------------------------------------------------------

loc_1090136F:                           ; CODE XREF: sub_109012A0+BC↑j
                cmp     [ebp+arg_4], 2FFh
                jz      short loc_1090138A
                cmp     [ebp+arg_4], 300h
                jz      short loc_1090138A
                cmp     [ebp+arg_4], 301h
                jnz     short loc_10901399

loc_1090138A:                           ; CODE XREF: sub_109012A0+D6↑j
                                        ; sub_109012A0+DF↑j
                mov     ecx, [ebp+var_1C]
                mov     edx, [ecx+4]
                add     edx, 1
                mov     eax, [ebp+var_1C]
                mov     [eax+4], edx

loc_10901399:                           ; CODE XREF: sub_109012A0+90↑j
                                        ; sub_109012A0+CD↑j ...
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    8
; } // starts at 109012A0
sub_109012A0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_109013B0(int, wchar_t *Format, char)
sub_109013B0    proc near               ; DATA XREF: .rdata:10912DAC↓o

var_202C        = dword ptr -202Ch
var_2028        = dword ptr -2028h
var_2024        = byte ptr -2024h
var_2018        = dword ptr -2018h
Dest            = word ptr -2014h
Args            = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
Format          = dword ptr  0Ch
arg_8           = byte ptr  10h

; FUNCTION CHUNK AT 10910400 SIZE 0000000C BYTES

; __unwind { // SEH_109013B0
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_109013B0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                mov     eax, 2020h
                call    __alloca_probe
                lea     eax, [ebp+arg_8]
                mov     [ebp+Args], eax
                mov     ecx, [ebp+Args]
                push    ecx             ; Args
                mov     edx, [ebp+Format]
                push    edx             ; Format
                push    1000h           ; Count
                lea     eax, [ebp+Dest]
                push    eax             ; Dest
                call    ds:_vsnwprintf
                add     esp, 10h
                mov     [ebp+Args], 0
                mov     ecx, ds:GIsClient
                cmp     dword ptr [ecx], 0
                jnz     short loc_10901416
                mov     edx, ds:GIsEditor
                cmp     dword ptr [edx], 0
                jz      loc_10901497

loc_10901416:                           ; CODE XREF: sub_109013B0+55↑j
                push    0
                push    offset aCore    ; "Core"
                push    offset aQuestion ; "Question"
                lea     eax, [ebp+var_2024]
                push    eax
                call    ds:?dnLocalizeError@@YA?BVdnString@@PBDPB_W1@Z ; dnLocalizeError(char const *,wchar_t const *,wchar_t const *)
                add     esp, 10h
                mov     [ebp+var_2028], eax
                mov     ecx, [ebp+var_2028]
                mov     [ebp+var_202C], ecx
;   try {
                mov     [ebp+var_4], 0
                push    2004h           ; uType
                mov     ecx, [ebp+var_202C]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax             ; lpCaption
                lea     edx, [ebp+Dest]
                push    edx             ; lpText
                push    0               ; hWnd
                call    ds:MessageBoxW
                xor     ecx, ecx
                cmp     eax, 6
                setz    cl
                mov     [ebp+var_2018], ecx
;   } // starts at 10901444
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_2024]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                mov     eax, [ebp+var_2018]
                jmp     short loc_10901499
; ---------------------------------------------------------------------------
                jmp     short loc_10901499
; ---------------------------------------------------------------------------

loc_10901497:                           ; CODE XREF: sub_109013B0+60↑j
                xor     eax, eax

loc_10901499:                           ; CODE XREF: sub_109013B0+E3↑j
                                        ; sub_109013B0+E5↑j
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
; } // starts at 109013B0
sub_109013B0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_109014B0    proc near               ; DATA XREF: .rdata:10912DC0↓o

var_8           = dword ptr -8
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                sub     esp, 8
                mov     [ebp+var_4], ecx
                mov     eax, ds:GUnicodeOS
                cmp     dword ptr [eax], 0
                jz      short loc_109014E1
                push    0               ; lParam
                push    7C3h            ; wParam
                push    111h            ; Msg
                mov     ecx, [ebp+var_4]
                mov     edx, [ecx+1Ch]
                push    edx             ; hWnd
                call    ds:SendMessageW
                mov     [ebp+var_8], eax
                jmp     short loc_109014FD
; ---------------------------------------------------------------------------

loc_109014E1:                           ; CODE XREF: sub_109014B0+11↑j
                push    0               ; lParam
                push    7C3h            ; wParam
                push    111h            ; Msg
                mov     eax, [ebp+var_4]
                mov     ecx, [eax+1Ch]
                push    ecx             ; hWnd
                call    ds:SendMessageA
                mov     [ebp+var_8], eax

loc_109014FD:                           ; CODE XREF: sub_109014B0+2F↑j
                mov     esp, ebp
                pop     ebp
                retn
sub_109014B0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10901510    proc near               ; DATA XREF: .rdata:10912DC4↓o

var_8           = dword ptr -8
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                sub     esp, 8
                mov     [ebp+var_4], ecx
                mov     eax, ds:GUnicodeOS
                cmp     dword ptr [eax], 0
                jz      short loc_10901541
                push    0               ; lParam
                push    7C4h            ; wParam
                push    111h            ; Msg
                mov     ecx, [ebp+var_4]
                mov     edx, [ecx+1Ch]
                push    edx             ; hWnd
                call    ds:SendMessageW
                mov     [ebp+var_8], eax
                jmp     short loc_1090155D
; ---------------------------------------------------------------------------

loc_10901541:                           ; CODE XREF: sub_10901510+11↑j
                push    0               ; lParam
                push    7C4h            ; wParam
                push    111h            ; Msg
                mov     eax, [ebp+var_4]
                mov     ecx, [eax+1Ch]
                push    ecx             ; hWnd
                call    ds:SendMessageA
                mov     [ebp+var_8], eax

loc_1090155D:                           ; CODE XREF: sub_10901510+2F↑j
                mov     esp, ebp
                pop     ebp
                retn
sub_10901510    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10901570    proc near               ; DATA XREF: .rdata:10912DC8↓o

var_8           = dword ptr -8
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                sub     esp, 8
                mov     [ebp+var_4], ecx
                mov     eax, ds:GUnicodeOS
                cmp     dword ptr [eax], 0
                jz      short loc_109015A1
                push    0               ; lParam
                push    7C5h            ; wParam
                push    111h            ; Msg
                mov     ecx, [ebp+var_4]
                mov     edx, [ecx+1Ch]
                push    edx             ; hWnd
                call    ds:SendMessageW
                mov     [ebp+var_8], eax
                jmp     short loc_109015BD
; ---------------------------------------------------------------------------

loc_109015A1:                           ; CODE XREF: sub_10901570+11↑j
                push    0               ; lParam
                push    7C5h            ; wParam
                push    111h            ; Msg
                mov     eax, [ebp+var_4]
                mov     ecx, [eax+1Ch]
                push    ecx             ; hWnd
                call    ds:SendMessageA
                mov     [ebp+var_8], eax

loc_109015BD:                           ; CODE XREF: sub_10901570+2F↑j
                mov     esp, ebp
                pop     ebp
                retn
sub_10901570    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_109015D0    proc near               ; DATA XREF: .rdata:10912DD0↓o

var_8           = dword ptr -8
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                sub     esp, 8
                mov     [ebp+var_4], ecx
                mov     eax, ds:GUnicodeOS
                cmp     dword ptr [eax], 0
                jz      short loc_10901601
                push    0               ; lParam
                push    7C3h            ; wParam
                push    111h            ; Msg
                mov     ecx, [ebp+var_4]
                mov     edx, [ecx+20h]
                push    edx             ; hWnd
                call    ds:SendMessageW
                mov     [ebp+var_8], eax
                jmp     short loc_1090161D
; ---------------------------------------------------------------------------

loc_10901601:                           ; CODE XREF: sub_109015D0+11↑j
                push    0               ; lParam
                push    7C3h            ; wParam
                push    111h            ; Msg
                mov     eax, [ebp+var_4]
                mov     ecx, [eax+20h]
                push    ecx             ; hWnd
                call    ds:SendMessageA
                mov     [ebp+var_8], eax

loc_1090161D:                           ; CODE XREF: sub_109015D0+2F↑j
                mov     esp, ebp
                pop     ebp
                retn
sub_109015D0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10901630    proc near               ; DATA XREF: .rdata:10912DD4↓o

var_8           = dword ptr -8
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                sub     esp, 8
                mov     [ebp+var_4], ecx
                mov     eax, ds:GUnicodeOS
                cmp     dword ptr [eax], 0
                jz      short loc_10901661
                push    0               ; lParam
                push    7C5h            ; wParam
                push    111h            ; Msg
                mov     ecx, [ebp+var_4]
                mov     edx, [ecx+20h]
                push    edx             ; hWnd
                call    ds:SendMessageW
                mov     [ebp+var_8], eax
                jmp     short loc_1090167D
; ---------------------------------------------------------------------------

loc_10901661:                           ; CODE XREF: sub_10901630+11↑j
                push    0               ; lParam
                push    7C5h            ; wParam
                push    111h            ; Msg
                mov     eax, [ebp+var_4]
                mov     ecx, [eax+20h]
                push    ecx             ; hWnd
                call    ds:SendMessageA
                mov     [ebp+var_8], eax

loc_1090167D:                           ; CODE XREF: sub_10901630+2F↑j
                mov     esp, ebp
                pop     ebp
                retn
sub_10901630    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __stdcall sub_10901690(LPARAM lParam, int, int)
sub_10901690    proc near               ; DATA XREF: .rdata:10912DB0↓o

var_30          = dword ptr -30h
var_2C          = dword ptr -2Ch
var_28          = dword ptr -28h
var_24          = dword ptr -24h
var_20          = dword ptr -20h
Msg             = tagMSG ptr -1Ch
lParam          = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 30h
                mov     [ebp+var_24], ecx
                push    8               ; nCmdShow
                mov     eax, [ebp+var_24]
                mov     ecx, [eax+18h]
                push    ecx             ; hWnd
                call    ds:ShowWindow
                mov     edx, [ebp+var_24]
                cmp     dword ptr [edx+10h], 0
                jz      loc_109017D9
                mov     eax, [ebp+var_24]
                cmp     dword ptr [eax+14h], 0
                jz      loc_109017D9
                mov     ecx, ds:GUnicodeOS
                cmp     dword ptr [ecx], 0
                jz      short loc_109016E7
                mov     edx, [ebp+lParam]
                push    edx             ; lParam
                push    0               ; wParam
                push    0Ch             ; Msg
                mov     eax, [ebp+var_24]
                mov     ecx, [eax+14h]
                push    ecx             ; hWnd
                call    ds:SendMessageW
                mov     [ebp+var_28], eax
                jmp     short loc_1090173C
; ---------------------------------------------------------------------------

loc_109016E7:                           ; CODE XREF: sub_10901690+3B↑j
                mov     edx, [ebp+lParam]
                push    edx
                call    ds:?dnWinGetSizeANSI@@YAHPB_W@Z ; dnWinGetSizeANSI(wchar_t const *)
                add     esp, 4
                mov     [ebp+var_20], eax
                mov     eax, [ebp+var_20]
                add     eax, 7
                and     eax, 0FFFFFFF8h
                call    __alloca_probe_16
                mov     [ebp+var_2C], esp
                mov     eax, [ebp+lParam]
                push    eax
                call    ds:?dnWinGetSizeANSI@@YAHPB_W@Z ; dnWinGetSizeANSI(wchar_t const *)
                add     esp, 4
                push    eax
                mov     ecx, [ebp+lParam]
                push    ecx
                mov     edx, [ebp+var_2C]
                push    edx
                call    ds:?dnWinToANSI@@YAPADPADPB_WH@Z ; dnWinToANSI(char *,wchar_t const *,int)
                add     esp, 0Ch
                push    eax             ; lParam
                push    0               ; wParam
                push    0Ch             ; Msg
                mov     eax, [ebp+var_24]
                mov     ecx, [eax+14h]
                push    ecx             ; hWnd
                call    ds:SendMessageA
                mov     [ebp+var_28], eax

loc_1090173C:                           ; CODE XREF: sub_10901690+55↑j
                mov     edx, ds:GUnicodeOS
                cmp     dword ptr [edx], 0
                jz      short loc_10901765
                push    640000h         ; lParam
                push    0               ; wParam
                push    401h            ; Msg
                mov     eax, [ebp+var_24]
                mov     ecx, [eax+10h]
                push    ecx             ; hWnd
                call    ds:SendMessageW
                mov     [ebp+var_30], eax
                jmp     short loc_10901781
; ---------------------------------------------------------------------------

loc_10901765:                           ; CODE XREF: sub_10901690+B5↑j
                push    640000h         ; lParam
                push    0               ; wParam
                push    401h            ; Msg
                mov     edx, [ebp+var_24]
                mov     eax, [edx+10h]
                push    eax             ; hWnd
                call    ds:SendMessageA
                mov     [ebp+var_30], eax

loc_10901781:                           ; CODE XREF: sub_10901690+D3↑j
                mov     ecx, [ebp+var_24]
                mov     edx, [ecx+18h]
                push    edx             ; hWnd
                call    ds:UpdateWindow
                mov     eax, [ebp+var_24]
                mov     ecx, [eax+14h]
                push    ecx             ; hWnd
                call    ds:UpdateWindow
                mov     edx, [ebp+var_24]
                mov     eax, [edx+14h]
                push    eax             ; hWnd
                call    ds:UpdateWindow

loc_109017A8:                           ; CODE XREF: sub_10901690+147↓j
                push    1               ; wRemoveMsg
                push    0               ; wMsgFilterMax
                push    0               ; wMsgFilterMin
                mov     ecx, [ebp+var_24]
                mov     edx, [ecx+18h]
                push    edx             ; hWnd
                lea     eax, [ebp+Msg]
                push    eax             ; lpMsg
                call    ds:PeekMessageW
                test    eax, eax
                jz      short loc_109017D9
                lea     ecx, [ebp+Msg]
                push    ecx             ; lpMsg
                call    ds:TranslateMessage
                lea     edx, [ebp+Msg]
                push    edx             ; lpMsg
                call    ds:DispatchMessageW
                jmp     short loc_109017A8
; ---------------------------------------------------------------------------

loc_109017D9:                           ; CODE XREF: sub_10901690+1F↑j
                                        ; sub_10901690+2C↑j ...
                mov     eax, [ebp+var_24]
                mov     ecx, [eax+0Ch]
                add     ecx, 1
                mov     edx, [ebp+var_24]
                mov     [edx+0Ch], ecx
                mov     eax, [ebp+var_24]
                xor     ecx, ecx
                cmp     dword ptr [eax+0Ch], 0
                setnle  cl
                mov     edx, ds:GIsSlowTask
                mov     [edx], ecx
                lea     esp, [ebp-30h]
                mov     esp, ebp
                pop     ebp
                retn    0Ch
sub_10901690    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10901810    proc near               ; DATA XREF: .rdata:10912DB4↓o

var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp+var_4], ecx
                mov     eax, [ebp+var_4]
                mov     ecx, [eax+0Ch]
                sub     ecx, 1
                mov     edx, [ebp+var_4]
                mov     [edx+0Ch], ecx
                mov     eax, [ebp+var_4]
                xor     ecx, ecx
                cmp     dword ptr [eax+0Ch], 0
                setnle  cl
                mov     edx, ds:GIsSlowTask
                mov     [edx], ecx
                mov     eax, ds:GIsSlowTask
                cmp     dword ptr [eax], 0
                jnz     short loc_10901853
                push    0               ; nCmdShow
                mov     ecx, [ebp+var_4]
                mov     edx, [ecx+18h]
                push    edx             ; hWnd
                call    ds:ShowWindow

loc_10901853:                           ; CODE XREF: sub_10901810+32↑j
                mov     esp, ebp
                pop     ebp
                retn
sub_10901810    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_10901860(int, int, int, wchar_t *Format, char)
sub_10901860    proc near               ; DATA XREF: .rdata:10912DB8↓o

var_203C        = dword ptr -203Ch
var_2038        = dword ptr -2038h
wParam          = dword ptr -2034h
var_2030        = dword ptr -2030h
var_202C        = dword ptr -202Ch
var_2028        = dword ptr -2028h
Msg             = tagMSG ptr -2024h
Dest            = word ptr -2008h
Args            = dword ptr -4
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch
arg_8           = dword ptr  10h
Format          = dword ptr  14h
arg_10          = byte ptr  18h

                push    ebp
                mov     ebp, esp
                mov     eax, 203Ch
                call    __alloca_probe
                lea     eax, [ebp+arg_10]
                mov     [ebp+Args], eax
                mov     ecx, [ebp+Args]
                push    ecx             ; Args
                mov     edx, [ebp+Format]
                push    edx             ; Format
                push    1000h           ; Count
                lea     eax, [ebp+Dest]
                push    eax             ; Dest
                call    ds:_vsnwprintf
                add     esp, 10h
                mov     [ebp+Args], 0
                mov     ecx, ds:GIsSlowTask
                cmp     dword ptr [ecx], 0
                jz      loc_10901A4C
                mov     edx, [ebp+arg_0]
                cmp     dword ptr [edx+10h], 0
                jz      loc_10901A4C
                mov     eax, [ebp+arg_0]
                cmp     dword ptr [eax+14h], 0
                jz      loc_10901A4C
                mov     ecx, ds:GUnicodeOS
                cmp     dword ptr [ecx], 0
                jz      short loc_109018EB
                lea     edx, [ebp+Dest]
                push    edx             ; lParam
                push    0               ; wParam
                push    0Ch             ; Msg
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+14h]
                push    ecx             ; hWnd
                call    ds:SendMessageW
                mov     [ebp+var_202C], eax
                jmp     short loc_10901958
; ---------------------------------------------------------------------------

loc_109018EB:                           ; CODE XREF: sub_10901860+69↑j
                lea     edx, [ebp+Dest]
                push    edx
                call    ds:?dnWinGetSizeANSI@@YAHPB_W@Z ; dnWinGetSizeANSI(wchar_t const *)
                add     esp, 4
                mov     [ebp+var_2028], eax
                mov     eax, [ebp+var_2028]
                add     eax, 7
                and     eax, 0FFFFFFF8h
                call    __alloca_probe_16
                mov     [ebp+var_2030], esp
                lea     eax, [ebp+Dest]
                push    eax
                call    ds:?dnWinGetSizeANSI@@YAHPB_W@Z ; dnWinGetSizeANSI(wchar_t const *)
                add     esp, 4
                push    eax
                lea     ecx, [ebp+Dest]
                push    ecx
                mov     edx, [ebp+var_2030]
                push    edx
                call    ds:?dnWinToANSI@@YAPADPADPB_WH@Z ; dnWinToANSI(char *,wchar_t const *,int)
                add     esp, 0Ch
                push    eax             ; lParam
                push    0               ; wParam
                push    0Ch             ; Msg
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+14h]
                push    ecx             ; hWnd
                call    ds:SendMessageA
                mov     [ebp+var_202C], eax

loc_10901958:                           ; CODE XREF: sub_10901860+89↑j
                mov     edx, ds:GUnicodeOS
                cmp     dword ptr [edx], 0
                jz      short loc_109019A8
                cmp     [ebp+arg_8], 0
                jz      short loc_1090197B
                mov     eax, [ebp+arg_4]
                imul    eax, 64h
                cdq
                idiv    [ebp+arg_8]
                mov     [ebp+wParam], eax
                jmp     short loc_10901985
; ---------------------------------------------------------------------------

loc_1090197B:                           ; CODE XREF: sub_10901860+107↑j
                mov     [ebp+wParam], 0

loc_10901985:                           ; CODE XREF: sub_10901860+119↑j
                push    0               ; lParam
                mov     eax, [ebp+wParam]
                push    eax             ; wParam
                push    402h            ; Msg
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+10h]
                push    edx             ; hWnd
                call    ds:SendMessageW
                mov     [ebp+var_2038], eax
                jmp     short loc_109019EB
; ---------------------------------------------------------------------------

loc_109019A8:                           ; CODE XREF: sub_10901860+101↑j
                cmp     [ebp+arg_8], 0
                jz      short loc_109019C0
                mov     eax, [ebp+arg_4]
                imul    eax, 64h
                cdq
                idiv    [ebp+arg_8]
                mov     [ebp+var_203C], eax
                jmp     short loc_109019CA
; ---------------------------------------------------------------------------

loc_109019C0:                           ; CODE XREF: sub_10901860+14C↑j
                mov     [ebp+var_203C], 0

loc_109019CA:                           ; CODE XREF: sub_10901860+15E↑j
                push    0               ; lParam
                mov     eax, [ebp+var_203C]
                push    eax             ; wParam
                push    402h            ; Msg
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+10h]
                push    edx             ; hWnd
                call    ds:SendMessageA
                mov     [ebp+var_2038], eax

loc_109019EB:                           ; CODE XREF: sub_10901860+146↑j
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+18h]
                push    ecx             ; hWnd
                call    ds:UpdateWindow
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+14h]
                push    eax             ; hWnd
                call    ds:UpdateWindow
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+10h]
                push    edx             ; hWnd
                call    ds:UpdateWindow

loc_10901A12:                           ; CODE XREF: sub_10901860+1EA↓j
                push    1               ; wRemoveMsg
                push    0               ; wMsgFilterMax
                push    0               ; wMsgFilterMin
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+18h]
                push    ecx             ; hWnd
                lea     edx, [ebp+Msg]
                push    edx             ; lpMsg
                call    ds:PeekMessageW
                test    eax, eax
                jz      short loc_10901A4C
                lea     eax, [ebp+Msg]
                push    eax             ; lpMsg
                call    ds:TranslateMessage
                lea     ecx, [ebp+Msg]
                push    ecx             ; lpMsg
                call    ds:DispatchMessageW
                jmp     short loc_10901A12
; ---------------------------------------------------------------------------

loc_10901A4C:                           ; CODE XREF: sub_10901860+40↑j
                                        ; sub_10901860+4D↑j ...
                lea     esp, [ebp-203Ch]
                mov     esp, ebp
                pop     ebp
                retn
sub_10901860    endp

; ---------------------------------------------------------------------------
                align 10h
; [0000000D BYTES: COLLAPSED FUNCTION unknown_libname_1. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 10h
                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp-4], ecx
                mov     ecx, [ebp-4]
                add     ecx, 8
                call    ds:??0dnString@@QAE@XZ ; dnString::dnString(void)
                mov     eax, [ebp-4]
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10901A90    proc near               ; CODE XREF: sub_10903620+CEA3↓j
                                        ; sub_109036D0+CE13↓j

var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp+var_4], ecx
                mov     ecx, [ebp+var_4]
                add     ecx, 8
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                mov     esp, ebp
                pop     ebp
                retn
sub_10901A90    endp

; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp-4], ecx
                mov     ecx, [ebp-4]
                call    ds:??0dnFileMgr@@QAE@XZ ; dnFileMgr::dnFileMgr(void)
                mov     eax, [ebp-4]
                mov     dword ptr [eax], offset ??_7dnFileMgrGeneric@@6B@ ; const dnFileMgrGeneric::`vftable'
                mov     eax, [ebp-4]
                mov     esp, ebp
                pop     ebp
                retn

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10901AD0    proc near               ; CODE XREF: sub_10901AF0+A5↓p
                                        ; sub_10904980+6E↓p

arg_0           = byte ptr  8

                push    ebp
                mov     ebp, esp
                movzx   eax, [ebp+arg_0]
                and     eax, 8000001Fh
                jns     short loc_10901AE3
                dec     eax
                or      eax, 0FFFFFFE0h
                inc     eax

loc_10901AE3:                           ; CODE XREF: sub_10901AD0+C↑j
                mov     al, byte_10921548[eax]
                pop     ebp
                retn
sub_10901AD0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10901AF0    proc near               ; CODE XREF: sub_1090A940+C7↓p

var_C           = dword ptr -0Ch
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 0Ch
                push    ebx
                push    esi
                mov     ecx, [ebp+arg_0]
                call    ds:?GetTypedData@?$dnArray@E@@QAEPAEXZ ; dnArray<uchar>::GetTypedData(void)
                mov     esi, eax
                mov     ecx, [ebp+arg_0]
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                mov     eax, [esi+eax-4]
                mov     [ebp+var_4], eax
                push    4
                mov     ecx, [ebp+arg_0]
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                sub     eax, 4
                push    eax
                mov     ecx, [ebp+arg_0]
                call    ds:?Remove@?$dnArray@E@@QAEXHH@Z ; dnArray<uchar>::Remove(int,int)
                mov     ecx, [ebp+var_4]
                push    ecx
                mov     ecx, [ebp+arg_0]
                call    ds:?IsValidIndex@dnArrayBase@@QBEHH@Z ; dnArrayBase::IsValidIndex(int)
                test    eax, eax
                jz      short loc_10901BBA
                mov     edx, [ebp+var_4]
                push    edx
                mov     ecx, [ebp+arg_0]
                call    ds:??A?$dnArray@E@@QAEAAEH@Z ; dnArray<uchar>::operator[](int)
                movzx   eax, byte ptr [eax]
                mov     [ebp+var_8], eax
                push    1
                mov     ecx, [ebp+var_4]
                push    ecx
                mov     ecx, [ebp+arg_0]
                call    ds:?Remove@?$dnArray@E@@QAEXHH@Z ; dnArray<uchar>::Remove(int,int)
                mov     [ebp+var_C], 0
                jmp     short loc_10901B70
; ---------------------------------------------------------------------------

loc_10901B67:                           ; CODE XREF: sub_10901AF0+C1↓j
                mov     edx, [ebp+var_C]
                add     edx, 1
                mov     [ebp+var_C], edx

loc_10901B70:                           ; CODE XREF: sub_10901AF0+75↑j
                mov     ecx, [ebp+arg_0]
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                cmp     [ebp+var_C], eax
                jge     short loc_10901BB3
                mov     eax, [ebp+var_C]
                push    eax
                mov     ecx, [ebp+arg_0]
                call    ds:??A?$dnArray@E@@QAEAAEH@Z ; dnArray<uchar>::operator[](int)
                movzx   ebx, byte ptr [eax]
                mov     ecx, [ebp+var_8]
                add     ecx, [ebp+var_C]
                push    ecx
                call    sub_10901AD0
                add     esp, 4
                movzx   edx, al
                sub     ebx, edx
                mov     eax, [ebp+var_C]
                push    eax
                mov     ecx, [ebp+arg_0]
                call    ds:??A?$dnArray@E@@QAEAAEH@Z ; dnArray<uchar>::operator[](int)
                mov     [eax], bl
                jmp     short loc_10901B67
; ---------------------------------------------------------------------------

loc_10901BB3:                           ; CODE XREF: sub_10901AF0+8C↑j
                mov     eax, 1
                jmp     short loc_10901BBC
; ---------------------------------------------------------------------------

loc_10901BBA:                           ; CODE XREF: sub_10901AF0+4A↑j
                xor     eax, eax

loc_10901BBC:                           ; CODE XREF: sub_10901AF0+C8↑j
                pop     esi
                pop     ebx
                mov     esp, ebp
                pop     ebp
                retn
sub_10901AF0    endp

; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp-4], ecx
                mov     eax, [ebp-4]
                mov     dword ptr [eax], offset ??_7dnConfigCache@@6B@ ; const dnConfigCache::`vftable'
                mov     eax, [ebp-4]
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10901BF0    proc near               ; CODE XREF: WinMain(x,x,x,x)+7B2↓p
                push    ebp
                mov     ebp, esp
                pop     ebp
                retn
sub_10901BF0    endp

; ---------------------------------------------------------------------------
                align 10h
                mov     eax, ds:GCmdLine
                retn
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10901C10    proc near               ; CODE XREF: WinMain(x,x,x,x):loc_1090E2CC↓p
                                        ; WinMain(x,x,x,x)+7B7↓p

var_8           = qword ptr -8

                push    ebp
                mov     ebp, esp
                mov     eax, ds:GTimestamp
                sub     esp, 0Ch
                cmp     dword ptr [eax], 0
                jz      short loc_10901C5B
                rdtsc
                mov     dword ptr [ebp+var_8], eax
                mov     dword ptr [ebp+var_8+4], edx
                fild    dword ptr [ebp+var_8+4]
                mov     ecx, dword ptr [ebp+var_8+4]
                test    ecx, ecx
                jge     short loc_10901C38
                fadd    ds:dbl_10912EC8

loc_10901C38:                           ; CODE XREF: sub_10901C10+20↑j
                mov     edx, dword ptr [ebp+var_8]
                fmul    ds:dbl_10912EC8
                fild    dword ptr [ebp+var_8]
                test    edx, edx
                jge     short loc_10901C4E
                fadd    ds:dbl_10912EC8

loc_10901C4E:                           ; CODE XREF: sub_10901C10+36↑j
                mov     eax, ds:GSecondsPerCycle
                faddp   st(1), st
                fmul    qword ptr [eax]
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------

loc_10901C5B:                           ; CODE XREF: sub_10901C10+E↑j
                call    ds:?dnSecondsSlow@@YANXZ ; dnSecondsSlow(void)
                mov     esp, ebp
                pop     ebp
                retn
sub_10901C10    endp

; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                mov     eax, ecx
                mov     ecx, [ebp+8]
                mov     [eax], ecx
                pop     ebp
                retn    4
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __stdcall sub_10901C80(LPCWSTR lpString, int, int)
sub_10901C80    proc near               ; CODE XREF: sub_10902900+1F↓p
                                        ; .text:1090863D↓p

var_4           = dword ptr -4
lpString        = dword ptr  8
arg_4           = dword ptr  0Ch
arg_8           = dword ptr  10h

                push    ebp
                mov     ebp, esp
                push    ecx
                mov     eax, [ebp+lpString]
                push    ebx
                push    esi
                push    edi
                push    eax             ; lpString
                mov     [ebp+var_4], ecx
                call    ds:lstrlenW
                mov     esi, eax
                inc     esi
                lea     edi, [esi+esi]
                cmp     edi, [ebp+arg_8]
                jbe     short loc_10901CB5
                call    ds:?GetMalloc@@YAPAVFMalloc@@XZ ; GetMalloc(void)
                mov     edx, [eax]
                push    8
                mov     ecx, eax
                mov     eax, [edx+4]
                push    edi
                call    eax
                mov     ebx, eax
                jmp     short loc_10901CB8
; ---------------------------------------------------------------------------

loc_10901CB5:                           ; CODE XREF: sub_10901C80+1D↑j
                mov     ebx, [ebp+arg_4]

loc_10901CB8:                           ; CODE XREF: sub_10901C80+33↑j
                mov     ecx, [ebp+lpString]
                mov     edx, [ebp+var_4]
                mov     eax, [edx]
                push    0               ; lpUsedDefaultChar
                push    0               ; lpDefaultChar
                push    edi             ; cbMultiByte
                push    ebx             ; lpMultiByteStr
                push    esi             ; cchWideChar
                push    ecx             ; lpWideCharStr
                push    0               ; dwFlags
                push    eax             ; CodePage
                call    ds:WideCharToMultiByte
                pop     edi
                pop     esi
                mov     eax, ebx
                pop     ebx
                mov     esp, ebp
                pop     ebp
                retn    0Ch
sub_10901C80    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10901CE0    proc near               ; CODE XREF: WinMain(x,x,x,x)+69↓p

var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp+var_4], ecx
                mov     eax, ds:?appFailAssert@@YAXPBD0H@Z ; appFailAssert(char const *,char const *,int)
                push    eax
                call    _SetAssertionFailedHandler
                add     esp, 4
                mov     ecx, ds:?appFailAssertEx@@YAXPBD0HPB_W@Z ; appFailAssertEx(char const *,char const *,int,wchar_t const *)
                push    ecx
                call    _SetAssertionFailedExHandler
                add     esp, 4
                mov     edx, ds:?StaticEnterSafeMode@UObject@@SAXPB_W@Z ; UObject::StaticEnterSafeMode(wchar_t const *)
                push    edx
                call    _SetEnterSafeModeHandler
                add     esp, 4
                mov     eax, [ebp+var_4]
                mov     esp, ebp
                pop     ebp
                retn
sub_10901CE0    endp

; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                mov     eax, [ebp+8]
                movzx   edx, ax
                lea     ecx, [edx-9Ch]  ; switch 100 cases
                cmp     ecx, 63h
                ja      short loc_10901D50 ; jumptable 10901D3B default case
                movzx   ecx, ds:byte_10901D80[ecx]
                jmp     ds:off_10901D70[ecx*4] ; switch jump
; ---------------------------------------------------------------------------

loc_10901D42:                           ; CODE XREF: .text:10901D3B↑j
                                        ; DATA XREF: .text:off_10901D70↓o
                mov     eax, 9Fh        ; jumptable 10901D3B case 255
                pop     ebp
                retn
; ---------------------------------------------------------------------------

loc_10901D49:                           ; CODE XREF: .text:10901D3B↑j
                                        ; DATA XREF: .text:off_10901D70↓o
                mov     eax, 8Ch        ; jumptable 10901D3B case 156
                pop     ebp
                retn
; ---------------------------------------------------------------------------

loc_10901D50:                           ; CODE XREF: .text:10901D32↑j
                                        ; .text:10901D3B↑j
                                        ; DATA XREF: ...
                cmp     ax, 61h         ; jumptable 10901D3B default case
                jb      short loc_10901D5C
                cmp     ax, 7Ah
                jbe     short loc_10901D68

loc_10901D5C:                           ; CODE XREF: .text:10901D54↑j
                lea     ecx, [eax-0E0h]
                cmp     cx, 1Eh
                ja      short loc_10901D6B ; jumptable 10901D3B cases 208,223,240,247

loc_10901D68:                           ; CODE XREF: .text:10901D5A↑j
                lea     eax, [edx-20h]

loc_10901D6B:                           ; CODE XREF: .text:10901D3B↑j
                                        ; .text:10901D66↑j
                                        ; DATA XREF: ...
                pop     ebp             ; jumptable 10901D3B cases 208,223,240,247
                retn
; ---------------------------------------------------------------------------
                align 10h
off_10901D70    dd offset loc_10901D49, offset loc_10901D6B, offset loc_10901D42
                                        ; DATA XREF: .text:10901D3B↑r
                dd offset loc_10901D50  ; jump table for switch statement
byte_10901D80   db      0,     3,     3,     3
                                        ; DATA XREF: .text:10901D34↑r
                db      3,     3,     3,     3 ; indirect table for switch statement
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      1,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     1
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      1,     3,     3,     3
                db      3,     3,     3,     1
                db      3,     3,     3,     3
                db      3,     3,     3,     2
                align 10h
                push    ebp
                mov     ebp, esp
                mov     eax, [ebp+8]
                movzx   edx, ax
                lea     ecx, [edx-8Ch]  ; switch 108 cases
                cmp     ecx, 6Bh
                ja      short loc_10901E20 ; jumptable 10901E0B default case
                movzx   ecx, ds:byte_10901E54[ecx]
                jmp     ds:off_10901E44[ecx*4] ; switch jump
; ---------------------------------------------------------------------------

loc_10901E12:                           ; CODE XREF: .text:10901E0B↑j
                                        ; DATA XREF: .text:off_10901E44↓o
                mov     eax, 0FFh       ; jumptable 10901E0B case 159
                pop     ebp
                retn
; ---------------------------------------------------------------------------

loc_10901E19:                           ; CODE XREF: .text:10901E0B↑j
                                        ; DATA XREF: .text:off_10901E44↓o
                mov     eax, 9Ch        ; jumptable 10901E0B case 140
                pop     ebp
                retn
; ---------------------------------------------------------------------------

loc_10901E20:                           ; CODE XREF: .text:10901E02↑j
                                        ; .text:10901E0B↑j
                                        ; DATA XREF: ...
                mov     ecx, 0C0h       ; jumptable 10901E0B default case
                cmp     ax, cx
                jb      short loc_10901E34
                mov     ecx, 0DFh
                cmp     ax, cx
                jb      short loc_10901E3D

loc_10901E34:                           ; CODE XREF: .text:10901E28↑j
                lea     ecx, [eax-41h]
                cmp     cx, 19h
                ja      short loc_10901E40 ; jumptable 10901E0B cases 208,223,240,247

loc_10901E3D:                           ; CODE XREF: .text:10901E32↑j
                lea     eax, [edx+20h]

loc_10901E40:                           ; CODE XREF: .text:10901E0B↑j
                                        ; .text:10901E3B↑j
                                        ; DATA XREF: ...
                pop     ebp             ; jumptable 10901E0B cases 208,223,240,247
                retn
; ---------------------------------------------------------------------------
                align 4
off_10901E44    dd offset loc_10901E19, offset loc_10901E12, offset loc_10901E40
                                        ; DATA XREF: .text:10901E0B↑r
                dd offset loc_10901E20  ; jump table for switch statement
byte_10901E54   db      0,     3,     3,     3
                                        ; DATA XREF: .text:10901E04↑r
                db      3,     3,     3,     3 ; indirect table for switch statement
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     1
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      2,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     2
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      2,     3,     3,     3
                db      3,     3,     3,     2
; ---------------------------------------------------------------------------
                push    ebp
                mov     ebp, esp
                mov     eax, [ebp+8]
                lea     edx, [eax+2]
                lea     esp, [esp+0]

loc_10901ED0:                           ; CODE XREF: .text:10901ED9↓j
                mov     cx, [eax]
                add     eax, 2
                test    cx, cx
                jnz     short loc_10901ED0
                sub     eax, edx
                sar     eax, 1
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                mov     eax, [ebp+8]
                mov     ecx, [ebp+0Ch]
                push    esi
                mov     esi, eax
                sub     esi, ecx
                mov     edi, edi

loc_10901F00:                           ; CODE XREF: .text:10901F0D↓j
                movzx   edx, word ptr [ecx]
                mov     [esi+ecx], dx
                add     ecx, 2
                test    dx, dx
                jnz     short loc_10901F00
                pop     esi
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                mov     eax, [ebp+0Ch]
                push    esi
                mov     esi, [ebp+8]
                push    edi
                mov     edi, [ebp+10h]
                push    edi
                push    eax
                push    esi
                call    ds:wcsncpy
                add     esp, 0Ch
                xor     ecx, ecx
                mov     [esi+edi*2-2], cx
                pop     edi
                mov     eax, esi
                pop     esi
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_10901F50(wchar_t *Dest, wchar_t *Format, char Args)
sub_10901F50    proc near               ; CODE XREF: sub_10902E30+66E↓p
                                        ; sub_10902E30+69B↓p ...

Dest            = dword ptr  8
Format          = dword ptr  0Ch
Args            = byte ptr  10h

                push    ebp
                mov     ebp, esp
                mov     ecx, [ebp+Format]
                mov     edx, [ebp+Dest]
                lea     eax, [ebp+Args]
                push    eax             ; Args
                push    ecx             ; Format
                push    400h            ; Count
                push    edx             ; Dest
                call    ds:_vsnwprintf
                add     esp, 10h
                pop     ebp
                retn
sub_10901F50    endp

; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                pop     ebp
; [00000006 BYTES: COLLAPSED FUNCTION _wcschr. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 10h
                push    ebp
                mov     ebp, esp
                mov     eax, [ebp+0Ch]
                mov     edx, eax
                jmp     short loc_10901F90
; ---------------------------------------------------------------------------
                align 10h

loc_10901F90:                           ; CODE XREF: .text:10901F88↑j
                                        ; .text:10901F99↓j
                mov     cx, [eax]
                add     eax, 2
                test    cx, cx
                jnz     short loc_10901F90
                push    ebx
                push    esi
                push    edi
                mov     edi, [ebp+8]
                sub     eax, edx
                add     edi, 0FFFFFFFEh
                lea     ebx, [edi+2]
                lea     esp, [esp+0]

loc_10901FB0:                           ; CODE XREF: .text:10901FBA↓j
                mov     cx, [edi+2]
                add     edi, 2
                test    cx, cx
                jnz     short loc_10901FB0
                mov     ecx, eax
                shr     ecx, 2
                mov     esi, edx
                rep movsd
                mov     ecx, eax
                and     ecx, 3
                rep movsb
                pop     edi
                pop     esi
                mov     eax, ebx
                pop     ebx
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                mov     edx, [ebp+0Ch]
                mov     ecx, [ebp+8]
                lea     esp, [esp+0]

loc_10901FF0:                           ; CODE XREF: .text:10902010↓j
                mov     ax, [ecx]
                cmp     ax, [edx]
                jnz     short loc_10902016
                test    ax, ax
                jz      short loc_10902012
                mov     ax, [ecx+2]
                cmp     ax, [edx+2]
                jnz     short loc_10902016
                add     ecx, 4
                add     edx, 4
                test    ax, ax
                jnz     short loc_10901FF0

loc_10902012:                           ; CODE XREF: .text:10901FFB↑j
                xor     eax, eax
                pop     ebp
                retn
; ---------------------------------------------------------------------------

loc_10902016:                           ; CODE XREF: .text:10901FF6↑j
                                        ; .text:10902005↑j
                sbb     eax, eax
                sbb     eax, 0FFFFFFFFh
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                pop     ebp
; [00000006 BYTES: COLLAPSED FUNCTION __wcsicmp. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 10h
                push    ebp
                mov     ebp, esp
                pop     ebp
; [00000006 BYTES: COLLAPSED FUNCTION __wcsnicmp. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10902040    proc near               ; CODE XREF: .text:1090225D↓p
                                        ; sub_10902870+D↓p ...

arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                mov     eax, 1
                test    byte ptr dword_10922694, al
                jnz     short loc_10902061
                or      dword_10922694, eax
                call    ds:InitCRCTable
                mov     dword_10922690, eax

loc_10902061:                           ; CODE XREF: sub_10902040+E↑j
                push    edi
                mov     edi, [ebp+arg_0]
                movzx   ecx, word ptr [edi]
                xor     eax, eax
                test    cx, cx
                jz      loc_109020FA
                push    esi
                mov     esi, ds:GCRCTable
                lea     ebx, [ebx+0]

loc_10902080:                           ; CODE XREF: sub_10902040+B7↓j
                movzx   ecx, cx
                movzx   edx, cx
                add     edx, 0FFFFFF64h ; switch 100 cases
                cmp     edx, 63h
                ja      short loc_109020AD ; jumptable 10902098 default case
                movzx   edx, ds:byte_10902110[edx]
                jmp     ds:off_10902100[edx*4] ; switch jump
; ---------------------------------------------------------------------------

loc_1090209F:                           ; CODE XREF: sub_10902040+58↑j
                                        ; DATA XREF: .text:off_10902100↓o
                mov     ecx, 9Fh        ; jumptable 10902098 case 255
                jmp     short loc_109020CB
; ---------------------------------------------------------------------------

loc_109020A6:                           ; CODE XREF: sub_10902040+58↑j
                                        ; DATA XREF: .text:off_10902100↓o
                mov     ecx, 8Ch        ; jumptable 10902098 case 156
                jmp     short loc_109020CB
; ---------------------------------------------------------------------------

loc_109020AD:                           ; CODE XREF: sub_10902040+4F↑j
                                        ; sub_10902040+58↑j
                                        ; DATA XREF: ...
                cmp     cx, 61h         ; jumptable 10902098 default case
                jb      short loc_109020B9
                cmp     cx, 7Ah
                jbe     short loc_109020C5

loc_109020B9:                           ; CODE XREF: sub_10902040+71↑j
                lea     edx, [ecx-0E0h]
                cmp     dx, 1Eh
                ja      short loc_109020C8 ; jumptable 10902098 cases 208,223,240,247

loc_109020C5:                           ; CODE XREF: sub_10902040+77↑j
                add     ecx, 0FFFFFFE0h

loc_109020C8:                           ; CODE XREF: sub_10902040+58↑j
                                        ; sub_10902040+83↑j
                                        ; DATA XREF: ...
                movzx   ecx, cx         ; jumptable 10902098 cases 208,223,240,247

loc_109020CB:                           ; CODE XREF: sub_10902040+64↑j
                                        ; sub_10902040+6B↑j
                movzx   edx, cl
                xor     edx, eax
                shr     eax, 8
                and     edx, 0FFh
                xor     eax, [esi+edx*4]
                shr     ecx, 8
                xor     ecx, eax
                and     ecx, 0FFh
                shr     eax, 8
                xor     eax, [esi+ecx*4]
                movzx   ecx, word ptr [edi+2]
                add     edi, 2
                test    cx, cx
                jnz     short loc_10902080
                pop     esi

loc_109020FA:                           ; CODE XREF: sub_10902040+2D↑j
                pop     edi
                pop     ebp
                retn
sub_10902040    endp

; ---------------------------------------------------------------------------
                align 10h
off_10902100    dd offset loc_109020A6, offset loc_109020C8, offset loc_1090209F
                                        ; DATA XREF: sub_10902040+58↑r
                dd offset loc_109020AD  ; jump table for switch statement
byte_10902110   db      0,     3,     3,     3
                                        ; DATA XREF: sub_10902040+51↑r
                db      3,     3,     3,     3 ; indirect table for switch statement
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      1,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     1
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      1,     3,     3,     3
                db      3,     3,     3,     1
                db      3,     3,     3,     3
                db      3,     3,     3,     2
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_10902180(int, wchar_t *Str2)
sub_10902180    proc near               ; CODE XREF: sub_10902270+C↓p
                                        ; sub_10902360+16↓p ...

MaxCount        = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  8
Str2            = dword ptr  0Ch

                push    ebp
                mov     ebp, esp
                sub     esp, 8
                push    ebx
                push    esi
                mov     esi, [ebp+Str2]
                movzx   eax, word ptr [esi]
                xor     ebx, ebx
                push    edi
                cmp     ax, 61h
                jb      short loc_109021A8
                cmp     ax, 7Ah
                ja      short loc_109021A8
                add     eax, 0FFFFFFE0h
                movzx   eax, ax
                mov     [ebp+var_4], eax
                jmp     short loc_109021AE
; ---------------------------------------------------------------------------

loc_109021A8:                           ; CODE XREF: sub_10902180+15↑j
                                        ; sub_10902180+1B↑j
                movzx   ecx, ax
                mov     [ebp+var_4], ecx

loc_109021AE:                           ; CODE XREF: sub_10902180+26↑j
                mov     eax, esi
                lea     edx, [eax+2]

loc_109021B3:                           ; CODE XREF: sub_10902180+3C↓j
                mov     cx, [eax]
                add     eax, 2
                test    cx, cx
                jnz     short loc_109021B3
                mov     edi, [ebp+arg_0]
                add     esi, 2
                sub     eax, edx
                mov     [ebp+Str2], esi
                movzx   esi, word ptr [edi]
                sar     eax, 1
                dec     eax
                add     edi, 2
                mov     [ebp+MaxCount], eax
                test    si, si
                jz      short loc_10902238
                lea     ebx, [ebx+0]

loc_109021E0:                           ; CODE XREF: sub_10902180+B6↓j
                lea     edx, [esi-61h]
                cmp     dx, 19h
                ja      short loc_109021EF
                add     esi, 0FFE0h

loc_109021EF:                           ; CODE XREF: sub_10902180+67↑j
                test    ebx, ebx
                jnz     short loc_1090220F
                cmp     si, word ptr [ebp+var_4]
                jnz     short loc_1090220F
                mov     eax, [ebp+MaxCount]
                mov     ecx, [ebp+Str2]
                push    eax             ; MaxCount
                push    ecx             ; Str2
                push    edi             ; Str1
                call    ds:_wcsnicmp
                add     esp, 0Ch
                test    eax, eax
                jz      short loc_10902241

loc_1090220F:                           ; CODE XREF: sub_10902180+71↑j
                                        ; sub_10902180+77↑j
                cmp     si, 41h
                jb      short loc_1090221B
                cmp     si, 5Ah
                jbe     short loc_10902224

loc_1090221B:                           ; CODE XREF: sub_10902180+93↑j
                add     esi, 0FFFFFFD0h
                cmp     si, 9
                ja      short loc_1090222B

loc_10902224:                           ; CODE XREF: sub_10902180+99↑j
                mov     ebx, 1
                jmp     short loc_1090222D
; ---------------------------------------------------------------------------

loc_1090222B:                           ; CODE XREF: sub_10902180+A2↑j
                xor     ebx, ebx

loc_1090222D:                           ; CODE XREF: sub_10902180+A9↑j
                movzx   esi, word ptr [edi]
                add     edi, 2
                test    si, si
                jnz     short loc_109021E0

loc_10902238:                           ; CODE XREF: sub_10902180+58↑j
                pop     edi
                pop     esi
                xor     eax, eax
                pop     ebx
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------

loc_10902241:                           ; CODE XREF: sub_10902180+8D↑j
                lea     eax, [edi-2]
                pop     edi
                pop     esi
                pop     ebx
                mov     esp, ebp
                pop     ebp
                retn
sub_10902180    endp

; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                mov     ecx, [ebp+8]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                call    sub_10902040
                add     esp, 4
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_10902270(int, wchar_t *Str2, wchar_t *Dest, size_t Count)
sub_10902270    proc near               ; CODE XREF: sub_109023C0+3C↓p
                                        ; sub_10902830+4↓j

arg_0           = dword ptr  8
Str2            = dword ptr  0Ch
Dest            = dword ptr  10h
Count           = dword ptr  14h

                push    ebp
                mov     ebp, esp
                mov     eax, [ebp+arg_0]
                push    esi
                mov     esi, [ebp+Str2]
                push    esi             ; Str2
                push    eax             ; int
                call    sub_10902180
                add     esp, 8
                test    eax, eax
                jz      loc_10902353
                mov     ecx, esi
                lea     esi, [ecx+2]

loc_10902291:                           ; CODE XREF: sub_10902270+2A↓j
                mov     dx, [ecx]
                add     ecx, 2
                test    dx, dx
                jnz     short loc_10902291
                sub     ecx, esi
                mov     esi, [ebp+Dest]
                sar     ecx, 1
                cmp     word ptr [eax+ecx*2], 22h
                push    edi
                mov     edi, [ebp+Count]
                lea     eax, [eax+ecx*2]
                push    edi             ; Count
                jnz     short loc_109022E0
                add     eax, 2
                push    eax             ; Source
                push    esi             ; Dest
                call    ds:wcsncpy
                xor     ecx, ecx
                push    22h             ; Ch
                push    esi             ; Str
                mov     [esi+edi*2-2], cx
                call    ds:wcschr
                add     esp, 14h
                test    eax, eax
                jz      short loc_1090234A
                xor     edx, edx
                pop     edi
                mov     [eax], dx
                lea     eax, [edx+1]
                pop     esi
                pop     ebp
                retn
; ---------------------------------------------------------------------------

loc_109022E0:                           ; CODE XREF: sub_10902270+40↑j
                push    eax             ; Source
                push    esi             ; Dest
                call    ds:wcsncpy
                xor     eax, eax
                mov     [esi+edi*2-2], ax
                mov     edi, ds:wcschr
                push    20h             ; Ch
                push    esi             ; Str
                call    edi ; wcschr
                add     esp, 14h
                test    eax, eax
                jz      short loc_10902306
                xor     ecx, ecx
                mov     [eax], cx

loc_10902306:                           ; CODE XREF: sub_10902270+8F↑j
                push    0Dh             ; Ch
                push    esi             ; Str
                call    edi ; wcschr
                add     esp, 8
                test    eax, eax
                jz      short loc_10902317
                xor     edx, edx
                mov     [eax], dx

loc_10902317:                           ; CODE XREF: sub_10902270+A0↑j
                push    0Ah             ; Ch
                push    esi             ; Str
                call    edi ; wcschr
                add     esp, 8
                test    eax, eax
                jz      short loc_10902328
                xor     ecx, ecx
                mov     [eax], cx

loc_10902328:                           ; CODE XREF: sub_10902270+B1↑j
                push    9               ; Ch
                push    esi             ; Str
                call    edi ; wcschr
                add     esp, 8
                test    eax, eax
                jz      short loc_10902339
                xor     edx, edx
                mov     [eax], dx

loc_10902339:                           ; CODE XREF: sub_10902270+C2↑j
                push    2Ch             ; Ch
                push    esi             ; Str
                call    edi ; wcschr
                add     esp, 8
                test    eax, eax
                jz      short loc_1090234A
                xor     ecx, ecx
                mov     [eax], cx

loc_1090234A:                           ; CODE XREF: sub_10902270+62↑j
                                        ; sub_10902270+D3↑j
                pop     edi
                mov     eax, 1
                pop     esi
                pop     ebp
                retn
; ---------------------------------------------------------------------------

loc_10902353:                           ; CODE XREF: sub_10902270+16↑j
                xor     eax, eax
                pop     esi
                pop     ebp
                retn
sub_10902270    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_10902360(int, wchar_t *Str2)
sub_10902360    proc near               ; CODE XREF: sub_10902850+4↓j

arg_0           = dword ptr  8
Str2            = dword ptr  0Ch

                push    ebp
                mov     ebp, esp
                push    esi
                push    edi
                mov     edi, [ebp+arg_0]
                cmp     word ptr [edi], 0
                jz      short loc_109023A7
                mov     esi, [ebp+Str2]
                lea     eax, [edi+2]
                push    esi             ; Str2
                push    eax             ; int
                call    sub_10902180
                add     esp, 8
                test    eax, eax
                jz      short loc_109023A7

loc_10902382:                           ; CODE XREF: sub_10902360+45↓j
                cmp     eax, edi
                jbe     short loc_10902396
                movzx   ecx, word ptr [eax-2]
                cmp     cx, 2Dh
                jz      short loc_109023AD
                cmp     cx, 2Fh
                jz      short loc_109023AD

loc_10902396:                           ; CODE XREF: sub_10902360+24↑j
                add     eax, 2
                push    esi             ; Str2
                push    eax             ; int
                call    sub_10902180
                add     esp, 8
                test    eax, eax
                jnz     short loc_10902382

loc_109023A7:                           ; CODE XREF: sub_10902360+C↑j
                                        ; sub_10902360+20↑j
                pop     edi
                xor     eax, eax
                pop     esi
                pop     ebp
                retn
; ---------------------------------------------------------------------------

loc_109023AD:                           ; CODE XREF: sub_10902360+2E↑j
                                        ; sub_10902360+34↑j
                pop     edi
                mov     eax, 1
                pop     esi
                pop     ebp
                retn
sub_10902360    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_109023C0(int, wchar_t *Str2, int)
sub_109023C0    proc near               ; CODE XREF: sub_10902840+4↓j

Dest            = word ptr -2000h
Dst             = byte ptr -1FFEh
arg_0           = dword ptr  8
Str2            = dword ptr  0Ch
arg_8           = dword ptr  10h

                push    ebp
                mov     ebp, esp
                mov     eax, 2000h
                call    __alloca_probe
                xor     eax, eax
                push    1FFEh           ; Size
                push    eax             ; Val
                lea     ecx, [ebp+Dst]
                push    ecx             ; Dst
                mov     [ebp+Dest], ax
                call    memset
                mov     eax, [ebp+Str2]
                mov     ecx, [ebp+arg_0]
                push    1000h           ; Count
                lea     edx, [ebp+Dest]
                push    edx             ; Dest
                push    eax             ; Str2
                push    ecx             ; int
                call    sub_10902270
                add     esp, 1Ch
                test    eax, eax
                jz      short loc_10902421
                mov     ecx, [ebp+arg_8]
                lea     edx, [ebp+Dest]
                push    edx
                call    ds:??4dnString@@QAEAAV0@PB_W@Z ; dnString::operator=(wchar_t const *)
                mov     eax, 1
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------

loc_10902421:                           ; CODE XREF: sub_109023C0+46↑j
                xor     eax, eax
                mov     esp, ebp
                pop     ebp
                retn
sub_109023C0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


sub_10902430    proc near               ; CODE XREF: sub_1090CDC0+100↓p
                                        ; sub_109078B0+93A3↓j ...
                mov     dword ptr [ecx], offset ??_7dnConfigCache@@6B@ ; const dnConfigCache::`vftable'
                retn
sub_10902430    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10902440    proc near               ; DATA XREF: .rdata:10912EC0↓o

arg_0           = byte ptr  8

                push    ebp
                mov     ebp, esp
                test    [ebp+arg_0], 1
                push    esi
                mov     esi, ecx
                mov     dword ptr [esi], offset ??_7dnConfigCache@@6B@ ; const dnConfigCache::`vftable'
                jz      short loc_10902462
                call    ds:?GetMalloc@@YAPAVFMalloc@@XZ ; GetMalloc(void)
                mov     edx, [eax]
                mov     ecx, eax
                mov     eax, [edx+10h]
                push    esi
                call    eax

loc_10902462:                           ; CODE XREF: sub_10902440+10↑j
                mov     eax, esi
                pop     esi
                pop     ebp
                retn    4
sub_10902440    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10902470    proc near               ; DATA XREF: .rdata:10912E2C↓o

arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                mov     edx, ds:?GNull@@3PAVdnOutputDevice@@A ; dnOutputDevice * GNull
                mov     edx, [edx]
                mov     eax, [ecx]
                mov     eax, [eax+18h]
                push    esi
                push    edx
                mov     edx, [ebp+arg_0]
                push    0
                push    edx
                call    eax
                mov     esi, eax
                test    esi, esi
                jnz     short loc_10902498
                or      eax, 0FFFFFFFFh
                pop     esi
                pop     ebp
                retn    4
; ---------------------------------------------------------------------------

loc_10902498:                           ; CODE XREF: sub_10902470+1E↑j
                mov     edx, [esi]
                mov     eax, [edx+38h]
                push    edi
                mov     ecx, esi
                call    eax
                mov     edx, [esi]
                mov     edi, eax
                mov     eax, [edx]
                push    1
                mov     ecx, esi
                call    eax
                mov     eax, edi
                pop     edi
                pop     esi
                pop     ebp
                retn    4
sub_10902470    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_109024C0    proc near               ; DATA XREF: .rdata:10912E38↓o

arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch
arg_8           = dword ptr  10h
arg_C           = dword ptr  14h
arg_10          = dword ptr  18h

                push    ebp
                mov     ebp, esp
                mov     edx, [ebp+arg_C]
                push    esi
                push    edi
                mov     edi, [ebp+arg_4]
                mov     esi, ecx
                mov     ecx, [ebp+arg_10]
                mov     eax, [esi]
                mov     eax, [eax+28h]
                push    0
                push    ecx
                mov     ecx, [ebp+arg_8]
                push    edx
                mov     edx, [ebp+arg_0]
                push    ecx
                push    edi
                push    edx
                mov     ecx, esi
                call    eax
                test    eax, eax
                jnz     short loc_109024F0
                pop     edi
                pop     esi
                pop     ebp
                retn    14h
; ---------------------------------------------------------------------------

loc_109024F0:                           ; CODE XREF: sub_109024C0+28↑j
                mov     edx, [esi]
                mov     eax, [edx+24h]
                push    1
                push    1
                push    edi
                mov     ecx, esi
                call    eax
                pop     edi
                mov     eax, 1
                pop     esi
                pop     ebp
                retn    14h
sub_109024C0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __stdcall sub_10902510(wchar_t *Str1)
sub_10902510    proc near               ; CODE XREF: sub_10904D90+64↓p

Str1            = dword ptr  8

                push    ebp
                mov     ebp, esp
                push    ebx
                mov     ebx, ds:_wcsicmp
                push    esi
                mov     esi, [ebp+Str1]
                push    offset Str2     ; Str2
                push    esi             ; Str1
                call    ebx ; _wcsicmp
                add     esp, 8
                test    eax, eax
                jnz     short loc_10902538
                pop     esi
                mov     eax, 1
                pop     ebx
                pop     ebp
                retn    4
; ---------------------------------------------------------------------------

loc_10902538:                           ; CODE XREF: sub_10902510+1B↑j
                movzx   edx, word ptr [esi]
                movzx   eax, dx
                movzx   ecx, ax
                add     ecx, 0FFFFFF64h ; switch 100 cases
                push    edi
                cmp     ecx, 63h
                ja      short loc_10902569 ; jumptable 10902554 default case
                movzx   ecx, ds:byte_1090267C[ecx]
                jmp     ds:off_1090266C[ecx*4] ; switch jump
; ---------------------------------------------------------------------------

loc_1090255B:                           ; CODE XREF: sub_10902510+44↑j
                                        ; DATA XREF: .text:off_1090266C↓o
                mov     edi, 9Fh        ; jumptable 10902554 case 255
                jmp     short loc_10902587
; ---------------------------------------------------------------------------

loc_10902562:                           ; CODE XREF: sub_10902510+44↑j
                                        ; DATA XREF: .text:off_1090266C↓o
                mov     edi, 8Ch        ; jumptable 10902554 case 156
                jmp     short loc_10902587
; ---------------------------------------------------------------------------

loc_10902569:                           ; CODE XREF: sub_10902510+3B↑j
                                        ; sub_10902510+44↑j
                                        ; DATA XREF: ...
                cmp     ax, 61h         ; jumptable 10902554 default case
                jb      short loc_10902575
                cmp     ax, 7Ah
                jbe     short loc_10902581

loc_10902575:                           ; CODE XREF: sub_10902510+5D↑j
                lea     ecx, [eax-0E0h]
                cmp     cx, 1Eh
                ja      short loc_10902584 ; jumptable 10902554 cases 208,223,240,247

loc_10902581:                           ; CODE XREF: sub_10902510+63↑j
                add     eax, 0FFFFFFE0h

loc_10902584:                           ; CODE XREF: sub_10902510+44↑j
                                        ; sub_10902510+6F↑j
                                        ; DATA XREF: ...
                movzx   edi, ax         ; jumptable 10902554 cases 208,223,240,247

loc_10902587:                           ; CODE XREF: sub_10902510+50↑j
                                        ; sub_10902510+57↑j
                movzx   eax, dx
                movzx   ecx, ax
                add     ecx, 0FFFFFF74h ; switch 108 cases
                cmp     ecx, 6Bh
                ja      short loc_109025B4 ; jumptable 1090259F default case
                movzx   edx, ds:byte_109026F0[ecx]
                jmp     ds:off_109026E0[edx*4] ; switch jump
; ---------------------------------------------------------------------------

loc_109025A6:                           ; CODE XREF: sub_10902510+8F↑j
                                        ; DATA XREF: .text:off_109026E0↓o
                mov     eax, 0FFh       ; jumptable 1090259F case 159
                jmp     short loc_109025D7
; ---------------------------------------------------------------------------

loc_109025AD:                           ; CODE XREF: sub_10902510+8F↑j
                                        ; DATA XREF: .text:off_109026E0↓o
                mov     eax, 9Ch        ; jumptable 1090259F case 140
                jmp     short loc_109025D7
; ---------------------------------------------------------------------------

loc_109025B4:                           ; CODE XREF: sub_10902510+86↑j
                                        ; sub_10902510+8F↑j
                                        ; DATA XREF: ...
                mov     ecx, 0C0h       ; jumptable 1090259F default case
                cmp     ax, cx
                jb      short loc_109025C8
                mov     edx, 0DFh
                cmp     ax, dx
                jb      short loc_109025D1

loc_109025C8:                           ; CODE XREF: sub_10902510+AC↑j
                lea     ecx, [eax-41h]
                cmp     cx, 19h
                ja      short loc_109025D4 ; jumptable 1090259F cases 208,223,240,247

loc_109025D1:                           ; CODE XREF: sub_10902510+B6↑j
                add     eax, 20h

loc_109025D4:                           ; CODE XREF: sub_10902510+8F↑j
                                        ; sub_10902510+BF↑j
                                        ; DATA XREF: ...
                movzx   eax, ax         ; jumptable 1090259F cases 208,223,240,247

loc_109025D7:                           ; CODE XREF: sub_10902510+9B↑j
                                        ; sub_10902510+A2↑j
                cmp     di, ax
                jz      short loc_109025EA
                cmp     word ptr [esi+2], 3Ah
                jnz     short loc_109025EA
                cmp     word ptr [esi+4], 0
                jz      short loc_10902657

loc_109025EA:                           ; CODE XREF: sub_10902510+CA↑j
                                        ; sub_10902510+D1↑j
                push    offset asc_10912ED8 ; "\\"
                push    esi             ; Str1
                call    ebx ; _wcsicmp
                add     esp, 8
                test    eax, eax
                jz      short loc_10902657
                push    offset asc_10912ED0 ; "\\\\"
                push    esi             ; Str1
                call    ebx ; _wcsicmp
                add     esp, 8
                test    eax, eax
                jz      short loc_10902657
                mov     ebx, 5Ch
                cmp     [esi], bx
                jnz     short loc_10902663
                mov     edi, ds:wcschr
                cmp     [esi+2], bx
                jnz     short loc_1090262C
                lea     edx, [esi+4]
                push    ebx             ; Ch
                push    edx             ; Str
                call    edi ; wcschr
                add     esp, 8
                test    eax, eax
                jz      short loc_10902657

loc_1090262C:                           ; CODE XREF: sub_10902510+10C↑j
                cmp     [esi], bx
                jnz     short loc_10902663
                cmp     [esi+2], bx
                jnz     short loc_10902663
                add     esi, 4
                push    ebx             ; Ch
                push    esi             ; Str
                call    edi ; wcschr
                add     esp, 8
                test    eax, eax
                jz      short loc_10902663
                push    ebx             ; Ch
                push    esi             ; Str
                call    edi ; wcschr
                add     eax, 2
                push    ebx             ; Ch
                push    eax             ; Str
                call    edi ; wcschr
                add     esp, 10h
                test    eax, eax
                jnz     short loc_10902663

loc_10902657:                           ; CODE XREF: sub_10902510+D8↑j
                                        ; sub_10902510+E7↑j ...
                pop     edi
                pop     esi
                mov     eax, 1
                pop     ebx
                pop     ebp
                retn    4
; ---------------------------------------------------------------------------

loc_10902663:                           ; CODE XREF: sub_10902510+100↑j
                                        ; sub_10902510+11F↑j ...
                pop     edi
                pop     esi
                xor     eax, eax
                pop     ebx
                pop     ebp
                retn    4
sub_10902510    endp

; ---------------------------------------------------------------------------
off_1090266C    dd offset loc_10902562, offset loc_10902584, offset loc_1090255B
                                        ; DATA XREF: sub_10902510+44↑r
                dd offset loc_10902569  ; jump table for switch statement
byte_1090267C   db      0,     3,     3,     3
                                        ; DATA XREF: sub_10902510+3D↑r
                db      3,     3,     3,     3 ; indirect table for switch statement
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      1,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     1
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      1,     3,     3,     3
                db      3,     3,     3,     1
                db      3,     3,     3,     3
                db      3,     3,     3,     2
off_109026E0    dd offset loc_109025AD, offset loc_109025A6, offset loc_109025D4
                                        ; DATA XREF: sub_10902510+8F↑r
                dd offset loc_109025B4  ; jump table for switch statement
byte_109026F0   db      0,     3,     3,     3
                                        ; DATA XREF: sub_10902510+88↑r
                db      3,     3,     3,     3 ; indirect table for switch statement
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     1
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      2,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     2
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      3,     3,     3,     3
                db      2,     3,     3,     3
                db      3,     3,     3,     2
                align 10h
                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp-4], ecx
                mov     eax, [ebp+8]
                imul    eax, 24h
                mov     ecx, [ebp-4]
                add     eax, [ecx]
                mov     esp, ebp
                pop     ebp
                retn    4
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp-4], ecx
                mov     ecx, [ebp-4]
                call    ds:??0dnArrayBase@@QAE@XZ ; dnArrayBase::dnArrayBase(void)
                mov     eax, [ebp-4]
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp-4], ecx
                mov     eax, [ebp+8]
                imul    eax, 2Ch
                mov     ecx, [ebp-4]
                add     eax, [ecx]
                mov     esp, ebp
                pop     ebp
                retn    4
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_109027C0    proc near               ; CODE XREF: sub_10902E30+16C↓p
                                        ; sub_10902E30+284↓p ...

var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                push    ecx
                mov     eax, ds:GCmdLine
                push    esi
                mov     esi, [ebp+arg_0]
                push    eax
                mov     ecx, esi
                mov     [ebp+var_4], 0
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
                mov     eax, esi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_109027C0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_109027F0    proc near               ; CODE XREF: sub_10902E30+B0↓p

var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                push    ecx
                push    esi
                mov     esi, [ebp+arg_0]
                push    esi
                mov     [ebp+var_4], 0
                call    ds:?dnBaseDir@@YA?BVdnString@@XZ ; dnBaseDir(void)
                add     esp, 4
                mov     eax, esi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_109027F0    endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10902810    proc near               ; CODE XREF: sub_10902E30+363↓p
                                        ; WinMain(x,x,x,x)+B3↓p ...

var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                push    ecx
                push    esi
                mov     esi, [ebp+arg_0]
                push    esi
                mov     [ebp+var_4], 0
                call    ds:?dnPackage@@YA?BVdnString@@XZ ; dnPackage(void)
                add     esp, 4
                mov     eax, esi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_10902810    endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10902830    proc near               ; CODE XREF: sub_10902E30+271↓p
                                        ; sub_10902E30+2D5↓p ...
                push    ebp
                mov     ebp, esp
                pop     ebp
                jmp     sub_10902270
sub_10902830    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10902840    proc near               ; CODE XREF: WinMain(x,x,x,x)+827↓p
                push    ebp
                mov     ebp, esp
                pop     ebp
                jmp     sub_109023C0
sub_10902840    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10902850    proc near               ; CODE XREF: WinMain(x,x,x,x)+145↓p
                                        ; WinMain(x,x,x,x)+1A7↓p ...
                push    ebp
                mov     ebp, esp
                pop     ebp
                jmp     sub_10902360
sub_10902850    endp

; ---------------------------------------------------------------------------
                align 10h
; [00000006 BYTES: COLLAPSED FUNCTION rand. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10902870    proc near               ; CODE XREF: sub_10904AD0+9E↓p
                                        ; sub_10908590+D↓p ...

arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                mov     ecx, [ebp+arg_0]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                call    sub_10902040
                add     esp, 4
                pop     ebp
                retn
sub_10902870    endp

; ---------------------------------------------------------------------------
                align 10h
; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_2. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 10h
; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_3. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 10h
                push    ebp
                mov     ebp, esp
                push    edi
                mov     edi, [ebp+10h]
                sub     edi, 1
                js      short loc_109028D2
                push    ebx
                mov     ebx, [ebp+14h]
                push    esi
                mov     esi, [ebp+8]

loc_109028C4:                           ; CODE XREF: .text:109028CE↓j
                mov     ecx, esi
                call    ebx
                add     esi, [ebp+0Ch]
                sub     edi, 1
                jns     short loc_109028C4
                pop     esi
                pop     ebx

loc_109028D2:                           ; CODE XREF: .text:109028BA↑j
                pop     edi
                pop     ebp
                retn    10h
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


sub_109028E0    proc near               ; CODE XREF: WinMain(x,x,x,x)+AB1↓p
                push    esi
                mov     esi, ecx
                mov     ecx, ds:?GObjObjects@UObject@@0V?$dnArray@PAVUObject@@@@A ; dnArray<UObject *> UObject::GObjObjects
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                xor     ecx, ecx
                cmp     [esi+4], eax
                pop     esi
                setl    cl
                mov     eax, ecx
                retn
sub_109028E0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __stdcall sub_10902900(LPCWSTR lpString)
sub_10902900    proc near               ; CODE XREF: sub_10902E30+6B0↓p
                                        ; FConfigCache__GetFloat+48↓p

lpString        = dword ptr  8

                push    ebp
                mov     ebp, esp
                mov     eax, [ebp+lpString]
                push    esi
                mov     esi, ecx
                mov     dword ptr [esi], 0
                test    eax, eax
                jz      short loc_10902931
                push    80h             ; int
                lea     ecx, [esi+4]
                push    ecx             ; int
                push    eax             ; lpString
                mov     ecx, esi
                call    sub_10901C80
                mov     [esi+84h], eax
                mov     eax, esi
                pop     esi
                pop     ebp
                retn    4
; ---------------------------------------------------------------------------

loc_10902931:                           ; CODE XREF: sub_10902900+11↑j
                mov     dword ptr [esi+84h], 0
                mov     eax, esi
                pop     esi
                pop     ebp
                retn    4
sub_10902900    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


sub_10902950    proc near               ; CODE XREF: sub_10902E30+757↓p
                                        ; FConfigCache__GetFloat+74↓p ...
                push    esi
                mov     esi, [ecx+84h]
                add     ecx, 4
                cmp     esi, ecx
                jz      short loc_10902972
                test    esi, esi
                jz      short loc_10902972
                call    ds:?GetMalloc@@YAPAVFMalloc@@XZ ; GetMalloc(void)
                mov     edx, [eax]
                mov     ecx, eax
                mov     eax, [edx+10h]
                push    esi
                call    eax

loc_10902972:                           ; CODE XREF: sub_10902950+C↑j
                                        ; sub_10902950+10↑j
                pop     esi
                retn
sub_10902950    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


sub_10902980    proc near               ; CODE XREF: sub_10902E30+72B↓p
                                        ; FConfigCache__GetFloat+59↓p
                mov     eax, [ecx+84h]
                retn
sub_10902980    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


sub_10902990    proc near               ; CODE XREF: sub_10905920+31↓p
                                        ; sub_10906100+50↓p ...
                push    esi
                mov     esi, ecx
                call    ds:??0dnArrayBase@@QAE@XZ ; dnArrayBase::dnArrayBase(void)
                mov     eax, esi
                pop     esi
                retn
sub_10902990    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_109029A0    proc near               ; CODE XREF: sub_10908510+66↓p
                                        ; sub_10909440+31↓p ...

arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                mov     eax, [ebp+arg_0]
                mov     ecx, [ecx]
                lea     eax, [eax+eax*2]
                lea     eax, [ecx+eax*4]
                pop     ebp
                retn    4
sub_109029A0    endp

; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                mov     eax, [ecx]
                mov     ecx, [ebp+8]
                lea     eax, [eax+ecx*4]
                pop     ebp
                retn    4
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                push    esi
                mov     esi, ecx
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                test    byte ptr [ebp+8], 1
                jz      short loc_109029F2
                call    ds:?GetMalloc@@YAPAVFMalloc@@XZ ; GetMalloc(void)
                mov     edx, [eax]
                mov     ecx, eax
                mov     eax, [edx+10h]
                push    esi
                call    eax

loc_109029F2:                           ; CODE XREF: .text:109029E0↑j
                mov     eax, esi
                pop     esi
                pop     ebp
                retn    4
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10902A00    proc near               ; CODE XREF: sub_10908510+56↓p
                                        ; sub_1090D430+7D↓p

arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                mov     eax, [ebp+arg_0]
                mov     ecx, [ecx]
                lea     eax, [eax+eax*2]
                lea     eax, [ecx+eax*4]
                pop     ebp
                retn    4
sub_10902A00    endp

; ---------------------------------------------------------------------------
                align 10h
                mov     eax, 1
                retn
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10902A30    proc near               ; CODE XREF: .text:10905176↓p

var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 10910420 SIZE 0000000C BYTES

; __unwind { // SEH_10902A30
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_10902A30
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                push    ecx
                push    esi
                mov     esi, ecx
                mov     [ebp+var_10], esi
                lea     ecx, [esi+10h]
;   try {
                mov     [ebp+var_4], 0
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                lea     ecx, [esi+4]
;   } // starts at 10902A52
                mov     [ebp+var_4], 0FFFFFFFFh
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                mov     ecx, [ebp+var_C]
                pop     esi
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
; } // starts at 10902A30
sub_10902A30    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10902A80    proc near               ; CODE XREF: sub_10908590+35↓p
                                        ; sub_10908590+50↓p ...

arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                mov     eax, [ebp+arg_0]
                lea     edx, ds:0[eax*8]
                sub     edx, eax
                mov     eax, [ecx]
                lea     eax, [eax+edx*4]
                pop     ebp
                retn    4
sub_10902A80    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10902AA0    proc near               ; CODE XREF: WinMain(x,x,x,x)+8A8↓p
                                        ; WinMain(x,x,x,x)+8E4↓p ...

arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                mov     eax, [ecx]
                mov     ecx, [ebp+arg_0]
                lea     eax, [eax+ecx*4]
                pop     ebp
                retn    4
sub_10902AA0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


sub_10902AB0    proc near               ; CODE XREF: sub_10908AA0+3A↓p
                mov     eax, 1
                retn
sub_10902AB0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10902AC0    proc near               ; CODE XREF: sub_10905920+140↓p
                                        ; sub_10905920+19B↓p ...

arg_4           = dword ptr  0Ch

                push    ebp
                mov     ebp, esp
                push    esi
                mov     esi, [ebp+arg_4]
                push    0Ch
                push    1
                mov     ecx, esi
                call    ds:?Add@dnArrayBase@@QAEHHH@Z ; dnArrayBase::Add(int,int)
                mov     ecx, [esi]
                lea     eax, [eax+eax*2]
                lea     eax, [ecx+eax*4]
                pop     esi
                pop     ebp
                retn
sub_10902AC0    endp

; ---------------------------------------------------------------------------
                align 10h
; [00000001 BYTES: COLLAPSED FUNCTION nullsub_1. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 10h
                push    ebp
                mov     ebp, esp
                mov     eax, [ebp+8]
                mov     ecx, [ebp+0Ch]
                cmp     eax, ecx
                jle     short loc_10902AFF
                mov     eax, ecx

loc_10902AFF:                           ; CODE XREF: .text:10902AFB↑j
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                sub     esp, 348h
                mov     eax, ds:GUnicodeOS
                cmp     dword ptr [eax], 0
                jnz     loc_10902DF1
                mov     cl, ds:byte_10912EDE
                mov     [ebp-200h], cl
                push    0FFh
                push    0
                lea     edx, [ebp-1FFh]
                push    edx
                call    memset
                add     esp, 0Ch
                mov     al, ds:byte_10912EDE
                mov     [ebp-100h], al
                push    0FFh
                push    0
                lea     ecx, [ebp-0FFh]
                push    ecx
                call    memset
                add     esp, 0Ch
                mov     dl, ds:byte_10912EDE
                mov     [ebp-300h], dl
                push    0FFh
                push    0
                lea     eax, [ebp-2FFh]
                push    eax
                call    memset
                add     esp, 0Ch
                push    100h
                lea     ecx, [ebp-200h]
                push    ecx
                call    ds:GetSystemDirectoryA
                push    100h
                lea     edx, [ebp-100h]
                push    edx
                call    ds:GetWindowsDirectoryA
                push    100h
                lea     eax, [ebp-300h]
                push    eax
                push    0
                call    ds:GetModuleFileNameA
                lea     ecx, [ebp-200h]
                push    ecx
                call    ds:?winGetSizeUNICODE@@YAHPBD@Z ; winGetSizeUNICODE(char const *)
                add     esp, 4
                add     eax, 7
                and     eax, 0FFFFFFF8h
                call    __alloca_probe_16
                mov     [ebp-310h], esp
                lea     edx, [ebp-200h]
                push    edx
                call    ds:?winGetSizeUNICODE@@YAHPBD@Z ; winGetSizeUNICODE(char const *)
                add     esp, 4
                push    eax
                lea     eax, [ebp-200h]
                push    eax
                mov     ecx, [ebp-310h]
                push    ecx
                call    ds:?winToUNICODE@@YAPA_WPA_WPBDH@Z ; winToUNICODE(wchar_t *,char const *,int)
                add     esp, 0Ch
                mov     [ebp-304h], eax
                mov     edx, [ebp-304h]
                mov     [ebp-314h], edx
                mov     dword ptr [ebp-318h], offset unk_10921810
                mov     eax, [ebp-318h]
                mov     [ebp-31Ch], eax

loc_10902C35:                           ; CODE XREF: .text:10902C7B↓j
                mov     ecx, [ebp-314h]
                mov     dx, [ecx]
                mov     [ebp-31Eh], dx
                mov     eax, [ebp-318h]
                mov     cx, [ebp-31Eh]
                mov     [eax], cx
                mov     edx, [ebp-314h]
                add     edx, 2
                mov     [ebp-314h], edx
                mov     eax, [ebp-318h]
                add     eax, 2
                mov     [ebp-318h], eax
                cmp     word ptr [ebp-31Eh], 0
                jnz     short loc_10902C35
                lea     ecx, [ebp-100h]
                push    ecx
                call    ds:?winGetSizeUNICODE@@YAHPBD@Z ; winGetSizeUNICODE(char const *)
                add     esp, 4
                add     eax, 7
                and     eax, 0FFFFFFF8h
                call    __alloca_probe_16
                mov     [ebp-324h], esp
                lea     edx, [ebp-100h]
                push    edx
                call    ds:?winGetSizeUNICODE@@YAHPBD@Z ; winGetSizeUNICODE(char const *)
                add     esp, 4
                push    eax
                lea     eax, [ebp-100h]
                push    eax
                mov     ecx, [ebp-324h]
                push    ecx
                call    ds:?winToUNICODE@@YAPA_WPA_WPBDH@Z ; winToUNICODE(wchar_t *,char const *,int)
                add     esp, 0Ch
                mov     [ebp-308h], eax
                mov     edx, [ebp-308h]
                mov     [ebp-328h], edx
                mov     dword ptr [ebp-32Ch], offset unk_10921A10
                mov     eax, [ebp-32Ch]
                mov     [ebp-330h], eax

loc_10902CEE:                           ; CODE XREF: .text:10902D34↓j
                mov     ecx, [ebp-328h]
                mov     dx, [ecx]
                mov     [ebp-332h], dx
                mov     eax, [ebp-32Ch]
                mov     cx, [ebp-332h]
                mov     [eax], cx
                mov     edx, [ebp-328h]
                add     edx, 2
                mov     [ebp-328h], edx
                mov     eax, [ebp-32Ch]
                add     eax, 2
                mov     [ebp-32Ch], eax
                cmp     word ptr [ebp-332h], 0
                jnz     short loc_10902CEE
                lea     ecx, [ebp-300h]
                push    ecx
                call    ds:?winGetSizeUNICODE@@YAHPBD@Z ; winGetSizeUNICODE(char const *)
                add     esp, 4
                add     eax, 7
                and     eax, 0FFFFFFF8h
                call    __alloca_probe_16
                mov     [ebp-338h], esp
                lea     edx, [ebp-300h]
                push    edx
                call    ds:?winGetSizeUNICODE@@YAHPBD@Z ; winGetSizeUNICODE(char const *)
                add     esp, 4
                push    eax
                lea     eax, [ebp-300h]
                push    eax
                mov     ecx, [ebp-338h]
                push    ecx
                call    ds:?winToUNICODE@@YAPA_WPA_WPBDH@Z ; winToUNICODE(wchar_t *,char const *,int)
                add     esp, 0Ch
                mov     [ebp-30Ch], eax
                mov     edx, [ebp-30Ch]
                mov     [ebp-33Ch], edx
                mov     dword ptr [ebp-340h], offset unk_10921C10
                mov     eax, [ebp-340h]
                mov     [ebp-344h], eax

loc_10902DA7:                           ; CODE XREF: .text:10902DED↓j
                mov     ecx, [ebp-33Ch]
                mov     dx, [ecx]
                mov     [ebp-346h], dx
                mov     eax, [ebp-340h]
                mov     cx, [ebp-346h]
                mov     [eax], cx
                mov     edx, [ebp-33Ch]
                add     edx, 2
                mov     [ebp-33Ch], edx
                mov     eax, [ebp-340h]
                add     eax, 2
                mov     [ebp-340h], eax
                cmp     word ptr [ebp-346h], 0
                jnz     short loc_10902DA7
                jmp     short loc_10902E23
; ---------------------------------------------------------------------------

loc_10902DF1:                           ; CODE XREF: .text:10902B21↑j
                push    100h
                push    offset unk_10921810
                call    ds:GetSystemDirectoryW
                push    100h
                push    offset unk_10921A10
                call    ds:GetWindowsDirectoryW
                push    100h
                push    offset unk_10921C10
                push    0
                call    ds:GetModuleFileNameW

loc_10902E23:                           ; CODE XREF: .text:10902DEF↑j
                lea     esp, [ebp-348h]
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __stdcall sub_10902E30(char Args, int)
sub_10902E30    proc near               ; DATA XREF: .rdata:off_10912D5C↓o

var_9E8         = dword ptr -9E8h
var_9E2         = word ptr -9E2h
var_9E0         = dword ptr -9E0h
var_9DC         = dword ptr -9DCh
var_9D8         = dword ptr -9D8h
var_9D4         = dword ptr -9D4h
var_9D0         = dword ptr -9D0h
var_9CC         = dword ptr -9CCh
var_9C8         = dword ptr -9C8h
var_9C2         = word ptr -9C2h
var_9C0         = dword ptr -9C0h
var_9BC         = dword ptr -9BCh
var_9B8         = dword ptr -9B8h
var_9B2         = word ptr -9B2h
var_9B0         = dword ptr -9B0h
var_9AC         = dword ptr -9ACh
var_9A8         = dword ptr -9A8h
var_9A4         = dword ptr -9A4h
var_99E         = word ptr -99Eh
var_99C         = dword ptr -99Ch
var_998         = dword ptr -998h
var_994         = dword ptr -994h
var_990         = dword ptr -990h
var_98C         = dword ptr -98Ch
var_988         = dword ptr -988h
var_984         = dword ptr -984h
var_980         = dword ptr -980h
var_97A         = word ptr -97Ah
var_978         = dword ptr -978h
var_974         = dword ptr -974h
var_970         = dword ptr -970h
var_96A         = word ptr -96Ah
var_968         = dword ptr -968h
var_964         = dword ptr -964h
var_960         = dword ptr -960h
var_95C         = dword ptr -95Ch
var_956         = word ptr -956h
var_954         = dword ptr -954h
var_950         = dword ptr -950h
var_94C         = dword ptr -94Ch
var_948         = dword ptr -948h
var_944         = dword ptr -944h
var_940         = dword ptr -940h
var_928         = dword ptr -928h
var_924         = dword ptr -924h
var_920         = dword ptr -920h
var_91C         = dword ptr -91Ch
var_894         = byte ptr -894h
var_888         = dword ptr -888h
var_884         = byte ptr -884h
var_878         = byte ptr -878h
var_86C         = byte ptr -86Ch
var_85D         = byte ptr -85Dh
var_85C         = byte ptr -85Ch
Dest            = word ptr -850h
var_50          = byte ptr -50h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
Args            = dword ptr  8
arg_4           = dword ptr  0Ch

; FUNCTION CHUNK AT 10910440 SIZE 00000075 BYTES

; __unwind { // SEH_10902E30
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_10902E30
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                push    ecx
                sub     esp, 9D8h
                push    ebx
                push    esi
                push    edi
                mov     [ebp+var_10], esp
                mov     [ebp+var_940], ecx
                mov     [ebp+var_920], 0
                mov     eax, ds:GIsCriticalError
                cmp     dword ptr [eax], 0
                jz      short loc_10902E7C
                cmp     dword_10922698, 0
                jz      loc_109035B7

loc_10902E7C:                           ; CODE XREF: sub_10902E30+3D↑j
                mov     ecx, [ebp+arg_4]
                push    ecx
                call    ds:?SafeSuppressed@dnName@@SAHW4EName@@@Z ; dnName::SafeSuppressed(EName)
                add     esp, 4
                test    eax, eax
                jnz     loc_109035B5
                mov     edx, [ebp+var_940]
                cmp     dword ptr [edx+4], 0
                jnz     loc_10903458
                mov     eax, [ebp+var_940]
                cmp     dword ptr [eax+810h], 0
                jnz     loc_10903458
                mov     ecx, [ebp+var_940]
                cmp     dword ptr [ecx+808h], 0
                jnz     loc_10903458
                mov     edx, [ebp+var_940]
                movzx   eax, word ptr [edx+8]
                test    eax, eax
                jnz     loc_10903309
                lea     ecx, [ebp+var_85C]
                push    ecx
                call    sub_109027F0
                add     esp, 4
                mov     [ebp+var_944], eax
                mov     edx, [ebp+var_944]
                mov     [ebp+var_948], edx
;   try {
                mov     [ebp+var_4], 0
                mov     ecx, [ebp+var_948]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                mov     [ebp+var_924], eax
                mov     eax, [ebp+var_924]
                mov     [ebp+var_94C], eax
                mov     ecx, [ebp+var_940]
                add     ecx, 8
                mov     [ebp+var_950], ecx
                mov     edx, [ebp+var_950]
                mov     [ebp+var_954], edx

loc_10902F3A:                           ; CODE XREF: sub_10902E30+150↓j
                mov     eax, [ebp+var_94C]
                mov     cx, [eax]
                mov     [ebp+var_956], cx
                mov     edx, [ebp+var_950]
                mov     ax, [ebp+var_956]
                mov     [edx], ax
                mov     ecx, [ebp+var_94C]
                add     ecx, 2
                mov     [ebp+var_94C], ecx
                mov     edx, [ebp+var_950]
                add     edx, 2
                mov     [ebp+var_950], edx
                cmp     [ebp+var_956], 0
                jnz     short loc_10902F3A
;   } // starts at 10902EFA
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_85C]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                lea     eax, [ebp+var_86C]
                push    eax
                call    sub_109027C0
                add     esp, 4
                mov     [ebp+var_95C], eax
                mov     ecx, [ebp+var_95C]
                mov     [ebp+var_960], ecx
;   try {
                mov     [ebp+var_4], 1
                mov     edx, [ebp+var_920]
                or      edx, 1
                mov     [ebp+var_920], edx
                mov     eax, [ebp+var_940]
                add     eax, 8
                mov     [ebp+var_964], eax
                mov     ecx, [ebp+var_964]
                add     ecx, 2
                mov     [ebp+var_968], ecx

loc_10902FEA:                           ; CODE XREF: sub_10902E30+1D9↓j
                mov     edx, [ebp+var_964]
                mov     ax, [edx]
                mov     [ebp+var_96A], ax
                add     [ebp+var_964], 2
                cmp     [ebp+var_96A], 0
                jnz     short loc_10902FEA
                mov     ecx, [ebp+var_964]
                sub     ecx, [ebp+var_968]
                sar     ecx, 1
                mov     [ebp+var_970], ecx
                mov     edx, [ebp+var_940]
                add     edx, 8
                mov     [ebp+var_974], edx
                mov     eax, [ebp+var_974]
                add     eax, 2
                mov     [ebp+var_978], eax

loc_1090303D:                           ; CODE XREF: sub_10902E30+22C↓j
                mov     ecx, [ebp+var_974]
                mov     dx, [ecx]
                mov     [ebp+var_97A], dx
                add     [ebp+var_974], 2
                cmp     [ebp+var_97A], 0
                jnz     short loc_1090303D
                mov     eax, [ebp+var_974]
                sub     eax, [ebp+var_978]
                sar     eax, 1
                mov     [ebp+var_980], eax
                mov     ecx, 400h
                sub     ecx, [ebp+var_970]
                push    ecx
                mov     edx, [ebp+var_980]
                mov     eax, [ebp+var_940]
                lea     ecx, [eax+edx*2+8]
                push    ecx
                push    offset aLog     ; "LOG="
                mov     ecx, [ebp+var_960]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                call    sub_10902830
                add     esp, 10h
                test    eax, eax
                jnz     short loc_1090311D
                lea     edx, [ebp+var_878]
                push    edx
                call    sub_109027C0
                add     esp, 4
                mov     [ebp+var_984], eax
                mov     eax, [ebp+var_984]
                mov     [ebp+var_988], eax
;   } // starts at 10902FB6
;   try {
                mov     [ebp+var_4], 2
                mov     ecx, [ebp+var_920]
                or      ecx, 2
                mov     [ebp+var_920], ecx
                push    400h
                mov     edx, [ebp+var_940]
                add     edx, 8
                push    edx
                push    offset aAbslog  ; "ABSLOG="
                mov     ecx, [ebp+var_988]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                call    sub_10902830
                add     esp, 10h
                test    eax, eax
                jnz     short loc_1090311D
                mov     [ebp+var_98C], 1
                jmp     short loc_10903127
; ---------------------------------------------------------------------------

loc_1090311D:                           ; CODE XREF: sub_10902E30+27B↑j
                                        ; sub_10902E30+2DF↑j
                mov     [ebp+var_98C], 0

loc_10903127:                           ; CODE XREF: sub_10902E30+2EB↑j
                mov     al, byte ptr [ebp+var_98C]
                mov     [ebp+var_85D], al
;   } // starts at 109030CE
;   try {
                mov     [ebp+var_4], 1
                mov     ecx, [ebp+var_920]
                and     ecx, 2
                jz      short loc_10903158
                and     [ebp+var_920], 0FFFFFFFDh
                lea     ecx, [ebp+var_878]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
;   } // starts at 10903133

loc_10903158:                           ; CODE XREF: sub_10902E30+313↑j
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     edx, [ebp+var_920]
                and     edx, 1
                jz      short loc_1090317D
                and     [ebp+var_920], 0FFFFFFFEh
                lea     ecx, [ebp+var_86C]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)

loc_1090317D:                           ; CODE XREF: sub_10902E30+338↑j
                movzx   eax, [ebp+var_85D]
                test    eax, eax
                jz      loc_10903309
                lea     ecx, [ebp+var_884]
                push    ecx
                call    sub_10902810
                add     esp, 4
                mov     [ebp+var_990], eax
                mov     edx, [ebp+var_990]
                mov     [ebp+var_994], edx
;   try {
                mov     [ebp+var_4], 3
                mov     ecx, [ebp+var_994]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                mov     [ebp+var_928], eax
                mov     eax, [ebp+var_928]
                mov     [ebp+var_998], eax
                mov     ecx, [ebp+var_998]
                mov     [ebp+var_99C], ecx

loc_109031DE:                           ; CODE XREF: sub_10902E30+3CD↓j
                mov     edx, [ebp+var_998]
                mov     ax, [edx]
                mov     [ebp+var_99E], ax
                add     [ebp+var_998], 2
                cmp     [ebp+var_99E], 0
                jnz     short loc_109031DE
                mov     ecx, [ebp+var_998]
                sub     ecx, [ebp+var_99C]
                mov     edx, [ebp+var_99C]
                mov     [ebp+var_9A4], edx
                mov     [ebp+var_9A8], ecx
                mov     eax, [ebp+var_940]
                add     eax, 6
                mov     [ebp+var_9AC], eax
                mov     ecx, [ebp+var_9AC]
                add     ecx, 2
                mov     [ebp+var_9B0], ecx

loc_1090323B:                           ; CODE XREF: sub_10902E30+42B↓j
                mov     edx, [ebp+var_9AC]
                mov     ax, [edx+2]
                mov     [ebp+var_9B2], ax
                add     [ebp+var_9AC], 2
                cmp     [ebp+var_9B2], 0
                jnz     short loc_1090323B
                mov     edi, [ebp+var_9AC]
                mov     ecx, [ebp+var_9B0]
                mov     [ebp+var_9B8], ecx
                mov     esi, [ebp+var_9A4]
                mov     edx, [ebp+var_9A8]
                mov     ecx, edx
                shr     ecx, 2
                rep movsd
                mov     ecx, edx
                and     ecx, 3
                rep movsb
;   } // starts at 109031AD
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_884]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                mov     eax, [ebp+var_940]
                add     eax, 6
                mov     [ebp+var_9BC], eax
                mov     ecx, [ebp+var_9BC]
                add     ecx, 2
                mov     [ebp+var_9C0], ecx

loc_109032BA:                           ; CODE XREF: sub_10902E30+4AA↓j
                mov     edx, [ebp+var_9BC]
                mov     ax, [edx+2]
                mov     [ebp+var_9C2], ax
                add     [ebp+var_9BC], 2
                cmp     [ebp+var_9C2], 0
                jnz     short loc_109032BA
                mov     edi, [ebp+var_9BC]
                mov     ecx, [ebp+var_9C0]
                mov     [ebp+var_9C8], ecx
                mov     edx, ds:dword_10912F30
                mov     [edi], edx
                mov     eax, ds:dword_10912F34
                mov     [edi+4], eax
                mov     cx, ds:word_10912F38
                mov     [edi+8], cx

loc_10903309:                           ; CODE XREF: sub_10902E30+A3↑j
                                        ; sub_10902E30+356↑j
                lea     edx, [ebp+var_894]
                push    edx
                call    sub_109027C0
                add     esp, 4
                mov     [ebp+var_9CC], eax
                mov     eax, [ebp+var_9CC]
                mov     [ebp+var_9D0], eax
;   try {
                mov     [ebp+var_4], 4
                push    20h
                lea     ecx, [ebp+var_50]
                push    ecx
                push    offset aBuflog  ; "buflog="
                mov     ecx, [ebp+var_9D0]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                call    sub_10902830
                add     esp, 10h
                mov     [ebp+var_888], eax
;   } // starts at 1090332A
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_894]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                cmp     [ebp+var_888], 0
                jz      short loc_109033BF
                mov     edx, ds:?GNull@@3PAVdnOutputDevice@@A ; dnOutputDevice * GNull
                mov     eax, [edx]
                push    eax
                mov     ecx, [ebp+var_940]
                mov     edx, [ecx+80Ch]
                neg     edx
                sbb     edx, edx
                and     edx, 10h
                or      edx, 28h
                push    edx
                mov     eax, [ebp+var_940]
                add     eax, 8
                push    eax
                mov     ecx, ds:?GFileManager@@3PAVdnFileMgr@@A ; dnFileMgr * GFileManager
                mov     ecx, [ecx]
                mov     edx, ds:?GFileManager@@3PAVdnFileMgr@@A ; dnFileMgr * GFileManager
                mov     eax, [edx]
                mov     edx, [eax]
                mov     eax, [edx+1Ch]
                call    eax
                mov     ecx, [ebp+var_940]
                mov     [ecx+4], eax
                jmp     short loc_10903409
; ---------------------------------------------------------------------------

loc_109033BF:                           ; CODE XREF: sub_10902E30+541↑j
                mov     edx, ds:?GNull@@3PAVdnOutputDevice@@A ; dnOutputDevice * GNull
                mov     eax, [edx]
                push    eax
                mov     ecx, [ebp+var_940]
                mov     edx, [ecx+80Ch]
                neg     edx
                sbb     edx, edx
                and     edx, 10h
                or      edx, 20h
                push    edx
                mov     eax, [ebp+var_940]
                add     eax, 8
                push    eax
                mov     ecx, ds:?GFileManager@@3PAVdnFileMgr@@A ; dnFileMgr * GFileManager
                mov     ecx, [ecx]
                mov     edx, ds:?GFileManager@@3PAVdnFileMgr@@A ; dnFileMgr * GFileManager
                mov     eax, [edx]
                mov     edx, [eax]
                mov     eax, [edx+1Ch]
                call    eax
                mov     ecx, [ebp+var_940]
                mov     [ecx+4], eax

loc_10903409:                           ; CODE XREF: sub_10902E30+58D↑j
                mov     edx, [ebp+var_940]
                cmp     dword ptr [edx+4], 0
                jz      short loc_10903448
                mov     eax, [ebp+var_940]
                mov     dword ptr [eax+80Ch], 1
                call    ds:?dnTimeStamp@@YAPB_WXZ ; dnTimeStamp(void)
                push    eax
                push    offset aLogFileOpenS ; "Log file open, %s"
                push    2F8h
                mov     ecx, [ebp+var_940]
                push    ecx
                call    ds:?Logf@dnOutputDevice@@QAAXW4EName@@PB_WZZ ; dnOutputDevice::Logf(EName,wchar_t const *,...)
                add     esp, 10h
                jmp     short loc_10903458
; ---------------------------------------------------------------------------

loc_10903448:                           ; CODE XREF: sub_10902E30+5E3↑j
                mov     edx, [ebp+var_940]
                mov     dword ptr [edx+810h], 1

loc_10903458:                           ; CODE XREF: sub_10902E30+6B↑j
                                        ; sub_10902E30+7E↑j ...
                mov     eax, [ebp+var_940]
                cmp     dword ptr [eax+4], 0
                jz      loc_1090358C
                cmp     [ebp+arg_4], 314h
                jz      loc_1090358C
                mov     ecx, [ebp+var_940]
                cmp     dword ptr [ecx+808h], 0
                jnz     loc_1090358C
                cmp     [ebp+arg_4], 0
                jnz     short loc_109034A8
                mov     edx, [ebp+Args]
                push    edx             ; Args
                push    offset Format   ; "%s"
                lea     eax, [ebp+Dest]
                push    eax             ; Dest
                call    sub_10901F50
                add     esp, 0Ch
                jmp     short loc_109034D3
; ---------------------------------------------------------------------------

loc_109034A8:                           ; CODE XREF: sub_10902E30+65C↑j
                push    offset asc_10912EF4 ; "\r\n"
                mov     ecx, [ebp+Args]
                push    ecx
                mov     edx, [ebp+arg_4]
                push    edx
                call    ds:?SafeString@dnName@@SAPB_WW4EName@@@Z ; dnName::SafeString(EName)
                add     esp, 4
                push    eax             ; Args
                push    offset aSSS     ; "%s: %s%s"
                lea     eax, [ebp+Dest]
                push    eax             ; Dest
                call    sub_10901F50
                add     esp, 14h

loc_109034D3:                           ; CODE XREF: sub_10902E30+676↑j
                lea     ecx, [ebp+Dest]
                push    ecx             ; lpString
                lea     ecx, [ebp+var_91C]
                call    sub_10902900
                mov     [ebp+var_9D4], eax
                mov     edx, [ebp+var_9D4]
                mov     [ebp+var_9D8], edx
;   try {
                mov     [ebp+var_4], 5
                lea     eax, [ebp+Dest]
                mov     [ebp+var_9DC], eax
                mov     ecx, [ebp+var_9DC]
                add     ecx, 2
                mov     [ebp+var_9E0], ecx

loc_10903519:                           ; CODE XREF: sub_10902E30+708↓j
                mov     edx, [ebp+var_9DC]
                mov     ax, [edx]
                mov     [ebp+var_9E2], ax
                add     [ebp+var_9DC], 2
                cmp     [ebp+var_9E2], 0
                jnz     short loc_10903519
                mov     ecx, [ebp+var_9DC]
                sub     ecx, [ebp+var_9E0]
                sar     ecx, 1
                mov     [ebp+var_9E8], ecx
                mov     edx, [ebp+var_9E8]
                push    edx
                mov     ecx, [ebp+var_9D8]
                call    sub_10902980
                push    eax
                mov     eax, [ebp+var_940]
                mov     ecx, [eax+4]
                mov     edx, [ebp+var_940]
                mov     eax, [edx+4]
                mov     edx, [eax]
                mov     eax, [edx+4]
                call    eax
;   } // starts at 109034F7
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_91C]
                call    sub_10902950

loc_1090358C:                           ; CODE XREF: sub_10902E30+632↑j
                                        ; sub_10902E30+63F↑j ...
                mov     ecx, ds:?GLogHook@@3PAVdnOutputDevice@@A ; dnOutputDevice * GLogHook
                cmp     dword ptr [ecx], 0
                jz      short loc_109035B5
                mov     edx, [ebp+arg_4]
                push    edx
                mov     eax, [ebp+Args]
                push    eax
                mov     ecx, ds:?GLogHook@@3PAVdnOutputDevice@@A ; dnOutputDevice * GLogHook
                mov     ecx, [ecx]
                mov     edx, ds:?GLogHook@@3PAVdnOutputDevice@@A ; dnOutputDevice * GLogHook
                mov     eax, [edx]
                mov     edx, [eax]
                mov     eax, [edx]
                call    eax

loc_109035B5:                           ; CODE XREF: sub_10902E30+5B↑j
                                        ; sub_10902E30+765↑j
                jmp     short loc_10903602
; ---------------------------------------------------------------------------

loc_109035B7:                           ; CODE XREF: sub_10902E30+46↑j
                mov     dword_10922698, 1
;   try {
                mov     [ebp+var_4], 6
                mov     ecx, [ebp+arg_4]
                push    ecx
                mov     edx, [ebp+Args]
                push    edx
                mov     eax, [ebp+var_940]
                mov     edx, [eax]
                mov     ecx, [ebp+var_940]
                mov     eax, [edx]
                call    eax
                jmp     short loc_109035F1
;   } // starts at 109035C1
; ---------------------------------------------------------------------------

loc_109035E4:                           ; DATA XREF: .rdata:stru_1091506C↓o
;   catch(...) // owned by 109035C1
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, offset loc_109035F8
                retn
; ---------------------------------------------------------------------------

loc_109035F1:                           ; CODE XREF: sub_10902E30+7B2↑j
                mov     [ebp+var_4], 0FFFFFFFFh

loc_109035F8:                           ; CODE XREF: sub_10902E30+7C0↑j
                                        ; DATA XREF: sub_10902E30+7BB↑o
                mov     dword_10922698, 0

loc_10903602:                           ; CODE XREF: sub_10902E30:loc_109035B5↑j
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                pop     ebx
                mov     esp, ebp
                pop     ebp
                retn    8
; } // starts at 10902E30
sub_10902E30    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10903620    proc near               ; DATA XREF: .rdata:10912DCC↓o

var_28          = dword ptr -28h
var_24          = dword ptr -24h
lParam          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_18          = byte ptr -18h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch
arg_8           = dword ptr  10h

; FUNCTION CHUNK AT 109104C0 SIZE 00000008 BYTES

; __unwind { // SEH_10903620
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_10903620
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 1Ch
                mov     [ebp+var_24], ecx
                lea     ecx, [ebp+var_18]
                call    ds:??0dnString@@QAE@XZ ; dnString::dnString(void)
;   try {
                mov     [ebp+var_4], 0
                mov     eax, [ebp+arg_0]
                mov     [ebp+lParam], eax
                mov     ecx, [ebp+arg_4]
                mov     [ebp+var_1C], ecx
                mov     edx, [ebp+arg_8]
                push    edx
                lea     ecx, [ebp+var_18]
                call    ds:??4dnString@@QAEAAV0@PB_W@Z ; dnString::operator=(wchar_t const *)
                mov     eax, ds:GUnicodeOS
                cmp     dword ptr [eax], 0
                jz      short loc_10903691
                lea     ecx, [ebp+lParam]
                push    ecx             ; lParam
                push    7C6h            ; wParam
                push    111h            ; Msg
                mov     edx, [ebp+var_24]
                mov     eax, [edx+1Ch]
                push    eax             ; hWnd
                call    ds:SendMessageW
                mov     [ebp+var_28], eax
                jmp     short loc_109036AF
; ---------------------------------------------------------------------------

loc_10903691:                           ; CODE XREF: sub_10903620+4F↑j
                lea     ecx, [ebp+lParam]
                push    ecx             ; lParam
                push    7C6h            ; wParam
                push    111h            ; Msg
                mov     edx, [ebp+var_24]
                mov     eax, [edx+1Ch]
                push    eax             ; hWnd
                call    ds:SendMessageA
                mov     [ebp+var_28], eax
;   } // starts at 10903647

loc_109036AF:                           ; CODE XREF: sub_10903620+6F↑j
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_18]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    0Ch
; } // starts at 10903620
sub_10903620    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_109036D0    proc near               ; DATA XREF: .rdata:10912DD8↓o

var_28          = dword ptr -28h
var_24          = dword ptr -24h
lParam          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_18          = byte ptr -18h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch
arg_8           = dword ptr  10h

; FUNCTION CHUNK AT 109104E0 SIZE 00000008 BYTES

; __unwind { // SEH_109036D0
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_109036D0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 1Ch
                mov     [ebp+var_24], ecx
                lea     ecx, [ebp+var_18]
                call    ds:??0dnString@@QAE@XZ ; dnString::dnString(void)
;   try {
                mov     [ebp+var_4], 0
                mov     eax, [ebp+arg_0]
                mov     [ebp+lParam], eax
                mov     ecx, [ebp+arg_4]
                mov     [ebp+var_1C], ecx
                mov     edx, [ebp+arg_8]
                push    edx
                lea     ecx, [ebp+var_18]
                call    ds:??4dnString@@QAEAAV0@PB_W@Z ; dnString::operator=(wchar_t const *)
                mov     eax, ds:GUnicodeOS
                cmp     dword ptr [eax], 0
                jz      short loc_10903741
                lea     ecx, [ebp+lParam]
                push    ecx             ; lParam
                push    7C6h            ; wParam
                push    111h            ; Msg
                mov     edx, [ebp+var_24]
                mov     eax, [edx+20h]
                push    eax             ; hWnd
                call    ds:SendMessageW
                mov     [ebp+var_28], eax
                jmp     short loc_1090375F
; ---------------------------------------------------------------------------

loc_10903741:                           ; CODE XREF: sub_109036D0+4F↑j
                lea     ecx, [ebp+lParam]
                push    ecx             ; lParam
                push    7C6h            ; wParam
                push    111h            ; Msg
                mov     edx, [ebp+var_24]
                mov     eax, [edx+20h]
                push    eax             ; hWnd
                call    ds:SendMessageA
                mov     [ebp+var_28], eax
;   } // starts at 109036F7

loc_1090375F:                           ; CODE XREF: sub_109036D0+6F↑j
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_18]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    0Ch
; } // starts at 109036D0
sub_109036D0    endp

; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp-4], ecx
                mov     ecx, [ebp-4]
                call    ds:??0dnFileMgr@@QAE@XZ ; dnFileMgr::dnFileMgr(void)
                mov     eax, [ebp-4]
                mov     dword ptr [eax], offset ??_7dnFileMgrGeneric@@6B@ ; const dnFileMgrGeneric::`vftable'
                mov     ecx, [ebp-4]
                mov     dword ptr [ecx], offset ??_7dnFileMgrWin32@@6B@ ; const dnFileMgrWin32::`vftable'
                mov     edx, [ebp-4]
                mov     dword ptr [edx+4], 0
                mov     eax, [ebp-4]
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                push    ebx
                push    esi
                push    edi
                mov     ecx, [ebp+10h]
                mov     esi, [ebp+0Ch]
                mov     edi, [ebp+8]
                mov     ebx, ecx
                shr     ecx, 2
                and     ebx, 3
                rep movsd
                mov     ecx, ebx
                rep movsb
                pop     edi
                pop     esi
                pop     ebx
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_109037F0    proc near               ; CODE XREF: sub_10904310+17B↓p
                                        ; sub_10904310+1E5↓p ...

arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                call    ds:?GetMalloc@@YAPAVFMalloc@@XZ ; GetMalloc(void)
                mov     ecx, [ebp+arg_0]
                mov     edx, [eax]
                mov     edx, [edx+4]
                push    8
                push    ecx
                mov     ecx, eax
                call    edx
                pop     ebp
                retn
sub_109037F0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10903810    proc near               ; CODE XREF: sub_10904310+C2D9↓p
                                        ; sub_10904310+C2EB↓p ...

arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                call    ds:?GetMalloc@@YAPAVFMalloc@@XZ ; GetMalloc(void)
                mov     ecx, [ebp+arg_0]
                mov     edx, [eax]
                mov     edx, [edx+10h]
                push    ecx
                mov     ecx, eax
                call    edx
                pop     ebp
                retn
sub_10903810    endp

; ---------------------------------------------------------------------------
                align 10h
; [00000008 BYTES: COLLAPSED FUNCTION operator new(uint,void *). PRESS CTRL-NUMPAD+ TO EXPAND]
                align 10h
                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp-4], ecx
                mov     ecx, [ebp-4]
                call    ds:??0dnArchive@@QAE@XZ ; dnArchive::dnArchive(void)
                mov     eax, [ebp-4]
                mov     dword ptr [eax], offset ??_7dnArchiveFileWriter@@6B@ ; const dnArchiveFileWriter::`vftable'
                mov     ecx, [ebp-4]
                mov     edx, [ebp+8]
                mov     [ecx+18h], edx
                mov     eax, [ebp-4]
                mov     ecx, [ebp+0Ch]
                mov     [eax+1Ch], ecx
                mov     edx, [ebp-4]
                mov     eax, [ebp+10h]
                mov     [edx+20h], eax
                mov     ecx, [ebp-4]
                mov     dword ptr [ecx+24h], 0
                mov     edx, [ebp-4]
                mov     eax, [edx+14h]
                or      eax, 2
                mov     ecx, [ebp-4]
                mov     [ecx+14h], eax
                mov     eax, [ebp-4]
                mov     esp, ebp
                pop     ebp
                retn    0Ch
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __stdcall sub_109038A0(LONG lDistanceToMove)
sub_109038A0    proc near               ; DATA XREF: .rdata:10912FFC↓o

var_24          = dword ptr -24h
var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_18          = byte ptr -18h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
lDistanceToMove = dword ptr  8

; FUNCTION CHUNK AT 10910500 SIZE 00000009 BYTES

; __unwind { // SEH_109038A0
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_109038A0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 18h
                mov     [ebp+var_1C], ecx
                mov     eax, [ebp+var_1C]
                mov     edx, [eax]
                mov     ecx, [ebp+var_1C]
                mov     eax, [edx+64h]
                call    eax
                push    0               ; dwMoveMethod
                push    0               ; lpDistanceToMoveHigh
                mov     ecx, [ebp+lDistanceToMove]
                push    ecx             ; lDistanceToMove
                mov     edx, [ebp+var_1C]
                mov     eax, [edx+18h]
                push    eax             ; hFile
                call    ds:SetFilePointer
                cmp     eax, 0FFFFFFFFh
                jnz     short loc_10903944
                mov     ecx, [ebp+var_1C]
                mov     edx, [ecx+14h]
                or      edx, 100h
                mov     eax, [ebp+var_1C]
                mov     [eax+14h], edx
                push    0
                push    offset aCore    ; "Core"
                push    offset aSeekfailed ; "SeekFailed"
                lea     ecx, [ebp+var_18]
                push    ecx
                call    ds:?dnLocalizeError@@YA?BVdnString@@PBDPB_W1@Z ; dnLocalizeError(char const *,wchar_t const *,wchar_t const *)
                add     esp, 10h
                mov     [ebp+var_20], eax
                mov     edx, [ebp+var_20]
                mov     [ebp+var_24], edx
;   try {
                mov     [ebp+var_4], 0
                mov     eax, [ebp+var_24]
                push    eax
                mov     ecx, [ebp+var_1C]
                mov     edx, [ecx+1Ch]
                push    edx
                call    ds:?Logf@dnOutputDevice@@QAAXABVdnString@@ZZ ; dnOutputDevice::Logf(dnString const &,...)
                add     esp, 8
;   } // starts at 10903919
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_18]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)

loc_10903944:                           ; CODE XREF: sub_109038A0+43↑j
                mov     eax, [ebp+var_1C]
                mov     ecx, [ebp+lDistanceToMove]
                mov     [eax+20h], ecx
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    4
; } // starts at 109038A0
sub_109038A0    endp

; ---------------------------------------------------------------------------
                align 10h
; [00000011 BYTES: COLLAPSED FUNCTION unknown_libname_4. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10903980    proc near               ; CODE XREF: .text:1090426A↓p
                                        ; sub_10904290+3A↓p
                                        ; DATA XREF: ...

var_24          = dword ptr -24h
var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_18          = byte ptr -18h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 10910520 SIZE 00000009 BYTES

; __unwind { // SEH_10903980
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_10903980
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 18h
                mov     [ebp+var_1C], ecx
                mov     eax, [ebp+var_1C]
                mov     edx, [eax]
                mov     ecx, [ebp+var_1C]
                mov     eax, [edx+64h]
                call    eax
                mov     ecx, [ebp+var_1C]
                cmp     dword ptr [ecx+18h], 0
                jz      short loc_10903A24
                mov     edx, [ebp+var_1C]
                mov     eax, [edx+18h]
                push    eax             ; hObject
                call    ds:CloseHandle
                test    eax, eax
                jnz     short loc_10903A24
                mov     ecx, [ebp+var_1C]
                mov     edx, [ecx+14h]
                or      edx, 100h
                mov     eax, [ebp+var_1C]
                mov     [eax+14h], edx
                push    0
                push    offset aCore    ; "Core"
                push    offset aWritefailed ; "WriteFailed"
                lea     ecx, [ebp+var_18]
                push    ecx
                call    ds:?dnLocalizeError@@YA?BVdnString@@PBDPB_W1@Z ; dnLocalizeError(char const *,wchar_t const *,wchar_t const *)
                add     esp, 10h
                mov     [ebp+var_20], eax
                mov     edx, [ebp+var_20]
                mov     [ebp+var_24], edx
;   try {
                mov     [ebp+var_4], 0
                mov     eax, [ebp+var_24]
                push    eax
                mov     ecx, [ebp+var_1C]
                mov     edx, [ecx+1Ch]
                push    edx
                call    ds:?Logf@dnOutputDevice@@QAAXABVdnString@@ZZ ; dnOutputDevice::Logf(dnString const &,...)
                add     esp, 8
;   } // starts at 109039F9
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_18]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)

loc_10903A24:                           ; CODE XREF: sub_10903980+32↑j
                                        ; sub_10903980+43↑j
                mov     eax, [ebp+var_1C]
                mov     dword ptr [eax+18h], 0
                mov     ecx, [ebp+var_1C]
                mov     eax, [ecx+14h]
                shr     eax, 8
                and     eax, 1
                neg     eax
                sbb     eax, eax
                add     eax, 1
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
; } // starts at 10903980
sub_10903980    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10903A50    proc near               ; DATA XREF: .rdata:10912FB8↓o

var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch

                push    ebp
                mov     ebp, esp
                sub     esp, 10h
                push    ebx
                push    esi
                push    edi
                mov     [ebp+var_10], ecx
                mov     eax, [ebp+var_10]
                mov     ecx, [eax+20h]
                add     ecx, [ebp+arg_4]
                mov     edx, [ebp+var_10]
                mov     [edx+20h], ecx

loc_10903A6B:                           ; CODE XREF: sub_10903A50+86↓j
                mov     eax, [ebp+var_10]
                mov     ecx, 1000h
                sub     ecx, [eax+24h]
                mov     [ebp+var_4], ecx
                mov     edx, [ebp+arg_4]
                cmp     edx, [ebp+var_4]
                jle     short loc_10903AD8
                mov     eax, [ebp+var_10]
                mov     ecx, [eax+24h]
                mov     edx, [ebp+var_10]
                lea     eax, [edx+ecx+28h]
                mov     [ebp+var_8], eax
                mov     ecx, [ebp+var_4]
                mov     esi, [ebp+arg_0]
                mov     edi, [ebp+var_8]
                mov     ebx, ecx
                shr     ecx, 2
                and     ebx, 3
                rep movsd
                mov     ecx, ebx
                rep movsb
                mov     ecx, [ebp+var_10]
                mov     edx, [ecx+24h]
                add     edx, [ebp+var_4]
                mov     eax, [ebp+var_10]
                mov     [eax+24h], edx
                mov     ecx, [ebp+arg_4]
                sub     ecx, [ebp+var_4]
                mov     [ebp+arg_4], ecx
                mov     edx, [ebp+arg_0]
                add     edx, [ebp+var_4]
                mov     [ebp+arg_0], edx
                mov     eax, [ebp+var_10]
                mov     edx, [eax]
                mov     ecx, [ebp+var_10]
                mov     eax, [edx+64h]
                call    eax
                jmp     short loc_10903A6B
; ---------------------------------------------------------------------------

loc_10903AD8:                           ; CODE XREF: sub_10903A50+2F↑j
                cmp     [ebp+arg_4], 0
                jz      short loc_10903B14
                mov     ecx, [ebp+var_10]
                mov     edx, [ecx+24h]
                mov     eax, [ebp+var_10]
                lea     ecx, [eax+edx+28h]
                mov     [ebp+var_C], ecx
                mov     ecx, [ebp+arg_4]
                mov     esi, [ebp+arg_0]
                mov     edi, [ebp+var_C]
                mov     ebx, ecx
                shr     ecx, 2
                and     ebx, 3
                rep movsd
                mov     ecx, ebx
                rep movsb
                mov     edx, [ebp+var_10]
                mov     eax, [edx+24h]
                add     eax, [ebp+arg_4]
                mov     ecx, [ebp+var_10]
                mov     [ecx+24h], eax

loc_10903B14:                           ; CODE XREF: sub_10903A50+8C↑j
                pop     edi
                pop     esi
                pop     ebx
                mov     esp, ebp
                pop     ebp
                retn    8
sub_10903A50    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10903B20    proc near               ; DATA XREF: .rdata:10913018↓o

var_28          = dword ptr -28h
var_24          = dword ptr -24h
var_20          = dword ptr -20h
var_1C          = byte ptr -1Ch
NumberOfBytesWritten= dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 10910540 SIZE 00000009 BYTES

; __unwind { // SEH_10903B20
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_10903B20
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 1Ch
                mov     [ebp+var_20], ecx
                mov     eax, [ebp+var_20]
                cmp     dword ptr [eax+24h], 0
                jz      loc_10903BD6
                mov     [ebp+NumberOfBytesWritten], 0
                push    0               ; lpOverlapped
                lea     ecx, [ebp+NumberOfBytesWritten]
                push    ecx             ; lpNumberOfBytesWritten
                mov     edx, [ebp+var_20]
                mov     eax, [edx+24h]
                push    eax             ; nNumberOfBytesToWrite
                mov     ecx, [ebp+var_20]
                add     ecx, 28h
                push    ecx             ; lpBuffer
                mov     edx, [ebp+var_20]
                mov     eax, [edx+18h]
                push    eax             ; hFile
                call    ds:WriteFile
                test    eax, eax
                jnz     short loc_10903BD6
                mov     ecx, [ebp+var_20]
                mov     edx, [ecx+14h]
                or      edx, 100h
                mov     eax, [ebp+var_20]
                mov     [eax+14h], edx
                push    0
                push    offset aCore    ; "Core"
                push    offset aWritefailed ; "WriteFailed"
                lea     ecx, [ebp+var_1C]
                push    ecx
                call    ds:?dnLocalizeError@@YA?BVdnString@@PBDPB_W1@Z ; dnLocalizeError(char const *,wchar_t const *,wchar_t const *)
                add     esp, 10h
                mov     [ebp+var_24], eax
                mov     edx, [ebp+var_24]
                mov     [ebp+var_28], edx
;   try {
                mov     [ebp+var_4], 0
                mov     eax, [ebp+var_28]
                push    eax
                mov     ecx, [ebp+var_20]
                mov     edx, [ecx+1Ch]
                push    edx
                call    ds:?Logf@dnOutputDevice@@QAAXABVdnString@@ZZ ; dnOutputDevice::Logf(dnString const &,...)
                add     esp, 8
;   } // starts at 10903BAB
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_1C]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)

loc_10903BD6:                           ; CODE XREF: sub_10903B20+25↑j
                                        ; sub_10903B20+55↑j
                mov     eax, [ebp+var_20]
                mov     dword ptr [eax+24h], 0
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
; } // starts at 10903B20
sub_10903B20    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10903BF0    proc near               ; DATA XREF: .rdata:10912F6C↓o
                                        ; .rdata:10913454↓o

var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp+var_4], ecx
                mov     eax, ds:?GError@@3PAVdnOutputDeviceError@@A ; dnOutputDeviceError * GError
                mov     ecx, [eax]
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                push    edx
                mov     eax, [ebp+var_4]
                mov     edx, [eax]
                mov     ecx, [ebp+var_4]
                mov     eax, [edx+18h]
                call    eax
                mov     esp, ebp
                pop     ebp
                retn    4
sub_10903BF0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __stdcall sub_10903C20(LPCWSTR lpFileName)
sub_10903C20    proc near               ; CODE XREF: sub_109070D0+5A↓p
                                        ; sub_109070D0+89↓p
                                        ; DATA XREF: ...

var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
hFile           = dword ptr -4
lpFileName      = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 18h
                mov     [ebp+var_10], ecx
                mov     eax, ds:GUnicodeOS
                cmp     dword ptr [eax], 0
                jz      short loc_10903C54
                push    0               ; hTemplateFile
                push    80h             ; dwFlagsAndAttributes
                push    3               ; dwCreationDisposition
                push    0               ; lpSecurityAttributes
                push    1               ; dwShareMode
                push    80000000h       ; dwDesiredAccess
                mov     ecx, [ebp+lpFileName]
                push    ecx             ; lpFileName
                call    ds:CreateFileW
                mov     [ebp+var_14], eax
                jmp     short loc_10903CB0
; ---------------------------------------------------------------------------

loc_10903C54:                           ; CODE XREF: sub_10903C20+11↑j
                mov     edx, [ebp+lpFileName]
                push    edx
                call    ds:?dnWinGetSizeANSI@@YAHPB_W@Z ; dnWinGetSizeANSI(wchar_t const *)
                add     esp, 4
                mov     [ebp+var_C], eax
                mov     eax, [ebp+var_C]
                add     eax, 7
                and     eax, 0FFFFFFF8h
                call    __alloca_probe_16
                mov     [ebp+var_18], esp
                push    0               ; hTemplateFile
                push    80h             ; dwFlagsAndAttributes
                push    3               ; dwCreationDisposition
                push    0               ; lpSecurityAttributes
                push    1               ; dwShareMode
                push    80000000h       ; dwDesiredAccess
                mov     eax, [ebp+lpFileName]
                push    eax
                call    ds:?dnWinGetSizeANSI@@YAHPB_W@Z ; dnWinGetSizeANSI(wchar_t const *)
                add     esp, 4
                push    eax
                mov     ecx, [ebp+lpFileName]
                push    ecx
                mov     edx, [ebp+var_18]
                push    edx
                call    ds:?dnWinToANSI@@YAPADPADPB_WH@Z ; dnWinToANSI(char *,wchar_t const *,int)
                add     esp, 0Ch
                push    eax             ; lpFileName
                call    ds:CreateFileA
                mov     [ebp+var_14], eax

loc_10903CB0:                           ; CODE XREF: sub_10903C20+32↑j
                mov     eax, [ebp+var_14]
                mov     [ebp+hFile], eax
                cmp     [ebp+hFile], 0FFFFFFFFh
                jnz     short loc_10903CC1
                or      eax, 0FFFFFFFFh
                jmp     short loc_10903CDD
; ---------------------------------------------------------------------------

loc_10903CC1:                           ; CODE XREF: sub_10903C20+9A↑j
                push    0               ; lpFileSizeHigh
                mov     ecx, [ebp+hFile]
                push    ecx             ; hFile
                call    ds:GetFileSize
                mov     [ebp+var_8], eax
                mov     edx, [ebp+hFile]
                push    edx             ; hObject
                call    ds:CloseHandle
                mov     eax, [ebp+var_8]

loc_10903CDD:                           ; CODE XREF: sub_10903C20+9F↑j
                lea     esp, [ebp-18h]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_10903C20    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __stdcall sub_10903CF0(LPCWSTR lpFileName, int, int)
sub_10903CF0    proc near               ; DATA XREF: .rdata:10912F80↓o
                                        ; .rdata:10913468↓o

var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
var_4           = dword ptr -4
lpFileName      = dword ptr  8
arg_4           = dword ptr  0Ch
arg_8           = dword ptr  10h

                push    ebp
                mov     ebp, esp
                sub     esp, 20h
                mov     [ebp+var_C], ecx
                cmp     [ebp+arg_8], 0
                jz      short loc_10903D6C
                mov     eax, ds:GUnicodeOS
                cmp     dword ptr [eax], 0
                jz      short loc_10903D1D
                push    80h             ; dwFileAttributes
                mov     ecx, [ebp+lpFileName]
                push    ecx             ; lpFileName
                call    ds:SetFileAttributesW
                mov     [ebp+var_10], eax
                jmp     short loc_10903D6C
; ---------------------------------------------------------------------------

loc_10903D1D:                           ; CODE XREF: sub_10903CF0+17↑j
                mov     edx, [ebp+lpFileName]
                push    edx
                call    ds:?dnWinGetSizeANSI@@YAHPB_W@Z ; dnWinGetSizeANSI(wchar_t const *)
                add     esp, 4
                mov     [ebp+var_4], eax
                mov     eax, [ebp+var_4]
                add     eax, 7
                and     eax, 0FFFFFFF8h
                call    __alloca_probe_16
                mov     [ebp+var_14], esp
                push    80h             ; dwFileAttributes
                mov     eax, [ebp+lpFileName]
                push    eax
                call    ds:?dnWinGetSizeANSI@@YAHPB_W@Z ; dnWinGetSizeANSI(wchar_t const *)
                add     esp, 4
                push    eax
                mov     ecx, [ebp+lpFileName]
                push    ecx
                mov     edx, [ebp+var_14]
                push    edx
                call    ds:?dnWinToANSI@@YAPADPADPB_WH@Z ; dnWinToANSI(char *,wchar_t const *,int)
                add     esp, 0Ch
                push    eax             ; lpFileName
                call    ds:SetFileAttributesA
                mov     [ebp+var_10], eax

loc_10903D6C:                           ; CODE XREF: sub_10903CF0+D↑j
                                        ; sub_10903CF0+2B↑j
                mov     eax, ds:GUnicodeOS
                cmp     dword ptr [eax], 0
                jz      short loc_10903D85
                mov     ecx, [ebp+lpFileName]
                push    ecx             ; lpFileName
                call    ds:DeleteFileW
                mov     [ebp+var_18], eax
                jmp     short loc_10903DCF
; ---------------------------------------------------------------------------

loc_10903D85:                           ; CODE XREF: sub_10903CF0+84↑j
                mov     edx, [ebp+lpFileName]
                push    edx
                call    ds:?dnWinGetSizeANSI@@YAHPB_W@Z ; dnWinGetSizeANSI(wchar_t const *)
                add     esp, 4
                mov     [ebp+var_8], eax
                mov     eax, [ebp+var_8]
                add     eax, 7
                and     eax, 0FFFFFFF8h
                call    __alloca_probe_16
                mov     [ebp+var_1C], esp
                mov     eax, [ebp+lpFileName]
                push    eax
                call    ds:?dnWinGetSizeANSI@@YAHPB_W@Z ; dnWinGetSizeANSI(wchar_t const *)
                add     esp, 4
                push    eax
                mov     ecx, [ebp+lpFileName]
                push    ecx
                mov     edx, [ebp+var_1C]
                push    edx
                call    ds:?dnWinToANSI@@YAPADPADPB_WH@Z ; dnWinToANSI(char *,wchar_t const *,int)
                add     esp, 0Ch
                push    eax             ; lpFileName
                call    ds:DeleteFileA
                mov     [ebp+var_18], eax

loc_10903DCF:                           ; CODE XREF: sub_10903CF0+93↑j
                cmp     [ebp+var_18], 0
                jnz     short loc_10903DEF
                cmp     [ebp+arg_4], 0
                jnz     short loc_10903DE6
                call    ds:GetLastError
                cmp     eax, 2
                jz      short loc_10903DEF

loc_10903DE6:                           ; CODE XREF: sub_10903CF0+E9↑j
                mov     [ebp+var_20], 0
                jmp     short loc_10903DF6
; ---------------------------------------------------------------------------

loc_10903DEF:                           ; CODE XREF: sub_10903CF0+E3↑j
                                        ; sub_10903CF0+F4↑j
                mov     [ebp+var_20], 1

loc_10903DF6:                           ; CODE XREF: sub_10903CF0+FD↑j
                mov     eax, [ebp+var_20]
                lea     esp, [ebp-20h]
                mov     esp, ebp
                pop     ebp
                retn    0Ch
sub_10903CF0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __stdcall sub_10903E10(LPCWSTR lpNewFileName, LPCWSTR lpExistingFileName, int, int, int)
sub_10903E10    proc near               ; DATA XREF: .rdata:10912F88↓o
                                        ; .rdata:10913470↓o

var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
var_4           = dword ptr -4
lpNewFileName   = dword ptr  8
lpExistingFileName= dword ptr  0Ch

                push    ebp
                mov     ebp, esp
                sub     esp, 1Ch
                mov     [ebp+var_10], ecx
                push    1
                push    0
                mov     eax, [ebp+lpNewFileName]
                push    eax
                mov     ecx, [ebp+var_10]
                mov     edx, [ecx]
                mov     ecx, [ebp+var_10]
                mov     eax, [edx+24h]
                call    eax
                mov     ecx, ds:GUnicodeOS
                cmp     dword ptr [ecx], 0
                jz      short loc_10903E4F
                mov     edx, [ebp+lpNewFileName]
                push    edx             ; lpNewFileName
                mov     eax, [ebp+lpExistingFileName]
                push    eax             ; lpExistingFileName
                call    ds:MoveFileW
                mov     [ebp+var_14], eax
                jmp     loc_10903EDA
; ---------------------------------------------------------------------------

loc_10903E4F:                           ; CODE XREF: sub_10903E10+27↑j
                mov     ecx, [ebp+lpNewFileName]
                push    ecx
                call    ds:?dnWinGetSizeANSI@@YAHPB_W@Z ; dnWinGetSizeANSI(wchar_t const *)
                add     esp, 4
                mov     [ebp+var_8], eax
                mov     eax, [ebp+var_8]
                add     eax, 7
                and     eax, 0FFFFFFF8h
                call    __alloca_probe_16
                mov     [ebp+var_18], esp
                mov     edx, [ebp+lpExistingFileName]
                push    edx
                call    ds:?dnWinGetSizeANSI@@YAHPB_W@Z ; dnWinGetSizeANSI(wchar_t const *)
                add     esp, 4
                mov     [ebp+var_C], eax
                mov     eax, [ebp+var_C]
                add     eax, 7
                and     eax, 0FFFFFFF8h
                call    __alloca_probe_16
                mov     [ebp+var_1C], esp
                mov     eax, [ebp+lpNewFileName]
                push    eax
                call    ds:?dnWinGetSizeANSI@@YAHPB_W@Z ; dnWinGetSizeANSI(wchar_t const *)
                add     esp, 4
                push    eax
                mov     ecx, [ebp+lpNewFileName]
                push    ecx
                mov     edx, [ebp+var_18]
                push    edx
                call    ds:?dnWinToANSI@@YAPADPADPB_WH@Z ; dnWinToANSI(char *,wchar_t const *,int)
                add     esp, 0Ch
                push    eax             ; lpNewFileName
                mov     eax, [ebp+lpExistingFileName]
                push    eax
                call    ds:?dnWinGetSizeANSI@@YAHPB_W@Z ; dnWinGetSizeANSI(wchar_t const *)
                add     esp, 4
                push    eax
                mov     ecx, [ebp+lpExistingFileName]
                push    ecx
                mov     edx, [ebp+var_1C]
                push    edx
                call    ds:?dnWinToANSI@@YAPADPADPB_WH@Z ; dnWinToANSI(char *,wchar_t const *,int)
                add     esp, 0Ch
                push    eax             ; lpExistingFileName
                call    ds:MoveFileA
                mov     [ebp+var_14], eax

loc_10903EDA:                           ; CODE XREF: sub_10903E10+3A↑j
                mov     eax, [ebp+var_14]
                mov     [ebp+var_4], eax
                cmp     [ebp+var_4], 0
                jnz     short loc_10903F0D

loc_10903EE6:                           ; CODE XREF: sub_10903E10+FB↓j
                mov     ecx, [ebp+lpNewFileName]
                push    ecx
                mov     edx, [ebp+lpExistingFileName]
                push    edx
                push    offset aErrorMovingFil ; "Error moving file '%s' to '%s'"
                push    2FFh
                mov     eax, ds:?GLog@@3PAVdnOutputDevice@@A ; dnOutputDevice * GLog
                mov     ecx, [eax]
                push    ecx
                call    ds:?Logf@dnOutputDevice@@QAAXW4EName@@PB_WZZ ; dnOutputDevice::Logf(EName,wchar_t const *,...)
                add     esp, 14h
                xor     edx, edx
                jnz     short loc_10903EE6

loc_10903F0D:                           ; CODE XREF: sub_10903E10+D4↑j
                xor     eax, eax
                cmp     [ebp+var_4], 0
                setnz   al
                lea     esp, [ebp-1Ch]
                mov     esp, ebp
                pop     ebp
                retn    14h
sub_10903E10    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10903F20    proc near               ; DATA XREF: .rdata:10912F8C↓o
                                        ; .rdata:10913474↓o

var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp+var_4], ecx
                xor     eax, eax
                xor     edx, edx
                mov     esp, ebp
                pop     ebp
                retn    4
sub_10903F20    endp

; ---------------------------------------------------------------------------
                align 10h
; [0000000F BYTES: COLLAPSED FUNCTION std::_Ref_count_base::_Get_deleter(type_info const &). PRESS CTRL-NUMPAD+ TO EXPAND]
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __stdcall sub_10903F50(LPCWSTR lpPathName)
sub_10903F50    proc near               ; DATA XREF: .rdata:10912FA0↓o
                                        ; .rdata:10913488↓o

var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
var_4           = dword ptr -4
lpPathName      = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 10h
                mov     [ebp+var_8], ecx
                mov     eax, ds:GUnicodeOS
                cmp     dword ptr [eax], 0
                jz      short loc_10903F72
                mov     ecx, [ebp+lpPathName]
                push    ecx             ; lpPathName
                call    ds:SetCurrentDirectoryW
                mov     [ebp+var_C], eax
                jmp     short loc_10903FBC
; ---------------------------------------------------------------------------

loc_10903F72:                           ; CODE XREF: sub_10903F50+11↑j
                mov     edx, [ebp+lpPathName]
                push    edx
                call    ds:?dnWinGetSizeANSI@@YAHPB_W@Z ; dnWinGetSizeANSI(wchar_t const *)
                add     esp, 4
                mov     [ebp+var_4], eax
                mov     eax, [ebp+var_4]
                add     eax, 7
                and     eax, 0FFFFFFF8h
                call    __alloca_probe_16
                mov     [ebp+var_10], esp
                mov     eax, [ebp+lpPathName]
                push    eax
                call    ds:?dnWinGetSizeANSI@@YAHPB_W@Z ; dnWinGetSizeANSI(wchar_t const *)
                add     esp, 4
                push    eax
                mov     ecx, [ebp+lpPathName]
                push    ecx
                mov     edx, [ebp+var_10]
                push    edx
                call    ds:?dnWinToANSI@@YAPADPADPB_WH@Z ; dnWinToANSI(char *,wchar_t const *,int)
                add     esp, 0Ch
                push    eax             ; lpPathName
                call    ds:SetCurrentDirectoryA
                mov     [ebp+var_C], eax

loc_10903FBC:                           ; CODE XREF: sub_10903F50+20↑j
                xor     eax, eax
                cmp     [ebp+var_C], 0
                setnz   al
                lea     esp, [ebp-10h]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_10903F50    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10903FD0    proc near               ; DATA XREF: .rdata:10912FA4↓o
                                        ; .rdata:1091348C↓o

var_C38         = dword ptr -0C38h
var_C34         = dword ptr -0C34h
var_C30         = dword ptr -0C30h
var_C2C         = dword ptr -0C2Ch
var_C28         = byte ptr -0C28h
var_C1C         = byte ptr -0C1Ch
var_C1B         = byte ptr -0C1Bh
var_818         = dword ptr -818h
Buffer          = word ptr -814h
Dst             = word ptr -812h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8

; FUNCTION CHUNK AT 10910560 SIZE 0000002C BYTES

; __unwind { // SEH_10903FD0
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_10903FD0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0C2Ch
                mov     [ebp+var_C30], ecx
                mov     [ebp+var_C2C], 0
                mov     eax, ds:GUnicodeOS
                cmp     dword ptr [eax], 0
                jz      loc_10904095
                mov     cx, ds:Str2
                mov     [ebp+Buffer], cx
                push    7FEh            ; Size
                push    0               ; Val
                lea     edx, [ebp+Dst]
                push    edx             ; Dst
                call    memset
                add     esp, 0Ch
                lea     eax, [ebp+Buffer]
                push    eax             ; lpBuffer
                push    3FFh            ; nBufferLength
                call    ds:GetCurrentDirectoryW
                mov     [ebp+var_10], eax
                mov     ecx, 5Ch
                mov     edx, [ebp+var_10]
                mov     [ebp+edx*2+Buffer], cx
                xor     eax, eax
                mov     ecx, [ebp+var_10]
                mov     [ebp+ecx*2+Dst], ax
                lea     edx, [ebp+Buffer]
                push    edx
                mov     ecx, [ebp+arg_0]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
;   try {
                mov     [ebp+var_4], 0
                mov     eax, [ebp+var_C2C]
                or      eax, 1
                mov     [ebp+var_C2C], eax
                mov     eax, [ebp+arg_0]
                jmp     loc_1090414F
; ---------------------------------------------------------------------------
                jmp     loc_1090414F
; ---------------------------------------------------------------------------

loc_10904095:                           ; CODE XREF: sub_10903FD0+36↑j
                mov     cl, ds:byte_10912EDE
                mov     [ebp+var_C1C], cl
                push    3FFh            ; Size
                push    0               ; Val
                lea     edx, [ebp+var_C1B]
                push    edx             ; Dst
                call    memset
                add     esp, 0Ch
                lea     eax, [ebp+var_C1C]
                push    eax             ; lpBuffer
                push    3FFh            ; nBufferLength
                call    ds:GetCurrentDirectoryA
                mov     [ebp+var_818], eax
                mov     ecx, [ebp+var_818]
                mov     [ebp+ecx+var_C1C], 5Ch
                mov     edx, [ebp+var_818]
                mov     [ebp+edx+var_C1B], 0
                lea     eax, [ebp+var_C1C]
                push    eax
                lea     ecx, [ebp+var_C28]
                call    ds:??0dnString@@QAE@PBD@Z ; dnString::dnString(char const *)
                mov     [ebp+var_C34], eax
                mov     ecx, [ebp+var_C34]
                mov     [ebp+var_C38], ecx
;   } // starts at 10904072
;   try {
                mov     [ebp+var_4], 1
                mov     ecx, [ebp+var_C38]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                mov     ecx, [ebp+arg_0]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
                mov     edx, [ebp+var_C2C]
                or      edx, 1
                mov     [ebp+var_C2C], edx
;   } // starts at 10904110
;   try {
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_C28]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                mov     eax, [ebp+arg_0]

loc_1090414F:                           ; CODE XREF: sub_10903FD0+BB↑j
                                        ; sub_10903FD0+C0↑j
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    4
;   } // starts at 1090413C
; } // starts at 10903FD0
sub_10903FD0    endp

; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                pop     ebp
; [00000006 BYTES: COLLAPSED FUNCTION _wcsstr. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 10h
                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp-4], ecx
                mov     ecx, [ebp-4]
                call    ds:??0dnArrayBase@@QAE@XZ ; dnArrayBase::dnArrayBase(void)
                mov     eax, [ebp-4]
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp-4], ecx
                mov     eax, [ebp+8]
                shl     eax, 0Ch
                mov     ecx, [ebp-4]
                add     eax, [ecx]
                mov     esp, ebp
                pop     ebp
                retn    4
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_109041B0    proc near               ; CODE XREF: sub_10904A80+10↓p

var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch

                push    ebp
                mov     ebp, esp
                sub     esp, 14h
                mov     [ebp+var_14], ecx
                push    1000h
                mov     eax, [ebp+arg_0]
                push    eax
                mov     ecx, [ebp+var_14]
                call    ds:?Add@dnArrayBase@@QAEHHH@Z ; dnArrayBase::Add(int,int)
                mov     [ebp+var_4], eax
                cmp     [ebp+arg_4], 0
                jz      short loc_10904214
                mov     ecx, [ebp+var_4]
                mov     [ebp+var_8], ecx
                jmp     short loc_109041E5
; ---------------------------------------------------------------------------

loc_109041DC:                           ; CODE XREF: sub_109041B0+62↓j
                mov     edx, [ebp+var_8]
                add     edx, 1
                mov     [ebp+var_8], edx

loc_109041E5:                           ; CODE XREF: sub_109041B0+2A↑j
                mov     eax, [ebp+var_4]
                add     eax, [ebp+arg_0]
                cmp     [ebp+var_8], eax
                jge     short loc_10904214
                mov     ecx, [ebp+var_8]
                shl     ecx, 0Ch
                mov     edx, [ebp+var_14]
                add     ecx, [edx]
                mov     [ebp+var_10], ecx
                mov     eax, [ebp+var_10]
                push    eax             ; void *
                push    1000h           ; unsigned int
                call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
                add     esp, 8
                mov     [ebp+var_C], eax
                jmp     short loc_109041DC
; ---------------------------------------------------------------------------

loc_10904214:                           ; CODE XREF: sub_109041B0+22↑j
                                        ; sub_109041B0+3E↑j
                mov     eax, [ebp+var_4]
                mov     esp, ebp
                pop     ebp
                retn    8
sub_109041B0    endp

; ---------------------------------------------------------------------------
                align 10h
; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_5. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 10h
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset sub_109105A9
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 10h
                mov     [ebp-1Ch], ecx
                mov     eax, [ebp-1Ch]
                mov     dword ptr [eax], offset ??_7dnArchiveFileWriter@@6B@ ; const dnArchiveFileWriter::`vftable'
                mov     dword ptr [ebp-4], 0
                mov     ecx, [ebp-1Ch]
                cmp     dword ptr [ecx+18h], 0
                jz      short loc_1090426F
                mov     ecx, [ebp-1Ch]
                call    sub_10903980

loc_1090426F:                           ; CODE XREF: .text:10904265↑j
                mov     dword ptr [ebp-4], 0FFFFFFFFh
                mov     ecx, [ebp-1Ch]
                call    ds:??1dnArchive@@UAE@XZ ; dnArchive::~dnArchive(void)
                mov     ecx, [ebp-0Ch]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10904290    proc near               ; DATA XREF: .rdata:const dnArchiveFileWriter::`vftable'↓o

var_1C          = dword ptr -1Ch
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8

; FUNCTION CHUNK AT 109105C0 SIZE 00000009 BYTES

; __unwind { // SEH_10904290
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_10904290
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 10h
                mov     [ebp+var_1C], ecx
                mov     eax, [ebp+var_1C]
                mov     dword ptr [eax], offset ??_7dnArchiveFileWriter@@6B@ ; const dnArchiveFileWriter::`vftable'
;   try {
                mov     [ebp+var_4], 0
                mov     ecx, [ebp+var_1C]
                cmp     dword ptr [ecx+18h], 0
                jz      short loc_109042CF
                mov     ecx, [ebp+var_1C]
                call    sub_10903980
;   } // starts at 109042B7

loc_109042CF:                           ; CODE XREF: sub_10904290+35↑j
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_1C]
                call    ds:??1dnArchive@@UAE@XZ ; dnArchive::~dnArchive(void)
                mov     edx, [ebp+arg_0]
                and     edx, 1
                jz      short loc_109042F3
                mov     eax, [ebp+var_1C]
                push    eax
                call    sub_10901030
                add     esp, 4

loc_109042F3:                           ; CODE XREF: sub_10904290+55↑j
                mov     eax, [ebp+var_1C]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    4
; } // starts at 10904290
sub_10904290    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __stdcall sub_10904310(LPCWSTR lpFileName, int, int)
sub_10904310    proc near               ; CODE XREF: sub_10906FF0+62↓p
                                        ; sub_10906FF0+99↓p
                                        ; DATA XREF: ...

var_50          = dword ptr -50h
var_4C          = dword ptr -4Ch
var_48          = dword ptr -48h
var_44          = dword ptr -44h
var_40          = dword ptr -40h
var_3C          = dword ptr -3Ch
var_38          = dword ptr -38h
var_34          = dword ptr -34h
var_30          = dword ptr -30h
var_2C          = dword ptr -2Ch
var_28          = dword ptr -28h
dwDesiredAccess = dword ptr -24h
dwShareMode     = dword ptr -20h
var_1C          = dword ptr -1Ch
hFile           = dword ptr -18h
var_14          = dword ptr -14h
dwCreationDisposition= dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
lpFileName      = dword ptr  8
arg_4           = dword ptr  0Ch
arg_8           = dword ptr  10h

; FUNCTION CHUNK AT 109105E0 SIZE 00000024 BYTES

; __unwind { // SEH_10904310
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_10904310
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 44h
                mov     [ebp+var_3C], ecx
                mov     eax, [ebp+lpFileName]
                push    eax             ; wchar_t *
                call    ?dnPackageMgr_FindPackageLoader@@YAPAVdnArchive@@PB_W@Z ; dnPackageMgr_FindPackageLoader(wchar_t const *)
                add     esp, 4
                mov     [ebp+var_1C], eax
                cmp     [ebp+var_1C], 0
                jz      short loc_1090434B
                mov     eax, [ebp+var_1C]
                jmp     loc_10904553
; ---------------------------------------------------------------------------

loc_1090434B:                           ; CODE XREF: sub_10904310+31↑j
                mov     [ebp+dwDesiredAccess], 80000000h
                mov     [ebp+dwShareMode], 1
                mov     [ebp+dwCreationDisposition], 3
                mov     ecx, ds:GUnicodeOS
                cmp     dword ptr [ecx], 0
                jz      short loc_1090438F
                push    0               ; hTemplateFile
                push    80h             ; dwFlagsAndAttributes
                mov     edx, [ebp+dwCreationDisposition]
                push    edx             ; dwCreationDisposition
                push    0               ; lpSecurityAttributes
                mov     eax, [ebp+dwShareMode]
                push    eax             ; dwShareMode
                mov     ecx, [ebp+dwDesiredAccess]
                push    ecx             ; dwDesiredAccess
                mov     edx, [ebp+lpFileName]
                push    edx             ; lpFileName
                call    ds:CreateFileW
                mov     [ebp+var_40], eax
                jmp     short loc_109043EE
; ---------------------------------------------------------------------------

loc_1090438F:                           ; CODE XREF: sub_10904310+59↑j
                mov     eax, [ebp+lpFileName]
                push    eax
                call    ds:?dnWinGetSizeANSI@@YAHPB_W@Z ; dnWinGetSizeANSI(wchar_t const *)
                add     esp, 4
                mov     [ebp+var_38], eax
                mov     eax, [ebp+var_38]
                add     eax, 7
                and     eax, 0FFFFFFF8h
                call    __alloca_probe_16
                mov     [ebp+var_44], esp
                push    0               ; hTemplateFile
                push    80h             ; dwFlagsAndAttributes
                mov     ecx, [ebp+dwCreationDisposition]
                push    ecx             ; dwCreationDisposition
                push    0               ; lpSecurityAttributes
                mov     edx, [ebp+dwShareMode]
                push    edx             ; dwShareMode
                mov     eax, [ebp+dwDesiredAccess]
                push    eax             ; dwDesiredAccess
                mov     ecx, [ebp+lpFileName]
                push    ecx
                call    ds:?dnWinGetSizeANSI@@YAHPB_W@Z ; dnWinGetSizeANSI(wchar_t const *)
                add     esp, 4
                push    eax
                mov     edx, [ebp+lpFileName]
                push    edx
                mov     eax, [ebp+var_44]
                push    eax
                call    ds:?dnWinToANSI@@YAPADPADPB_WH@Z ; dnWinToANSI(char *,wchar_t const *,int)
                add     esp, 0Ch
                push    eax             ; lpFileName
                call    ds:CreateFileA
                mov     [ebp+var_40], eax

loc_109043EE:                           ; CODE XREF: sub_10904310+7D↑j
                mov     ecx, [ebp+var_40]
                mov     [ebp+hFile], ecx
                cmp     [ebp+hFile], 0FFFFFFFFh
                jnz     short loc_10904428
                mov     edx, [ebp+arg_4]
                and     edx, 1
                jz      short loc_10904421

loc_10904402:                           ; CODE XREF: sub_10904310+10F↓j
                mov     eax, [ebp+lpFileName]
                push    eax
                push    offset aFailedToReadFi ; "Failed to read file: %s"
                mov     ecx, ds:?GLog@@3PAVdnOutputDevice@@A ; dnOutputDevice * GLog
                mov     edx, [ecx]
                push    edx
                call    ds:?Logf@dnOutputDevice@@QAAXPB_WZZ ; dnOutputDevice::Logf(wchar_t const *,...)
                add     esp, 0Ch
                xor     eax, eax
                jnz     short loc_10904402

loc_10904421:                           ; CODE XREF: sub_10904310+F0↑j
                xor     eax, eax
                jmp     loc_10904553
; ---------------------------------------------------------------------------

loc_10904428:                           ; CODE XREF: sub_10904310+E8↑j
                mov     ecx, [ebp+var_3C]
                mov     edx, [ecx+4]
                mov     [ebp+var_48], edx
                mov     eax, [ebp+var_3C]
                mov     ecx, [eax+4]
                add     ecx, 1
                mov     edx, [ebp+var_3C]
                mov     [edx+4], ecx
                mov     eax, [ebp+var_48]
                push    eax
                mov     ecx, [ebp+lpFileName]
                push    ecx
                push    offset aOpenedFileSI ; "Opened file: %s (%i)"
                push    305h
                mov     edx, ds:?GLog@@3PAVdnOutputDevice@@A ; dnOutputDevice * GLog
                mov     eax, [edx]
                push    eax
                call    ds:?Logf@dnOutputDevice@@QAAXW4EName@@PB_WZZ ; dnOutputDevice::Logf(EName,wchar_t const *,...)
                add     esp, 14h
                push    offset SubStr   ; ".lin"
                mov     ecx, [ebp+lpFileName]
                push    ecx             ; Str
                call    ds:wcsstr
                add     esp, 8
                neg     eax
                sbb     eax, eax
                neg     eax
                mov     [ebp+var_14], eax
                jz      short loc_109044EB
                push    offset aCompressedfile ; "CompressedFileReader"
                push    300084h
                call    sub_109037F0
                add     esp, 8
                mov     [ebp+var_2C], eax
;   try {
                mov     [ebp+var_4], 0
                cmp     [ebp+var_2C], 0
                jz      short loc_109044D2
                push    0               ; lpFileSizeHigh
                mov     edx, [ebp+hFile]
                push    edx             ; hFile
                call    ds:GetFileSize
                push    eax
                mov     eax, [ebp+arg_8]
                push    eax
                mov     ecx, [ebp+hFile]
                push    ecx
                mov     ecx, [ebp+var_2C]
                call    ds:??0dnArchiveFileReaderCompressedWin32@@QAE@PAXPAVdnOutputDevice@@H@Z ; dnArchiveFileReaderCompressedWin32::dnArchiveFileReaderCompressedWin32(void *,dnOutputDevice *,int)
                mov     edx, [ebp+var_2C]
                mov     dword ptr [edx], offset ??_7dnArchiveFileReaderCompressedWin32@@6B@ ; const dnArchiveFileReaderCompressedWin32::`vftable'
                mov     eax, [ebp+var_2C]
                mov     [ebp+var_4C], eax
                jmp     short loc_109044D9
; ---------------------------------------------------------------------------

loc_109044D2:                           ; CODE XREF: sub_10904310+191↑j
                mov     [ebp+var_4C], 0

loc_109044D9:                           ; CODE XREF: sub_10904310+1C0↑j
                mov     ecx, [ebp+var_4C]
                mov     [ebp+var_28], ecx
;   } // starts at 10904496
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_28]
                jmp     short loc_10904553
; ---------------------------------------------------------------------------

loc_109044EB:                           ; CODE XREF: sub_10904310+16F↑j
                push    offset aWindowsfilerea ; "WindowsFileReader"
                push    2058h
                call    sub_109037F0
                add     esp, 8
                mov     [ebp+var_34], eax
;   try {
                mov     [ebp+var_4], 1
                cmp     [ebp+var_34], 0
                jz      short loc_1090453C
                push    0               ; lpFileSizeHigh
                mov     edx, [ebp+hFile]
                push    edx             ; hFile
                call    ds:GetFileSize
                push    eax
                mov     eax, [ebp+arg_8]
                push    eax
                mov     ecx, [ebp+hFile]
                push    ecx
                mov     ecx, [ebp+var_34]
                call    ds:??0dnArchiveFileReader@@QAE@PAXPAVdnOutputDevice@@H@Z ; dnArchiveFileReader::dnArchiveFileReader(void *,dnOutputDevice *,int)
                mov     edx, [ebp+var_34]
                mov     dword ptr [edx], offset ??_7dnArchiveFileReader@@6B@ ; const dnArchiveFileReader::`vftable'
                mov     eax, [ebp+var_34]
                mov     [ebp+var_50], eax
                jmp     short loc_10904543
; ---------------------------------------------------------------------------

loc_1090453C:                           ; CODE XREF: sub_10904310+1FB↑j
                mov     [ebp+var_50], 0

loc_10904543:                           ; CODE XREF: sub_10904310+22A↑j
                mov     ecx, [ebp+var_50]
                mov     [ebp+var_30], ecx
;   } // starts at 10904500
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_30]

loc_10904553:                           ; CODE XREF: sub_10904310+36↑j
                                        ; sub_10904310+113↑j ...
                lea     esp, [ebp-50h]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    0Ch
; } // starts at 10904310
sub_10904310    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10904570    proc near               ; DATA XREF: .rdata:const dnArchiveFileReader::`vftable'↓o

var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp+var_4], ecx
                mov     ecx, [ebp+var_4]
                call    ds:??1dnArchiveFileReader@@UAE@XZ ; dnArchiveFileReader::~dnArchiveFileReader(void)
                mov     eax, [ebp+arg_0]
                and     eax, 1
                jz      short loc_10904594
                mov     ecx, [ebp+var_4]
                push    ecx
                call    sub_10901030
                add     esp, 4

loc_10904594:                           ; CODE XREF: sub_10904570+16↑j
                mov     eax, [ebp+var_4]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_10904570    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_109045A0    proc near               ; DATA XREF: .rdata:const dnArchiveFileReaderCompressedWin32::`vftable'↓o

var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp+var_4], ecx
                mov     ecx, [ebp+var_4]
                call    ds:??1dnArchiveFileReaderCompressedWin32@@UAE@XZ ; dnArchiveFileReaderCompressedWin32::~dnArchiveFileReaderCompressedWin32(void)
                mov     eax, [ebp+arg_0]
                and     eax, 1
                jz      short loc_109045C4
                mov     ecx, [ebp+var_4]
                push    ecx
                call    sub_10901030
                add     esp, 4

loc_109045C4:                           ; CODE XREF: sub_109045A0+16↑j
                mov     eax, [ebp+var_4]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_109045A0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __stdcall sub_109045D0(LPCWSTR lpFileName, int, int)
sub_109045D0    proc near               ; DATA XREF: .rdata:10912F78↓o
                                        ; .rdata:10913460↓o

var_5C          = dword ptr -5Ch
var_58          = dword ptr -58h
var_54          = dword ptr -54h
var_50          = dword ptr -50h
var_4C          = dword ptr -4Ch
var_48          = dword ptr -48h
var_44          = dword ptr -44h
var_40          = dword ptr -40h
var_3C          = dword ptr -3Ch
var_38          = dword ptr -38h
var_34          = dword ptr -34h
var_30          = dword ptr -30h
var_2C          = dword ptr -2Ch
var_28          = dword ptr -28h
dwDesiredAccess = dword ptr -24h
var_20          = dword ptr -20h
dwShareMode     = dword ptr -1Ch
hFile           = dword ptr -18h
var_14          = dword ptr -14h
dwCreationDisposition= dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
lpFileName      = dword ptr  8
arg_4           = dword ptr  0Ch
arg_8           = dword ptr  10h

; FUNCTION CHUNK AT 10910610 SIZE 00000024 BYTES

; __unwind { // SEH_109045D0
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_109045D0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 50h
                mov     [ebp+var_40], ecx
                mov     eax, [ebp+arg_4]
                and     eax, 4
                jz      short loc_1090465E
                mov     ecx, ds:GUnicodeOS
                cmp     dword ptr [ecx], 0
                jz      short loc_10904612
                push    0               ; dwFileAttributes
                mov     edx, [ebp+lpFileName]
                push    edx             ; lpFileName
                call    ds:SetFileAttributesW
                mov     [ebp+var_44], eax
                jmp     short loc_1090465E
; ---------------------------------------------------------------------------

loc_10904612:                           ; CODE XREF: sub_109045D0+2F↑j
                mov     eax, [ebp+lpFileName]
                push    eax
                call    ds:?dnWinGetSizeANSI@@YAHPB_W@Z ; dnWinGetSizeANSI(wchar_t const *)
                add     esp, 4
                mov     [ebp+var_38], eax
                mov     eax, [ebp+var_38]
                add     eax, 7
                and     eax, 0FFFFFFF8h
                call    __alloca_probe_16
                mov     [ebp+var_48], esp
                push    0               ; dwFileAttributes
                mov     ecx, [ebp+lpFileName]
                push    ecx
                call    ds:?dnWinGetSizeANSI@@YAHPB_W@Z ; dnWinGetSizeANSI(wchar_t const *)
                add     esp, 4
                push    eax
                mov     edx, [ebp+lpFileName]
                push    edx
                mov     eax, [ebp+var_48]
                push    eax
                call    ds:?dnWinToANSI@@YAPADPADPB_WH@Z ; dnWinToANSI(char *,wchar_t const *,int)
                add     esp, 0Ch
                push    eax             ; lpFileName
                call    ds:SetFileAttributesA
                mov     [ebp+var_44], eax

loc_1090465E:                           ; CODE XREF: sub_109045D0+24↑j
                                        ; sub_109045D0+40↑j
                mov     [ebp+dwDesiredAccess], 40000000h
                mov     ecx, [ebp+arg_4]
                and     ecx, 20h
                neg     ecx
                sbb     ecx, ecx
                neg     ecx
                mov     [ebp+dwShareMode], ecx
                mov     edx, [ebp+arg_4]
                and     edx, 8
                jz      short loc_10904687
                mov     eax, [ebp+dwShareMode]
                or      eax, 20000000h
                mov     [ebp+dwShareMode], eax

loc_10904687:                           ; CODE XREF: sub_109045D0+AA↑j
                mov     ecx, [ebp+arg_4]
                and     ecx, 10h
                jz      short loc_10904698
                mov     [ebp+var_4C], 4
                jmp     short loc_109046A8
; ---------------------------------------------------------------------------

loc_10904698:                           ; CODE XREF: sub_109045D0+BD↑j
                mov     edx, [ebp+arg_4]
                and     edx, 2
                neg     edx
                sbb     edx, edx
                add     edx, 2
                mov     [ebp+var_4C], edx

loc_109046A8:                           ; CODE XREF: sub_109045D0+C6↑j
                mov     eax, [ebp+var_4C]
                mov     [ebp+dwCreationDisposition], eax
                mov     ecx, ds:GUnicodeOS
                cmp     dword ptr [ecx], 0
                jz      short loc_109046DD
                push    0               ; hTemplateFile
                push    80h             ; dwFlagsAndAttributes
                mov     edx, [ebp+dwCreationDisposition]
                push    edx             ; dwCreationDisposition
                push    0               ; lpSecurityAttributes
                mov     eax, [ebp+dwShareMode]
                push    eax             ; dwShareMode
                mov     ecx, [ebp+dwDesiredAccess]
                push    ecx             ; dwDesiredAccess
                mov     edx, [ebp+lpFileName]
                push    edx             ; lpFileName
                call    ds:CreateFileW
                mov     [ebp+var_50], eax
                jmp     short loc_1090473C
; ---------------------------------------------------------------------------

loc_109046DD:                           ; CODE XREF: sub_109045D0+E7↑j
                mov     eax, [ebp+lpFileName]
                push    eax
                call    ds:?dnWinGetSizeANSI@@YAHPB_W@Z ; dnWinGetSizeANSI(wchar_t const *)
                add     esp, 4
                mov     [ebp+var_3C], eax
                mov     eax, [ebp+var_3C]
                add     eax, 7
                and     eax, 0FFFFFFF8h
                call    __alloca_probe_16
                mov     [ebp+var_54], esp
                push    0               ; hTemplateFile
                push    80h             ; dwFlagsAndAttributes
                mov     ecx, [ebp+dwCreationDisposition]
                push    ecx             ; dwCreationDisposition
                push    0               ; lpSecurityAttributes
                mov     edx, [ebp+dwShareMode]
                push    edx             ; dwShareMode
                mov     eax, [ebp+dwDesiredAccess]
                push    eax             ; dwDesiredAccess
                mov     ecx, [ebp+lpFileName]
                push    ecx
                call    ds:?dnWinGetSizeANSI@@YAHPB_W@Z ; dnWinGetSizeANSI(wchar_t const *)
                add     esp, 4
                push    eax
                mov     edx, [ebp+lpFileName]
                push    edx
                mov     eax, [ebp+var_54]
                push    eax
                call    ds:?dnWinToANSI@@YAPADPADPB_WH@Z ; dnWinToANSI(char *,wchar_t const *,int)
                add     esp, 0Ch
                push    eax             ; lpFileName
                call    ds:CreateFileA
                mov     [ebp+var_50], eax

loc_1090473C:                           ; CODE XREF: sub_109045D0+10B↑j
                mov     ecx, [ebp+var_50]
                mov     [ebp+hFile], ecx
                mov     [ebp+var_20], 0
                cmp     [ebp+hFile], 0FFFFFFFFh
                jnz     short loc_1090477D
                mov     edx, [ebp+arg_4]
                and     edx, 1
                jz      short loc_10904776

loc_10904757:                           ; CODE XREF: sub_109045D0+1A4↓j
                mov     eax, [ebp+lpFileName]
                push    eax
                push    offset aFailedToCreate ; "Failed to create file: %s"
                mov     ecx, ds:?GLog@@3PAVdnOutputDevice@@A ; dnOutputDevice * GLog
                mov     edx, [ecx]
                push    edx
                call    ds:?Logf@dnOutputDevice@@QAAXPB_WZZ ; dnOutputDevice::Logf(wchar_t const *,...)
                add     esp, 0Ch
                xor     eax, eax
                jnz     short loc_10904757

loc_10904776:                           ; CODE XREF: sub_109045D0+185↑j
                xor     eax, eax
                jmp     loc_109048A2
; ---------------------------------------------------------------------------

loc_1090477D:                           ; CODE XREF: sub_109045D0+17D↑j
                mov     ecx, [ebp+arg_4]
                and     ecx, 10h
                jz      short loc_10904798
                push    2               ; dwMoveMethod
                push    0               ; lpDistanceToMoveHigh
                push    0               ; lDistanceToMove
                mov     edx, [ebp+hFile]
                push    edx             ; hFile
                call    ds:SetFilePointer
                mov     [ebp+var_20], eax

loc_10904798:                           ; CODE XREF: sub_109045D0+1B3↑j
                push    offset SubStr   ; ".lin"
                mov     eax, [ebp+lpFileName]
                push    eax             ; Str
                call    ds:wcsstr
                add     esp, 8
                neg     eax
                sbb     eax, eax
                neg     eax
                mov     [ebp+var_14], eax
                jz      short loc_1090481B
                push    offset aWindowsfilewri ; "WindowsFileWriter"
                push    180040h
                call    sub_109037F0
                add     esp, 8
                mov     [ebp+var_2C], eax
;   try {
                mov     [ebp+var_4], 0
                cmp     [ebp+var_2C], 0
                jz      short loc_109047FF
                push    1
                mov     ecx, [ebp+var_20]
                push    ecx
                mov     edx, [ebp+arg_8]
                push    edx
                mov     eax, [ebp+hFile]
                push    eax
                mov     ecx, [ebp+var_2C]
                call    ds:??0dnArchiveFileWriterCompressedWin32@@QAE@PAXPAVdnOutputDevice@@HH@Z ; dnArchiveFileWriterCompressedWin32::dnArchiveFileWriterCompressedWin32(void *,dnOutputDevice *,int,int)
                mov     ecx, [ebp+var_2C]
                mov     dword ptr [ecx], offset ??_7dnArchiveFileWriterCompressedWin32@@6B@ ; const dnArchiveFileWriterCompressedWin32::`vftable'
                mov     edx, [ebp+var_2C]
                mov     [ebp+var_58], edx
                jmp     short loc_10904806
; ---------------------------------------------------------------------------

loc_109047FF:                           ; CODE XREF: sub_109045D0+205↑j
                mov     [ebp+var_58], 0

loc_10904806:                           ; CODE XREF: sub_109045D0+22D↑j
                mov     eax, [ebp+var_58]
                mov     [ebp+var_28], eax
;   } // starts at 109047CA
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_28]
                jmp     loc_109048A2
; ---------------------------------------------------------------------------

loc_1090481B:                           ; CODE XREF: sub_109045D0+1E3↑j
                push    offset aWindowsfilewri ; "WindowsFileWriter"
                push    1028h
                call    sub_109037F0
                add     esp, 8
                mov     [ebp+var_34], eax
;   try {
                mov     [ebp+var_4], 1
                cmp     [ebp+var_34], 0
                jz      short loc_1090488B
                mov     ecx, [ebp+var_34]
                call    ds:??0dnArchive@@QAE@XZ ; dnArchive::dnArchive(void)
                mov     ecx, [ebp+var_34]
                mov     dword ptr [ecx], offset ??_7dnArchiveFileWriter@@6B@ ; const dnArchiveFileWriter::`vftable'
                mov     edx, [ebp+var_34]
                mov     eax, [ebp+hFile]
                mov     [edx+18h], eax
                mov     ecx, [ebp+var_34]
                mov     edx, [ebp+arg_8]
                mov     [ecx+1Ch], edx
                mov     eax, [ebp+var_34]
                mov     ecx, [ebp+var_20]
                mov     [eax+20h], ecx
                mov     edx, [ebp+var_34]
                mov     dword ptr [edx+24h], 0
                mov     eax, [ebp+var_34]
                mov     ecx, [eax+14h]
                or      ecx, 2
                mov     edx, [ebp+var_34]
                mov     [edx+14h], ecx
                mov     eax, [ebp+var_34]
                mov     [ebp+var_5C], eax
                jmp     short loc_10904892
; ---------------------------------------------------------------------------

loc_1090488B:                           ; CODE XREF: sub_109045D0+26B↑j
                mov     [ebp+var_5C], 0

loc_10904892:                           ; CODE XREF: sub_109045D0+2B9↑j
                mov     ecx, [ebp+var_5C]
                mov     [ebp+var_30], ecx
;   } // starts at 10904830
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_30]

loc_109048A2:                           ; CODE XREF: sub_109045D0+1A8↑j
                                        ; sub_109045D0+246↑j
                lea     esp, [ebp-5Ch]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    0Ch
; } // starts at 109045D0
sub_109045D0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_109048C0    proc near               ; DATA XREF: .rdata:const dnArchiveFileWriterCompressedWin32::`vftable'↓o

var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp+var_4], ecx
                mov     ecx, [ebp+var_4]
                call    ds:??1dnArchiveFileWriterCompressedWin32@@UAE@XZ ; dnArchiveFileWriterCompressedWin32::~dnArchiveFileWriterCompressedWin32(void)
                mov     eax, [ebp+arg_0]
                and     eax, 1
                jz      short loc_109048E4
                mov     ecx, [ebp+var_4]
                push    ecx
                call    sub_10901030
                add     esp, 4

loc_109048E4:                           ; CODE XREF: sub_109048C0+16↑j
                mov     eax, [ebp+var_4]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_109048C0    endp

; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                sub     esp, 24h
                mov     eax, [ebp+8]
                mov     [ebp-8], eax
                mov     ecx, [ebp+0Ch]
                mov     [ebp-4], ecx
                mov     ecx, [ebp-4]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                mov     [ebp-10h], eax
                mov     ecx, [ebp-8]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                mov     [ebp-0Ch], eax
                mov     edx, [ebp-10h]
                mov     [ebp-14h], edx
                mov     eax, [ebp-0Ch]
                mov     [ebp-18h], eax

loc_10904926:                           ; CODE XREF: .text:10904960↓j
                mov     ecx, [ebp-18h]
                mov     dx, [ecx]
                mov     [ebp-1Ah], dx
                mov     eax, [ebp-14h]
                cmp     dx, [eax]
                jnz     short loc_1090496B
                cmp     word ptr [ebp-1Ah], 0
                jz      short loc_10904962
                mov     ecx, [ebp-18h]
                mov     dx, [ecx+2]
                mov     [ebp-1Ch], dx
                mov     eax, [ebp-14h]
                cmp     dx, [eax+2]
                jnz     short loc_1090496B
                add     dword ptr [ebp-18h], 4
                add     dword ptr [ebp-14h], 4
                cmp     word ptr [ebp-1Ch], 0
                jnz     short loc_10904926

loc_10904962:                           ; CODE XREF: .text:1090493D↑j
                mov     dword ptr [ebp-20h], 0
                jmp     short loc_10904973
; ---------------------------------------------------------------------------

loc_1090496B:                           ; CODE XREF: .text:10904936↑j
                                        ; .text:10904951↑j
                sbb     ecx, ecx
                sbb     ecx, 0FFFFFFFFh
                mov     [ebp-20h], ecx

loc_10904973:                           ; CODE XREF: .text:10904969↑j
                mov     edx, [ebp-20h]
                mov     [ebp-24h], edx
                mov     eax, [ebp-24h]
                mov     esp, ebp
                pop     ebp
                retn

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10904980    proc near               ; CODE XREF: sub_10908D00+268↓p
                                        ; sub_109091E0+BC↓p

var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 10h
                push    ebx
                push    esi
                call    rand
                mov     esi, eax
                mov     ecx, [ebp+arg_0]
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                mov     ecx, eax
                mov     eax, esi
                cdq
                idiv    ecx
                mov     [ebp+var_4], edx
                call    rand
                cdq
                mov     ecx, 0FFh
                idiv    ecx
                mov     [ebp+var_C], edx
                mov     ecx, [ebp+arg_0]
                call    ds:?GetData@dnArrayBase@@QAEPAXXZ ; dnArrayBase::GetData(void)
                mov     [ebp+var_8], eax
                mov     [ebp+var_10], 0
                jmp     short loc_109049D0
; ---------------------------------------------------------------------------

loc_109049C7:                           ; CODE XREF: sub_10904980+8A↓j
                mov     edx, [ebp+var_10]
                add     edx, 1
                mov     [ebp+var_10], edx

loc_109049D0:                           ; CODE XREF: sub_10904980+45↑j
                mov     ecx, [ebp+arg_0]
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                cmp     [ebp+var_10], eax
                jge     short loc_10904A0C
                mov     eax, [ebp+var_8]
                add     eax, [ebp+var_10]
                movzx   ebx, byte ptr [eax]
                mov     ecx, [ebp+var_C]
                add     ecx, [ebp+var_10]
                push    ecx
                call    sub_10901AD0
                add     esp, 4
                movzx   edx, al
                add     ebx, edx
                mov     eax, [ebp+var_10]
                push    eax
                mov     ecx, [ebp+arg_0]
                call    ds:??A?$dnArray@E@@QAEAAEH@Z ; dnArray<uchar>::operator[](int)
                mov     [eax], bl
                jmp     short loc_109049C7
; ---------------------------------------------------------------------------

loc_10904A0C:                           ; CODE XREF: sub_10904980+5C↑j
                push    1
                mov     ecx, [ebp+var_4]
                push    ecx
                mov     ecx, [ebp+arg_0]
                call    ds:?Insert@?$dnArray@E@@QAEXHH@Z ; dnArray<uchar>::Insert(int,int)
                mov     edx, [ebp+var_4]
                push    edx
                mov     ecx, [ebp+arg_0]
                call    ds:??A?$dnArray@E@@QAEAAEH@Z ; dnArray<uchar>::operator[](int)
                mov     cl, byte ptr [ebp+var_C]
                mov     [eax], cl
                push    0
                push    4
                mov     ecx, [ebp+arg_0]
                call    ds:?Add@?$dnArray@E@@QAEHHH@Z ; dnArray<uchar>::Add(int,int)
                mov     ecx, [ebp+arg_0]
                call    ds:?GetTypedData@?$dnArray@E@@QAEPAEXZ ; dnArray<uchar>::GetTypedData(void)
                mov     esi, eax
                mov     ecx, [ebp+arg_0]
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                mov     edx, [ebp+var_4]
                mov     [esi+eax-4], edx
                mov     eax, 1
                pop     esi
                pop     ebx
                mov     esp, ebp
                pop     ebp
                retn
sub_10904980    endp

; ---------------------------------------------------------------------------
                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp-4], ecx
                mov     eax, [ebp+8]
                shl     eax, 0Ch
                mov     ecx, [ebp-4]
                add     eax, [ecx]
                mov     esp, ebp
                pop     ebp
                retn    4
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __stdcall sub_10904A80(void *Src)
sub_10904A80    proc near               ; CODE XREF: sub_10905580+173↓p

Dst             = dword ptr -1Ch
var_18          = dword ptr -18h
var_4           = dword ptr -4
Src             = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 1Ch
                mov     [ebp+var_18], ecx
                push    1
                push    1
                mov     ecx, [ebp+var_18]
                call    sub_109041B0
                mov     [ebp+var_4], eax
                mov     eax, [ebp+var_4]
                shl     eax, 0Ch
                mov     ecx, [ebp+var_18]
                add     eax, [ecx]
                mov     [ebp+Dst], eax
                push    1000h           ; Size
                mov     edx, [ebp+Src]
                push    edx             ; Src
                mov     eax, [ebp+Dst]
                push    eax             ; Dst
                call    memcpy
                add     esp, 0Ch
                mov     eax, [ebp+var_4]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_10904A80    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10904AD0    proc near               ; CODE XREF: .text:109076D5↓p
                                        ; .text:109077D5↓p ...

var_30          = dword ptr -30h
var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                sub     esp, 30h
                mov     [ebp+var_30], ecx
                push    3Ch
                push    offset aRBuckeyePcstab ; "r:\\buckeye-pcstable\\dncommon\\inc\\dn"...
                push    offset aDnmapbaseRehas ; "dnMapBase::Rehash"
                xor     ecx, ecx
                mov     edx, [ebp+var_30]
                mov     eax, [edx+10h]
                mov     edx, 4
                mul     edx
                seto    cl
                neg     ecx
                or      ecx, eax
                push    ecx
                call    sub_10901050
                add     esp, 10h
                mov     [ebp+var_18], eax
                mov     eax, [ebp+var_18]
                mov     [ebp+var_4], eax
                mov     [ebp+var_8], 0
                jmp     short loc_10904B1F
; ---------------------------------------------------------------------------

loc_10904B16:                           ; CODE XREF: sub_10904AD0+67↓j
                mov     ecx, [ebp+var_8]
                add     ecx, 1
                mov     [ebp+var_8], ecx

loc_10904B1F:                           ; CODE XREF: sub_10904AD0+44↑j
                mov     edx, [ebp+var_30]
                mov     eax, [ebp+var_8]
                cmp     eax, [edx+10h]
                jge     short loc_10904B39
                mov     ecx, [ebp+var_8]
                mov     edx, [ebp+var_4]
                mov     dword ptr [edx+ecx*4], 0FFFFFFFFh
                jmp     short loc_10904B16
; ---------------------------------------------------------------------------

loc_10904B39:                           ; CODE XREF: sub_10904AD0+58↑j
                mov     [ebp+var_C], 0
                jmp     short loc_10904B4B
; ---------------------------------------------------------------------------

loc_10904B42:                           ; CODE XREF: sub_10904AD0+CE↓j
                mov     eax, [ebp+var_C]
                add     eax, 1
                mov     [ebp+var_C], eax

loc_10904B4B:                           ; CODE XREF: sub_10904AD0+70↑j
                mov     ecx, [ebp+var_30]
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                cmp     [ebp+var_C], eax
                jge     short loc_10904BA0
                mov     ecx, [ebp+var_C]
                imul    ecx, 2Ch
                mov     edx, [ebp+var_30]
                add     ecx, [edx]
                mov     [ebp+var_14], ecx
                mov     eax, [ebp+var_14]
                add     eax, 4
                push    eax
                call    sub_10902870
                add     esp, 4
                mov     ecx, [ebp+var_30]
                mov     edx, [ecx+10h]
                sub     edx, 1
                and     eax, edx
                mov     [ebp+var_10], eax
                mov     eax, [ebp+var_14]
                mov     ecx, [ebp+var_10]
                mov     edx, [ebp+var_4]
                mov     ecx, [edx+ecx*4]
                mov     [eax], ecx
                mov     edx, [ebp+var_10]
                mov     eax, [ebp+var_4]
                mov     ecx, [ebp+var_C]
                mov     [eax+edx*4], ecx
                jmp     short loc_10904B42
; ---------------------------------------------------------------------------

loc_10904BA0:                           ; CODE XREF: sub_10904AD0+87↑j
                mov     edx, [ebp+var_30]
                cmp     dword ptr [edx+0Ch], 0
                jz      short loc_10904BBE
                mov     eax, [ebp+var_30]
                mov     ecx, [eax+0Ch]
                mov     [ebp+var_1C], ecx
                mov     edx, [ebp+var_1C]
                push    edx
                call    sub_10901030
                add     esp, 4

loc_10904BBE:                           ; CODE XREF: sub_10904AD0+D7↑j
                mov     eax, [ebp+var_30]
                mov     ecx, [ebp+var_4]
                mov     [eax+0Ch], ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_10904AD0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10904BD0    proc near               ; CODE XREF: sub_10905240+B0↓p
                                        ; DATA XREF: .rdata:10912E34↓o

var_1014        = dword ptr -1014h
var_1008        = byte ptr -1008h
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch
arg_8           = dword ptr  10h
arg_C           = dword ptr  14h
arg_14          = dword ptr  1Ch

                push    ebp
                mov     ebp, esp
                mov     eax, 1008h
                call    __alloca_probe
                push    esi
                mov     esi, [ebp+arg_14]
                push    edi
                mov     edi, ecx
                mov     [ebp+var_8], edi
                mov     [ebp+var_4], 0
                test    esi, esi
                jz      short loc_10904BFD
                fldz
                push    ecx
                fstp    [esp+1014h+var_1014]
                call    esi
                add     esp, 4

loc_10904BFD:                           ; CODE XREF: sub_10904BD0+20↑j
                mov     ecx, ds:?GNull@@3PAVdnOutputDevice@@A ; dnOutputDevice * GNull
                mov     edx, [ecx]
                mov     ecx, [ebp+arg_4]
                mov     eax, [edi]
                push    ebx
                push    edx
                mov     edx, [eax+18h]
                push    0
                push    ecx
                mov     ecx, edi
                call    edx
                mov     ebx, eax
                test    ebx, ebx
                jz      loc_10904D66
                mov     eax, [ebx]
                mov     edx, [eax+38h]
                mov     ecx, ebx
                call    edx
                mov     ecx, ds:?GNull@@3PAVdnOutputDevice@@A ; dnOutputDevice * GNull
                mov     edx, [ecx]
                mov     ecx, [ebp+arg_8]
                neg     ecx
                sbb     ecx, ecx
                push    edx
                mov     edx, [ebp+arg_C]
                and     ecx, 0FFFFFFFEh
                add     ecx, 2
                neg     edx
                sbb     edx, edx
                and     edx, 4
                or      ecx, edx
                push    ecx
                mov     ecx, [ebp+arg_0]
                mov     [ebp+var_4], eax
                mov     eax, [edi]
                mov     edx, [eax+1Ch]
                push    ecx
                mov     ecx, edi
                call    edx
                mov     esi, eax
                test    esi, esi
                jz      loc_10904D2D
                mov     eax, [ebp+var_4]
                mov     [ebp+arg_4], 0
                test    eax, eax
                jle     loc_10904D00
                mov     edi, eax
                mov     [ebp+arg_8], edi
                jmp     short loc_10904C83
; ---------------------------------------------------------------------------
                align 10h

loc_10904C80:                           ; CODE XREF: sub_10904BD0+12B↓j
                mov     edi, [ebp+arg_8]

loc_10904C83:                           ; CODE XREF: sub_10904BD0+AD↑j
                cmp     edi, 1000h
                jle     short loc_10904C90
                mov     edi, 1000h

loc_10904C90:                           ; CODE XREF: sub_10904BD0+B9↑j
                mov     eax, [ebx]
                mov     edx, [eax+4]
                push    edi
                lea     ecx, [ebp+var_1008]
                push    ecx
                mov     ecx, ebx
                call    edx
                mov     ecx, ebx
                call    ds:?IsError@dnArchive@@QAEHXZ ; dnArchive::IsError(void)
                test    eax, eax
                jnz     short loc_10904CFD
                mov     eax, [esi]
                mov     edx, [eax+4]
                push    edi
                lea     ecx, [ebp+var_1008]
                push    ecx
                mov     ecx, esi
                call    edx
                mov     ecx, esi
                call    ds:?IsError@dnArchive@@QAEHXZ ; dnArchive::IsError(void)
                test    eax, eax
                jnz     short loc_10904CFD
                mov     eax, [ebp+arg_14]
                test    eax, eax
                jz      short loc_10904CE6
                fild    [ebp+arg_4]
                push    ecx
                fidiv   [ebp+var_4]
                fstp    [ebp+arg_C]
                fld     [ebp+arg_C]
                fstp    [esp+1014h+var_1014]
                call    eax
                add     esp, 4

loc_10904CE6:                           ; CODE XREF: sub_10904BD0+FF↑j
                mov     eax, [ebp+arg_4]
                sub     [ebp+arg_8], 1000h
                add     eax, 1000h
                cmp     eax, [ebp+var_4]
                mov     [ebp+arg_4], eax
                jl      short loc_10904C80

loc_10904CFD:                           ; CODE XREF: sub_10904BD0+DB↑j
                                        ; sub_10904BD0+F8↑j
                mov     edi, [ebp+var_8]

loc_10904D00:                           ; CODE XREF: sub_10904BD0+A2↑j
                mov     eax, [esi]
                mov     edx, [eax+68h]
                mov     ecx, esi
                call    edx
                mov     [ebp+var_4], eax
                mov     eax, [esi]
                mov     edx, [eax]
                push    1
                mov     ecx, esi
                call    edx
                cmp     [ebp+var_4], 0
                jnz     short loc_10904D46
                mov     ecx, [ebp+arg_0]
                mov     eax, [edi]
                mov     edx, [eax+24h]
                push    0
                push    0
                push    ecx
                mov     ecx, edi
                call    edx

loc_10904D2D:                           ; CODE XREF: sub_10904BD0+90↑j
                                        ; sub_10904BD0+181↓j
                mov     eax, [ebx]
                mov     edx, [eax]
                mov     [ebp+var_4], 0
                mov     edi, [ebp+var_4]
                push    1
                mov     ecx, ebx
                call    edx
                mov     esi, [ebp+arg_14]
                jmp     short loc_10904D69
; ---------------------------------------------------------------------------

loc_10904D46:                           ; CODE XREF: sub_10904BD0+14A↑j
                mov     eax, [ebx]
                mov     edx, [eax+68h]
                mov     ecx, ebx
                call    edx
                test    eax, eax
                jz      short loc_10904D2D
                mov     eax, [ebx]
                mov     edx, [eax]
                mov     edi, 1
                push    edi
                mov     ecx, ebx
                call    edx
                mov     esi, [ebp+arg_14]
                jmp     short loc_10904D69
; ---------------------------------------------------------------------------

loc_10904D66:                           ; CODE XREF: sub_10904BD0+4A↑j
                mov     edi, [ebp+var_4]

loc_10904D69:                           ; CODE XREF: sub_10904BD0+174↑j
                                        ; sub_10904BD0+194↑j
                pop     ebx
                test    esi, esi
                jz      short loc_10904D79
                fld1
                push    ecx
                fstp    [esp+1014h+var_1014]
                call    esi
                add     esp, 4

loc_10904D79:                           ; CODE XREF: sub_10904BD0+19C↑j
                mov     eax, edi
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn    18h
sub_10904BD0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10904D90    proc near               ; CODE XREF: sub_10905490+23↓p
                                        ; DATA XREF: .rdata:10912E44↓o

Str1            = word ptr -208h
Dst             = byte ptr -206h
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 208h
                push    ebx
                push    esi
                push    edi
                xor     eax, eax
                push    1FEh            ; Size
                mov     ebx, ecx
                push    eax             ; Val
                lea     edx, [ebp+Dst]
                xor     ecx, ecx
                push    edx             ; Dst
                mov     [ebp+var_8], eax
                mov     [ebp+var_4], eax
                mov     [ebp+Str1], cx
                call    memset
                mov     edi, [ebp+arg_0]
                add     esp, 0Ch
                lea     esi, [ebp+Str1]
                lea     ecx, [ecx+0]

loc_10904DD0:                           ; CODE XREF: sub_10904D90+99↓j
                movzx   eax, word ptr [edi]
                cmp     ax, 5Ch
                jz      short loc_10904DDE
                test    ax, ax
                jnz     short loc_10904E20

loc_10904DDE:                           ; CODE XREF: sub_10904D90+47↑j
                mov     eax, [ebp+var_8]
                mov     ecx, eax
                inc     eax
                mov     [ebp+var_8], eax
                test    ecx, ecx
                jle     short loc_10904E18
                lea     edx, [ebp+Str1]
                push    edx             ; Str1
                mov     ecx, ebx
                call    sub_10902510
                test    eax, eax
                jnz     short loc_10904E18
                mov     edx, [ebx]
                mov     edx, [edx+38h]
                push    eax
                mov     [esi], ax
                lea     eax, [ebp+Str1]
                push    eax
                mov     ecx, ebx
                call    edx
                test    eax, eax
                jz      short loc_10904E2B
                inc     [ebp+var_4]

loc_10904E18:                           ; CODE XREF: sub_10904D90+59↑j
                                        ; sub_10904D90+6B↑j
                movzx   eax, word ptr [edi]
                test    ax, ax
                jz      short loc_10904E36

loc_10904E20:                           ; CODE XREF: sub_10904D90+4C↑j
                mov     [esi], ax
                add     esi, 2
                add     edi, 2
                jmp     short loc_10904DD0
; ---------------------------------------------------------------------------

loc_10904E2B:                           ; CODE XREF: sub_10904D90+83↑j
                pop     edi
                pop     esi
                xor     eax, eax
                pop     ebx
                mov     esp, ebp
                pop     ebp
                retn    8
; ---------------------------------------------------------------------------

loc_10904E36:                           ; CODE XREF: sub_10904D90+8E↑j
                xor     eax, eax
                cmp     [ebp+var_4], eax
                pop     edi
                pop     esi
                setnz   al
                pop     ebx
                mov     esp, ebp
                pop     ebp
                retn    8
sub_10904D90    endp

; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                sub     esp, 8
                mov     [ebp-8], ecx
                cmp     dword ptr [ebp+0Ch], 0
                jnz     short loc_10904E61
                jmp     short loc_10904E9E
; ---------------------------------------------------------------------------

loc_10904E61:                           ; CODE XREF: .text:10904E5D↑j
                mov     eax, 1
                test    eax, eax
                jz      short loc_10904E88
                mov     ecx, [ebp+8]
                mov     [ebp-4], ecx
                jmp     short loc_10904E7B
; ---------------------------------------------------------------------------

loc_10904E72:                           ; CODE XREF: .text:10904E86↓j
                mov     edx, [ebp-4]
                add     edx, 1
                mov     [ebp-4], edx

loc_10904E7B:                           ; CODE XREF: .text:10904E70↑j
                mov     eax, [ebp+8]
                add     eax, [ebp+0Ch]
                cmp     [ebp-4], eax
                jge     short loc_10904E88
                jmp     short loc_10904E72
; ---------------------------------------------------------------------------

loc_10904E88:                           ; CODE XREF: .text:10904E68↑j
                                        ; .text:10904E84↑j
                push    1000h
                mov     ecx, [ebp+0Ch]
                push    ecx
                mov     edx, [ebp+8]
                push    edx
                mov     ecx, [ebp-8]
                call    ds:?Remove@dnArrayBase@@QAEXHHH@Z ; dnArrayBase::Remove(int,int,int)

loc_10904E9E:                           ; CODE XREF: .text:10904E5F↑j
                mov     esp, ebp
                pop     ebp
                retn    8
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10904EB0    proc near               ; CODE XREF: .text:10904F67↓j
                                        ; .text:10905852↓p ...

var_4           = byte ptr -4

                push    ebp
                mov     ebp, esp
                push    ecx
                push    ebx
                push    esi
                push    edi
                mov     ebx, ecx
                lea     esp, [esp+0]

loc_10904EC0:                           ; CODE XREF: sub_10904EB0+34↓j
                                        ; sub_10904EB0+85↓j
                inc     dword ptr [ebx+4]
                mov     ecx, ds:?GObjObjects@UObject@@0V?$dnArray@PAVUObject@@@@A ; dnArray<UObject *> UObject::GObjObjects
                mov     esi, [ebx+4]
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                cmp     esi, eax
                jge     short loc_10904F37
                mov     eax, ds:?GObjObjects@UObject@@0V?$dnArray@PAVUObject@@@@A ; dnArray<UObject *> UObject::GObjObjects
                mov     ecx, [eax]
                cmp     dword ptr [ecx+esi*4], 0
                lea     eax, [ecx+esi*4]
                jz      short loc_10904EC0
                mov     ecx, [ebx]
                mov     esi, [eax]
                test    ecx, ecx
                jz      short loc_10904F37
                call    ds:?GetFName@UObject@@QBEABVdnName@@XZ ; UObject::GetFName(void)
                mov     esi, [esi+24h]
                mov     edi, eax
                test    esi, esi
                jz      short loc_10904F1C
                lea     ecx, [ecx+0]

loc_10904F00:                           ; CODE XREF: sub_10904EB0+6A↓j
                push    edi
                mov     ecx, esi
                call    ds:?GetFName@UObject@@QBEABVdnName@@XZ ; UObject::GetFName(void)
                mov     ecx, eax
                call    ds:??8dnName@@QBEHABV0@@Z ; dnName::operator==(dnName const &)
                test    eax, eax
                jnz     short loc_10904F37
                mov     esi, [esi+28h]
                test    esi, esi
                jnz     short loc_10904F00

loc_10904F1C:                           ; CODE XREF: sub_10904EB0+4B↑j
                push    0
                lea     ecx, [ebp+var_4]
                call    ds:??0dnName@@QAE@W4EName@@@Z ; dnName::dnName(EName)
                lea     edx, [ebp+var_4]
                push    edx
                mov     ecx, edi
                call    ds:??8dnName@@QBEHABV0@@Z ; dnName::operator==(dnName const &)
                test    eax, eax
                jz      short loc_10904EC0

loc_10904F37:                           ; CODE XREF: sub_10904EB0+24↑j
                                        ; sub_10904EB0+3C↑j ...
                pop     edi
                pop     esi
                pop     ebx
                mov     esp, ebp
                pop     ebp
                retn
sub_10904EB0    endp

; ---------------------------------------------------------------------------
                align 10h
                mov     eax, [ecx+4]
                mov     ecx, ds:?GObjObjects@UObject@@0V?$dnArray@PAVUObject@@@@A ; dnArray<UObject *> UObject::GObjObjects
                mov     edx, [ecx]
                mov     eax, [edx+eax*4]
                retn
; ---------------------------------------------------------------------------
                align 10h
                mov     eax, [ecx+4]
                mov     ecx, ds:?GObjObjects@UObject@@0V?$dnArray@PAVUObject@@@@A ; dnArray<UObject *> UObject::GObjObjects
                mov     edx, [ecx]
                mov     eax, [edx+eax*4]
                retn
; ---------------------------------------------------------------------------
                align 10h
                mov     dword ptr [ecx+4], 0FFFFFFFFh
                jmp     sub_10904EB0
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10904F70    proc near               ; CODE XREF: sub_10904FB0+2E↓p

arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                push    esi
                push    edi
                mov     esi, ecx
                xor     edi, edi
                cmp     [esi+4], edi
                jle     short loc_10904F95
                push    ebx
                xor     ebx, ebx

loc_10904F81:                           ; CODE XREF: sub_10904F70+22↓j
                mov     ecx, [esi]
                add     ecx, ebx
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                inc     edi
                add     ebx, 0Ch
                cmp     edi, [esi+4]
                jl      short loc_10904F81
                pop     ebx

loc_10904F95:                           ; CODE XREF: sub_10904F70+C↑j
                mov     eax, [ebp+arg_0]
                push    eax
                push    0Ch
                mov     ecx, esi
                call    ds:?Empty@dnArrayBase@@QAEXHH@Z ; dnArrayBase::Empty(int,int)
                pop     edi
                pop     esi
                pop     ebp
                retn    4
sub_10904F70    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10904FB0    proc near               ; CODE XREF: sub_109066F0+FB↓p
                                        ; sub_109066F0+1B1↓p ...

var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8

; FUNCTION CHUNK AT 10910640 SIZE 00000011 BYTES

; __unwind { // SEH_10904FB0
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_10904FB0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 8
                push    esi
                push    edi
                mov     edi, [ebp+arg_0]
                mov     esi, ecx
                mov     [ebp+var_10], esi
                cmp     esi, edi
                jz      short loc_10905044
                mov     eax, [edi+4]
                push    ebx
                push    eax
                call    sub_10904F70
                xor     ebx, ebx
                cmp     [edi+4], ebx
                jle     short loc_1090502F
                mov     [ebp+arg_0], ebx
                lea     ecx, [ecx+0]

loc_10904FF0:                           ; CODE XREF: sub_10904FB0+7D↓j
                push    0Ch
                push    1
                mov     ecx, esi
                call    ds:?Add@dnArrayBase@@QAEHHH@Z ; dnArrayBase::Add(int,int)
                mov     edx, [esi]
                lea     ecx, [eax+eax*2]
                lea     ecx, [edx+ecx*4]
                mov     [ebp+var_14], ecx
;   try {
                mov     [ebp+var_4], 0
                test    ecx, ecx
                jz      short loc_1090501E
                mov     eax, [edi]
                add     eax, [ebp+arg_0]
                push    eax
                call    ds:??0dnString@@QAE@ABV0@@Z ; dnString::dnString(dnString const &)

loc_1090501E:                           ; CODE XREF: sub_10904FB0+60↑j
                add     [ebp+arg_0], 0Ch
                inc     ebx
                cmp     ebx, [edi+4]
;   } // starts at 10905007
                mov     [ebp+var_4], 0FFFFFFFFh
                jl      short loc_10904FF0

loc_1090502F:                           ; CODE XREF: sub_10904FB0+38↑j
                pop     ebx
                pop     edi
                mov     eax, esi
                pop     esi
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    4
; ---------------------------------------------------------------------------

loc_10905044:                           ; CODE XREF: sub_10904FB0+27↑j
                mov     ecx, [ebp+var_C]
                pop     edi
                mov     eax, esi
                pop     esi
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    4
; } // starts at 10904FB0
sub_10904FB0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


sub_10905060    proc near               ; CODE XREF: WinMain(x,x,x,x)+AC1↓p
                mov     eax, [ecx+4]
                mov     ecx, ds:?GObjObjects@UObject@@0V?$dnArray@PAVUObject@@@@A ; dnArray<UObject *> UObject::GObjObjects
                mov     edx, [ecx]
                mov     eax, [edx+eax*4]
                retn
sub_10905060    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


sub_10905070    proc near               ; CODE XREF: WinMain(x,x,x,x)+AEB↓p
                                        ; WinMain(x,x,x,x)+B5B↓p
                mov     eax, [ecx+4]
                mov     ecx, ds:?GObjObjects@UObject@@0V?$dnArray@PAVUObject@@@@A ; dnArray<UObject *> UObject::GObjObjects
                mov     edx, [ecx]
                mov     eax, [edx+eax*4]
                retn
sub_10905070    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10905080    proc near               ; CODE XREF: sub_10905920+796↓p
                                        ; sub_109066F0+21E↓p ...

var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8

; FUNCTION CHUNK AT 10910660 SIZE 0000001A BYTES

; __unwind { // SEH_10905080
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_10905080
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 8
                push    ebx
                push    esi
                push    edi
                mov     edi, [ebp+arg_0]
                mov     eax, [edi+4]
                push    0Ch
                mov     esi, ecx
                push    eax
                mov     [ebp+var_10], esi
                call    ds:??0dnArrayBase@@IAE@HH@Z ; dnArrayBase::dnArrayBase(int,int)
                xor     ebx, ebx
                mov     [esi+4], ebx
                cmp     [edi+4], ebx
;   try {
                mov     [ebp+var_4], ebx
                jle     short loc_109050FB
                mov     [ebp+arg_0], ebx

loc_109050C2:                           ; CODE XREF: sub_10905080+79↓j
                push    0Ch
                push    1
                mov     ecx, esi
                call    ds:?Add@dnArrayBase@@QAEHHH@Z ; dnArrayBase::Add(int,int)
                mov     edx, [esi]
                lea     ecx, [eax+eax*2]
                lea     ecx, [edx+ecx*4]
                mov     [ebp+var_14], ecx
;   } // starts at 109050BA
;   try {
                mov     byte ptr [ebp+var_4], 1
                test    ecx, ecx
                jz      short loc_109050ED
                mov     eax, [edi]
                add     eax, [ebp+arg_0]
                push    eax
                call    ds:??0dnString@@QAE@ABV0@@Z ; dnString::dnString(dnString const &)

loc_109050ED:                           ; CODE XREF: sub_10905080+5F↑j
                add     [ebp+arg_0], 0Ch
                inc     ebx
                cmp     ebx, [edi+4]
;   } // starts at 109050D9
;   try {
                mov     byte ptr [ebp+var_4], 0
                jl      short loc_109050C2

loc_109050FB:                           ; CODE XREF: sub_10905080+3D↑j
                mov     ecx, [ebp+var_C]
                pop     edi
                mov     eax, esi
                pop     esi
                pop     ebx
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    4
;   } // starts at 109050F5
; } // starts at 10905080
sub_10905080    endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10905110    proc near               ; CODE XREF: sub_10905860+2C↓p
                                        ; sub_10906B60+171↓p ...

var_4           = dword ptr -4
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch

                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp+var_4], ecx
                mov     ecx, [ebp+arg_4]
                test    ecx, ecx
                jz      short loc_1090515E
                push    edi
                mov     edi, [ebp+arg_0]
                lea     eax, [edi+ecx]
                cmp     edi, eax
                jge     short loc_10905150
                push    ebx
                push    esi
                lea     esi, [edi+edi*2]
                add     esi, esi
                add     esi, esi
                sub     eax, edi
                mov     ebx, eax

loc_10905136:                           ; CODE XREF: sub_10905110+39↓j
                mov     eax, [ebp+var_4]
                mov     ecx, [eax]
                add     ecx, esi
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                add     esi, 0Ch
                sub     ebx, 1
                jnz     short loc_10905136
                mov     ecx, [ebp+arg_4]
                pop     esi
                pop     ebx

loc_10905150:                           ; CODE XREF: sub_10905110+17↑j
                push    0Ch
                push    ecx
                mov     ecx, [ebp+var_4]
                push    edi
                call    ds:?Remove@dnArrayBase@@QAEXHHH@Z ; dnArrayBase::Remove(int,int,int)
                pop     edi

loc_1090515E:                           ; CODE XREF: sub_10905110+C↑j
                mov     esp, ebp
                pop     ebp
                retn    8
sub_10905110    endp

; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                push    esi
                mov     esi, ecx
                call    sub_10902A30
                test    byte ptr [ebp+8], 1
                jz      short loc_10905191
                call    ds:?GetMalloc@@YAPAVFMalloc@@XZ ; GetMalloc(void)
                mov     edx, [eax]
                mov     ecx, eax
                mov     eax, [edx+10h]
                push    esi
                call    eax

loc_10905191:                           ; CODE XREF: .text:1090517F↑j
                mov     eax, esi
                pop     esi
                pop     ebp
                retn    4
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_109051A0    proc near               ; CODE XREF: sub_109058D0+2C↓p

var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch

; FUNCTION CHUNK AT 10910690 SIZE 0000000C BYTES

; __unwind { // SEH_109051A0
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_109051A0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 8
                mov     edx, [ebp+arg_4]
                mov     [ebp+var_10], ecx
                test    edx, edx
                jz      short loc_1090522B
                mov     ecx, [ebp+arg_0]
                lea     eax, [ecx+edx]
                cmp     ecx, eax
                jge     short loc_1090521E
                push    ebx
                push    esi
                push    edi
                lea     edi, ds:0[ecx*8]
                sub     edi, ecx
                add     edi, edi
                add     edi, edi
                sub     eax, ecx
                mov     ebx, eax

loc_109051E3:                           ; CODE XREF: sub_109051A0+73↓j
                mov     eax, [ebp+var_10]
                mov     esi, [eax]
                add     esi, edi
                mov     [ebp+var_14], esi
                lea     ecx, [esi+10h]
;   try {
                mov     [ebp+var_4], 0
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                lea     ecx, [esi+4]
;   } // starts at 109051F0
                mov     [ebp+var_4], 0FFFFFFFFh
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                add     edi, 1Ch
                sub     ebx, 1
                jnz     short loc_109051E3
                mov     edx, [ebp+arg_4]
                mov     ecx, [ebp+arg_0]
                pop     edi
                pop     esi
                pop     ebx

loc_1090521E:                           ; CODE XREF: sub_109051A0+2D↑j
                push    1Ch
                push    edx
                push    ecx
                mov     ecx, [ebp+var_10]
                call    ds:?Remove@dnArrayBase@@QAEXHHH@Z ; dnArrayBase::Remove(int,int,int)

loc_1090522B:                           ; CODE XREF: sub_109051A0+23↑j
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    8
; } // starts at 109051A0
sub_109051A0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __stdcall sub_10905240(LPCWSTR lpFileName, LPCWSTR lpExistingFileName, int, int, int, int)
sub_10905240    proc near               ; DATA XREF: .rdata:10912F84↓o
                                        ; .rdata:1091346C↓o

var_1064        = dword ptr -1064h
var_1060        = dword ptr -1060h
var_105C        = dword ptr -105Ch
var_1058        = dword ptr -1058h
var_1054        = dword ptr -1054h
var_1050        = dword ptr -1050h
var_104C        = dword ptr -104Ch
var_1048        = dword ptr -1048h
var_1044        = dword ptr -1044h
var_1040        = dword ptr -1040h
var_103C        = dword ptr -103Ch
var_1038        = dword ptr -1038h
var_8           = dword ptr -8
var_4           = dword ptr -4
lpFileName      = dword ptr  8
lpExistingFileName= dword ptr  0Ch
arg_8           = dword ptr  10h
arg_C           = dword ptr  14h
arg_10          = dword ptr  18h
arg_14          = dword ptr  1Ch

                push    ebp
                mov     ebp, esp
                mov     eax, 1064h
                call    __alloca_probe
                mov     [ebp+var_1044], ecx
                cmp     [ebp+arg_C], 0
                jz      short loc_109052CC
                mov     eax, ds:GUnicodeOS
                cmp     dword ptr [eax], 0
                jz      short loc_10905277
                push    0               ; dwFileAttributes
                mov     ecx, [ebp+lpFileName]
                push    ecx             ; lpFileName
                call    ds:SetFileAttributesW
                mov     [ebp+var_1048], eax
                jmp     short loc_109052CC
; ---------------------------------------------------------------------------

loc_10905277:                           ; CODE XREF: sub_10905240+21↑j
                mov     edx, [ebp+lpFileName]
                push    edx
                call    ds:?dnWinGetSizeANSI@@YAHPB_W@Z ; dnWinGetSizeANSI(wchar_t const *)
                add     esp, 4
                mov     [ebp+var_8], eax
                mov     eax, [ebp+var_8]
                add     eax, 7
                and     eax, 0FFFFFFF8h
                call    __alloca_probe_16
                mov     [ebp+var_104C], esp
                push    0               ; dwFileAttributes
                mov     eax, [ebp+lpFileName]
                push    eax
                call    ds:?dnWinGetSizeANSI@@YAHPB_W@Z ; dnWinGetSizeANSI(wchar_t const *)
                add     esp, 4
                push    eax
                mov     ecx, [ebp+lpFileName]
                push    ecx
                mov     edx, [ebp+var_104C]
                push    edx
                call    ds:?dnWinToANSI@@YAPADPADPB_WH@Z ; dnWinToANSI(char *,wchar_t const *,int)
                add     esp, 0Ch
                push    eax             ; lpFileName
                call    ds:SetFileAttributesA
                mov     [ebp+var_1048], eax

loc_109052CC:                           ; CODE XREF: sub_10905240+17↑j
                                        ; sub_10905240+35↑j
                cmp     [ebp+arg_14], 0
                jz      short loc_10905300
                mov     eax, [ebp+arg_14]
                push    eax
                mov     ecx, [ebp+arg_10]
                push    ecx
                mov     edx, [ebp+arg_C]
                push    edx
                mov     eax, [ebp+arg_8]
                push    eax
                mov     ecx, [ebp+lpExistingFileName]
                push    ecx
                mov     edx, [ebp+lpFileName]
                push    edx
                mov     ecx, [ebp+var_1044]
                call    sub_10904BD0
                mov     [ebp+var_1050], eax
                jmp     loc_109053EF
; ---------------------------------------------------------------------------

loc_10905300:                           ; CODE XREF: sub_10905240+90↑j
                mov     eax, ds:GUnicodeOS
                cmp     dword ptr [eax], 0
                jz      short loc_1090532D
                xor     ecx, ecx
                cmp     [ebp+arg_8], 0
                setz    cl
                push    ecx             ; bFailIfExists
                mov     edx, [ebp+lpFileName]
                push    edx             ; lpNewFileName
                mov     eax, [ebp+lpExistingFileName]
                push    eax             ; lpExistingFileName
                call    ds:CopyFileW
                mov     [ebp+var_1054], eax
                jmp     loc_109053DD
; ---------------------------------------------------------------------------

loc_1090532D:                           ; CODE XREF: sub_10905240+C8↑j
                mov     ecx, [ebp+lpFileName]
                push    ecx
                call    ds:?dnWinGetSizeANSI@@YAHPB_W@Z ; dnWinGetSizeANSI(wchar_t const *)
                add     esp, 4
                mov     [ebp+var_1038], eax
                mov     eax, [ebp+var_1038]
                add     eax, 7
                and     eax, 0FFFFFFF8h
                call    __alloca_probe_16
                mov     [ebp+var_1058], esp
                mov     edx, [ebp+lpExistingFileName]
                push    edx
                call    ds:?dnWinGetSizeANSI@@YAHPB_W@Z ; dnWinGetSizeANSI(wchar_t const *)
                add     esp, 4
                mov     [ebp+var_103C], eax
                mov     eax, [ebp+var_103C]
                add     eax, 7
                and     eax, 0FFFFFFF8h
                call    __alloca_probe_16
                mov     [ebp+var_105C], esp
                xor     eax, eax
                cmp     [ebp+arg_8], 0
                setz    al
                push    eax             ; bFailIfExists
                mov     ecx, [ebp+lpFileName]
                push    ecx
                call    ds:?dnWinGetSizeANSI@@YAHPB_W@Z ; dnWinGetSizeANSI(wchar_t const *)
                add     esp, 4
                push    eax
                mov     edx, [ebp+lpFileName]
                push    edx
                mov     eax, [ebp+var_1058]
                push    eax
                call    ds:?dnWinToANSI@@YAPADPADPB_WH@Z ; dnWinToANSI(char *,wchar_t const *,int)
                add     esp, 0Ch
                push    eax             ; lpNewFileName
                mov     ecx, [ebp+lpExistingFileName]
                push    ecx
                call    ds:?dnWinGetSizeANSI@@YAHPB_W@Z ; dnWinGetSizeANSI(wchar_t const *)
                add     esp, 4
                push    eax
                mov     edx, [ebp+lpExistingFileName]
                push    edx
                mov     eax, [ebp+var_105C]
                push    eax
                call    ds:?dnWinToANSI@@YAPADPADPB_WH@Z ; dnWinToANSI(char *,wchar_t const *,int)
                add     esp, 0Ch
                push    eax             ; lpExistingFileName
                call    ds:CopyFileA
                mov     [ebp+var_1054], eax

loc_109053DD:                           ; CODE XREF: sub_10905240+E8↑j
                xor     ecx, ecx
                cmp     [ebp+var_1054], 0
                setnz   cl
                mov     [ebp+var_1050], ecx

loc_109053EF:                           ; CODE XREF: sub_10905240+BB↑j
                mov     edx, [ebp+var_1050]
                mov     [ebp+var_4], edx
                cmp     [ebp+var_4], 0
                jz      short loc_1090547D
                cmp     [ebp+arg_10], 0
                jnz     short loc_1090547D
                mov     eax, ds:GUnicodeOS
                cmp     dword ptr [eax], 0
                jz      short loc_10905422
                push    0               ; dwFileAttributes
                mov     ecx, [ebp+lpFileName]
                push    ecx             ; lpFileName
                call    ds:SetFileAttributesW
                mov     [ebp+var_1060], eax
                jmp     short loc_1090547D
; ---------------------------------------------------------------------------

loc_10905422:                           ; CODE XREF: sub_10905240+1CC↑j
                mov     edx, [ebp+lpFileName]
                push    edx
                call    ds:?dnWinGetSizeANSI@@YAHPB_W@Z ; dnWinGetSizeANSI(wchar_t const *)
                add     esp, 4
                mov     [ebp+var_1040], eax
                mov     eax, [ebp+var_1040]
                add     eax, 7
                and     eax, 0FFFFFFF8h
                call    __alloca_probe_16
                mov     [ebp+var_1064], esp
                push    0               ; dwFileAttributes
                mov     eax, [ebp+lpFileName]
                push    eax
                call    ds:?dnWinGetSizeANSI@@YAHPB_W@Z ; dnWinGetSizeANSI(wchar_t const *)
                add     esp, 4
                push    eax
                mov     ecx, [ebp+lpFileName]
                push    ecx
                mov     edx, [ebp+var_1064]
                push    edx
                call    ds:?dnWinToANSI@@YAPADPADPB_WH@Z ; dnWinToANSI(char *,wchar_t const *,int)
                add     esp, 0Ch
                push    eax             ; lpFileName
                call    ds:SetFileAttributesA
                mov     [ebp+var_1060], eax

loc_1090547D:                           ; CODE XREF: sub_10905240+1BC↑j
                                        ; sub_10905240+1C2↑j ...
                mov     eax, [ebp+var_4]
                lea     esp, [ebp-1064h]
                mov     esp, ebp
                pop     ebp
                retn    18h
sub_10905240    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __stdcall sub_10905490(LPCWSTR lpPathName, int)
sub_10905490    proc near               ; DATA XREF: .rdata:10912F94↓o
                                        ; .rdata:1091347C↓o

var_228         = dword ptr -228h
var_224         = dword ptr -224h
var_220         = dword ptr -220h
var_21C         = dword ptr -21Ch
var_218         = dword ptr -218h
lpPathName      = dword ptr  8
arg_4           = dword ptr  0Ch

                push    ebp
                mov     ebp, esp
                sub     esp, 228h
                mov     [ebp+var_21C], ecx
                cmp     [ebp+arg_4], 0
                jz      short loc_109054BD
                mov     eax, [ebp+arg_4]
                push    eax
                mov     ecx, [ebp+lpPathName]
                push    ecx
                mov     ecx, [ebp+var_21C]
                call    sub_10904D90
                jmp     loc_10905569
; ---------------------------------------------------------------------------

loc_109054BD:                           ; CODE XREF: sub_10905490+13↑j
                mov     edx, ds:GUnicodeOS
                cmp     dword ptr [edx], 0
                jz      short loc_109054DC
                push    0               ; lpSecurityAttributes
                mov     eax, [ebp+lpPathName]
                push    eax             ; lpPathName
                call    ds:CreateDirectoryW
                mov     [ebp+var_220], eax
                jmp     short loc_10905537
; ---------------------------------------------------------------------------

loc_109054DC:                           ; CODE XREF: sub_10905490+36↑j
                mov     ecx, [ebp+lpPathName]
                push    ecx
                call    ds:?dnWinGetSizeANSI@@YAHPB_W@Z ; dnWinGetSizeANSI(wchar_t const *)
                add     esp, 4
                mov     [ebp+var_218], eax
                mov     eax, [ebp+var_218]
                add     eax, 7
                and     eax, 0FFFFFFF8h
                call    __alloca_probe_16
                mov     [ebp+var_224], esp
                push    0               ; lpSecurityAttributes
                mov     edx, [ebp+lpPathName]
                push    edx
                call    ds:?dnWinGetSizeANSI@@YAHPB_W@Z ; dnWinGetSizeANSI(wchar_t const *)
                add     esp, 4
                push    eax
                mov     eax, [ebp+lpPathName]
                push    eax
                mov     ecx, [ebp+var_224]
                push    ecx
                call    ds:?dnWinToANSI@@YAPADPADPB_WH@Z ; dnWinToANSI(char *,wchar_t const *,int)
                add     esp, 0Ch
                push    eax             ; lpPathName
                call    ds:CreateDirectoryA
                mov     [ebp+var_220], eax

loc_10905537:                           ; CODE XREF: sub_10905490+4A↑j
                cmp     [ebp+var_220], 0
                jnz     short loc_10905559
                call    ds:GetLastError
                cmp     eax, 0B7h
                jz      short loc_10905559
                mov     [ebp+var_228], 0
                jmp     short loc_10905563
; ---------------------------------------------------------------------------

loc_10905559:                           ; CODE XREF: sub_10905490+AE↑j
                                        ; sub_10905490+BB↑j
                mov     [ebp+var_228], 1

loc_10905563:                           ; CODE XREF: sub_10905490+C7↑j
                mov     eax, [ebp+var_228]

loc_10905569:                           ; CODE XREF: sub_10905490+28↑j
                lea     esp, [ebp-228h]
                mov     esp, ebp
                pop     ebp
                retn    8
sub_10905490    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10905580    proc near               ; DATA XREF: .rdata:10912FA8↓o
                                        ; .rdata:10913490↓o

var_1290        = dword ptr -1290h
Source          = dword ptr -1278h
Dest            = word ptr -1274h
var_A74         = word ptr -0A74h
var_270         = byte ptr -270h
FindFileData    = _WIN32_FIND_DATAW ptr -264h
hFindFile       = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch

; FUNCTION CHUNK AT 109106B0 SIZE 0000000C BYTES

; __unwind { // SEH_10905580
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_10905580
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                mov     eax, 1284h
                call    __alloca_probe
                mov     [ebp+var_1290], ecx
                mov     [ebp+hFindFile], 0
                lea     eax, [ebp+FindFileData]
                push    eax             ; lpFindFileData
                push    offset FileName ; "*.*"
                call    ds:FindFirstFileW
                mov     [ebp+hFindFile], eax
                cmp     [ebp+hFindFile], 0FFFFFFFFh
                jz      loc_10905786

loc_109055CE:                           ; CODE XREF: sub_10905580+1F0↓j
                mov     ecx, [ebp+FindFileData.dwFileAttributes]
                and     ecx, 10h
                jz      loc_1090575D
                push    offset asc_10913434 ; "."
                lea     edx, [ebp+FindFileData.cFileName]
                push    edx             ; Str1
                call    ds:_wcsicmp
                add     esp, 8
                test    eax, eax
                jz      short loc_1090560F
                push    offset asc_1091342C ; ".."
                lea     eax, [ebp+FindFileData.cFileName]
                push    eax             ; Str1
                call    ds:_wcsicmp
                add     esp, 8
                test    eax, eax
                jnz     short loc_10905636

loc_1090560F:                           ; CODE XREF: sub_10905580+74↑j
                push    offset asc_10913434 ; "."
                lea     ecx, [ebp+FindFileData.cFileName]
                push    ecx             ; Str1
                call    ds:_wcsicmp
                add     esp, 8
                test    eax, eax
                jnz     loc_1090575D
                cmp     [ebp+arg_4], 0
                jz      loc_1090575D

loc_10905636:                           ; CODE XREF: sub_10905580+8D↑j
                lea     edx, [ebp+var_270]
                push    edx
                mov     eax, [ebp+var_1290]
                mov     edx, [eax]
                mov     ecx, [ebp+var_1290]
                mov     eax, [edx+48h]
                call    eax
;   try {
                mov     [ebp+var_4], 0
                lea     ecx, [ebp+FindFileData.cFileName]
                push    ecx
                lea     ecx, [ebp+var_270]
                call    ds:??YdnString@@QAEAAV0@PB_W@Z ; dnString::operator+=(wchar_t const *)
                push    offset asc_10912ED8 ; "\\"
                lea     ecx, [ebp+var_270]
                call    ds:??YdnString@@QAEAAV0@PB_W@Z ; dnString::operator+=(wchar_t const *)
                push    400h            ; Count
                lea     edx, [ebp+FindFileData.cFileName]
                push    edx             ; Source
                lea     eax, [ebp+Dest]
                push    eax             ; Dest
                call    ds:wcsncpy
                add     esp, 0Ch
                mov     ecx, 400h
                sub     ecx, 1
                xor     edx, edx
                mov     [ebp+ecx*2+Dest], dx
                lea     ecx, [ebp+var_270]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                mov     [ebp+Source], eax
                push    400h            ; Count
                mov     eax, [ebp+Source]
                push    eax             ; Source
                lea     ecx, [ebp+var_A74]
                push    ecx             ; Dest
                call    ds:wcsncpy
                add     esp, 0Ch
                mov     edx, 400h
                sub     edx, 1
                xor     eax, eax
                mov     [ebp+edx*2+var_A74], ax
                lea     ecx, [ebp+Dest]
                push    ecx             ; Src
                mov     ecx, [ebp+arg_0]
                call    sub_10904A80
                push    offset asc_10913434 ; "."
                lea     edx, [ebp+FindFileData.cFileName]
                push    edx             ; Str1
                call    ds:_wcsicmp
                add     esp, 8
                test    eax, eax
                jz      short loc_1090574A
                lea     ecx, [ebp+var_270]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                mov     eax, [ebp+var_1290]
                mov     edx, [eax]
                mov     ecx, [ebp+var_1290]
                mov     eax, [edx+44h]
                call    eax
                push    0
                mov     ecx, [ebp+arg_0]
                push    ecx
                mov     edx, [ebp+var_1290]
                mov     eax, [edx]
                mov     ecx, [ebp+var_1290]
                mov     edx, [eax+4Ch]
                call    edx
;   } // starts at 10905650

loc_1090574A:                           ; CODE XREF: sub_10905580+18F↑j
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_270]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)

loc_1090575D:                           ; CODE XREF: sub_10905580+57↑j
                                        ; sub_10905580+A6↑j ...
                lea     eax, [ebp+FindFileData]
                push    eax             ; lpFindFileData
                mov     ecx, [ebp+hFindFile]
                push    ecx             ; hFindFile
                call    ds:FindNextFileW
                test    eax, eax
                jnz     loc_109055CE
                cmp     [ebp+hFindFile], 0
                jz      short loc_10905786
                mov     edx, [ebp+hFindFile]
                push    edx             ; hFindFile
                call    ds:FindClose

loc_10905786:                           ; CODE XREF: sub_10905580+48↑j
                                        ; sub_10905580+1FA↑j
                push    offset asc_1091342C ; ".."
                mov     eax, [ebp+var_1290]
                mov     edx, [eax]
                mov     ecx, [ebp+var_1290]
                mov     eax, [edx+44h]
                call    eax
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    8
; } // starts at 10905580
sub_10905580    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_109057B0    proc near               ; CODE XREF: sub_10905920+4F2↓p
                                        ; sub_10905920+AE24↓j

var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 109106D0 SIZE 00000009 BYTES

; __unwind { // SEH_109057B0
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_109057B0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0Ch
                mov     [ebp+var_18], ecx
;   try {
                mov     [ebp+var_4], 0
                mov     eax, [ebp+var_18]
                mov     ecx, [eax+4]
                mov     [ebp+var_14], ecx
                cmp     [ebp+var_14], 0
                jnz     short loc_109057E6
                jmp     short loc_1090581F
; ---------------------------------------------------------------------------

loc_109057E6:                           ; CODE XREF: sub_109057B0+32↑j
                mov     edx, 1
                test    edx, edx
                jz      short loc_1090580B
                mov     [ebp+var_10], 0
                jmp     short loc_10905801
; ---------------------------------------------------------------------------

loc_109057F8:                           ; CODE XREF: sub_109057B0+59↓j
                mov     eax, [ebp+var_10]
                add     eax, 1
                mov     [ebp+var_10], eax

loc_10905801:                           ; CODE XREF: sub_109057B0+46↑j
                mov     ecx, [ebp+var_14]
                cmp     [ebp+var_10], ecx
                jge     short loc_1090580B
                jmp     short loc_109057F8
; ---------------------------------------------------------------------------

loc_1090580B:                           ; CODE XREF: sub_109057B0+3D↑j
                                        ; sub_109057B0+57↑j
                push    1000h
                mov     edx, [ebp+var_14]
                push    edx
                push    0
                mov     ecx, [ebp+var_18]
                call    ds:?Remove@dnArrayBase@@QAEXHHH@Z ; dnArrayBase::Remove(int,int,int)
;   } // starts at 109057CE

loc_1090581F:                           ; CODE XREF: sub_109057B0+34↑j
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_18]
                call    ds:??1dnArrayBase@@QAE@XZ ; dnArrayBase::~dnArrayBase(void)
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
; } // starts at 109057B0
sub_109057B0    endp

; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                mov     eax, [ebp+8]
                push    esi
                mov     esi, ecx
                mov     [esi], eax
                mov     dword ptr [esi+4], 0FFFFFFFFh
                call    sub_10904EB0
                mov     eax, esi
                pop     esi
                pop     ebp
                retn    4
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10905860    proc near               ; CODE XREF: sub_10905920+7BE↓p
                                        ; sub_10906670+67↓p ...

var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 109106F0 SIZE 00000009 BYTES

; __unwind { // SEH_10905860
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_10905860
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                push    ecx
                push    esi
                mov     esi, ecx
                mov     [ebp+var_10], esi
                mov     eax, [esi+4]
                push    eax
                push    0
;   try {
                mov     [ebp+var_4], 0
                call    sub_10905110
                mov     ecx, esi
;   } // starts at 10905885
                mov     [ebp+var_4], 0FFFFFFFFh
                call    ds:??1dnArrayBase@@QAE@XZ ; dnArrayBase::~dnArrayBase(void)
                mov     ecx, [ebp+var_C]
                pop     esi
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
; } // starts at 10905860
sub_10905860    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


sub_109058B0    proc near               ; CODE XREF: WinMain(x,x,x,x)+A9F↓p
                push    esi
                mov     esi, ecx
                call    ds:?StaticClass@UClass@@SAPAV1@XZ ; UClass::StaticClass(void)
                mov     ecx, esi
                mov     [esi], eax
                mov     dword ptr [esi+4], 0FFFFFFFFh
                call    sub_10904EB0
                mov     eax, esi
                pop     esi
                retn
sub_109058B0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_109058D0    proc near               ; CODE XREF: sub_10906EC0+2D↓j
                                        ; sub_109098C0+75D3↓j ...

var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 10910710 SIZE 00000009 BYTES

; __unwind { // SEH_109058D0
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_109058D0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                push    ecx
                push    esi
                mov     esi, ecx
                mov     [ebp+var_10], esi
                mov     eax, [esi+4]
                push    eax
                push    0
;   try {
                mov     [ebp+var_4], 0
                call    sub_109051A0
                mov     ecx, esi
;   } // starts at 109058F5
                mov     [ebp+var_4], 0FFFFFFFFh
                call    ds:??1dnArrayBase@@QAE@XZ ; dnArrayBase::~dnArrayBase(void)
                mov     ecx, [ebp+var_C]
                pop     esi
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
; } // starts at 109058D0
sub_109058D0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __stdcall sub_10905920(int, LPCWSTR lpFileName, int, int, int, int)
sub_10905920    proc near               ; CODE XREF: sub_109066F0+65↓p
                                        ; sub_109066F0+D6↓p ...

var_608         = dword ptr -608h
var_604         = dword ptr -604h
var_600         = dword ptr -600h
var_5FC         = dword ptr -5FCh
var_5F8         = dword ptr -5F8h
var_5F4         = dword ptr -5F4h
var_5F0         = dword ptr -5F0h
var_5EC         = dword ptr -5ECh
var_5E8         = dword ptr -5E8h
var_5E4         = dword ptr -5E4h
var_5E0         = dword ptr -5E0h
var_5DC         = dword ptr -5DCh
var_5D8         = dword ptr -5D8h
var_5D4         = dword ptr -5D4h
var_5D0         = dword ptr -5D0h
var_574         = dword ptr -574h
var_570         = dword ptr -570h
var_56C         = dword ptr -56Ch
var_568         = dword ptr -568h
var_564         = dword ptr -564h
var_560         = byte ptr -560h
var_554         = dword ptr -554h
var_550         = dword ptr -550h
var_54C         = dword ptr -54Ch
var_548         = dword ptr -548h
var_544         = dword ptr -544h
var_540         = dword ptr -540h
var_53C         = dword ptr -53Ch
var_538         = dword ptr -538h
var_534         = dword ptr -534h
var_530         = dword ptr -530h
var_52C         = dword ptr -52Ch
var_528         = dword ptr -528h
var_524         = dword ptr -524h
var_520         = dword ptr -520h
var_51C         = dword ptr -51Ch
var_518         = dword ptr -518h
var_514         = dword ptr -514h
var_510         = dword ptr -510h
var_50C         = dword ptr -50Ch
var_508         = byte ptr -508h
var_4FC         = _WIN32_FIND_DATAW ptr -4FCh
var_2A8         = byte ptr -2A8h
var_29C         = byte ptr -29Ch
var_290         = dword ptr -290h
FindFileData    = _WIN32_FIND_DATAW ptr -28Ch
var_3C          = dword ptr -3Ch
var_38          = dword ptr -38h
var_34          = dword ptr -34h
var_28          = dword ptr -28h
var_1C          = byte ptr -1Ch
hFindFile       = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8
lpFileName      = dword ptr  0Ch
arg_8           = dword ptr  10h
arg_C           = dword ptr  14h
arg_10          = dword ptr  18h
arg_14          = dword ptr  1Ch

; FUNCTION CHUNK AT 10910730 SIZE 00000144 BYTES

; __unwind { // SEH_10905920
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_10905920
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 5FCh
                mov     [ebp+var_5D0], ecx
                mov     [ebp+var_574], 0
                lea     ecx, [ebp+var_28]
                call    sub_10902990
;   try {
                mov     [ebp+var_4], 1
                mov     [ebp+hFindFile], 0
                lea     eax, [ebp+var_1C]
                push    eax
                mov     ecx, [ebp+var_5D0]
                mov     edx, [ecx]
                mov     ecx, [ebp+var_5D0]
                mov     eax, [edx+48h]
                call    eax
;   } // starts at 10905956
;   try {
                mov     byte ptr [ebp+var_4], 2
                cmp     [ebp+arg_10], 0
                jz      loc_10905E1C
                lea     ecx, [ebp+var_34]
                call    ds:??0dnArrayBase@@QAE@XZ ; dnArrayBase::dnArrayBase(void)
;   } // starts at 1090597B
;   try {
                mov     byte ptr [ebp+var_4], 3
                push    1
                lea     ecx, [ebp+var_34]
                push    ecx
                mov     edx, [ebp+var_5D0]
                mov     eax, [edx]
                mov     ecx, [ebp+var_5D0]
                mov     edx, [eax+4Ch]
                call    edx
                mov     [ebp+var_38], 0
                jmp     short loc_109059C1
; ---------------------------------------------------------------------------

loc_109059B8:                           ; CODE XREF: sub_10905920:loc_10905DE9↓j
                mov     eax, [ebp+var_38]
                add     eax, 1
                mov     [ebp+var_38], eax

loc_109059C1:                           ; CODE XREF: sub_10905920+96↑j
                lea     ecx, [ebp+var_34]
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                cmp     [ebp+var_38], eax
                jge     loc_10905DEE
                mov     ecx, [ebp+var_38]
                shl     ecx, 0Ch
                add     ecx, [ebp+var_34]
                mov     [ebp+var_3C], ecx
                mov     [ebp+var_290], 0
                mov     edx, [ebp+var_3C]
                add     edx, 800h
                push    edx
                mov     eax, [ebp+var_5D0]
                mov     edx, [eax]
                mov     ecx, [ebp+var_5D0]
                mov     eax, [edx+44h]
                call    eax
                lea     ecx, [ebp+FindFileData]
                push    ecx             ; lpFindFileData
                mov     edx, [ebp+lpFileName]
                push    edx             ; lpFileName
                call    ds:FindFirstFileW
                mov     [ebp+hFindFile], eax
                cmp     [ebp+hFindFile], 0FFFFFFFFh
                jz      loc_10905DE9

loc_10905A24:                           ; CODE XREF: sub_10905920+4B3↓j
                mov     eax, [ebp+FindFileData.dwFileAttributes]
                and     eax, 10h
                jnz     loc_10905DC0
                cmp     [ebp+arg_C], 0
                jz      loc_10905C08
                cmp     [ebp+arg_8], 0
                jz      loc_10905C08
                cmp     [ebp+var_290], 0
                jnz     loc_10905B12
                cmp     [ebp+arg_14], 0
                jz      short loc_10905AB5
                lea     ecx, [ebp+var_28]
                push    ecx
                push    0Ch
                call    sub_10902AC0
                add     esp, 8
                mov     [ebp+var_514], eax
;   } // starts at 10905992
;   try {
                mov     byte ptr [ebp+var_4], 4
                cmp     [ebp+var_514], 0
                jz      short loc_10905A99
                mov     edx, [ebp+var_3C]
                add     edx, 800h
                push    edx
                mov     ecx, [ebp+var_514]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
                mov     [ebp+var_5D4], eax
                jmp     short loc_10905AA3
; ---------------------------------------------------------------------------

loc_10905A99:                           ; CODE XREF: sub_10905920+159↑j
                mov     [ebp+var_5D4], 0

loc_10905AA3:                           ; CODE XREF: sub_10905920+177↑j
                mov     eax, [ebp+var_5D4]
                mov     [ebp+var_510], eax
;   } // starts at 10905A6E
;   try {
                mov     byte ptr [ebp+var_4], 3
                jmp     short loc_10905B08
; ---------------------------------------------------------------------------

loc_10905AB5:                           ; CODE XREF: sub_10905920+138↑j
                lea     ecx, [ebp+var_28]
                push    ecx
                push    0Ch
                call    sub_10902AC0
                add     esp, 8
                mov     [ebp+var_51C], eax
;   } // starts at 10905AAF
;   try {
                mov     byte ptr [ebp+var_4], 5
                cmp     [ebp+var_51C], 0
                jz      short loc_10905AEE
                mov     edx, [ebp+var_3C]
                push    edx
                mov     ecx, [ebp+var_51C]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
                mov     [ebp+var_5D8], eax
                jmp     short loc_10905AF8
; ---------------------------------------------------------------------------

loc_10905AEE:                           ; CODE XREF: sub_10905920+1B4↑j
                mov     [ebp+var_5D8], 0

loc_10905AF8:                           ; CODE XREF: sub_10905920+1CC↑j
                mov     eax, [ebp+var_5D8]
                mov     [ebp+var_518], eax
;   } // starts at 10905AC9
;   try {
                mov     byte ptr [ebp+var_4], 3

loc_10905B08:                           ; CODE XREF: sub_10905920+193↑j
                mov     [ebp+var_290], 1

loc_10905B12:                           ; CODE XREF: sub_10905920+12E↑j
                cmp     [ebp+arg_14], 0
                jz      loc_10905BAD
                mov     ecx, [ebp+var_3C]
                add     ecx, 800h
                push    ecx
                lea     ecx, [ebp+var_29C]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
;   } // starts at 10905B04
;   try {
                mov     byte ptr [ebp+var_4], 6
                lea     edx, [ebp+FindFileData.cFileName]
                push    edx
                lea     ecx, [ebp+var_29C]
                call    ds:??YdnString@@QAEAAV0@PB_W@Z ; dnString::operator+=(wchar_t const *)
                lea     eax, [ebp+var_28]
                push    eax
                push    0Ch
                call    sub_10902AC0
                add     esp, 8
                mov     [ebp+var_524], eax
;   } // starts at 10905B32
;   try {
                mov     byte ptr [ebp+var_4], 7
                cmp     [ebp+var_524], 0
                jz      short loc_10905B85
                lea     ecx, [ebp+var_29C]
                push    ecx
                mov     ecx, [ebp+var_524]
                call    ds:??0dnString@@QAE@ABV0@@Z ; dnString::dnString(dnString const &)
                mov     [ebp+var_5DC], eax
                jmp     short loc_10905B8F
; ---------------------------------------------------------------------------

loc_10905B85:                           ; CODE XREF: sub_10905920+248↑j
                mov     [ebp+var_5DC], 0

loc_10905B8F:                           ; CODE XREF: sub_10905920+263↑j
                mov     edx, [ebp+var_5DC]
                mov     [ebp+var_520], edx
;   } // starts at 10905B5D
;   try {
                mov     byte ptr [ebp+var_4], 3
                lea     ecx, [ebp+var_29C]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                jmp     short loc_10905C03
; ---------------------------------------------------------------------------

loc_10905BAD:                           ; CODE XREF: sub_10905920+1F6↑j
                lea     eax, [ebp+var_28]
                push    eax
                push    0Ch
                call    sub_10902AC0
                add     esp, 8
                mov     [ebp+var_52C], eax
;   } // starts at 10905B9B
;   try {
                mov     byte ptr [ebp+var_4], 8
                cmp     [ebp+var_52C], 0
                jz      short loc_10905BE9
                lea     ecx, [ebp+FindFileData.cFileName]
                push    ecx
                mov     ecx, [ebp+var_52C]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
                mov     [ebp+var_5E0], eax
                jmp     short loc_10905BF3
; ---------------------------------------------------------------------------

loc_10905BE9:                           ; CODE XREF: sub_10905920+2AC↑j
                mov     [ebp+var_5E0], 0

loc_10905BF3:                           ; CODE XREF: sub_10905920+2C7↑j
                mov     edx, [ebp+var_5E0]
                mov     [ebp+var_528], edx
;   } // starts at 10905BC1
;   try {
                mov     byte ptr [ebp+var_4], 3

loc_10905C03:                           ; CODE XREF: sub_10905920+28B↑j
                jmp     loc_10905DC0
; ---------------------------------------------------------------------------

loc_10905C08:                           ; CODE XREF: sub_10905920+117↑j
                                        ; sub_10905920+121↑j
                cmp     [ebp+arg_C], 0
                jz      loc_10905CD0
                cmp     [ebp+arg_14], 0
                jz      short loc_10905C73
                lea     eax, [ebp+var_28]
                push    eax
                push    0Ch
                call    sub_10902AC0
                add     esp, 8
                mov     [ebp+var_534], eax
;   } // starts at 10905BFF
;   try {
                mov     byte ptr [ebp+var_4], 9
                cmp     [ebp+var_534], 0
                jz      short loc_10905C57
                mov     ecx, [ebp+var_3C]
                add     ecx, 800h
                push    ecx
                mov     ecx, [ebp+var_534]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
                mov     [ebp+var_5E4], eax
                jmp     short loc_10905C61
; ---------------------------------------------------------------------------

loc_10905C57:                           ; CODE XREF: sub_10905920+317↑j
                mov     [ebp+var_5E4], 0

loc_10905C61:                           ; CODE XREF: sub_10905920+335↑j
                mov     edx, [ebp+var_5E4]
                mov     [ebp+var_530], edx
;   } // starts at 10905C2C
;   try {
                mov     byte ptr [ebp+var_4], 3
                jmp     short loc_10905CC6
; ---------------------------------------------------------------------------

loc_10905C73:                           ; CODE XREF: sub_10905920+2F6↑j
                lea     eax, [ebp+var_28]
                push    eax
                push    0Ch
                call    sub_10902AC0
                add     esp, 8
                mov     [ebp+var_53C], eax
;   } // starts at 10905C6D
;   try {
                mov     byte ptr [ebp+var_4], 0Ah
                cmp     [ebp+var_53C], 0
                jz      short loc_10905CAC
                mov     ecx, [ebp+var_3C]
                push    ecx
                mov     ecx, [ebp+var_53C]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
                mov     [ebp+var_5E8], eax
                jmp     short loc_10905CB6
; ---------------------------------------------------------------------------

loc_10905CAC:                           ; CODE XREF: sub_10905920+372↑j
                mov     [ebp+var_5E8], 0

loc_10905CB6:                           ; CODE XREF: sub_10905920+38A↑j
                mov     edx, [ebp+var_5E8]
                mov     [ebp+var_538], edx
;   } // starts at 10905C87
;   try {
                mov     byte ptr [ebp+var_4], 3

loc_10905CC6:                           ; CODE XREF: sub_10905920+351↑j
                jmp     loc_10905DD9
; ---------------------------------------------------------------------------
                jmp     loc_10905DC0
; ---------------------------------------------------------------------------

loc_10905CD0:                           ; CODE XREF: sub_10905920+2EC↑j
                cmp     [ebp+arg_14], 0
                jz      loc_10905D6A
                mov     eax, [ebp+var_3C]
                add     eax, 800h
                push    eax
                lea     ecx, [ebp+var_2A8]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
;   } // starts at 10905CC2
;   try {
                mov     byte ptr [ebp+var_4], 0Bh
                lea     ecx, [ebp+FindFileData.cFileName]
                push    ecx
                lea     ecx, [ebp+var_2A8]
                call    ds:??YdnString@@QAEAAV0@PB_W@Z ; dnString::operator+=(wchar_t const *)
                lea     edx, [ebp+var_28]
                push    edx
                push    0Ch
                call    sub_10902AC0
                add     esp, 8
                mov     [ebp+var_544], eax
;   } // starts at 10905CEF
;   try {
                mov     byte ptr [ebp+var_4], 0Ch
                cmp     [ebp+var_544], 0
                jz      short loc_10905D42
                lea     eax, [ebp+var_2A8]
                push    eax
                mov     ecx, [ebp+var_544]
                call    ds:??0dnString@@QAE@ABV0@@Z ; dnString::dnString(dnString const &)
                mov     [ebp+var_5EC], eax
                jmp     short loc_10905D4C
; ---------------------------------------------------------------------------

loc_10905D42:                           ; CODE XREF: sub_10905920+405↑j
                mov     [ebp+var_5EC], 0

loc_10905D4C:                           ; CODE XREF: sub_10905920+420↑j
                mov     ecx, [ebp+var_5EC]
                mov     [ebp+var_540], ecx
;   } // starts at 10905D1A
;   try {
                mov     byte ptr [ebp+var_4], 3
                lea     ecx, [ebp+var_2A8]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                jmp     short loc_10905DC0
; ---------------------------------------------------------------------------

loc_10905D6A:                           ; CODE XREF: sub_10905920+3B4↑j
                lea     edx, [ebp+var_28]
                push    edx
                push    0Ch
                call    sub_10902AC0
                add     esp, 8
                mov     [ebp+var_54C], eax
;   } // starts at 10905D58
;   try {
                mov     byte ptr [ebp+var_4], 0Dh
                cmp     [ebp+var_54C], 0
                jz      short loc_10905DA6
                lea     eax, [ebp+FindFileData.cFileName]
                push    eax
                mov     ecx, [ebp+var_54C]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
                mov     [ebp+var_5F0], eax
                jmp     short loc_10905DB0
; ---------------------------------------------------------------------------

loc_10905DA6:                           ; CODE XREF: sub_10905920+469↑j
                mov     [ebp+var_5F0], 0

loc_10905DB0:                           ; CODE XREF: sub_10905920+484↑j
                mov     ecx, [ebp+var_5F0]
                mov     [ebp+var_548], ecx
;   } // starts at 10905D7E
;   try {
                mov     byte ptr [ebp+var_4], 3

loc_10905DC0:                           ; CODE XREF: sub_10905920+10D↑j
                                        ; sub_10905920:loc_10905C03↑j ...
                lea     edx, [ebp+FindFileData]
                push    edx             ; lpFindFileData
                mov     eax, [ebp+hFindFile]
                push    eax             ; hFindFile
                call    ds:FindNextFileW
                test    eax, eax
                jnz     loc_10905A24

loc_10905DD9:                           ; CODE XREF: sub_10905920:loc_10905CC6↑j
                cmp     [ebp+hFindFile], 0
                jz      short loc_10905DE9
                mov     ecx, [ebp+hFindFile]
                push    ecx             ; hFindFile
                call    ds:FindClose

loc_10905DE9:                           ; CODE XREF: sub_10905920+FE↑j
                                        ; sub_10905920+4BD↑j
                jmp     loc_109059B8
; ---------------------------------------------------------------------------

loc_10905DEE:                           ; CODE XREF: sub_10905920+AD↑j
                lea     ecx, [ebp+var_1C]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                mov     edx, [ebp+var_5D0]
                mov     eax, [edx]
                mov     ecx, [ebp+var_5D0]
                mov     edx, [eax+44h]
                call    edx
;   } // starts at 10905DBC
;   try {
                mov     byte ptr [ebp+var_4], 2
                lea     ecx, [ebp+var_34]
                call    sub_109057B0
                jmp     loc_109060AF
; ---------------------------------------------------------------------------

loc_10905E1C:                           ; CODE XREF: sub_10905920+63↑j
                lea     eax, [ebp+var_4FC]
                push    eax             ; lpFindFileData
                mov     ecx, [ebp+lpFileName]
                push    ecx             ; lpFileName
                call    ds:FindFirstFileW
                mov     [ebp+hFindFile], eax
                cmp     [ebp+hFindFile], 0FFFFFFFFh
                jz      loc_109060AF

loc_10905E3A:                           ; CODE XREF: sub_10905920+779↓j
                push    offset asc_10913434 ; "."
                lea     edx, [ebp+var_4FC.cFileName]
                push    edx             ; Str1
                call    ds:_wcsicmp
                add     esp, 8
                test    eax, eax
                jz      loc_10906086
                push    offset asc_1091342C ; ".."
                lea     eax, [ebp+var_4FC.cFileName]
                push    eax             ; Str1
                call    ds:_wcsicmp
                add     esp, 8
                test    eax, eax
                jz      loc_10906086
                mov     ecx, [ebp+var_4FC.dwFileAttributes]
                and     ecx, 10h
                jz      short loc_10905E8A
                mov     edx, [ebp+arg_C]
                mov     [ebp+var_5F4], edx
                jmp     short loc_10905E93
; ---------------------------------------------------------------------------

loc_10905E8A:                           ; CODE XREF: sub_10905920+55D↑j
                mov     eax, [ebp+arg_8]
                mov     [ebp+var_5F4], eax

loc_10905E93:                           ; CODE XREF: sub_10905920+568↑j
                cmp     [ebp+var_5F4], 0
                jz      loc_10906086
                cmp     [ebp+arg_14], 0
                jz      loc_10906030
                mov     ecx, [ebp+lpFileName]
                push    ecx
                lea     ecx, [ebp+var_508]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
;   } // starts at 10905E0B
;   try {
                mov     byte ptr [ebp+var_4], 0Eh
                push    1
                push    offset asc_10912ED8 ; "\\"
                lea     ecx, [ebp+var_508]
                call    ds:?InStr@dnString@@QBEHPB_WH@Z ; dnString::InStr(wchar_t const *,int)
                mov     [ebp+var_50C], eax
                cmp     [ebp+var_50C], 0FFFFFFFFh
                jnz     short loc_10905F47
                lea     edx, [ebp+var_28]
                push    edx
                push    0Ch
                call    sub_10902AC0
                add     esp, 8
                mov     [ebp+var_554], eax
;   } // starts at 10905EBA
;   try {
                mov     byte ptr [ebp+var_4], 0Fh
                cmp     [ebp+var_554], 0
                jz      short loc_10905F1C
                lea     eax, [ebp+var_4FC.cFileName]
                push    eax
                mov     ecx, [ebp+var_554]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
                mov     [ebp+var_5F8], eax
                jmp     short loc_10905F26
; ---------------------------------------------------------------------------

loc_10905F1C:                           ; CODE XREF: sub_10905920+5DF↑j
                mov     [ebp+var_5F8], 0

loc_10905F26:                           ; CODE XREF: sub_10905920+5FA↑j
                mov     ecx, [ebp+var_5F8]
                mov     [ebp+var_550], ecx
;   } // starts at 10905EF4
;   try {
                mov     byte ptr [ebp+var_4], 2
                lea     ecx, [ebp+var_508]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                jmp     loc_10906086
; ---------------------------------------------------------------------------

loc_10905F47:                           ; CODE XREF: sub_10905920+5BE↑j
                mov     edx, [ebp+var_50C]
                add     edx, 1
                push    edx
                lea     eax, [ebp+var_560]
                push    eax
                lea     ecx, [ebp+var_508]
                call    ds:?Left@dnString@@QBE?AV1@H@Z ; dnString::Left(int)
                mov     [ebp+var_5FC], eax
                mov     ecx, [ebp+var_5FC]
                mov     [ebp+var_600], ecx
;   } // starts at 10905F32
;   try {
                mov     byte ptr [ebp+var_4], 10h
                mov     edx, [ebp+var_600]
                push    edx
                lea     ecx, [ebp+var_508]
                call    ds:??4dnString@@QAEAAV0@ABV0@@Z ; dnString::operator=(dnString const &)
;   } // starts at 10905F76
;   try {
                mov     byte ptr [ebp+var_4], 0Eh
                lea     ecx, [ebp+var_560]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                lea     eax, [ebp+var_4FC.cFileName]
                push    eax
                lea     ecx, [ebp+var_508]
                call    ds:??YdnString@@QAEAAV0@PB_W@Z ; dnString::operator+=(wchar_t const *)
                mov     ecx, [ebp+var_4FC.dwFileAttributes]
                and     ecx, 10h
                jz      short loc_10905FCC
                push    offset asc_10912ED8 ; "\\"
                lea     ecx, [ebp+var_508]
                call    ds:??YdnString@@QAEAAV0@PB_W@Z ; dnString::operator+=(wchar_t const *)

loc_10905FCC:                           ; CODE XREF: sub_10905920+699↑j
                lea     edx, [ebp+var_28]
                push    edx
                push    0Ch
                call    sub_10902AC0
                add     esp, 8
                mov     [ebp+var_568], eax
;   } // starts at 10905F8D
;   try {
                mov     byte ptr [ebp+var_4], 11h
                cmp     [ebp+var_568], 0
                jz      short loc_10906008
                lea     eax, [ebp+var_508]
                push    eax
                mov     ecx, [ebp+var_568]
                call    ds:??0dnString@@QAE@ABV0@@Z ; dnString::dnString(dnString const &)
                mov     [ebp+var_604], eax
                jmp     short loc_10906012
; ---------------------------------------------------------------------------

loc_10906008:                           ; CODE XREF: sub_10905920+6CB↑j
                mov     [ebp+var_604], 0

loc_10906012:                           ; CODE XREF: sub_10905920+6E6↑j
                mov     ecx, [ebp+var_604]
                mov     [ebp+var_564], ecx
;   } // starts at 10905FE0
;   try {
                mov     byte ptr [ebp+var_4], 2
                lea     ecx, [ebp+var_508]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                jmp     short loc_10906086
; ---------------------------------------------------------------------------

loc_10906030:                           ; CODE XREF: sub_10905920+584↑j
                lea     edx, [ebp+var_28]
                push    edx
                push    0Ch
                call    sub_10902AC0
                add     esp, 8
                mov     [ebp+var_570], eax
;   } // starts at 1090601E
;   try {
                mov     byte ptr [ebp+var_4], 12h
                cmp     [ebp+var_570], 0
                jz      short loc_1090606C
                lea     eax, [ebp+var_4FC.cFileName]
                push    eax
                mov     ecx, [ebp+var_570]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
                mov     [ebp+var_608], eax
                jmp     short loc_10906076
; ---------------------------------------------------------------------------

loc_1090606C:                           ; CODE XREF: sub_10905920+72F↑j
                mov     [ebp+var_608], 0

loc_10906076:                           ; CODE XREF: sub_10905920+74A↑j
                mov     ecx, [ebp+var_608]
                mov     [ebp+var_56C], ecx
;   } // starts at 10906044
;   try {
                mov     byte ptr [ebp+var_4], 2

loc_10906086:                           ; CODE XREF: sub_10905920+531↑j
                                        ; sub_10905920+54E↑j ...
                lea     edx, [ebp+var_4FC]
                push    edx             ; lpFindFileData
                mov     eax, [ebp+hFindFile]
                push    eax             ; hFindFile
                call    ds:FindNextFileW
                test    eax, eax
                jnz     loc_10905E3A
                cmp     [ebp+hFindFile], 0
                jz      short loc_109060AF
                mov     ecx, [ebp+hFindFile]
                push    ecx             ; hFindFile
                call    ds:FindClose

loc_109060AF:                           ; CODE XREF: sub_10905920+4F7↑j
                                        ; sub_10905920+514↑j ...
                lea     edx, [ebp+var_28]
                push    edx
                mov     ecx, [ebp+arg_0]
                call    sub_10905080
                mov     eax, [ebp+var_574]
                or      eax, 1
                mov     [ebp+var_574], eax
;   } // starts at 10906082
;   try {
                mov     byte ptr [ebp+var_4], 1
                lea     ecx, [ebp+var_1C]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
;   } // starts at 109060CA
;   try {
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_28]
                call    sub_10905860
                mov     eax, [ebp+arg_0]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    18h
;   } // starts at 109060D7
; } // starts at 10905920
sub_10905920    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10906100    proc near               ; CODE XREF: .text:109119B8↓p

var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 10910880 SIZE 00000023 BYTES

; __unwind { // SEH_10906100
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_10906100
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                push    ecx
                mov     [ebp+var_10], ecx
                mov     ecx, [ebp+var_10]
                call    ds:??0dnFileMgr@@QAE@XZ ; dnFileMgr::dnFileMgr(void)
                mov     eax, [ebp+var_10]
                mov     dword ptr [eax], offset ??_7dnFileMgrGeneric@@6B@ ; const dnFileMgrGeneric::`vftable'
                mov     ecx, [ebp+var_10]
                mov     dword ptr [ecx], offset ??_7dnFileMgrWin32@@6B@ ; const dnFileMgrWin32::`vftable'
                mov     edx, [ebp+var_10]
                mov     dword ptr [edx+4], 0
                mov     eax, [ebp+var_10]
                mov     dword ptr [eax], offset ??_7dnFileMgrDLC@@6B@ ; const dnFileMgrDLC::`vftable'
                mov     ecx, [ebp+var_10]
                add     ecx, 8
                call    sub_10902990
;   try {
                mov     [ebp+var_4], 0
                mov     ecx, [ebp+var_10]
                add     ecx, 14h
                call    ds:??0dnString@@QAE@XZ ; dnString::dnString(void)
;   } // starts at 10906155
;   try {
                mov     byte ptr [ebp+var_4], 1
                mov     ecx, [ebp+var_10]
                add     ecx, 20h
                call    ds:??0dnString@@QAE@XZ ; dnString::dnString(void)
;   } // starts at 10906168
;   try {
                mov     byte ptr [ebp+var_4], 2
                mov     ecx, [ebp+var_10]
                add     ecx, 2Ch
                call    ds:??0dnString@@QAE@XZ ; dnString::dnString(void)
;   } // starts at 10906178
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_10]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
; } // starts at 10906100
sub_10906100    endp

; [00000001 BYTES: COLLAPSED FUNCTION nullsub_2. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_109061B0    proc near               ; CODE XREF: sub_109065C0+15↓p

var_6C          = dword ptr -6Ch
var_68          = dword ptr -68h
var_64          = dword ptr -64h
var_60          = dword ptr -60h
var_5C          = dword ptr -5Ch
var_58          = dword ptr -58h
var_54          = dword ptr -54h
var_50          = dword ptr -50h
var_4C          = dword ptr -4Ch
var_48          = byte ptr -48h
var_3C          = byte ptr -3Ch
var_30          = byte ptr -30h
var_24          = byte ptr -24h
var_18          = byte ptr -18h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 109108B0 SIZE 0000002D BYTES

; __unwind { // SEH_109061B0
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_109061B0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 60h
                mov     [ebp+var_4C], ecx
                lea     eax, [ebp+var_18]
                push    eax
                mov     ecx, [ebp+var_4C]
                mov     edx, [ecx]
                mov     ecx, [ebp+var_4C]
                mov     eax, [edx+48h]
                call    eax
;   try {
                mov     [ebp+var_4], 0
                lea     ecx, [ebp+var_24]
                push    ecx
                call    ds:?dnBaseContentDir@@YA?BVdnString@@XZ ; dnBaseContentDir(void)
                add     esp, 4
                mov     [ebp+var_50], eax
                mov     edx, [ebp+var_50]
                mov     [ebp+var_54], edx
;   } // starts at 109061DF
;   try {
                mov     byte ptr [ebp+var_4], 1
                mov     ecx, [ebp+var_54]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                mov     eax, [ebp+var_4C]
                mov     edx, [eax]
                mov     ecx, [ebp+var_4C]
                mov     eax, [edx+44h]
                call    eax
;   } // starts at 109061FC
;   try {
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_24]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                lea     ecx, [ebp+var_30]
                push    ecx
                mov     edx, [ebp+var_4C]
                mov     eax, [edx]
                mov     ecx, [ebp+var_4C]
                mov     edx, [eax+48h]
                call    edx
                mov     [ebp+var_58], eax
                mov     eax, [ebp+var_58]
                mov     [ebp+var_5C], eax
;   } // starts at 10906217
;   try {
                mov     byte ptr [ebp+var_4], 2
                mov     ecx, [ebp+var_5C]
                push    ecx
                mov     ecx, [ebp+var_4C]
                add     ecx, 14h
                call    ds:??4dnString@@QAEAAV0@ABV0@@Z ; dnString::operator=(dnString const &)
;   } // starts at 1090623E
;   try {
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_30]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                lea     edx, [ebp+var_3C]
                push    edx
                call    ds:?dnBaseDir@@YA?BVdnString@@XZ ; dnBaseDir(void)
                add     esp, 4
                mov     [ebp+var_60], eax
                mov     eax, [ebp+var_60]
                mov     [ebp+var_64], eax
;   } // starts at 10906252
;   try {
                mov     byte ptr [ebp+var_4], 3
                mov     ecx, [ebp+var_64]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                mov     ecx, [ebp+var_4C]
                mov     edx, [ecx]
                mov     ecx, [ebp+var_4C]
                mov     eax, [edx+44h]
                call    eax
;   } // starts at 10906275
;   try {
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_3C]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                lea     ecx, [ebp+var_48]
                push    ecx
                mov     edx, [ebp+var_4C]
                mov     eax, [edx]
                mov     ecx, [ebp+var_4C]
                mov     edx, [eax+48h]
                call    edx
                mov     [ebp+var_68], eax
                mov     eax, [ebp+var_68]
                mov     [ebp+var_6C], eax
;   } // starts at 10906290
;   try {
                mov     byte ptr [ebp+var_4], 4
                mov     ecx, [ebp+var_6C]
                push    ecx
                mov     ecx, [ebp+var_4C]
                add     ecx, 20h
                call    ds:??4dnString@@QAEAAV0@ABV0@@Z ; dnString::operator=(dnString const &)
;   } // starts at 109062B7
;   try {
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_48]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                lea     ecx, [ebp+var_18]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                mov     edx, [ebp+var_4C]
                mov     eax, [edx]
                mov     ecx, [ebp+var_4C]
                mov     edx, [eax+44h]
                call    edx
;   } // starts at 109062CB
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_18]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
; } // starts at 109061B0
sub_109061B0    endp

; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                pop     ebp
; [00000006 BYTES: COLLAPSED FUNCTION _wcsncmp. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10906320    proc near               ; CODE XREF: sub_109066F0+1FB↓p
                                        ; sub_10906960+C1↓p

arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                mov     eax, [ebp+arg_0]
                mov     ecx, [ecx]
                lea     eax, [eax+eax*2]
                lea     eax, [ecx+eax*4]
                pop     ebp
                retn    4
sub_10906320    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10906340    proc near               ; CODE XREF: sub_10906620+B↓p

var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch

; FUNCTION CHUNK AT 109108F0 SIZE 00000011 BYTES

; __unwind { // SEH_10906340
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_10906340
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                push    ecx
                push    esi
                mov     esi, [ebp+arg_0]
                push    edi
                push    0Ch
                push    esi
                mov     [ebp+var_10], ecx
                call    ds:?Add@dnArrayBase@@QAEHHH@Z ; dnArrayBase::Add(int,int)
                cmp     [ebp+arg_4], 0
                mov     edi, eax
                jz      short loc_109063B3
                lea     eax, [edi+esi]
                cmp     edi, eax
                jge     short loc_109063B1
                lea     esi, [edi+edi*2]
                add     esi, esi
                add     esi, esi
                sub     eax, edi
                push    ebx
                mov     ebx, eax

loc_10906385:                           ; CODE XREF: sub_10906340+6E↓j
                mov     eax, [ebp+var_10]
                mov     ecx, [eax]
                add     ecx, esi
                mov     [ebp+arg_0], ecx
                mov     [ebp+arg_4], ecx
;   try {
                mov     [ebp+var_4], 0
                jz      short loc_109063A1
                call    ds:??0dnString@@QAE@XZ ; dnString::dnString(void)

loc_109063A1:                           ; CODE XREF: sub_10906340+59↑j
                add     esi, 0Ch
                sub     ebx, 1
;   } // starts at 10906392
                mov     [ebp+var_4], 0FFFFFFFFh
                jnz     short loc_10906385
                pop     ebx

loc_109063B1:                           ; CODE XREF: sub_10906340+37↑j
                mov     eax, edi

loc_109063B3:                           ; CODE XREF: sub_10906340+30↑j
                mov     ecx, [ebp+var_C]
                pop     edi
                pop     esi
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    8
; } // starts at 10906340
sub_10906340    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __stdcall sub_109063D0(wchar_t *Str2, wchar_t *Str1, int)
sub_109063D0    proc near               ; CODE XREF: sub_109066F0+12D↓p

var_864         = dword ptr -864h
var_860         = dword ptr -860h
var_85C         = dword ptr -85Ch
var_858         = dword ptr -858h
var_854         = dword ptr -854h
var_84E         = word ptr -84Eh
var_84C         = dword ptr -84Ch
var_848         = dword ptr -848h
var_844         = dword ptr -844h
var_83E         = word ptr -83Eh
var_83C         = dword ptr -83Ch
var_838         = dword ptr -838h
var_834         = dword ptr -834h
Count           = dword ptr -830h
var_82C         = byte ptr -82Ch
var_820         = byte ptr -820h
var_816         = word ptr -816h
Dest            = word ptr -814h
var_14          = dword ptr -14h
MaxCount        = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
Str2            = dword ptr  8
Str1            = dword ptr  0Ch
arg_8           = dword ptr  10h

; FUNCTION CHUNK AT 10910910 SIZE 00000018 BYTES

; __unwind { // SEH_109063D0
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_109063D0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 858h
                mov     [ebp+var_834], ecx
                mov     eax, [ebp+Str2]
                mov     [ebp+var_838], eax
                mov     ecx, [ebp+var_838]
                add     ecx, 2
                mov     [ebp+var_83C], ecx

loc_1090640C:                           ; CODE XREF: sub_109063D0+5B↓j
                mov     edx, [ebp+var_838]
                mov     ax, [edx]
                mov     [ebp+var_83E], ax
                add     [ebp+var_838], 2
                cmp     [ebp+var_83E], 0
                jnz     short loc_1090640C
                mov     ecx, [ebp+var_838]
                sub     ecx, [ebp+var_83C]
                sar     ecx, 1
                mov     [ebp+var_844], ecx
                mov     edx, [ebp+var_844]
                mov     [ebp+MaxCount], edx
                mov     eax, [ebp+MaxCount]
                push    eax             ; MaxCount
                mov     ecx, [ebp+Str2]
                push    ecx             ; Str2
                mov     edx, [ebp+Str1]
                push    edx             ; Str1
                call    ds:wcsncmp
                add     esp, 0Ch
                test    eax, eax
                jnz     loc_10906553
                mov     eax, [ebp+Str1]
                mov     [ebp+var_848], eax
                mov     ecx, [ebp+var_848]
                add     ecx, 2
                mov     [ebp+var_84C], ecx

loc_1090647F:                           ; CODE XREF: sub_109063D0+CE↓j
                mov     edx, [ebp+var_848]
                mov     ax, [edx]
                mov     [ebp+var_84E], ax
                add     [ebp+var_848], 2
                cmp     [ebp+var_84E], 0
                jnz     short loc_1090647F
                mov     ecx, [ebp+var_848]
                sub     ecx, [ebp+var_84C]
                sar     ecx, 1
                mov     [ebp+var_854], ecx
                mov     edx, [ebp+var_854]
                sub     edx, [ebp+MaxCount]
                mov     [ebp+var_14], edx
                mov     eax, [ebp+var_14]
                add     eax, 1
                mov     [ebp+Count], eax
                mov     ecx, [ebp+Count]
                push    ecx             ; Count
                mov     edx, [ebp+MaxCount]
                mov     eax, [ebp+Str1]
                lea     ecx, [eax+edx*2]
                push    ecx             ; Source
                lea     edx, [ebp+Dest]
                push    edx             ; Dest
                call    ds:wcsncpy
                add     esp, 0Ch
                xor     eax, eax
                mov     ecx, [ebp+Count]
                mov     [ebp+ecx*2+var_816], ax
                lea     edx, [ebp+Dest]
                push    edx
                lea     ecx, [ebp+var_820]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
                mov     [ebp+var_858], eax
                mov     eax, [ebp+var_858]
                mov     [ebp+var_85C], eax
;   try {
                mov     [ebp+var_4], 0
                mov     ecx, [ebp+var_85C]
                push    ecx
                mov     ecx, [ebp+arg_8]
                call    ds:??4dnString@@QAEAAV0@ABV0@@Z ; dnString::operator=(dnString const &)
;   } // starts at 10906522
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_820]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                mov     eax, 1
                jmp     short loc_109065A1
; ---------------------------------------------------------------------------

loc_10906553:                           ; CODE XREF: sub_109063D0+91↑j
                mov     edx, [ebp+Str1]
                push    edx
                lea     ecx, [ebp+var_82C]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
                mov     [ebp+var_860], eax
                mov     eax, [ebp+var_860]
                mov     [ebp+var_864], eax
;   try {
                mov     [ebp+var_4], 1
                mov     ecx, [ebp+var_864]
                push    ecx
                mov     ecx, [ebp+arg_8]
                call    ds:??4dnString@@QAEAAV0@ABV0@@Z ; dnString::operator=(dnString const &)
;   } // starts at 10906575
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_82C]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                xor     eax, eax

loc_109065A1:                           ; CODE XREF: sub_109063D0+181↑j
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    0Ch
; } // starts at 109063D0
sub_109063D0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_109065C0    proc near               ; DATA XREF: .rdata:const dnFileMgrDLC::`vftable'↓o

var_840         = dword ptr -840h
Dest            = word ptr -800h

                push    ebp
                mov     ebp, esp
                sub     esp, 840h
                mov     [ebp+var_840], ecx
                mov     ecx, [ebp+var_840]
                call    sub_109061B0
                mov     ecx, [ebp+var_840]
                add     ecx, 14h
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax             ; Args
                push    offset aSdlc    ; "%sDLC\\"
                lea     eax, [ebp+Dest]
                push    eax             ; Dest
                call    sub_10901F50
                add     esp, 0Ch
                lea     ecx, [ebp+Dest]
                push    ecx
                mov     ecx, [ebp+var_840]
                add     ecx, 2Ch
                call    ds:??4dnString@@QAEAAV0@PB_W@Z ; dnString::operator=(wchar_t const *)
                mov     esp, ebp
                pop     ebp
                retn
sub_109065C0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10906620    proc near               ; CODE XREF: .text:10906660↓p
                                        ; sub_109066F0+210↓p ...

arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                push    esi
                push    edi
                push    1
                push    1
                mov     edi, ecx
                call    sub_10906340
                mov     edx, [edi]
                mov     esi, eax
                mov     eax, [ebp+arg_0]
                lea     ecx, [esi+esi*2]
                push    eax
                lea     ecx, [edx+ecx*4]
                call    ds:??4dnString@@QAEAAV0@ABV0@@Z ; dnString::operator=(dnString const &)
                pop     edi
                mov     eax, esi
                pop     esi
                pop     ebp
                retn    4
sub_10906620    endp

; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                sub     esp, 1Ch
                mov     [ebp-1Ch], ecx
                mov     eax, [ebp+8]
                push    eax
                mov     ecx, [ebp-1Ch]
                call    sub_10906620
                mov     esp, ebp
                pop     ebp
                retn    4
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10906670    proc near               ; CODE XREF: sub_10906B30+C↓p
                                        ; sub_109119F0+9↓p

var_14          = dword ptr -14h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 10910940 SIZE 00000023 BYTES

; __unwind { // SEH_10906670
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_10906670
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 8
                mov     [ebp+var_14], ecx
                mov     eax, [ebp+var_14]
                mov     dword ptr [eax], offset ??_7dnFileMgrDLC@@6B@ ; const dnFileMgrDLC::`vftable'
;   try {
                mov     [ebp+var_4], 2
                mov     ecx, [ebp+var_14]
                add     ecx, 2Ch
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
;   } // starts at 10906697
;   try {
                mov     byte ptr [ebp+var_4], 1
                mov     ecx, [ebp+var_14]
                add     ecx, 20h
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
;   } // starts at 109066AA
;   try {
                mov     byte ptr [ebp+var_4], 0
                mov     ecx, [ebp+var_14]
                add     ecx, 14h
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
;   } // starts at 109066BA
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_14]
                add     ecx, 8
                call    sub_10905860
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
; } // starts at 10906670
sub_10906670    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __stdcall sub_109066F0(int, LPCWSTR lpFileName, int, int, int, int)
sub_109066F0    proc near               ; DATA XREF: .rdata:10913484↓o

var_10D0        = dword ptr -10D0h
var_10CC        = dword ptr -10CCh
var_10C8        = dword ptr -10C8h
var_10C4        = dword ptr -10C4h
var_10C0        = dword ptr -10C0h
var_10A0        = dword ptr -10A0h
var_854         = dword ptr -854h
var_850         = dword ptr -850h
var_844         = dword ptr -844h
var_838         = dword ptr -838h
Dest            = word ptr -834h
var_30          = dword ptr -30h
var_24          = dword ptr -24h
var_18          = dword ptr -18h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8
lpFileName      = dword ptr  0Ch
arg_8           = dword ptr  10h
arg_C           = dword ptr  14h
arg_10          = dword ptr  18h
arg_14          = dword ptr  1Ch

; FUNCTION CHUNK AT 10910970 SIZE 0000004E BYTES

; __unwind { // SEH_109066F0
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_109066F0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                mov     eax, 10C4h
                call    __alloca_probe
                mov     [ebp+var_10C0], ecx
                mov     [ebp+var_854], 0
                mov     eax, ds:GIsUCC
                cmp     dword ptr [eax], 0
                jz      short loc_10906778
                mov     ecx, ds:g_UCCAllowDLCFiles
                cmp     dword ptr [ecx], 0
                jnz     short loc_10906778
                mov     edx, [ebp+arg_14]
                push    edx             ; int
                mov     eax, [ebp+arg_10]
                push    eax             ; int
                mov     ecx, [ebp+arg_C]
                push    ecx             ; int
                mov     edx, [ebp+arg_8]
                push    edx             ; int
                mov     eax, [ebp+lpFileName]
                push    eax             ; lpFileName
                mov     ecx, [ebp+arg_0]
                push    ecx             ; int
                mov     ecx, [ebp+var_10C0]
                call    sub_10905920
;   try {
                mov     [ebp+var_4], 0
                mov     edx, [ebp+var_854]
                or      edx, 1
                mov     [ebp+var_854], edx
                mov     eax, [ebp+arg_0]
                jmp     loc_1090694A
; ---------------------------------------------------------------------------

loc_10906778:                           ; CODE XREF: sub_109066F0+3A↑j
                                        ; sub_109066F0+45↑j
                push    offset Str2
                lea     ecx, [ebp+var_24]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
;   } // starts at 1090675A
;   try {
                mov     [ebp+var_4], 1
                lea     ecx, [ebp+var_30]
                call    sub_10902990
;   } // starts at 10906786
;   try {
                mov     byte ptr [ebp+var_4], 2
                lea     ecx, [ebp+var_18]
                call    sub_10902990
;   } // starts at 10906795
;   try {
                mov     byte ptr [ebp+var_4], 3
                mov     eax, [ebp+arg_14]
                push    eax             ; int
                mov     ecx, [ebp+arg_10]
                push    ecx             ; int
                mov     edx, [ebp+arg_C]
                push    edx             ; int
                mov     eax, [ebp+arg_8]
                push    eax             ; int
                mov     ecx, [ebp+lpFileName]
                push    ecx             ; lpFileName
                lea     edx, [ebp+var_844]
                push    edx             ; int
                mov     ecx, [ebp+var_10C0]
                call    sub_10905920
                mov     [ebp+var_10C4], eax
                mov     eax, [ebp+var_10C4]
                mov     [ebp+var_10C8], eax
;   } // starts at 109067A1
;   try {
                mov     byte ptr [ebp+var_4], 4
                mov     ecx, [ebp+var_10C8]
                push    ecx
                lea     ecx, [ebp+var_18]
                call    sub_10904FB0
;   } // starts at 109067DD
;   try {
                mov     byte ptr [ebp+var_4], 3
                lea     ecx, [ebp+var_844]
                call    sub_10905860
                lea     edx, [ebp+var_24]
                push    edx             ; int
                mov     eax, [ebp+lpFileName]
                push    eax             ; Str1
                mov     ecx, [ebp+var_10C0]
                add     ecx, 14h
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax             ; Str2
                mov     ecx, [ebp+var_10C0]
                call    sub_109063D0
                test    eax, eax
                jz      loc_109068B5
                lea     ecx, [ebp+var_24]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                mov     ecx, [ebp+var_10C0]
                add     ecx, 2Ch
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax             ; Args
                push    offset aSS      ; "%s%s"
                lea     ecx, [ebp+Dest]
                push    ecx             ; Dest
                call    sub_10901F50
                add     esp, 10h
                mov     edx, [ebp+arg_14]
                push    edx             ; int
                mov     eax, [ebp+arg_10]
                push    eax             ; int
                mov     ecx, [ebp+arg_C]
                push    ecx             ; int
                mov     edx, [ebp+arg_8]
                push    edx             ; int
                lea     eax, [ebp+Dest]
                push    eax             ; lpFileName
                lea     ecx, [ebp+var_850]
                push    ecx             ; int
                mov     ecx, [ebp+var_10C0]
                call    sub_10905920
                mov     [ebp+var_10CC], eax
                mov     edx, [ebp+var_10CC]
                mov     [ebp+var_10D0], edx
;   } // starts at 109067F0
;   try {
                mov     byte ptr [ebp+var_4], 5
                mov     eax, [ebp+var_10D0]
                push    eax
                lea     ecx, [ebp+var_30]
                call    sub_10904FB0
;   } // starts at 10906893
;   try {
                mov     byte ptr [ebp+var_4], 3
                lea     ecx, [ebp+var_850]
                call    sub_10905860

loc_109068B5:                           ; CODE XREF: sub_109066F0+134↑j
                mov     [ebp+var_838], 0
                jmp     short loc_109068D0
; ---------------------------------------------------------------------------

loc_109068C1:                           ; CODE XREF: sub_109066F0+215↓j
                mov     ecx, [ebp+var_838]
                add     ecx, 1
                mov     [ebp+var_838], ecx

loc_109068D0:                           ; CODE XREF: sub_109066F0+1CF↑j
                lea     ecx, [ebp+var_30]
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                cmp     [ebp+var_838], eax
                jge     short loc_10906907
                mov     edx, [ebp+var_838]
                push    edx
                lea     ecx, [ebp+var_30]
                call    sub_10906320
                mov     [ebp+var_10A0], eax
                mov     eax, [ebp+var_10A0]
                push    eax
                lea     ecx, [ebp+var_18]
                call    sub_10906620
                jmp     short loc_109068C1
; ---------------------------------------------------------------------------

loc_10906907:                           ; CODE XREF: sub_109066F0+1EF↑j
                lea     ecx, [ebp+var_18]
                push    ecx
                mov     ecx, [ebp+arg_0]
                call    sub_10905080
                mov     edx, [ebp+var_854]
                or      edx, 1
                mov     [ebp+var_854], edx
;   } // starts at 109068A6
;   try {
                mov     byte ptr [ebp+var_4], 2
                lea     ecx, [ebp+var_18]
                call    sub_10905860
;   } // starts at 10906922
;   try {
                mov     byte ptr [ebp+var_4], 1
                lea     ecx, [ebp+var_30]
                call    sub_10905860
;   } // starts at 1090692E
;   try {
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_24]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                mov     eax, [ebp+arg_0]

loc_1090694A:                           ; CODE XREF: sub_109066F0+83↑j
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    18h
;   } // starts at 1090693A
; } // starts at 109066F0
sub_109066F0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __stdcall sub_10906960(wchar_t *Str, int)
sub_10906960    proc near               ; CODE XREF: sub_10906FF0+47↓p
                                        ; sub_109070D0+47↓p

var_838         = dword ptr -838h
var_834         = dword ptr -834h
var_830         = dword ptr -830h
var_824         = dword ptr -824h
var_820         = dword ptr -820h
var_81C         = dword ptr -81Ch
var_810         = dword ptr -810h
Dest            = word ptr -80Ch
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
Str             = dword ptr  8
arg_4           = dword ptr  0Ch

; FUNCTION CHUNK AT 109109D0 SIZE 0000000B BYTES

; __unwind { // SEH_10906960
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_10906960
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 82Ch
                mov     [ebp+var_830], ecx
                mov     eax, ds:GIsUCC
                cmp     dword ptr [eax], 0
                jz      short loc_109069A0
                mov     ecx, ds:g_UCCAllowDLCFiles
                cmp     dword ptr [ecx], 0
                jnz     short loc_109069A0
                xor     eax, eax
                jmp     loc_10906B15
; ---------------------------------------------------------------------------

loc_109069A0:                           ; CODE XREF: sub_10906960+2C↑j
                                        ; sub_10906960+37↑j
                push    offset asc_109134CC ; "..\\"
                mov     edx, [ebp+Str]
                push    edx             ; Str
                call    ds:wcsstr
                add     esp, 8
                cmp     eax, [ebp+Str]
                jz      short loc_109069CE
                push    offset asc_109134C4 ; "../"
                mov     eax, [ebp+Str]
                push    eax             ; Str
                call    ds:wcsstr
                add     esp, 8
                cmp     eax, [ebp+Str]
                jnz     short loc_109069D7

loc_109069CE:                           ; CODE XREF: sub_10906960+55↑j
                mov     ecx, [ebp+Str]
                add     ecx, 6
                mov     [ebp+Str], ecx

loc_109069D7:                           ; CODE XREF: sub_10906960+6C↑j
                mov     ecx, [ebp+var_830]
                add     ecx, 8
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                sub     eax, 1
                mov     [ebp+var_810], eax
                jmp     short loc_10906A00
; ---------------------------------------------------------------------------

loc_109069F1:                           ; CODE XREF: sub_10906960+1AE↓j
                mov     edx, [ebp+var_810]
                sub     edx, 1
                mov     [ebp+var_810], edx

loc_10906A00:                           ; CODE XREF: sub_10906960+8F↑j
                cmp     [ebp+var_810], 0
                jl      loc_10906B13
                mov     eax, [ebp+Str]
                push    eax
                mov     ecx, [ebp+var_810]
                push    ecx
                mov     ecx, [ebp+var_830]
                add     ecx, 8
                call    sub_10906320
                mov     ecx, eax
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                mov     ecx, [ebp+var_830]
                add     ecx, 2Ch
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax             ; Args
                push    offset aSSS_0   ; "%s%s\\%s"
                lea     edx, [ebp+Dest]
                push    edx             ; Dest
                call    sub_10901F50
                add     esp, 14h
                push    1               ; int
                push    0               ; int
                push    0               ; int
                push    1               ; int
                lea     eax, [ebp+Dest]
                push    eax             ; lpFileName
                lea     ecx, [ebp+var_81C]
                push    ecx             ; int
                mov     ecx, [ebp+var_830]
                call    sub_10905920
;   try {
                mov     [ebp+var_4], 0
                lea     ecx, [ebp+var_81C]
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                test    eax, eax
                jle     short loc_10906AFC
                lea     edx, [ebp+Dest]
                push    edx
                mov     ecx, [ebp+arg_4]
                call    ds:??4dnString@@QAEAAV0@PB_W@Z ; dnString::operator=(wchar_t const *)
                mov     eax, [ebp+var_830]
                cmp     dword ptr [eax+38h], 0
                jz      short loc_10906AFC
                sub     esp, 0Ch
                mov     ecx, esp
                mov     [ebp+var_824], esp
                mov     edx, [ebp+arg_4]
                push    edx
                call    ds:??0dnString@@QAE@ABV0@@Z ; dnString::dnString(dnString const &)
                mov     [ebp+var_834], eax
                mov     eax, [ebp+var_830]
                mov     ecx, [eax+38h]
                call    ecx
                add     esp, 0Ch
                mov     [ebp+var_838], eax
                mov     edx, [ebp+var_838]
                mov     [ebp+var_820], edx
;   } // starts at 10906A74
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_81C]
                call    sub_10905860
                mov     eax, [ebp+var_820]
                jmp     short loc_10906B15
; ---------------------------------------------------------------------------

loc_10906AFC:                           ; CODE XREF: sub_10906960+129↑j
                                        ; sub_10906960+145↑j
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_81C]
                call    sub_10905860
                jmp     loc_109069F1
; ---------------------------------------------------------------------------

loc_10906B13:                           ; CODE XREF: sub_10906960+A7↑j
                xor     eax, eax

loc_10906B15:                           ; CODE XREF: sub_10906960+3B↑j
                                        ; sub_10906960+19A↑j
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    8
; } // starts at 10906960
sub_10906960    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10906B30    proc near               ; DATA XREF: .rdata:10913494↓o

var_8           = dword ptr -8
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 8
                mov     [ebp+var_8], ecx
                mov     ecx, [ebp+var_8]
                call    sub_10906670
                mov     eax, [ebp+arg_0]
                and     eax, 1
                jz      short loc_10906B55
                mov     ecx, [ebp+var_8]
                push    ecx
                call    sub_10901030
                add     esp, 4

loc_10906B55:                           ; CODE XREF: sub_10906B30+17↑j
                mov     eax, [ebp+var_8]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_10906B30    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10906B60    proc near               ; CODE XREF: sub_10906F00+27↓p
                                        ; DATA XREF: .rdata:10912E48↓o

var_50          = byte ptr -50h
var_44          = byte ptr -44h
var_38          = byte ptr -38h
var_34          = dword ptr -34h
var_2C          = byte ptr -2Ch
var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch

; FUNCTION CHUNK AT 109109F0 SIZE 0000006A BYTES

; __unwind { // SEH_10906B60
                push    ebp
                mov     ebp, esp
                mov     eax, large fs:0
                push    0FFFFFFFFh
                push    offset SEH_10906B60
                push    eax
                mov     large fs:0, esp
                sub     esp, 44h
                push    esi
                push    edi
                mov     edi, [ebp+arg_0]
                mov     eax, edi
                mov     esi, ecx
                lea     edx, [eax+2]

loc_10906B87:                           ; CODE XREF: sub_10906B60+30↓j
                mov     cx, [eax]
                add     eax, 2
                test    cx, cx
                jnz     short loc_10906B87
                sub     eax, edx
                sar     eax, 1
                jnz     short loc_10906BAC
                pop     edi
                xor     eax, eax
                pop     esi
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    0Ch
; ---------------------------------------------------------------------------

loc_10906BAC:                           ; CODE XREF: sub_10906B60+36↑j
                push    ebx
                push    edi
                lea     ecx, [ebp+var_44]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
                push    offset asc_109134D4 ; "*"
                lea     ecx, [ebp+var_2C]
                push    ecx
                xor     ebx, ebx
                mov     ecx, eax
;   try {
                mov     [ebp+var_4], ebx
                call    ds:??DdnString@@QBE?AV0@PB_W@Z ; dnString::operator*(wchar_t const *)
                lea     ecx, [ebp+var_44]
;   } // starts at 10906BC4
;   try {
                mov     byte ptr [ebp+var_4], 2
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                mov     edi, [esi]
                push    ebx
                push    ebx
                push    ebx
                push    1
                lea     ecx, [ebp+var_2C]
                add     edi, 40h
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                mov     eax, [edi]
                lea     edx, [ebp+var_20]
                push    edx
                mov     ecx, esi
                call    eax
                lea     ecx, [ebp+var_20]
;   } // starts at 10906BD0
;   try {
                mov     byte ptr [ebp+var_4], 3
                mov     [ebp+var_14], ebx
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                test    eax, eax
                jle     loc_10906C9A
                mov     [ebp+var_10], ebx

loc_10906C13:                           ; CODE XREF: sub_10906B60+132↓j
                mov     ecx, [ebp+arg_0]
                push    ecx
                lea     ecx, [ebp+var_50]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
                mov     edx, [ebp+var_20]
                mov     ecx, [ebp+var_10]
                add     ecx, edx
                push    ecx
                lea     edx, [ebp+var_38]
                push    edx
                mov     ecx, eax
;   } // starts at 10906BFB
;   try {
                mov     byte ptr [ebp+var_4], 4
                call    ds:??DdnString@@QBE?AV0@ABV0@@Z ; dnString::operator*(dnString const &)
                mov     edi, [esi]
                push    1
                push    1
                mov     ecx, eax
;   } // starts at 10906C2F
;   try {
                mov     byte ptr [ebp+var_4], 5
                add     edi, 24h
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                mov     eax, [edi]
                mov     ecx, esi
                call    eax
                test    eax, eax
                lea     ecx, [ebp+var_38]
                setz    bl
;   } // starts at 10906C41
;   try {
                mov     byte ptr [ebp+var_4], 4
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                lea     ecx, [ebp+var_50]
;   } // starts at 10906C5D
;   try {
                mov     byte ptr [ebp+var_4], 3
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                test    bl, bl
                jnz     loc_10906E05
                mov     edi, [ebp+var_14]
                add     [ebp+var_10], 0Ch
                inc     edi
                lea     ecx, [ebp+var_20]
                mov     [ebp+var_14], edi
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                cmp     edi, eax
                jl      loc_10906C13
                xor     ebx, ebx

loc_10906C9A:                           ; CODE XREF: sub_10906B60+AA↑j
                mov     edi, [esi]
                push    ebx
                push    ebx
                push    1
                push    ebx
                lea     ecx, [ebp+var_2C]
                add     edi, 40h
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                mov     eax, [edi]
                lea     edx, [ebp+var_38]
                push    edx
                mov     ecx, esi
                call    eax
                push    eax
                lea     ecx, [ebp+var_20]
;   } // starts at 10906C6A
;   try {
                mov     byte ptr [ebp+var_4], 7
                call    sub_10904FB0
                mov     ecx, [ebp+var_34]
                push    ecx
                push    ebx
                lea     ecx, [ebp+var_38]
;   } // starts at 10906CBC
;   try {
                mov     byte ptr [ebp+var_4], 8
                call    sub_10905110
                lea     ecx, [ebp+var_38]
;   } // starts at 10906CCD
;   try {
                mov     byte ptr [ebp+var_4], 3
                call    ds:??1dnArrayBase@@QAE@XZ ; dnArrayBase::~dnArrayBase(void)
                lea     ecx, [ebp+var_20]
                mov     [ebp+var_14], ebx
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                test    eax, eax
                jle     loc_10906D87
                mov     [ebp+var_10], ebx
                lea     ebx, [ebx+0]

loc_10906D00:                           ; CODE XREF: sub_10906B60+21F↓j
                mov     edx, [ebp+arg_0]
                push    edx
                lea     ecx, [ebp+var_38]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
                mov     ecx, [ebp+var_20]
                mov     edx, [ebp+var_10]
                add     ecx, edx
                push    ecx
                lea     ecx, [ebp+var_50]
                push    ecx
                mov     ecx, eax
;   } // starts at 10906CD9
;   try {
                mov     byte ptr [ebp+var_4], 9
                call    ds:??DdnString@@QBE?AV0@ABV0@@Z ; dnString::operator*(dnString const &)
                mov     edi, [esi]
                push    1
                push    1
                mov     ecx, eax
;   } // starts at 10906D1C
;   try {
                mov     byte ptr [ebp+var_4], 0Ah
                add     edi, 3Ch
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                mov     edx, [edi]
                push    eax
                mov     ecx, esi
                call    edx
                test    eax, eax
                lea     ecx, [ebp+var_50]
                setz    bl
;   } // starts at 10906D2E
;   try {
                mov     byte ptr [ebp+var_4], 9
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                lea     ecx, [ebp+var_38]
;   } // starts at 10906D4A
;   try {
                mov     byte ptr [ebp+var_4], 3
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                test    bl, bl
                jnz     loc_10906E49
                mov     edi, [ebp+var_14]
                add     [ebp+var_10], 0Ch
                inc     edi
                lea     ecx, [ebp+var_20]
                mov     [ebp+var_14], edi
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                cmp     edi, eax
                jl      loc_10906D00
                xor     ebx, ebx

loc_10906D87:                           ; CODE XREF: sub_10906B60+191↑j
                mov     eax, [ebp+arg_4]
                mov     ecx, [ebp+arg_0]
                mov     edx, [esi]
                mov     edx, [edx+3Ch]
                push    ebx
                push    eax
                push    ecx
                mov     ecx, esi
                call    edx
                mov     [ebp+arg_0], eax
                mov     eax, [ebp+var_1C]
;   } // starts at 10906D57
;   try {
                mov     byte ptr [ebp+var_4], 0Ch
                mov     ebx, eax
                test    eax, eax
                jz      short loc_10906DD2
                jle     short loc_10906DC4
                xor     esi, esi
                mov     edi, eax
                nop

loc_10906DB0:                           ; CODE XREF: sub_10906B60+262↓j
                mov     eax, [ebp+var_20]
                lea     ecx, [esi+eax]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                add     esi, 0Ch
                sub     edi, 1
                jnz     short loc_10906DB0

loc_10906DC4:                           ; CODE XREF: sub_10906B60+249↑j
                push    0Ch
                push    ebx
                push    0
                lea     ecx, [ebp+var_20]
                call    ds:?Remove@dnArrayBase@@QAEXHHH@Z ; dnArrayBase::Remove(int,int,int)

loc_10906DD2:                           ; CODE XREF: sub_10906B60+247↑j
                lea     ecx, [ebp+var_20]
;   } // starts at 10906D9F
;   try {
                mov     byte ptr [ebp+var_4], 2
                call    ds:??1dnArrayBase@@QAE@XZ ; dnArrayBase::~dnArrayBase(void)
                lea     ecx, [ebp+var_2C]
;   } // starts at 10906DD5
                mov     [ebp+var_4], 0FFFFFFFFh
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                mov     eax, [ebp+arg_0]
                pop     ebx
                pop     edi
                pop     esi
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    0Ch
; ---------------------------------------------------------------------------

loc_10906E05:                           ; CODE XREF: sub_10906B60+116↑j
                mov     ecx, [ebp+var_1C]
                push    ecx
                push    0
                lea     ecx, [ebp+var_20]
;   try {
                mov     byte ptr [ebp+var_4], 6
                call    sub_10905110
                lea     ecx, [ebp+var_20]
;   } // starts at 10906E0E
;   try {
                mov     byte ptr [ebp+var_4], 2
                call    ds:??1dnArrayBase@@QAE@XZ ; dnArrayBase::~dnArrayBase(void)
                lea     ecx, [ebp+var_2C]
;   } // starts at 10906E1A
                mov     [ebp+var_4], 0FFFFFFFFh
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                pop     ebx
                pop     edi
                xor     eax, eax
                pop     esi
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    0Ch
; ---------------------------------------------------------------------------

loc_10906E49:                           ; CODE XREF: sub_10906B60+203↑j
                mov     edi, [ebp+var_1C]
;   try {
                mov     byte ptr [ebp+var_4], 0Bh
                mov     ebx, edi
                test    edi, edi
                jz      short loc_10906E82
                jle     short loc_10906E74
                xor     esi, esi
                lea     ebx, [ebx+0]

loc_10906E60:                           ; CODE XREF: sub_10906B60+312↓j
                mov     eax, [ebp+var_20]
                lea     ecx, [esi+eax]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                add     esi, 0Ch
                sub     edi, 1
                jnz     short loc_10906E60

loc_10906E74:                           ; CODE XREF: sub_10906B60+2F6↑j
                push    0Ch
                push    ebx
                push    0
                lea     ecx, [ebp+var_20]
                call    ds:?Remove@dnArrayBase@@QAEXHHH@Z ; dnArrayBase::Remove(int,int,int)

loc_10906E82:                           ; CODE XREF: sub_10906B60+2F4↑j
                lea     ecx, [ebp+var_20]
;   } // starts at 10906E4C
;   try {
                mov     byte ptr [ebp+var_4], 2
                call    ds:??1dnArrayBase@@QAE@XZ ; dnArrayBase::~dnArrayBase(void)
                lea     ecx, [ebp+var_2C]
;   } // starts at 10906E85
                mov     [ebp+var_4], 0FFFFFFFFh
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                mov     ecx, [ebp+var_C]
                pop     ebx
                pop     edi
                xor     eax, eax
                pop     esi
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    0Ch
; } // starts at 10906B60
sub_10906B60    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


sub_10906EC0    proc near               ; CODE XREF: .text:109071AC↓p
                                        ; sub_109071C0+C↓p ...
                push    esi
                mov     esi, ecx
                push    edi
                mov     edi, [esi+0Ch]
                test    edi, edi
                jz      short loc_10906EDB
                call    ds:?GetMalloc@@YAPAVFMalloc@@XZ ; GetMalloc(void)
                mov     edx, [eax]
                mov     ecx, eax
                mov     eax, [edx+10h]
                push    edi
                call    eax

loc_10906EDB:                           ; CODE XREF: sub_10906EC0+9↑j
                pop     edi
                mov     dword ptr [esi+0Ch], 0
                mov     dword ptr [esi+10h], 0
                mov     ecx, esi
                pop     esi
                jmp     sub_109058D0
sub_10906EC0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __stdcall sub_10906F00(LPCWSTR lpPathName, int, int)
sub_10906F00    proc near               ; DATA XREF: .rdata:10912F98↓o
                                        ; .rdata:10913480↓o

var_9C          = dword ptr -9Ch
var_98          = dword ptr -98h
var_94          = dword ptr -94h
var_90          = dword ptr -90h
var_8C          = dword ptr -8Ch
lpPathName      = dword ptr  8
arg_4           = dword ptr  0Ch
arg_8           = dword ptr  10h

                push    ebp
                mov     ebp, esp
                sub     esp, 9Ch
                mov     [ebp+var_90], ecx
                cmp     [ebp+arg_8], 0
                jz      short loc_10906F31
                mov     eax, [ebp+arg_8]
                push    eax
                mov     ecx, [ebp+arg_4]
                push    ecx
                mov     edx, [ebp+lpPathName]
                push    edx
                mov     ecx, [ebp+var_90]
                call    sub_10906B60
                jmp     loc_10906FDC
; ---------------------------------------------------------------------------

loc_10906F31:                           ; CODE XREF: sub_10906F00+13↑j
                mov     eax, ds:GUnicodeOS
                cmp     dword ptr [eax], 0
                jz      short loc_10906F4D
                mov     ecx, [ebp+lpPathName]
                push    ecx             ; lpPathName
                call    ds:RemoveDirectoryW
                mov     [ebp+var_94], eax
                jmp     short loc_10906FA6
; ---------------------------------------------------------------------------

loc_10906F4D:                           ; CODE XREF: sub_10906F00+39↑j
                mov     edx, [ebp+lpPathName]
                push    edx
                call    ds:?dnWinGetSizeANSI@@YAHPB_W@Z ; dnWinGetSizeANSI(wchar_t const *)
                add     esp, 4
                mov     [ebp+var_8C], eax
                mov     eax, [ebp+var_8C]
                add     eax, 7
                and     eax, 0FFFFFFF8h
                call    __alloca_probe_16
                mov     [ebp+var_98], esp
                mov     eax, [ebp+lpPathName]
                push    eax
                call    ds:?dnWinGetSizeANSI@@YAHPB_W@Z ; dnWinGetSizeANSI(wchar_t const *)
                add     esp, 4
                push    eax
                mov     ecx, [ebp+lpPathName]
                push    ecx
                mov     edx, [ebp+var_98]
                push    edx
                call    ds:?dnWinToANSI@@YAPADPADPB_WH@Z ; dnWinToANSI(char *,wchar_t const *,int)
                add     esp, 0Ch
                push    eax             ; lpPathName
                call    ds:RemoveDirectoryA
                mov     [ebp+var_94], eax

loc_10906FA6:                           ; CODE XREF: sub_10906F00+4B↑j
                cmp     [ebp+var_94], 0
                jnz     short loc_10906FCC
                cmp     [ebp+arg_4], 0
                jnz     short loc_10906FC0
                call    ds:GetLastError
                cmp     eax, 2
                jz      short loc_10906FCC

loc_10906FC0:                           ; CODE XREF: sub_10906F00+B3↑j
                mov     [ebp+var_9C], 0
                jmp     short loc_10906FD6
; ---------------------------------------------------------------------------

loc_10906FCC:                           ; CODE XREF: sub_10906F00+AD↑j
                                        ; sub_10906F00+BE↑j
                mov     [ebp+var_9C], 1

loc_10906FD6:                           ; CODE XREF: sub_10906F00+CA↑j
                mov     eax, [ebp+var_9C]

loc_10906FDC:                           ; CODE XREF: sub_10906F00+2C↑j
                lea     esp, [ebp-9Ch]
                mov     esp, ebp
                pop     ebp
                retn    0Ch
sub_10906F00    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __stdcall sub_10906FF0(wchar_t *Str, int, int)
sub_10906FF0    proc near               ; DATA XREF: .rdata:1091345C↓o

var_894         = dword ptr -894h
var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
Str             = dword ptr  8
arg_4           = dword ptr  0Ch
arg_8           = dword ptr  10h

; FUNCTION CHUNK AT 10910A70 SIZE 00000009 BYTES

; __unwind { // SEH_10906FF0
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_10906FF0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 888h
                mov     [ebp+var_894], ecx
                push    offset Str2
                lea     ecx, [ebp+var_18]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
;   try {
                mov     [ebp+var_4], 0
                lea     eax, [ebp+var_18]
                push    eax             ; int
                mov     ecx, [ebp+Str]
                push    ecx             ; Str
                mov     ecx, [ebp+var_894]
                call    sub_10906960
                test    eax, eax
                jnz     short loc_10907071
                mov     edx, [ebp+arg_8]
                push    edx             ; int
                mov     eax, [ebp+arg_4]
                push    eax             ; int
                mov     ecx, [ebp+Str]
                push    ecx             ; lpFileName
                mov     ecx, [ebp+var_894]
                call    sub_10904310
                mov     [ebp+var_1C], eax
;   } // starts at 10907022
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_18]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                mov     eax, [ebp+var_1C]
                jmp     short loc_109070B6
; ---------------------------------------------------------------------------
                jmp     short loc_109070A6
; ---------------------------------------------------------------------------

loc_10907071:                           ; CODE XREF: sub_10906FF0+4E↑j
                mov     edx, [ebp+arg_8]
                push    edx             ; int
                mov     eax, [ebp+arg_4]
                push    eax             ; int
                lea     ecx, [ebp+var_18]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax             ; lpFileName
                mov     ecx, [ebp+var_894]
                call    sub_10904310
                mov     [ebp+var_20], eax
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_18]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                mov     eax, [ebp+var_20]
                jmp     short loc_109070B6
; ---------------------------------------------------------------------------

loc_109070A6:                           ; CODE XREF: sub_10906FF0+7F↑j
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_18]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)

loc_109070B6:                           ; CODE XREF: sub_10906FF0+7D↑j
                                        ; sub_10906FF0+B4↑j
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    0Ch
; } // starts at 10906FF0
sub_10906FF0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __stdcall sub_109070D0(wchar_t *Str)
sub_109070D0    proc near               ; DATA XREF: .rdata:10913464↓o

var_854         = dword ptr -854h
var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
Str             = dword ptr  8

; FUNCTION CHUNK AT 10910A90 SIZE 00000009 BYTES

; __unwind { // SEH_109070D0
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_109070D0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 848h
                mov     [ebp+var_854], ecx
                push    offset Str2
                lea     ecx, [ebp+var_18]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
;   try {
                mov     [ebp+var_4], 0
                lea     eax, [ebp+var_18]
                push    eax             ; int
                mov     ecx, [ebp+Str]
                push    ecx             ; Str
                mov     ecx, [ebp+var_854]
                call    sub_10906960
                test    eax, eax
                jnz     short loc_10907149
                mov     edx, [ebp+Str]
                push    edx             ; lpFileName
                mov     ecx, [ebp+var_854]
                call    sub_10903C20
                mov     [ebp+var_1C], eax
;   } // starts at 10907102
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_18]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                mov     eax, [ebp+var_1C]
                jmp     short loc_10907186
; ---------------------------------------------------------------------------
                jmp     short loc_10907176
; ---------------------------------------------------------------------------

loc_10907149:                           ; CODE XREF: sub_109070D0+4E↑j
                lea     ecx, [ebp+var_18]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax             ; lpFileName
                mov     ecx, [ebp+var_854]
                call    sub_10903C20
                mov     [ebp+var_20], eax
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_18]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                mov     eax, [ebp+var_20]
                jmp     short loc_10907186
; ---------------------------------------------------------------------------

loc_10907176:                           ; CODE XREF: sub_109070D0+77↑j
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_18]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)

loc_10907186:                           ; CODE XREF: sub_109070D0+75↑j
                                        ; sub_109070D0+A4↑j
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    4
; } // starts at 109070D0
sub_109070D0    endp

; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                sub     esp, 0Ch
                mov     [ebp-0Ch], ecx
                mov     ecx, [ebp-0Ch]
                call    sub_10906EC0
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_109071C0    proc near               ; CODE XREF: sub_1090A940+67AE↓j
                                        ; sub_1090C7B0+4BEC↓j ...

var_C           = dword ptr -0Ch

                push    ebp
                mov     ebp, esp
                sub     esp, 0Ch
                mov     [ebp+var_C], ecx
                mov     ecx, [ebp+var_C]
                call    sub_10906EC0
                mov     esp, ebp
                pop     ebp
                retn
sub_109071C0    endp

; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset sub_10910ABC
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 10h
                mov     [ebp-1Ch], ecx
                mov     dword ptr [ebp-4], 0
                mov     eax, [ebp-1Ch]
                add     eax, 10h
                mov     [ebp-18h], eax
                mov     ecx, [ebp-18h]
                call    sub_10906EC0
                mov     dword ptr [ebp-4], 0FFFFFFFFh
                mov     ecx, [ebp-1Ch]
                add     ecx, 4
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                mov     ecx, [ebp-0Ch]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset sub_10910ADC
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 10h
                mov     [ebp-1Ch], ecx
                mov     dword ptr [ebp-4], 0
                mov     eax, [ebp-1Ch]
                add     eax, 10h
                mov     [ebp-18h], eax
                mov     ecx, [ebp-18h]
                call    sub_10906EC0
                mov     dword ptr [ebp-4], 0FFFFFFFFh
                mov     ecx, [ebp-1Ch]
                add     ecx, 4
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                mov     ecx, [ebp+8]
                and     ecx, 1
                jz      short loc_1090729D
                mov     edx, [ebp-1Ch]
                push    edx
                call    sub_10901030
                add     esp, 4

loc_1090729D:                           ; CODE XREF: .text:1090728F↑j
                mov     eax, [ebp-1Ch]
                mov     ecx, [ebp-0Ch]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    4

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_109072B0    proc near               ; CODE XREF: sub_10907370+31↓p
                                        ; sub_109073D0+63↓p

var_24          = dword ptr -24h
var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch

; FUNCTION CHUNK AT 10910AF0 SIZE 0000000C BYTES

; __unwind { // SEH_109072B0
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_109072B0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 18h
                mov     [ebp+var_24], ecx
                cmp     [ebp+arg_4], 0
                jnz     short loc_109072D9
                jmp     loc_1090735F
; ---------------------------------------------------------------------------

loc_109072D9:                           ; CODE XREF: sub_109072B0+22↑j
                mov     eax, 1
                test    eax, eax
                jz      short loc_1090734C
                mov     ecx, [ebp+arg_0]
                mov     [ebp+var_10], ecx
                jmp     short loc_109072F3
; ---------------------------------------------------------------------------

loc_109072EA:                           ; CODE XREF: sub_109072B0:loc_1090734A↓j
                mov     edx, [ebp+var_10]
                add     edx, 1
                mov     [ebp+var_10], edx

loc_109072F3:                           ; CODE XREF: sub_109072B0+38↑j
                mov     eax, [ebp+arg_0]
                add     eax, [ebp+arg_4]
                cmp     [ebp+var_10], eax
                jge     short loc_1090734C
                mov     ecx, [ebp+var_10]
                imul    ecx, 24h
                mov     edx, [ebp+var_24]
                add     ecx, [edx]
                mov     [ebp+var_20], ecx
;   try {
                mov     [ebp+var_4], 0
                mov     eax, [ebp+var_20]
                add     eax, 10h
                mov     [ebp+var_1C], eax
                mov     ecx, [ebp+var_1C]
                call    sub_10906EC0
;   } // starts at 1090730C
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_20]
                add     ecx, 4
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                xor     ecx, ecx
                and     ecx, 1
                jz      short loc_1090734A
                mov     edx, [ebp+var_20]
                push    edx
                call    sub_10901030
                add     esp, 4

loc_1090734A:                           ; CODE XREF: sub_109072B0+8C↑j
                jmp     short loc_109072EA
; ---------------------------------------------------------------------------

loc_1090734C:                           ; CODE XREF: sub_109072B0+30↑j
                                        ; sub_109072B0+4C↑j
                push    24h
                mov     eax, [ebp+arg_4]
                push    eax
                mov     ecx, [ebp+arg_0]
                push    ecx
                mov     ecx, [ebp+var_24]
                call    ds:?Remove@dnArrayBase@@QAEXHHH@Z ; dnArrayBase::Remove(int,int,int)

loc_1090735F:                           ; CODE XREF: sub_109072B0+24↑j
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    8
; } // starts at 109072B0
sub_109072B0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10907370    proc near               ; CODE XREF: sub_1090A6E0+6993↓j
                                        ; sub_1090A890+6823↓j ...

var_20          = dword ptr -20h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 10910B10 SIZE 00000009 BYTES

; __unwind { // SEH_10907370
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_10907370
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 14h
                mov     [ebp+var_20], ecx
;   try {
                mov     [ebp+var_4], 0
                mov     eax, [ebp+var_20]
                mov     ecx, [eax+4]
                push    ecx
                push    0
                mov     ecx, [ebp+var_20]
                call    sub_109072B0
;   } // starts at 1090738E
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_20]
                call    ds:??1dnArrayBase@@QAE@XZ ; dnArrayBase::~dnArrayBase(void)
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
; } // starts at 10907370
sub_10907370    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_109073D0    proc near               ; CODE XREF: .text:1090746C↓p
                                        ; sub_10907480+C↓p ...

var_24          = dword ptr -24h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 10910B30 SIZE 00000009 BYTES

; __unwind { // SEH_109073D0
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_109073D0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 18h
                mov     [ebp+var_24], ecx
                mov     eax, [ebp+var_24]
                cmp     dword ptr [eax+0Ch], 0
                jz      short loc_1090740C
                mov     ecx, [ebp+var_24]
                mov     edx, [ecx+0Ch]
                mov     [ebp+var_10], edx
                mov     eax, [ebp+var_10]
                push    eax
                call    sub_10901030
                add     esp, 4

loc_1090740C:                           ; CODE XREF: sub_109073D0+25↑j
                mov     ecx, [ebp+var_24]
                mov     dword ptr [ecx+0Ch], 0
                mov     edx, [ebp+var_24]
                mov     dword ptr [edx+10h], 0
;   try {
                mov     [ebp+var_4], 0
                mov     eax, [ebp+var_24]
                mov     ecx, [eax+4]
                push    ecx
                push    0
                mov     ecx, [ebp+var_24]
                call    sub_109072B0
;   } // starts at 10907420
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_24]
                call    ds:??1dnArrayBase@@QAE@XZ ; dnArrayBase::~dnArrayBase(void)
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
; } // starts at 109073D0
sub_109073D0    endp

; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                sub     esp, 18h
                mov     [ebp-18h], ecx
                mov     ecx, [ebp-18h]
                call    sub_109073D0
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10907480    proc near               ; CODE XREF: sub_1090B840+5A36↓j
                                        ; sub_1090CBA0+4875↓j ...

var_18          = dword ptr -18h

                push    ebp
                mov     ebp, esp
                sub     esp, 18h
                mov     [ebp+var_18], ecx
                mov     ecx, [ebp+var_18]
                call    sub_109073D0
                mov     esp, ebp
                pop     ebp
                retn
sub_10907480    endp

; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset sub_10910B5C
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 18h
                mov     [ebp-24h], ecx
                mov     dword ptr [ebp-4], 0
                mov     eax, [ebp-24h]
                add     eax, 10h
                mov     [ebp-20h], eax
                mov     ecx, [ebp-20h]
                call    sub_109073D0
                mov     dword ptr [ebp-4], 0FFFFFFFFh
                mov     ecx, [ebp-24h]
                add     ecx, 4
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                mov     ecx, [ebp-0Ch]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset sub_10910B7C
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 18h
                mov     [ebp-24h], ecx
                mov     dword ptr [ebp-4], 0
                mov     eax, [ebp-24h]
                add     eax, 10h
                mov     [ebp-20h], eax
                mov     ecx, [ebp-20h]
                call    sub_109073D0
                mov     dword ptr [ebp-4], 0FFFFFFFFh
                mov     ecx, [ebp-24h]
                add     ecx, 4
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                mov     ecx, [ebp+8]
                and     ecx, 1
                jz      short loc_1090755D
                mov     edx, [ebp-24h]
                push    edx
                call    sub_10901030
                add     esp, 4

loc_1090755D:                           ; CODE XREF: .text:1090754F↑j
                mov     eax, [ebp-24h]
                mov     ecx, [ebp-0Ch]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    4

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10907570    proc near               ; CODE XREF: sub_10907630+31↓p
                                        ; sub_10907700+63↓p ...

var_2C          = dword ptr -2Ch
var_28          = dword ptr -28h
var_24          = dword ptr -24h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch

; FUNCTION CHUNK AT 10910B90 SIZE 0000000C BYTES

; __unwind { // SEH_10907570
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_10907570
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 20h
                mov     [ebp+var_2C], ecx
                cmp     [ebp+arg_4], 0
                jnz     short loc_10907599
                jmp     loc_1090761F
; ---------------------------------------------------------------------------

loc_10907599:                           ; CODE XREF: sub_10907570+22↑j
                mov     eax, 1
                test    eax, eax
                jz      short loc_1090760C
                mov     ecx, [ebp+arg_0]
                mov     [ebp+var_10], ecx
                jmp     short loc_109075B3
; ---------------------------------------------------------------------------

loc_109075AA:                           ; CODE XREF: sub_10907570:loc_1090760A↓j
                mov     edx, [ebp+var_10]
                add     edx, 1
                mov     [ebp+var_10], edx

loc_109075B3:                           ; CODE XREF: sub_10907570+38↑j
                mov     eax, [ebp+arg_0]
                add     eax, [ebp+arg_4]
                cmp     [ebp+var_10], eax
                jge     short loc_1090760C
                mov     ecx, [ebp+var_10]
                imul    ecx, 2Ch
                mov     edx, [ebp+var_2C]
                add     ecx, [edx]
                mov     [ebp+var_28], ecx
;   try {
                mov     [ebp+var_4], 0
                mov     eax, [ebp+var_28]
                add     eax, 10h
                mov     [ebp+var_24], eax
                mov     ecx, [ebp+var_24]
                call    sub_109073D0
;   } // starts at 109075CC
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_28]
                add     ecx, 4
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                xor     ecx, ecx
                and     ecx, 1
                jz      short loc_1090760A
                mov     edx, [ebp+var_28]
                push    edx
                call    sub_10901030
                add     esp, 4

loc_1090760A:                           ; CODE XREF: sub_10907570+8C↑j
                jmp     short loc_109075AA
; ---------------------------------------------------------------------------

loc_1090760C:                           ; CODE XREF: sub_10907570+30↑j
                                        ; sub_10907570+4C↑j
                push    2Ch
                mov     eax, [ebp+arg_4]
                push    eax
                mov     ecx, [ebp+arg_0]
                push    ecx
                mov     ecx, [ebp+var_2C]
                call    ds:?Remove@dnArrayBase@@QAEXHHH@Z ; dnArrayBase::Remove(int,int,int)

loc_1090761F:                           ; CODE XREF: sub_10907570+24↑j
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    8
; } // starts at 10907570
sub_10907570    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10907630    proc near               ; CODE XREF: sub_10910BD0+3↓j
                                        ; sub_10910C10+3↓j ...

var_20          = dword ptr -20h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 10910BB0 SIZE 00000009 BYTES

; __unwind { // SEH_10907630
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_10907630
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 14h
                mov     [ebp+var_20], ecx
;   try {
                mov     [ebp+var_4], 0
                mov     eax, [ebp+var_20]
                mov     ecx, [eax+4]
                push    ecx
                push    0
                mov     ecx, [ebp+var_20]
                call    sub_10907570
;   } // starts at 1090764E
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_20]
                call    ds:??1dnArrayBase@@QAE@XZ ; dnArrayBase::~dnArrayBase(void)
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
; } // starts at 10907630
sub_10907630    endp

; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset sub_10910BD8
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 30h
                mov     [ebp-3Ch], ecx
                mov     ecx, [ebp-3Ch]
                call    ds:??0dnArrayBase@@QAE@XZ ; dnArrayBase::dnArrayBase(void)
                mov     dword ptr [ebp-4], 0
                mov     eax, [ebp-3Ch]
                mov     dword ptr [eax+0Ch], 0
                mov     ecx, [ebp-3Ch]
                mov     dword ptr [ecx+10h], 8
                mov     ecx, [ebp-3Ch]
                call    sub_10904AD0
                mov     dword ptr [ebp-4], 0FFFFFFFFh
                mov     eax, [ebp-3Ch]
                mov     ecx, [ebp-0Ch]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10907700    proc near               ; CODE XREF: .text:1090780C↓p
                                        ; sub_10907890+C↓p ...

var_24          = dword ptr -24h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 10910BF0 SIZE 00000009 BYTES

; __unwind { // SEH_10907700
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_10907700
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 18h
                mov     [ebp+var_24], ecx
                mov     eax, [ebp+var_24]
                cmp     dword ptr [eax+0Ch], 0
                jz      short loc_1090773C
                mov     ecx, [ebp+var_24]
                mov     edx, [ecx+0Ch]
                mov     [ebp+var_10], edx
                mov     eax, [ebp+var_10]
                push    eax
                call    sub_10901030
                add     esp, 4

loc_1090773C:                           ; CODE XREF: sub_10907700+25↑j
                mov     ecx, [ebp+var_24]
                mov     dword ptr [ecx+0Ch], 0
                mov     edx, [ebp+var_24]
                mov     dword ptr [edx+10h], 0
;   try {
                mov     [ebp+var_4], 0
                mov     eax, [ebp+var_24]
                mov     ecx, [eax+4]
                push    ecx
                push    0
                mov     ecx, [ebp+var_24]
                call    sub_10907570
;   } // starts at 10907750
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_24]
                call    ds:??1dnArrayBase@@QAE@XZ ; dnArrayBase::~dnArrayBase(void)
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
; } // starts at 10907700
sub_10907700    endp

; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset sub_10910C18
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 30h
                mov     [ebp-3Ch], ecx
                mov     ecx, [ebp-3Ch]
                call    ds:??0dnArrayBase@@QAE@XZ ; dnArrayBase::dnArrayBase(void)
                mov     dword ptr [ebp-4], 0
                mov     eax, [ebp-3Ch]
                mov     dword ptr [eax+0Ch], 0
                mov     ecx, [ebp-3Ch]
                mov     dword ptr [ecx+10h], 8
                mov     ecx, [ebp-3Ch]
                call    sub_10904AD0
                mov     dword ptr [ebp-4], 0FFFFFFFFh
                mov     eax, [ebp-3Ch]
                mov     ecx, [ebp-0Ch]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                sub     esp, 18h
                mov     [ebp-18h], ecx
                mov     ecx, [ebp-18h]
                call    sub_10907700
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset sub_10910C38
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 30h
                mov     [ebp-3Ch], ecx
                mov     ecx, [ebp-3Ch]
                call    ds:??0dnArrayBase@@QAE@XZ ; dnArrayBase::dnArrayBase(void)
                mov     dword ptr [ebp-4], 0
                mov     eax, [ebp-3Ch]
                mov     dword ptr [eax+0Ch], 0
                mov     ecx, [ebp-3Ch]
                mov     dword ptr [ecx+10h], 8
                mov     ecx, [ebp-3Ch]
                call    sub_10904AD0
                mov     dword ptr [ebp-4], 0FFFFFFFFh
                mov     eax, [ebp-3Ch]
                mov     ecx, [ebp-0Ch]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10907890    proc near               ; CODE XREF: sub_109078B0+93B6↓j
                                        ; sub_1090CDC0+4694↓j

var_18          = dword ptr -18h

                push    ebp
                mov     ebp, esp
                sub     esp, 18h
                mov     [ebp+var_18], ecx
                mov     ecx, [ebp+var_18]
                call    sub_10907700
                mov     esp, ebp
                pop     ebp
                retn
sub_10907890    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_109078B0    proc near               ; CODE XREF: sub_1090CEE0+47↓p
                                        ; sub_1090CF60+24A↓p ...

var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 10910C50 SIZE 00000033 BYTES

; __unwind { // SEH_109078B0
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_109078B0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 8
                mov     [ebp+var_14], ecx
                mov     eax, [ebp+var_14]
                mov     dword ptr [eax], offset ??_7dnConfigCache@@6B@ ; const dnConfigCache::`vftable'
;   try {
                mov     [ebp+var_4], 0
                mov     ecx, [ebp+var_14]
                add     ecx, 4
                mov     [ebp+var_10], ecx
                mov     ecx, [ebp+var_10]
                call    ds:??0dnArrayBase@@QAE@XZ ; dnArrayBase::dnArrayBase(void)
;   } // starts at 109078D7
;   try {
                mov     byte ptr [ebp+var_4], 1
                mov     edx, [ebp+var_10]
                mov     dword ptr [edx+0Ch], 0
                mov     eax, [ebp+var_10]
                mov     dword ptr [eax+10h], 8
                mov     ecx, [ebp+var_10]
                call    sub_10904AD0
;   } // starts at 109078F0
;   try {
                mov     byte ptr [ebp+var_4], 0
;   } // starts at 10907910
;   try {
                mov     byte ptr [ebp+var_4], 2
                mov     ecx, [ebp+var_14]
                mov     dword ptr [ecx], offset ??_7FConfigCacheIni@@6B@ ; const FConfigCacheIni::`vftable'
                mov     edx, [ebp+var_14]
                mov     dword ptr [edx+18h], 0
                mov     eax, [ebp+var_14]
                mov     dword ptr [eax+1Ch], 0
                mov     ecx, [ebp+var_14]
                add     ecx, 20h
                call    ds:??0FFilename@@QAE@XZ ; FFilename::FFilename(void)
;   } // starts at 10907914
;   try {
                mov     byte ptr [ebp+var_4], 3
                mov     ecx, [ebp+var_14]
                add     ecx, 2Ch
                call    ds:??0FFilename@@QAE@XZ ; FFilename::FFilename(void)
;   } // starts at 10907941
;   try {
                mov     byte ptr [ebp+var_4], 4
                mov     ecx, [ebp+var_14]
                add     ecx, 38h
                call    ds:??0FFilename@@QAE@XZ ; FFilename::FFilename(void)
;   } // starts at 10907951
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_14]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
; } // starts at 109078B0
sub_109078B0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10907980    proc near               ; DATA XREF: .rdata:10913520↓o

var_34          = dword ptr -34h
var_30          = byte ptr -30h
var_24          = byte ptr -24h
var_18          = byte ptr -18h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch
arg_8           = dword ptr  10h

; FUNCTION CHUNK AT 10910C90 SIZE 0000001B BYTES

; __unwind { // SEH_10907980
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_10907980
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 28h
                mov     [ebp+var_34], ecx
                mov     eax, [ebp+arg_0]
                push    eax
                lea     ecx, [ebp+var_18]
                call    ds:??0FFilename@@QAE@PB_W@Z ; FFilename::FFilename(wchar_t const *)
;   try {
                mov     [ebp+var_4], 0
                lea     ecx, [ebp+var_18]
                push    ecx
                mov     ecx, [ebp+var_34]
                add     ecx, 20h
                call    ds:??4FFilename@@QAEAAV0@ABV0@@Z ; FFilename::operator=(FFilename const &)
;   } // starts at 109079AB
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_18]
                call    ds:??1FFilename@@QAE@XZ ; FFilename::~FFilename(void)
                mov     edx, [ebp+arg_4]
                push    edx
                lea     ecx, [ebp+var_24]
                call    ds:??0FFilename@@QAE@PB_W@Z ; FFilename::FFilename(wchar_t const *)
;   try {
                mov     [ebp+var_4], 1
                lea     eax, [ebp+var_24]
                push    eax
                mov     ecx, [ebp+var_34]
                add     ecx, 2Ch
                call    ds:??4FFilename@@QAEAAV0@ABV0@@Z ; FFilename::operator=(FFilename const &)
;   } // starts at 109079DF
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_24]
                call    ds:??1FFilename@@QAE@XZ ; FFilename::~FFilename(void)
                mov     ecx, [ebp+arg_8]
                push    ecx
                lea     ecx, [ebp+var_30]
                call    ds:??0FFilename@@QAE@PB_W@Z ; FFilename::FFilename(wchar_t const *)
;   try {
                mov     [ebp+var_4], 2
                lea     edx, [ebp+var_30]
                push    edx
                mov     ecx, [ebp+var_34]
                add     ecx, 38h
                call    ds:??4FFilename@@QAEAAV0@ABV0@@Z ; FFilename::operator=(FFilename const &)
;   } // starts at 10907A13
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_30]
                call    ds:??1FFilename@@QAE@XZ ; FFilename::~FFilename(void)
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    10h
; } // starts at 10907980
sub_10907980    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

FConfigCache__GetString proc near       ; DATA XREF: .rdata:109134EC↓o

var_200C        = dword ptr -200Ch
var_2008        = word ptr -2008h
Dst             = byte ptr -2006h
var_4           = dword ptr -4
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch
arg_8           = dword ptr  10h
arg_C           = dword ptr  14h

                push    ebp
                mov     ebp, esp
                mov     eax, 200Ch
                call    __alloca_probe
                mov     [ebp+var_200C], ecx
                mov     ax, ds:Str2
                mov     [ebp+var_2008], ax
                push    1FFEh           ; Size
                push    0               ; Val
                lea     ecx, [ebp+Dst]
                push    ecx             ; Dst
                call    memset
                add     esp, 0Ch
                mov     edx, [ebp+arg_C]
                push    edx
                push    1000h
                lea     eax, [ebp+var_2008]
                push    eax
                mov     ecx, [ebp+arg_4]
                push    ecx
                mov     edx, [ebp+arg_0]
                push    edx
                mov     eax, [ebp+var_200C]
                mov     edx, [eax]
                mov     ecx, [ebp+var_200C]
                mov     eax, [edx+14h]
                call    eax
                mov     [ebp+var_4], eax
                lea     ecx, [ebp+var_2008]
                push    ecx
                mov     ecx, [ebp+arg_8]
                call    ds:??4dnString@@QAEAAV0@PB_W@Z ; dnString::operator=(wchar_t const *)
                mov     eax, [ebp+var_4]
                mov     esp, ebp
                pop     ebp
                retn    10h
FConfigCache__GetString endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

FConfigCache__GetStr proc near          ; DATA XREF: .rdata:109134F4↓o

var_808         = dword ptr -808h
var_804         = dword ptr -804h
var_800         = word ptr -800h
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch
arg_8           = dword ptr  10h
arg_C           = dword ptr  14h

                push    ebp
                mov     ebp, esp
                sub     esp, 808h
                mov     [ebp+var_808], ecx
                mov     [ebp+var_804], 0
                mov     eax, [ebp+arg_C]
                push    eax
                push    400h
                lea     ecx, [ebp+var_800]
                push    ecx
                mov     edx, [ebp+arg_8]
                push    edx
                mov     eax, [ebp+arg_4]
                push    eax
                mov     ecx, [ebp+var_808]
                mov     edx, [ecx]
                mov     ecx, [ebp+var_808]
                mov     eax, [edx+14h]
                call    eax
                lea     ecx, [ebp+var_800]
                push    ecx
                mov     ecx, [ebp+arg_0]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
                mov     edx, [ebp+var_804]
                or      edx, 1
                mov     [ebp+var_804], edx
                mov     eax, [ebp+arg_0]
                mov     esp, ebp
                pop     ebp
                retn    10h
FConfigCache__GetStr endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10907B40    proc near               ; CODE XREF: sub_109082A0+61↓p
                                        ; sub_109082A0+A0↓p ...

var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch
arg_8           = dword ptr  10h

                push    ebp
                mov     ebp, esp
                sub     esp, 8
                mov     [ebp+var_8], ecx
                cmp     [ebp+arg_0], 0
                jz      short loc_10907B59
                mov     eax, [ebp+arg_0]
                movzx   ecx, word ptr [eax]
                test    ecx, ecx
                jnz     short loc_10907B60

loc_10907B59:                           ; CODE XREF: sub_10907B40+D↑j
                xor     eax, eax
                jmp     loc_10907C12
; ---------------------------------------------------------------------------

loc_10907B60:                           ; CODE XREF: sub_10907B40+17↑j
                jmp     short loc_10907B6B
; ---------------------------------------------------------------------------

loc_10907B62:                           ; CODE XREF: sub_10907B40:loc_10907B99↓j
                mov     edx, [ebp+arg_0]
                add     edx, 2
                mov     [ebp+arg_0], edx

loc_10907B6B:                           ; CODE XREF: sub_10907B40:loc_10907B60↑j
                mov     eax, [ebp+arg_0]
                movzx   ecx, word ptr [eax]
                cmp     ecx, 20h
                jz      short loc_10907B99
                mov     edx, [ebp+arg_0]
                movzx   eax, word ptr [edx]
                cmp     eax, 9
                jz      short loc_10907B99
                mov     ecx, [ebp+arg_0]
                movzx   edx, word ptr [ecx]
                cmp     edx, 0Ah
                jz      short loc_10907B99
                mov     eax, [ebp+arg_0]
                movzx   ecx, word ptr [eax]
                cmp     ecx, 0Dh
                jz      short loc_10907B99
                jmp     short loc_10907B9B
; ---------------------------------------------------------------------------

loc_10907B99:                           ; CODE XREF: sub_10907B40+34↑j
                                        ; sub_10907B40+3F↑j ...
                jmp     short loc_10907B62
; ---------------------------------------------------------------------------

loc_10907B9B:                           ; CODE XREF: sub_10907B40+57↑j
                mov     [ebp+var_4], 0
                jmp     short loc_10907BB6
; ---------------------------------------------------------------------------

loc_10907BA4:                           ; CODE XREF: sub_10907B40+C5↓j
                mov     edx, [ebp+arg_0]
                add     edx, 2
                mov     [ebp+arg_0], edx
                mov     eax, [ebp+arg_4]
                add     eax, 2
                mov     [ebp+arg_4], eax

loc_10907BB6:                           ; CODE XREF: sub_10907B40+62↑j
                mov     ecx, [ebp+arg_8]
                sub     ecx, 1
                cmp     [ebp+var_4], ecx
                jge     short loc_10907C07
                mov     edx, [ebp+arg_0]
                movzx   eax, word ptr [edx]
                cmp     eax, 20h
                jz      short loc_10907BF7
                mov     ecx, [ebp+arg_0]
                movzx   edx, word ptr [ecx]
                cmp     edx, 9
                jz      short loc_10907BF7
                mov     eax, [ebp+arg_0]
                movzx   ecx, word ptr [eax]
                test    ecx, ecx
                jz      short loc_10907BF7
                mov     edx, [ebp+arg_0]
                movzx   eax, word ptr [edx]
                cmp     eax, 0Ah
                jz      short loc_10907BF7
                mov     ecx, [ebp+arg_0]
                movzx   edx, word ptr [ecx]
                cmp     edx, 0Dh
                jnz     short loc_10907BF9

loc_10907BF7:                           ; CODE XREF: sub_10907B40+8A↑j
                                        ; sub_10907B40+95↑j ...
                jmp     short loc_10907C07
; ---------------------------------------------------------------------------

loc_10907BF9:                           ; CODE XREF: sub_10907B40+B5↑j
                mov     eax, [ebp+arg_4]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx]
                mov     [eax], dx
                jmp     short loc_10907BA4
; ---------------------------------------------------------------------------

loc_10907C07:                           ; CODE XREF: sub_10907B40+7F↑j
                                        ; sub_10907B40:loc_10907BF7↑j
                xor     eax, eax
                mov     ecx, [ebp+arg_4]
                mov     [ecx], ax
                mov     eax, [ebp+arg_0]

loc_10907C12:                           ; CODE XREF: sub_10907B40+1B↑j
                mov     esp, ebp
                pop     ebp
                retn    0Ch
sub_10907B40    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

FConfigCache__SetBool proc near         ; DATA XREF: .rdata:10913504↓o

var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch
arg_8           = dword ptr  10h
arg_C           = dword ptr  14h

                push    ebp
                mov     ebp, esp
                sub     esp, 8
                mov     [ebp+var_4], ecx
                cmp     [ebp+arg_8], 0
                jz      short loc_10907C38
                mov     [ebp+var_8], offset aTrue ; "True"
                jmp     short loc_10907C3F
; ---------------------------------------------------------------------------

loc_10907C38:                           ; CODE XREF: FConfigCache__SetBool+D↑j
                mov     [ebp+var_8], offset aFalse ; "False"

loc_10907C3F:                           ; CODE XREF: FConfigCache__SetBool+16↑j
                mov     eax, [ebp+arg_C]
                push    eax
                mov     ecx, [ebp+var_8]
                push    ecx
                mov     edx, [ebp+arg_4]
                push    edx
                mov     eax, [ebp+arg_0]
                push    eax
                mov     ecx, [ebp+var_4]
                mov     edx, [ecx]
                mov     ecx, [ebp+var_4]
                mov     eax, [edx+34h]
                call    eax
                mov     esp, ebp
                pop     ebp
                retn    10h
FConfigCache__SetBool endp

; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                pop     ebp
; [00000006 BYTES: COLLAPSED FUNCTION __wtoi. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 10h
                push    ebp
                mov     ebp, esp
                pop     ebp
                jmp     sub_10902040
; ---------------------------------------------------------------------------
                align 10h
; [00000022 BYTES: COLLAPSED FUNCTION Concurrency::details::SweeperContext::SweeperContext(Concurrency::details::_TaskCollection *). PRESS CTRL-NUMPAD+ TO EXPAND]
                align 10h
                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp-4], ecx
                mov     eax, [ebp-4]
                mov     ecx, [eax+4]
                add     ecx, 1
                mov     edx, [ebp-4]
                mov     [edx+4], ecx
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp-4], ecx
                mov     eax, [ebp-4]
                mov     ecx, [eax]
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                mov     ecx, [ebp-4]
                xor     edx, edx
                cmp     [ecx+4], eax
                setl    dl
                mov     eax, edx
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h
; [00000022 BYTES: COLLAPSED FUNCTION Concurrency::details::SweeperContext::SweeperContext(Concurrency::details::_TaskCollection *). PRESS CTRL-NUMPAD+ TO EXPAND]
                align 10h
                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp-4], ecx
                mov     eax, [ebp-4]
                mov     ecx, [eax+4]
                add     ecx, 1
                mov     edx, [ebp-4]
                mov     [edx+4], ecx
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp-4], ecx
                mov     eax, [ebp-4]
                mov     ecx, [eax]
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                mov     ecx, [ebp-4]
                xor     edx, edx
                cmp     [ecx+4], eax
                setl    dl
                mov     eax, edx
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp-4], ecx
                push    2Ch
                mov     ecx, [ebp-4]
                call    ds:?Shrink@dnArrayBase@@QAEXH@Z ; dnArrayBase::Shrink(int)
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h
; [00000022 BYTES: COLLAPSED FUNCTION Concurrency::details::SweeperContext::SweeperContext(Concurrency::details::_TaskCollection *). PRESS CTRL-NUMPAD+ TO EXPAND]
                align 10h
                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp-4], ecx
                mov     eax, [ebp-4]
                mov     ecx, [eax+4]
                add     ecx, 1
                mov     edx, [ebp-4]
                mov     [edx+4], ecx
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp-4], ecx
                mov     eax, [ebp-4]
                mov     ecx, [eax]
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                mov     ecx, [ebp-4]
                xor     edx, edx
                cmp     [ecx+4], eax
                setl    dl
                mov     eax, edx
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp-4], ecx
                mov     eax, [ebp+8]
                push    eax
                push    0Ch
                mov     ecx, [ebp-4]
                call    ds:?AddZeroed@dnArrayBase@@QAEHHH@Z ; dnArrayBase::AddZeroed(int,int)
                mov     esp, ebp
                pop     ebp
                retn    4
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp-4], ecx
                mov     ecx, [ebp-4]
                call    ds:??0dnArrayBase@@QAE@XZ ; dnArrayBase::dnArrayBase(void)
                mov     eax, [ebp-4]
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp-4], ecx
                mov     eax, [ebp+8]
                imul    eax, 24h
                mov     ecx, [ebp-4]
                add     eax, [ecx]
                mov     esp, ebp
                pop     ebp
                retn    4
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp-4], ecx
                mov     eax, [ebp+8]
                imul    eax, 2Ch
                mov     ecx, [ebp-4]
                add     eax, [ecx]
                mov     esp, ebp
                pop     ebp
                retn    4
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp-4], ecx
                mov     eax, [ebp+8]
                push    eax
                push    2Ch
                mov     ecx, [ebp-4]
                call    ds:?AddZeroed@dnArrayBase@@QAEHHH@Z ; dnArrayBase::AddZeroed(int,int)
                mov     esp, ebp
                pop     ebp
                retn    4
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset sub_10910CCC
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                push    ecx
                mov     [ebp-10h], ecx
                mov     eax, [ebp+8]
                push    eax
                mov     ecx, [ebp-10h]
                add     ecx, 4
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
                mov     dword ptr [ebp-4], 0
                mov     ecx, [ebp+0Ch]
                push    ecx
                mov     ecx, [ebp-10h]
                add     ecx, 10h
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
                mov     dword ptr [ebp-4], 0FFFFFFFFh
                mov     eax, [ebp-10h]
                mov     ecx, [ebp-0Ch]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    8
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp-4], ecx
                push    2Ch
                mov     eax, [ebp+8]
                push    eax
                mov     ecx, [ebp-4]
                call    ds:?CountBytes@dnArrayBase@@QAEXAAVdnArchive@@H@Z ; dnArrayBase::CountBytes(dnArchive &,int)
                mov     esp, ebp
                pop     ebp
                retn    4
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp-4], ecx
                mov     eax, [ebp-4]
                mov     ecx, [ebp+8]
                mov     edx, [ecx]
                mov     [eax], edx
                mov     eax, [ebp+8]
                add     eax, 4
                push    eax
                mov     ecx, [ebp-4]
                add     ecx, 4
                call    ds:??4dnString@@QAEAAV0@ABV0@@Z ; dnString::operator=(dnString const &)
                mov     ecx, [ebp+8]
                add     ecx, 10h
                push    ecx
                mov     ecx, [ebp-4]
                add     ecx, 10h
                call    ds:??4dnString@@QAEAAV0@ABV0@@Z ; dnString::operator=(dnString const &)
                mov     eax, [ebp-4]
                mov     esp, ebp
                pop     ebp
                retn    4
; ---------------------------------------------------------------------------
                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp-4], ecx
                push    24h
                mov     eax, [ebp+8]
                push    eax
                mov     ecx, [ebp-4]
                call    ds:?CountBytes@dnArrayBase@@QAEXAAVdnArchive@@H@Z ; dnArrayBase::CountBytes(dnArchive &,int)
                mov     esp, ebp
                pop     ebp
                retn    4
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp-4], ecx
                push    1Ch
                mov     eax, [ebp+8]
                push    eax
                mov     ecx, [ebp-4]
                call    ds:?CountBytes@dnArrayBase@@QAEXAAVdnArchive@@H@Z ; dnArrayBase::CountBytes(dnArchive &,int)
                mov     esp, ebp
                pop     ebp
                retn    4
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset sub_10910CEC
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                push    ecx
                mov     [ebp-10h], ecx
                mov     ecx, [ebp-10h]
                add     ecx, 4
                call    ds:??0dnString@@QAE@XZ ; dnString::dnString(void)
                mov     dword ptr [ebp-4], 0
                mov     ecx, [ebp-10h]
                add     ecx, 10h
                call    ds:??0dnString@@QAE@XZ ; dnString::dnString(void)
                mov     dword ptr [ebp-4], 0FFFFFFFFh
                mov     eax, [ebp-10h]
                mov     ecx, [ebp-0Ch]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                mov     eax, [ebp+0Ch]
                add     eax, 10h
                push    eax
                mov     ecx, [ebp+0Ch]
                add     ecx, 4
                push    ecx
                mov     edx, [ebp+8]
                push    edx
                call    ds:??6@YAAAVdnArchive@@AAV0@AAVdnString@@@Z ; operator<<(dnArchive &,dnString &)
                add     esp, 8
                push    eax
                call    ds:??6@YAAAVdnArchive@@AAV0@AAVdnString@@@Z ; operator<<(dnArchive &,dnString &)
                add     esp, 8
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                push    ecx
                push    24h
                push    1
                mov     ecx, [ebp+0Ch]
                call    ds:?Add@dnArrayBase@@QAEHHH@Z ; dnArrayBase::Add(int,int)
                mov     [ebp-4], eax
                mov     eax, [ebp-4]
                imul    eax, 24h
                mov     ecx, [ebp+0Ch]
                add     eax, [ecx]
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10908090    proc near               ; CODE XREF: sub_1090A020+6FA8↓p
                                        ; sub_1090A350+6CD1↓p ...
                push    ebp
                mov     ebp, esp
                pop     ebp
                retn
sub_10908090    endp

; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                push    ecx
                push    2Ch
                push    1
                mov     ecx, [ebp+0Ch]
                call    ds:?Add@dnArrayBase@@QAEHHH@Z ; dnArrayBase::Add(int,int)
                mov     [ebp-4], eax
                mov     eax, [ebp-4]
                imul    eax, 2Ch
                mov     ecx, [ebp+0Ch]
                add     eax, [ecx]
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_109080D0    proc near               ; CODE XREF: sub_1090B3A0+5E48↓p
                                        ; sub_1090B4E0+5D38↓p
                push    ebp
                mov     ebp, esp
                pop     ebp
                retn
sub_109080D0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_109080E0    proc near               ; CODE XREF: sub_10908AA0+95↓p
                                        ; sub_10909B60+6E↓p

var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8

; FUNCTION CHUNK AT 10910D00 SIZE 0000000C BYTES

; __unwind { // SEH_109080E0
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_109080E0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                push    ecx
                push    esi
                push    edi
                mov     edi, [ebp+arg_0]
                mov     eax, [edi]
                mov     esi, ecx
                lea     ecx, [edi+4]
                push    ecx
                lea     ecx, [esi+4]
                mov     [ebp+var_10], esi
                mov     [esi], eax
                call    ds:??0dnString@@QAE@ABV0@@Z ; dnString::dnString(dnString const &)
                add     edi, 10h
                push    edi
                lea     ecx, [esi+10h]
;   try {
                mov     [ebp+var_4], 0
                call    ds:??0dnString@@QAE@ABV0@@Z ; dnString::dnString(dnString const &)
                mov     ecx, [ebp+var_C]
                pop     edi
                mov     eax, esi
                pop     esi
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    4
;   } // starts at 1090811B
; } // starts at 109080E0
sub_109080E0    endp

; ---------------------------------------------------------------------------
                align 10h
                push    esi
                mov     esi, ecx
                call    ds:??0dnArrayBase@@QAE@XZ ; dnArrayBase::dnArrayBase(void)
                mov     eax, esi
                pop     esi
                retn
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10908150    proc near               ; CODE XREF: sub_10908AA0+8C↓p
                                        ; sub_10908AA0+E4↓p ...

arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                mov     eax, [ebp+arg_0]
                lea     edx, ds:0[eax*8]
                sub     edx, eax
                mov     eax, [ecx]
                lea     eax, [eax+edx*4]
                pop     ebp
                retn    4
sub_10908150    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10908170    proc near               ; CODE XREF: sub_10908AA0+70↓p
                                        ; sub_109094A0+25↓p ...

arg_4           = dword ptr  0Ch

                push    ebp
                mov     ebp, esp
                push    esi
                mov     esi, [ebp+arg_4]
                push    1Ch
                push    1
                mov     ecx, esi
                call    ds:?Add@dnArrayBase@@QAEHHH@Z ; dnArrayBase::Add(int,int)
                mov     edx, [esi]
                lea     ecx, ds:0[eax*8]
                sub     ecx, eax
                lea     eax, [edx+ecx*4]
                pop     esi
                pop     ebp
                retn
sub_10908170    endp

; ---------------------------------------------------------------------------
                align 10h
; [00000001 BYTES: COLLAPSED FUNCTION nullsub_3. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

FConfigCacheIni__GetInt proc near       ; DATA XREF: .rdata:109134E4↓o

var_A4          = dword ptr -0A4h
Str             = word ptr -0A0h
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch
arg_8           = dword ptr  10h
arg_C           = dword ptr  14h

                push    ebp
                mov     ebp, esp
                sub     esp, 0A4h
                mov     [ebp+var_A4], ecx
                mov     eax, [ebp+arg_C]
                push    eax
                push    50h
                lea     ecx, [ebp+Str]
                push    ecx
                mov     edx, [ebp+arg_4]
                push    edx
                mov     eax, [ebp+arg_0]
                push    eax
                mov     ecx, [ebp+var_A4]
                mov     edx, [ecx]
                mov     ecx, [ebp+var_A4]
                mov     eax, [edx+14h]
                call    eax
                test    eax, eax
                jz      short loc_10908207
                lea     ecx, [ebp+Str]
                push    ecx             ; Str
                call    ds:_wtoi
                add     esp, 4
                mov     edx, [ebp+arg_8]
                mov     [edx], eax
                mov     eax, 1
                jmp     short loc_10908209
; ---------------------------------------------------------------------------

loc_10908207:                           ; CODE XREF: FConfigCacheIni__GetInt+39↑j
                xor     eax, eax

loc_10908209:                           ; CODE XREF: FConfigCacheIni__GetInt+55↑j
                mov     esp, ebp
                pop     ebp
                retn    10h
FConfigCacheIni__GetInt endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

FConfigCacheIni__GetBool proc near      ; DATA XREF: .rdata:109134E0↓o

var_A4          = dword ptr -0A4h
Str1            = word ptr -0A0h
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch
arg_8           = dword ptr  10h
arg_C           = dword ptr  14h

                push    ebp
                mov     ebp, esp
                sub     esp, 0A4h
                mov     [ebp+var_A4], ecx
                mov     eax, [ebp+arg_C]
                push    eax
                push    50h
                lea     ecx, [ebp+Str1]
                push    ecx
                mov     edx, [ebp+arg_4]
                push    edx
                mov     eax, [ebp+arg_0]
                push    eax
                mov     ecx, [ebp+var_A4]
                mov     edx, [ecx]
                mov     ecx, [ebp+var_A4]
                mov     eax, [edx+14h]
                call    eax
                test    eax, eax
                jz      short loc_10908295
                push    offset aTrue    ; "True"
                lea     ecx, [ebp+Str1]
                push    ecx             ; Str1
                call    ds:_wcsicmp
                add     esp, 8
                test    eax, eax
                jnz     short loc_1090826F
                mov     edx, [ebp+arg_8]
                mov     dword ptr [edx], 1
                jmp     short loc_1090828E
; ---------------------------------------------------------------------------

loc_1090826F:                           ; CODE XREF: FConfigCacheIni__GetBool+52↑j
                lea     eax, [ebp+Str1]
                push    eax             ; Str
                call    ds:_wtoi
                add     esp, 4
                sub     eax, 1
                neg     eax
                sbb     eax, eax
                add     eax, 1
                mov     ecx, [ebp+arg_8]
                mov     [ecx], eax

loc_1090828E:                           ; CODE XREF: FConfigCacheIni__GetBool+5D↑j
                mov     eax, 1
                jmp     short loc_10908297
; ---------------------------------------------------------------------------

loc_10908295:                           ; CODE XREF: FConfigCacheIni__GetBool+39↑j
                xor     eax, eax

loc_10908297:                           ; CODE XREF: FConfigCacheIni__GetBool+83↑j
                mov     esp, ebp
                pop     ebp
                retn    10h
FConfigCacheIni__GetBool endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_109082A0    proc near               ; DATA XREF: .rdata:const FConfigCacheIni::`vftable'↓o

var_15C         = dword ptr -15Ch
Str             = word ptr -148h
var_A4          = dword ptr -0A4h
var_A0          = byte ptr -0A0h
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch
arg_8           = dword ptr  10h
arg_C           = dword ptr  14h
arg_10          = dword ptr  18h
arg_14          = dword ptr  1Ch
arg_18          = dword ptr  20h

                push    ebp
                mov     ebp, esp
                sub     esp, 15Ch
                mov     [ebp+var_15C], ecx
                mov     eax, [ebp+arg_18]
                push    eax
                push    50h
                lea     ecx, [ebp+var_A0]
                push    ecx
                mov     edx, [ebp+arg_4]
                push    edx
                mov     eax, [ebp+arg_0]
                push    eax
                mov     ecx, [ebp+var_15C]
                mov     edx, [ecx]
                mov     ecx, [ebp+var_15C]
                mov     eax, [edx+14h]
                call    eax
                test    eax, eax
                jz      loc_109083EE
                lea     ecx, [ebp+var_A0]
                mov     [ebp+var_A4], ecx
                push    50h
                lea     edx, [ebp+Str]
                push    edx
                mov     eax, [ebp+var_A4]
                push    eax
                mov     ecx, [ebp+var_15C]
                call    sub_10907B40
                mov     [ebp+var_A4], eax
                cmp     [ebp+var_A4], 0
                jz      short loc_1090832A
                lea     ecx, [ebp+Str]
                push    ecx             ; Str
                call    ds:_wtoi
                add     esp, 4
                mov     edx, [ebp+arg_8]
                mov     [edx], al

loc_1090832A:                           ; CODE XREF: sub_109082A0+73↑j
                push    50h
                lea     eax, [ebp+Str]
                push    eax
                mov     ecx, [ebp+var_A4]
                push    ecx
                mov     ecx, [ebp+var_15C]
                call    sub_10907B40
                mov     [ebp+var_A4], eax
                cmp     [ebp+var_A4], 0
                jz      short loc_10908369
                lea     edx, [ebp+Str]
                push    edx             ; Str
                call    ds:_wtoi
                add     esp, 4
                mov     ecx, [ebp+arg_C]
                mov     [ecx], al

loc_10908369:                           ; CODE XREF: sub_109082A0+B2↑j
                push    50h
                lea     edx, [ebp+Str]
                push    edx
                mov     eax, [ebp+var_A4]
                push    eax
                mov     ecx, [ebp+var_15C]
                call    sub_10907B40
                mov     [ebp+var_A4], eax
                cmp     [ebp+var_A4], 0
                jz      short loc_109083A8
                lea     ecx, [ebp+Str]
                push    ecx             ; Str
                call    ds:_wtoi
                add     esp, 4
                mov     edx, [ebp+arg_10]
                mov     [edx], al

loc_109083A8:                           ; CODE XREF: sub_109082A0+F1↑j
                push    50h
                lea     eax, [ebp+Str]
                push    eax
                mov     ecx, [ebp+var_A4]
                push    ecx
                mov     ecx, [ebp+var_15C]
                call    sub_10907B40
                mov     [ebp+var_A4], eax
                cmp     [ebp+var_A4], 0
                jz      short loc_109083E7
                lea     edx, [ebp+Str]
                push    edx             ; Str
                call    ds:_wtoi
                add     esp, 4
                mov     ecx, [ebp+arg_14]
                mov     [ecx], al

loc_109083E7:                           ; CODE XREF: sub_109082A0+130↑j
                mov     eax, 1
                jmp     short loc_109083F0
; ---------------------------------------------------------------------------

loc_109083EE:                           ; CODE XREF: sub_109082A0+39↑j
                xor     eax, eax

loc_109083F0:                           ; CODE XREF: sub_109082A0+14C↑j
                mov     esp, ebp
                pop     ebp
                retn    1Ch
sub_109082A0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __stdcall FConfigCache::SetInt(int, int, char Args, int)
FConfigCache__SetInt proc near          ; DATA XREF: .rdata:10913508↓o

var_40          = dword ptr -40h
Dest            = word ptr -3Ch
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch
Args            = byte ptr  10h
arg_C           = dword ptr  14h

                push    ebp
                mov     ebp, esp
                sub     esp, 40h
                mov     [ebp+var_40], ecx
                mov     eax, dword ptr [ebp+Args]
                push    eax             ; Args
                push    offset aI       ; "%i"
                lea     ecx, [ebp+Dest]
                push    ecx             ; Dest
                call    sub_10901F50
                add     esp, 0Ch
                mov     edx, [ebp+arg_C]
                push    edx
                lea     eax, [ebp+Dest]
                push    eax
                mov     ecx, [ebp+arg_4]
                push    ecx
                mov     edx, [ebp+arg_0]
                push    edx
                mov     eax, [ebp+var_40]
                mov     edx, [eax]
                mov     ecx, [ebp+var_40]
                mov     eax, [edx+34h]
                call    eax
                mov     esp, ebp
                pop     ebp
                retn    10h
FConfigCache__SetInt endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __stdcall FConfigCache::SetFloat(int, int, float, int)
FConfigCache__SetFloat proc near        ; DATA XREF: .rdata:1091350C↓o

Args            = byte ptr -48h
var_40          = dword ptr -40h
Dest            = word ptr -3Ch
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch
arg_8           = dword ptr  10h
arg_C           = dword ptr  14h

                push    ebp
                mov     ebp, esp
                sub     esp, 40h
                mov     [ebp+var_40], ecx
                fld     [ebp+arg_8]
                sub     esp, 8
                fstp    qword ptr [esp+48h+Args] ; Args
                push    offset asc_1091355C ; "%f"
                lea     eax, [ebp+Dest]
                push    eax             ; Dest
                call    sub_10901F50
                add     esp, 10h
                mov     ecx, [ebp+arg_C]
                push    ecx
                lea     edx, [ebp+Dest]
                push    edx
                mov     eax, [ebp+arg_4]
                push    eax
                mov     ecx, [ebp+arg_0]
                push    ecx
                mov     edx, [ebp+var_40]
                mov     eax, [edx]
                mov     ecx, [ebp+var_40]
                mov     edx, [eax+34h]
                call    edx
                mov     esp, ebp
                pop     ebp
                retn    10h
FConfigCache__SetFloat endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

FConfigCache__EmptySection proc near    ; DATA XREF: .rdata:10913500↓o

var_A4          = dword ptr -0A4h
Dest            = word ptr -0A0h
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch
arg_8           = byte ptr  10h
arg_C           = byte ptr  14h
arg_10          = byte ptr  18h
arg_14          = byte ptr  1Ch
arg_18          = dword ptr  20h

                push    ebp
                mov     ebp, esp
                sub     esp, 0A4h
                mov     [ebp+var_A4], ecx
                movzx   eax, [ebp+arg_14]
                push    eax
                movzx   ecx, [ebp+arg_10]
                push    ecx
                movzx   edx, [ebp+arg_C]
                push    edx
                movzx   eax, [ebp+arg_8]
                push    eax             ; Args
                push    offset aDDDD    ; "%d %d %d %d"
                lea     ecx, [ebp+Dest]
                push    ecx             ; Dest
                call    sub_10901F50
                add     esp, 18h
                mov     edx, [ebp+arg_18]
                push    edx
                lea     eax, [ebp+Dest]
                push    eax
                mov     ecx, [ebp+arg_4]
                push    ecx
                mov     edx, [ebp+arg_0]
                push    edx
                mov     eax, [ebp+var_A4]
                mov     edx, [eax]
                mov     ecx, [ebp+var_A4]
                mov     eax, [edx+34h]
                call    eax
                mov     esp, ebp
                pop     ebp
                retn    1Ch
FConfigCache__EmptySection endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10908510    proc near               ; CODE XREF: sub_1090ECE0+335↓p

var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 10h
                mov     [ebp+var_10], ecx
                mov     eax, [ebp+var_10]
                cmp     eax, [ebp+arg_0]
                jz      short loc_10908585
                mov     ecx, [ebp+var_10]
                mov     edx, [ecx+4]
                mov     [ebp+var_4], edx
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+4]
                mov     [ebp+var_C], ecx
                mov     edx, [ebp+var_C]
                push    edx
                push    0Ch
                mov     ecx, [ebp+var_10]
                call    ds:?AddZeroed@dnArrayBase@@QAEHHH@Z ; dnArrayBase::AddZeroed(int,int)
                mov     [ebp+var_8], 0
                jmp     short loc_10908554
; ---------------------------------------------------------------------------

loc_1090854B:                           ; CODE XREF: sub_10908510+73↓j
                mov     eax, [ebp+var_8]
                add     eax, 1
                mov     [ebp+var_8], eax

loc_10908554:                           ; CODE XREF: sub_10908510+39↑j
                mov     ecx, [ebp+arg_0]
                mov     edx, [ebp+var_8]
                cmp     edx, [ecx+4]
                jge     short loc_10908585
                mov     eax, [ebp+var_8]
                push    eax
                mov     ecx, [ebp+arg_0]
                call    sub_10902A00
                push    eax
                mov     ecx, [ebp+var_4]
                add     ecx, [ebp+var_8]
                push    ecx
                mov     ecx, [ebp+var_10]
                call    sub_109029A0
                mov     ecx, eax
                call    ds:??4dnString@@QAEAAV0@ABV0@@Z ; dnString::operator=(dnString const &)
                jmp     short loc_1090854B
; ---------------------------------------------------------------------------

loc_10908585:                           ; CODE XREF: sub_10908510+F↑j
                                        ; sub_10908510+4D↑j
                mov     eax, [ebp+var_10]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_10908510    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10908590    proc near               ; CODE XREF: FConfigCache__GetString2+A9↓p
                                        ; FConfigCache__SetString+CD↓p

var_14          = dword ptr -14h
var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 14h
                mov     [ebp+var_14], ecx
                mov     eax, [ebp+arg_0]
                push    eax
                call    sub_10902870
                add     esp, 4
                mov     ecx, [ebp+var_14]
                mov     edx, [ecx+10h]
                sub     edx, 1
                and     eax, edx
                mov     ecx, [ebp+var_14]
                mov     edx, [ecx+0Ch]
                mov     eax, [edx+eax*4]
                mov     [ebp+var_4], eax
                jmp     short loc_109085CF
; ---------------------------------------------------------------------------

loc_109085BE:                           ; CODE XREF: sub_10908590:loc_10908605↓j
                mov     ecx, [ebp+var_4]
                push    ecx
                mov     ecx, [ebp+var_14]
                call    sub_10902A80
                mov     edx, [eax]
                mov     [ebp+var_4], edx

loc_109085CF:                           ; CODE XREF: sub_10908590+2C↑j
                cmp     [ebp+var_4], 0FFFFFFFFh
                jz      short loc_10908607
                mov     eax, [ebp+arg_0]
                push    eax
                mov     ecx, [ebp+var_4]
                push    ecx
                mov     ecx, [ebp+var_14]
                call    sub_10902A80
                add     eax, 4
                mov     ecx, eax
                call    ds:??8dnString@@QBEHABV0@@Z ; dnString::operator==(dnString const &)
                test    eax, eax
                jz      short loc_10908605
                mov     edx, [ebp+var_4]
                push    edx
                mov     ecx, [ebp+var_14]
                call    sub_10902A80
                add     eax, 10h
                jmp     short loc_10908609
; ---------------------------------------------------------------------------

loc_10908605:                           ; CODE XREF: sub_10908590+62↑j
                jmp     short loc_109085BE
; ---------------------------------------------------------------------------

loc_10908607:                           ; CODE XREF: sub_10908590+43↑j
                xor     eax, eax

loc_10908609:                           ; CODE XREF: sub_10908590+73↑j
                mov     esp, ebp
                pop     ebp
                retn    4
sub_10908590    endp

; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                sub     esp, 88h
                mov     eax, [ebp+8]
                mov     dword ptr [ebp-88h], 0
                test    eax, eax
                jz      short loc_10908644
                push    80h
                lea     ecx, [ebp-84h]
                push    ecx
                push    eax
                lea     ecx, [ebp-88h]
                call    sub_10901C80
                jmp     short loc_10908646
; ---------------------------------------------------------------------------

loc_10908644:                           ; CODE XREF: .text:10908628↑j
                xor     eax, eax

loc_10908646:                           ; CODE XREF: .text:10908642↑j
                push    eax
                mov     [ebp-4], eax
                call    ds:atof
                fstp    dword ptr [ebp+8]
                mov     eax, [ebp-4]
                lea     edx, [ebp-84h]
                add     esp, 4
                cmp     eax, edx
                jz      short loc_1090867B
                test    eax, eax
                jz      short loc_1090867B
                push    esi
                mov     esi, eax
                call    ds:?GetMalloc@@YAPAVFMalloc@@XZ ; GetMalloc(void)
                mov     edx, [eax]
                mov     ecx, eax
                mov     eax, [edx+10h]
                push    esi
                call    eax
                pop     esi

loc_1090867B:                           ; CODE XREF: .text:10908661↑j
                                        ; .text:10908665↑j
                fld     dword ptr [ebp+8]
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10908690    proc near               ; CODE XREF: sub_1090A020+107↓p
                                        ; sub_1090A6E0+45↓p ...

var_30          = dword ptr -30h
var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                sub     esp, 30h
                mov     [ebp+var_30], ecx
                push    3Ch
                push    offset aRBuckeyePcstab ; "r:\\buckeye-pcstable\\dncommon\\inc\\dn"...
                push    offset aDnmapbaseRehas ; "dnMapBase::Rehash"
                xor     ecx, ecx
                mov     edx, [ebp+var_30]
                mov     eax, [edx+10h]
                mov     edx, 4
                mul     edx
                seto    cl
                neg     ecx
                or      ecx, eax
                push    ecx
                call    sub_10901050
                add     esp, 10h
                mov     [ebp+var_18], eax
                mov     eax, [ebp+var_18]
                mov     [ebp+var_4], eax
                mov     [ebp+var_8], 0
                jmp     short loc_109086DF
; ---------------------------------------------------------------------------

loc_109086D6:                           ; CODE XREF: sub_10908690+67↓j
                mov     ecx, [ebp+var_8]
                add     ecx, 1
                mov     [ebp+var_8], ecx

loc_109086DF:                           ; CODE XREF: sub_10908690+44↑j
                mov     edx, [ebp+var_30]
                mov     eax, [ebp+var_8]
                cmp     eax, [edx+10h]
                jge     short loc_109086F9
                mov     ecx, [ebp+var_8]
                mov     edx, [ebp+var_4]
                mov     dword ptr [edx+ecx*4], 0FFFFFFFFh
                jmp     short loc_109086D6
; ---------------------------------------------------------------------------

loc_109086F9:                           ; CODE XREF: sub_10908690+58↑j
                mov     [ebp+var_C], 0
                jmp     short loc_1090870B
; ---------------------------------------------------------------------------

loc_10908702:                           ; CODE XREF: sub_10908690+CE↓j
                mov     eax, [ebp+var_C]
                add     eax, 1
                mov     [ebp+var_C], eax

loc_1090870B:                           ; CODE XREF: sub_10908690+70↑j
                mov     ecx, [ebp+var_30]
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                cmp     [ebp+var_C], eax
                jge     short loc_10908760
                mov     ecx, [ebp+var_C]
                imul    ecx, 24h
                mov     edx, [ebp+var_30]
                add     ecx, [edx]
                mov     [ebp+var_14], ecx
                mov     eax, [ebp+var_14]
                add     eax, 4
                push    eax
                call    sub_10902870
                add     esp, 4
                mov     ecx, [ebp+var_30]
                mov     edx, [ecx+10h]
                sub     edx, 1
                and     eax, edx
                mov     [ebp+var_10], eax
                mov     eax, [ebp+var_14]
                mov     ecx, [ebp+var_10]
                mov     edx, [ebp+var_4]
                mov     ecx, [edx+ecx*4]
                mov     [eax], ecx
                mov     edx, [ebp+var_10]
                mov     eax, [ebp+var_4]
                mov     ecx, [ebp+var_C]
                mov     [eax+edx*4], ecx
                jmp     short loc_10908702
; ---------------------------------------------------------------------------

loc_10908760:                           ; CODE XREF: sub_10908690+87↑j
                mov     edx, [ebp+var_30]
                cmp     dword ptr [edx+0Ch], 0
                jz      short loc_1090877E
                mov     eax, [ebp+var_30]
                mov     ecx, [eax+0Ch]
                mov     [ebp+var_1C], ecx
                mov     edx, [ebp+var_1C]
                push    edx
                call    sub_10901030
                add     esp, 4

loc_1090877E:                           ; CODE XREF: sub_10908690+D7↑j
                mov     eax, [ebp+var_30]
                mov     ecx, [ebp+var_4]
                mov     [eax+0Ch], ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_10908690    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10908790    proc near               ; CODE XREF: sub_1090A940+283↓p
                                        ; FConfigCache__GetString2+6C↓p ...

var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 18h
                mov     [ebp+var_18], ecx
                mov     eax, [ebp+arg_0]
                push    eax
                call    sub_10902870
                add     esp, 4
                mov     ecx, [ebp+var_18]
                mov     edx, [ecx+10h]
                sub     edx, 1
                and     eax, edx
                mov     ecx, [ebp+var_18]
                mov     edx, [ecx+0Ch]
                mov     eax, [edx+eax*4]
                mov     [ebp+var_4], eax
                jmp     short loc_109087CF
; ---------------------------------------------------------------------------

loc_109087BE:                           ; CODE XREF: sub_10908790:loc_10908808↓j
                mov     ecx, [ebp+var_4]
                imul    ecx, 24h
                mov     edx, [ebp+var_18]
                mov     eax, [edx]
                mov     ecx, [ecx+eax]
                mov     [ebp+var_4], ecx

loc_109087CF:                           ; CODE XREF: sub_10908790+2C↑j
                cmp     [ebp+var_4], 0FFFFFFFFh
                jz      short loc_1090880A
                mov     edx, [ebp+var_4]
                imul    edx, 24h
                mov     eax, [ebp+var_18]
                add     edx, [eax]
                mov     [ebp+var_14], edx
                mov     ecx, [ebp+arg_0]
                push    ecx
                mov     ecx, [ebp+var_14]
                add     ecx, 4
                call    ds:??8dnString@@QBEHABV0@@Z ; dnString::operator==(dnString const &)
                test    eax, eax
                jz      short loc_10908808
                mov     edx, [ebp+var_4]
                imul    edx, 24h
                mov     eax, [ebp+var_18]
                mov     ecx, [eax]
                lea     eax, [ecx+edx+10h]
                jmp     short loc_1090880C
; ---------------------------------------------------------------------------

loc_10908808:                           ; CODE XREF: sub_10908790+65↑j
                jmp     short loc_109087BE
; ---------------------------------------------------------------------------

loc_1090880A:                           ; CODE XREF: sub_10908790+43↑j
                xor     eax, eax

loc_1090880C:                           ; CODE XREF: sub_10908790+76↑j
                mov     esp, ebp
                pop     ebp
                retn    4
sub_10908790    endp

; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                sub     esp, 8
                mov     [ebp-8], ecx
                mov     eax, [ebp-8]
                mov     ecx, [eax]
                mov     [ebp-4], ecx
                mov     edx, [ebp-8]
                mov     eax, [edx+4]
                imul    eax, 24h
                mov     ecx, [ebp-4]
                mov     edx, [ecx]
                lea     eax, [edx+eax+4]
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                sub     esp, 8
                mov     [ebp-8], ecx
                mov     eax, [ebp-8]
                mov     ecx, [eax]
                mov     [ebp-4], ecx
                mov     edx, [ebp-8]
                mov     eax, [edx+4]
                imul    eax, 24h
                mov     ecx, [ebp-4]
                mov     edx, [ecx]
                lea     eax, [edx+eax+10h]
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp-4], ecx
                mov     eax, [ebp-4]
                mov     ecx, [eax+4]
                push    ecx
                mov     edx, [ebp-4]
                mov     ecx, [edx]
                call    sub_10902A80
                add     eax, 4
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp-4], ecx
                mov     eax, [ebp-4]
                mov     ecx, [eax+4]
                push    ecx
                mov     edx, [ebp-4]
                mov     ecx, [edx]
                call    sub_10902A80
                add     eax, 10h
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_109088C0    proc near               ; CODE XREF: sub_1090B840+439↓p

var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 18h
                mov     [ebp+var_18], ecx
                mov     eax, [ebp+arg_0]
                push    eax
                call    sub_10902870
                add     esp, 4
                mov     ecx, [ebp+var_18]
                mov     edx, [ecx+10h]
                sub     edx, 1
                and     eax, edx
                mov     ecx, [ebp+var_18]
                mov     edx, [ecx+0Ch]
                mov     eax, [edx+eax*4]
                mov     [ebp+var_4], eax
                jmp     short loc_109088FF
; ---------------------------------------------------------------------------

loc_109088EE:                           ; CODE XREF: sub_109088C0:loc_10908938↓j
                mov     ecx, [ebp+var_4]
                imul    ecx, 2Ch
                mov     edx, [ebp+var_18]
                mov     eax, [edx]
                mov     ecx, [ecx+eax]
                mov     [ebp+var_4], ecx

loc_109088FF:                           ; CODE XREF: sub_109088C0+2C↑j
                cmp     [ebp+var_4], 0FFFFFFFFh
                jz      short loc_1090893A
                mov     edx, [ebp+var_4]
                imul    edx, 2Ch
                mov     eax, [ebp+var_18]
                add     edx, [eax]
                mov     [ebp+var_14], edx
                mov     ecx, [ebp+arg_0]
                push    ecx
                mov     ecx, [ebp+var_14]
                add     ecx, 4
                call    ds:??8dnString@@QBEHABV0@@Z ; dnString::operator==(dnString const &)
                test    eax, eax
                jz      short loc_10908938
                mov     edx, [ebp+var_4]
                imul    edx, 2Ch
                mov     eax, [ebp+var_18]
                mov     ecx, [eax]
                lea     eax, [ecx+edx+10h]
                jmp     short loc_1090893C
; ---------------------------------------------------------------------------

loc_10908938:                           ; CODE XREF: sub_109088C0+65↑j
                jmp     short loc_109088EE
; ---------------------------------------------------------------------------

loc_1090893A:                           ; CODE XREF: sub_109088C0+43↑j
                xor     eax, eax

loc_1090893C:                           ; CODE XREF: sub_109088C0+76↑j
                mov     esp, ebp
                pop     ebp
                retn    4
sub_109088C0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10908950    proc near               ; CODE XREF: sub_10909370+21↓p

var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 10h
                mov     [ebp+var_10], ecx
                mov     eax, [ebp+var_10]
                mov     ecx, [eax+10h]
                push    ecx
                mov     ecx, [ebp+var_10]
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                push    eax
                push    offset aDnmapbaseIItem ; "dnMapBase: %i items, %i hash slots"
                mov     edx, [ebp+arg_0]
                push    edx
                call    ds:?Logf@dnOutputDevice@@QAAXPB_WZZ ; dnOutputDevice::Logf(wchar_t const *,...)
                add     esp, 10h
                mov     [ebp+var_4], 0
                jmp     short loc_1090898E
; ---------------------------------------------------------------------------

loc_10908985:                           ; CODE XREF: sub_10908950+9D↓j
                mov     eax, [ebp+var_4]
                add     eax, 1
                mov     [ebp+var_4], eax

loc_1090898E:                           ; CODE XREF: sub_10908950+33↑j
                mov     ecx, [ebp+var_10]
                mov     edx, [ebp+var_4]
                cmp     edx, [ecx+10h]
                jge     short loc_109089EF
                mov     [ebp+var_8], 0
                mov     eax, [ebp+var_10]
                mov     ecx, [eax+0Ch]
                mov     edx, [ebp+var_4]
                mov     eax, [ecx+edx*4]
                mov     [ebp+var_C], eax
                jmp     short loc_109089C2
; ---------------------------------------------------------------------------

loc_109089B1:                           ; CODE XREF: sub_10908950+81↓j
                mov     ecx, [ebp+var_C]
                imul    ecx, 2Ch
                mov     edx, [ebp+var_10]
                mov     eax, [edx]
                mov     ecx, [ecx+eax]
                mov     [ebp+var_C], ecx

loc_109089C2:                           ; CODE XREF: sub_10908950+5F↑j
                cmp     [ebp+var_C], 0FFFFFFFFh
                jz      short loc_109089D3
                mov     edx, [ebp+var_8]
                add     edx, 1
                mov     [ebp+var_8], edx
                jmp     short loc_109089B1
; ---------------------------------------------------------------------------

loc_109089D3:                           ; CODE XREF: sub_10908950+76↑j
                mov     eax, [ebp+var_8]
                push    eax
                mov     ecx, [ebp+var_4]
                push    ecx
                push    offset aHashII  ; "   Hash[%i] = %i"
                mov     edx, [ebp+arg_0]
                push    edx
                call    ds:?Logf@dnOutputDevice@@QAAXPB_WZZ ; dnOutputDevice::Logf(wchar_t const *,...)
                add     esp, 10h
                jmp     short loc_10908985
; ---------------------------------------------------------------------------

loc_109089EF:                           ; CODE XREF: sub_10908950+47↑j
                mov     esp, ebp
                pop     ebp
                retn    4
sub_10908950    endp

; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                sub     esp, 8
                mov     [ebp-8], ecx
                mov     eax, [ebp-8]
                mov     ecx, [eax]
                mov     [ebp-4], ecx
                mov     edx, [ebp-8]
                mov     eax, [edx+4]
                imul    eax, 2Ch
                mov     ecx, [ebp-4]
                mov     edx, [ecx]
                lea     eax, [edx+eax+4]
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                sub     esp, 8
                mov     [ebp-8], ecx
                mov     eax, [ebp-8]
                mov     ecx, [eax]
                mov     [ebp-4], ecx
                mov     edx, [ebp-8]
                mov     eax, [edx+4]
                imul    eax, 2Ch
                mov     ecx, [ebp-4]
                mov     edx, [ecx]
                lea     eax, [edx+eax+10h]
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10908A60    proc near               ; CODE XREF: sub_1090B310+74↓p

var_30          = dword ptr -30h

                push    ebp
                mov     ebp, esp
                sub     esp, 30h
                mov     [ebp+var_30], ecx

loc_10908A69:                           ; CODE XREF: sub_10908A60+2F↓j
                mov     ecx, [ebp+var_30]
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                lea     eax, [eax+eax+8]
                mov     ecx, [ebp+var_30]
                cmp     [ecx+10h], eax
                jle     short loc_10908A91
                mov     edx, [ebp+var_30]
                mov     eax, [edx+10h]
                cdq
                sub     eax, edx
                sar     eax, 1
                mov     ecx, [ebp+var_30]
                mov     [ecx+10h], eax
                jmp     short loc_10908A69
; ---------------------------------------------------------------------------

loc_10908A91:                           ; CODE XREF: sub_10908A60+1C↑j
                mov     ecx, [ebp+var_30]
                call    sub_10904AD0
                mov     esp, ebp
                pop     ebp
                retn
sub_10908A60    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10908AA0    proc near               ; CODE XREF: sub_109098C0+25↓p
                                        ; .text:10909C55↓p ...

var_3C          = dword ptr -3Ch
var_38          = dword ptr -38h
var_34          = dword ptr -34h
var_30          = dword ptr -30h
var_2C          = dword ptr -2Ch
var_28          = dword ptr -28h
var_24          = dword ptr -24h
var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8

; FUNCTION CHUNK AT 10910D20 SIZE 0000001A BYTES

; __unwind { // SEH_10908AA0
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_10908AA0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 30h
                push    ebx
                push    esi
                push    edi
                mov     [ebp+var_38], ecx
                push    1Ch
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+4]
                push    ecx
                mov     ecx, [ebp+var_38]
                call    ds:??0dnArrayBase@@IAE@HH@Z ; dnArrayBase::dnArrayBase(int,int)
;   try {
                mov     [ebp+var_4], 0
                call    sub_10902AB0
                test    eax, eax
                jz      short loc_10908B57
                mov     edx, [ebp+var_38]
                mov     dword ptr [edx+4], 0
                mov     [ebp+var_10], 0
                jmp     short loc_10908AFF
; ---------------------------------------------------------------------------

loc_10908AF6:                           ; CODE XREF: sub_10908AA0+B0↓j
                mov     eax, [ebp+var_10]
                add     eax, 1
                mov     [ebp+var_10], eax

loc_10908AFF:                           ; CODE XREF: sub_10908AA0+54↑j
                mov     ecx, [ebp+arg_0]
                mov     edx, [ebp+var_10]
                cmp     edx, [ecx+4]
                jge     short loc_10908B52
                mov     eax, [ebp+var_38]
                push    eax
                push    1Ch
                call    sub_10908170
                add     esp, 8
                mov     [ebp+var_1C], eax
;   } // starts at 10908AD3
;   try {
                mov     byte ptr [ebp+var_4], 1
                cmp     [ebp+var_1C], 0
                jz      short loc_10908B3F
                mov     ecx, [ebp+var_10]
                push    ecx
                mov     ecx, [ebp+arg_0]
                call    sub_10908150
                push    eax
                mov     ecx, [ebp+var_1C]
                call    sub_109080E0
                mov     [ebp+var_3C], eax
                jmp     short loc_10908B46
; ---------------------------------------------------------------------------

loc_10908B3F:                           ; CODE XREF: sub_10908AA0+83↑j
                mov     [ebp+var_3C], 0

loc_10908B46:                           ; CODE XREF: sub_10908AA0+9D↑j
                mov     edx, [ebp+var_3C]
                mov     [ebp+var_18], edx
;   } // starts at 10908B1B
;   try {
                mov     byte ptr [ebp+var_4], 0
                jmp     short loc_10908AF6
; ---------------------------------------------------------------------------

loc_10908B52:                           ; CODE XREF: sub_10908AA0+68↑j
                jmp     loc_10908C15
; ---------------------------------------------------------------------------

loc_10908B57:                           ; CODE XREF: sub_10908AA0+41↑j
                mov     eax, 1
                test    eax, eax
                jz      short loc_10908BCF
                mov     [ebp+var_14], 0
                jmp     short loc_10908B72
; ---------------------------------------------------------------------------

loc_10908B69:                           ; CODE XREF: sub_10908AA0+12B↓j
                mov     ecx, [ebp+var_14]
                add     ecx, 1
                mov     [ebp+var_14], ecx

loc_10908B72:                           ; CODE XREF: sub_10908AA0+C7↑j
                mov     edx, [ebp+var_38]
                mov     eax, [ebp+var_14]
                cmp     eax, [edx+4]
                jge     short loc_10908BCD
                mov     ecx, [ebp+var_14]
                push    ecx
                mov     ecx, [ebp+arg_0]
                call    sub_10908150
                mov     [ebp+var_28], eax
                mov     edx, [ebp+var_14]
                push    edx
                mov     ecx, [ebp+var_38]
                call    sub_10902A80
                mov     [ebp+var_24], eax
                mov     eax, [ebp+var_24]
                mov     ecx, [ebp+var_28]
                mov     edx, [ecx]
                mov     [eax], edx
                mov     eax, [ebp+var_28]
                add     eax, 4
                push    eax
                mov     ecx, [ebp+var_24]
                add     ecx, 4
                call    ds:??4dnString@@QAEAAV0@ABV0@@Z ; dnString::operator=(dnString const &)
                mov     ecx, [ebp+var_28]
                add     ecx, 10h
                push    ecx
                mov     ecx, [ebp+var_24]
                add     ecx, 10h
                call    ds:??4dnString@@QAEAAV0@ABV0@@Z ; dnString::operator=(dnString const &)
                jmp     short loc_10908B69
; ---------------------------------------------------------------------------

loc_10908BCD:                           ; CODE XREF: sub_10908AA0+DB↑j
                jmp     short loc_10908C15
; ---------------------------------------------------------------------------

loc_10908BCF:                           ; CODE XREF: sub_10908AA0+BE↑j
                mov     edx, [ebp+var_38]
                cmp     dword ptr [edx+4], 0
                jz      short loc_10908C15
                mov     eax, [ebp+var_38]
                mov     ecx, [eax+4]
                imul    ecx, 1Ch
                mov     [ebp+var_34], ecx
                push    0
                mov     ecx, [ebp+arg_0]
                call    sub_10908150
                mov     [ebp+var_30], eax
                push    0
                mov     ecx, [ebp+var_38]
                call    sub_10902A80
                mov     [ebp+var_2C], eax
                mov     ecx, [ebp+var_34]
                mov     esi, [ebp+var_30]
                mov     edi, [ebp+var_2C]
                mov     ebx, ecx
                shr     ecx, 2
                and     ebx, 3
                rep movsd
                mov     ecx, ebx
                rep movsb
;   } // starts at 10908B4C

loc_10908C15:                           ; CODE XREF: sub_10908AA0:loc_10908B52↑j
                                        ; sub_10908AA0:loc_10908BCD↑j ...
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                pop     ebx
                mov     esp, ebp
                pop     ebp
                retn    4
; } // starts at 10908AA0
sub_10908AA0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10908C40    proc near               ; CODE XREF: sub_109094A0+F5↓p
                                        ; .text:109098B0↓p ...

var_8           = dword ptr -8
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                sub     esp, 8
                push    ebx
                push    esi
                mov     esi, ecx
                mov     eax, [esi+10h]
                xor     ecx, ecx
                mov     edx, 4
                mul     edx
                seto    cl
                push    edi
                neg     ecx
                or      ecx, eax
                mov     edi, ecx
                call    ds:?GetMalloc@@YAPAVFMalloc@@XZ ; GetMalloc(void)
                mov     edx, [eax]
                push    8
                mov     ecx, eax
                mov     eax, [edx+4]
                push    edi
                call    eax
                mov     ebx, eax
                xor     edi, edi
                xor     eax, eax
                cmp     [esi+10h], edi
                jle     short loc_10908C8D
                lea     ecx, [ecx+0]

loc_10908C80:                           ; CODE XREF: sub_10908C40+4B↓j
                mov     dword ptr [ebx+eax*4], 0FFFFFFFFh
                inc     eax
                cmp     eax, [esi+10h]
                jl      short loc_10908C80

loc_10908C8D:                           ; CODE XREF: sub_10908C40+3B↑j
                mov     ecx, esi
                mov     [ebp+var_8], edi
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                test    eax, eax
                jle     short loc_10908CDC
                mov     [ebp+var_4], edi
                nop

loc_10908CA0:                           ; CODE XREF: sub_10908C40+9A↓j
                mov     edi, [esi]
                add     edi, [ebp+var_4]
                lea     ecx, [edi+4]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                call    sub_10902040
                mov     ecx, [esi+10h]
                add     [ebp+var_4], 1Ch
                dec     ecx
                and     ecx, eax
                mov     edx, [ebx+ecx*4]
                mov     [edi], edx
                mov     edi, [ebp+var_8]
                mov     [ebx+ecx*4], edi
                inc     edi
                add     esp, 4
                mov     ecx, esi
                mov     [ebp+var_8], edi
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                cmp     edi, eax
                jl      short loc_10908CA0

loc_10908CDC:                           ; CODE XREF: sub_10908C40+5A↑j
                mov     edi, [esi+0Ch]
                test    edi, edi
                jz      short loc_10908CF3
                call    ds:?GetMalloc@@YAPAVFMalloc@@XZ ; GetMalloc(void)
                mov     edx, [eax]
                mov     ecx, eax
                mov     eax, [edx+10h]
                push    edi
                call    eax

loc_10908CF3:                           ; CODE XREF: sub_10908C40+A1↑j
                pop     edi
                mov     [esi+0Ch], ebx
                pop     esi
                pop     ebx
                mov     esp, ebp
                pop     ebp
                retn
sub_10908C40    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10908D00    proc near               ; CODE XREF: sub_1090BE40+504↓p
                                        ; sub_1090BE40+5AE↓p

var_98          = dword ptr -98h
var_94          = dword ptr -94h
var_90          = dword ptr -90h
var_8C          = dword ptr -8Ch
var_88          = dword ptr -88h
var_84          = dword ptr -84h
var_80          = dword ptr -80h
var_7C          = dword ptr -7Ch
var_78          = dword ptr -78h
var_74          = dword ptr -74h
var_70          = dword ptr -70h
var_6C          = dword ptr -6Ch
var_68          = dword ptr -68h
var_64          = dword ptr -64h
var_60          = dword ptr -60h
var_5C          = dword ptr -5Ch
var_58          = byte ptr -58h
var_4C          = byte ptr -4Ch
var_40          = byte ptr -40h
var_34          = byte ptr -34h
var_28          = dword ptr -28h
var_24          = dword ptr -24h
var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_18          = byte ptr -18h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch

; FUNCTION CHUNK AT 10910D50 SIZE 0000002D BYTES

; __unwind { // SEH_10908D00
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_10908D00
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 8Ch
                push    ebx
                push    esi
                push    edi
                mov     [ebp+var_80], ecx
                mov     eax, [ebp+var_80]
                cmp     dword ptr [eax+14h], 0
                jz      short loc_10908D36
                mov     ecx, [ebp+var_80]
                cmp     dword ptr [ecx+18h], 0
                jz      short loc_10908D40

loc_10908D36:                           ; CODE XREF: sub_10908D00+2B↑j
                mov     eax, 1
                jmp     loc_10908FEF
; ---------------------------------------------------------------------------

loc_10908D40:                           ; CODE XREF: sub_10908D00+34↑j
                mov     edx, [ebp+var_80]
                mov     dword ptr [edx+14h], 0
                lea     ecx, [ebp+var_18]
                call    ds:??0dnString@@QAE@XZ ; dnString::dnString(void)
;   try {
                mov     [ebp+var_4], 0
                mov     eax, [ebp+var_80]
                mov     [ebp+var_20], eax
                mov     [ebp+var_1C], 0
                jmp     short loc_10908D72
; ---------------------------------------------------------------------------

loc_10908D69:                           ; CODE XREF: sub_10908D00+1F6↓j
                mov     ecx, [ebp+var_1C]
                add     ecx, 1
                mov     [ebp+var_1C], ecx

loc_10908D72:                           ; CODE XREF: sub_10908D00+67↑j
                mov     ecx, [ebp+var_20]
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                xor     edx, edx
                cmp     [ebp+var_1C], eax
                setl    dl
                test    edx, edx
                jz      loc_10908EFB
                mov     eax, [ebp+var_1C]
                imul    eax, 24h
                mov     ecx, [ebp+var_20]
                mov     edx, [ecx]
                lea     eax, [edx+eax+4]
                mov     [ebp+var_64], eax
                mov     ecx, [ebp+var_64]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                push    offset aS_0     ; "[%s]\r\n"
                lea     ecx, [ebp+var_40]
                push    ecx
                call    ds:?Printf@dnString@@SA?AV1@PB_WZZ ; dnString::Printf(wchar_t const *,...)
                add     esp, 0Ch
                mov     [ebp+var_84], eax
                mov     edx, [ebp+var_84]
                mov     [ebp+var_88], edx
;   } // starts at 10908D53
;   try {
                mov     byte ptr [ebp+var_4], 1
                mov     eax, [ebp+var_88]
                push    eax
                lea     ecx, [ebp+var_18]
                call    ds:??YdnString@@QAEAAV0@ABV0@@Z ; dnString::operator+=(dnString const &)
;   } // starts at 10908DCB
;   try {
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_40]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                mov     ecx, [ebp+var_1C]
                imul    ecx, 24h
                mov     edx, [ebp+var_20]
                mov     eax, [edx]
                lea     ecx, [eax+ecx+10h]
                mov     [ebp+var_68], ecx
                mov     edx, [ebp+var_68]
                mov     [ebp+var_28], edx
                mov     [ebp+var_24], 0
                jmp     short loc_10908E16
; ---------------------------------------------------------------------------

loc_10908E0D:                           ; CODE XREF: sub_10908D00+1AC↓j
                mov     eax, [ebp+var_24]
                add     eax, 1
                mov     [ebp+var_24], eax

loc_10908E16:                           ; CODE XREF: sub_10908D00+10B↑j
                mov     ecx, [ebp+var_28]
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                xor     ecx, ecx
                cmp     [ebp+var_24], eax
                setl    cl
                test    ecx, ecx
                jz      loc_10908EB1
                mov     edx, [ebp+var_24]
                push    edx
                mov     ecx, [ebp+var_28]
                call    sub_10902A80
                add     eax, 10h
                mov     [ebp+var_6C], eax
                mov     eax, [ebp+var_24]
                push    eax
                mov     ecx, [ebp+var_28]
                call    sub_10902A80
                add     eax, 4
                mov     [ebp+var_70], eax
                mov     ecx, [ebp+var_6C]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                mov     ecx, [ebp+var_70]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                push    offset aSS_0    ; "%s=%s\r\n"
                lea     ecx, [ebp+var_4C]
                push    ecx
                call    ds:?Printf@dnString@@SA?AV1@PB_WZZ ; dnString::Printf(wchar_t const *,...)
                add     esp, 10h
                mov     [ebp+var_8C], eax
                mov     edx, [ebp+var_8C]
                mov     [ebp+var_90], edx
;   } // starts at 10908DDF
;   try {
                mov     byte ptr [ebp+var_4], 2
                mov     eax, [ebp+var_90]
                push    eax
                lea     ecx, [ebp+var_18]
                call    ds:??YdnString@@QAEAAV0@ABV0@@Z ; dnString::operator+=(dnString const &)
;   } // starts at 10908E8B
;   try {
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_4C]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                jmp     loc_10908E0D
; ---------------------------------------------------------------------------

loc_10908EB1:                           ; CODE XREF: sub_10908D00+129↑j
                push    offset asc_10912EF4 ; "\r\n"
                lea     ecx, [ebp+var_58]
                push    ecx
                call    ds:?Printf@dnString@@SA?AV1@PB_WZZ ; dnString::Printf(wchar_t const *,...)
                add     esp, 8
                mov     [ebp+var_94], eax
                mov     edx, [ebp+var_94]
                mov     [ebp+var_98], edx
;   } // starts at 10908E9F
;   try {
                mov     byte ptr [ebp+var_4], 3
                mov     eax, [ebp+var_98]
                push    eax
                lea     ecx, [ebp+var_18]
                call    ds:??YdnString@@QAEAAV0@ABV0@@Z ; dnString::operator+=(dnString const &)
;   } // starts at 10908ED5
;   try {
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_58]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                jmp     loc_10908D69
; ---------------------------------------------------------------------------

loc_10908EFB:                           ; CODE XREF: sub_10908D00+85↑j
                cmp     [ebp+arg_4], 0
                jz      loc_10908FC0
                lea     ecx, [ebp+var_34]
                call    ds:??0?$dnArray@E@@QAE@XZ ; dnArray<uchar>::dnArray<uchar>(void)
;   } // starts at 10908EE9
;   try {
                mov     byte ptr [ebp+var_4], 4
                lea     ecx, [ebp+var_18]
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                shl     eax, 1
                push    eax
                lea     ecx, [ebp+var_34]
                call    ds:?AddZeroed@?$dnArray@E@@QAEHH@Z ; dnArray<uchar>::AddZeroed(int)
                lea     ecx, [ebp+var_18]
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                shl     eax, 1
                mov     [ebp+var_7C], eax
                lea     ecx, [ebp+var_18]
                call    ds:?GetData@dnArrayBase@@QAEPAXXZ ; dnArrayBase::GetData(void)
                mov     [ebp+var_78], eax
                lea     ecx, [ebp+var_34]
                call    ds:?GetData@dnArrayBase@@QAEPAXXZ ; dnArrayBase::GetData(void)
                mov     [ebp+var_74], eax
                mov     ecx, [ebp+var_7C]
                mov     esi, [ebp+var_78]
                mov     edi, [ebp+var_74]
                mov     ebx, ecx
                shr     ecx, 2
                and     ebx, 3
                rep movsd
                mov     ecx, ebx
                rep movsb
                lea     ecx, [ebp+var_34]
                push    ecx
                call    sub_10904980
                add     esp, 4
                test    eax, eax
                jz      short loc_10908FB3
                mov     edx, ds:?GFileManager@@3PAVdnFileMgr@@A ; dnFileMgr * GFileManager
                mov     eax, [edx]
                push    eax
                mov     ecx, [ebp+arg_0]
                push    ecx
                lea     edx, [ebp+var_34]
                push    edx
                call    ds:?appSaveArrayToFile@@YAHABV?$dnArray@E@@PB_WPAVdnFileMgr@@@Z ; appSaveArrayToFile(dnArray<uchar> const &,wchar_t const *,dnFileMgr *)
                add     esp, 0Ch
                mov     [ebp+var_5C], eax
;   } // starts at 10908F0E
;   try {
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_34]
                call    ds:??1?$dnArray@E@@QAE@XZ ; dnArray<uchar>::~dnArray<uchar>(void)
;   } // starts at 10908F91
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_18]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                mov     eax, [ebp+var_5C]
                jmp     short loc_10908FEF
; ---------------------------------------------------------------------------

loc_10908FB3:                           ; CODE XREF: sub_10908D00+272↑j
;   try {
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_34]
                call    ds:??1?$dnArray@E@@QAE@XZ ; dnArray<uchar>::~dnArray<uchar>(void)

loc_10908FC0:                           ; CODE XREF: sub_10908D00+1FF↑j
                mov     eax, ds:?GFileManager@@3PAVdnFileMgr@@A ; dnFileMgr * GFileManager
                mov     ecx, [eax]
                push    ecx
                mov     edx, [ebp+arg_0]
                push    edx
                lea     eax, [ebp+var_18]
                push    eax
                call    ds:?appSaveStringToFile@@YAHABVdnString@@PB_WPAVdnFileMgr@@@Z ; appSaveStringToFile(dnString const &,wchar_t const *,dnFileMgr *)
                add     esp, 0Ch
                mov     [ebp+var_60], eax
;   } // starts at 10908FB3
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_18]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                mov     eax, [ebp+var_60]

loc_10908FEF:                           ; CODE XREF: sub_10908D00+3B↑j
                                        ; sub_10908D00+2B1↑j
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                pop     ebx
                mov     esp, ebp
                pop     ebp
                retn    8
; } // starts at 10908D00
sub_10908D00    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10909010    proc near               ; CODE XREF: sub_109091E0+3E↓p
                                        ; sub_1090BE40+1AA↓p ...

var_58          = dword ptr -58h
var_54          = dword ptr -54h
var_50          = dword ptr -50h
var_4C          = dword ptr -4Ch
var_48          = dword ptr -48h
var_44          = dword ptr -44h
var_40          = dword ptr -40h
var_3C          = dword ptr -3Ch
var_38          = dword ptr -38h
var_34          = byte ptr -34h
var_28          = byte ptr -28h
var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8

; FUNCTION CHUNK AT 10910D90 SIZE 00000012 BYTES

; __unwind { // SEH_10909010
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_10909010
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 4Ch
                mov     [ebp+var_48], ecx
                mov     eax, [ebp+var_48]
                cmp     dword ptr [eax+14h], 0
                jz      short loc_10909040
                mov     ecx, [ebp+var_48]
                cmp     dword ptr [ecx+18h], 0
                jz      short loc_1090904A

loc_10909040:                           ; CODE XREF: sub_10909010+25↑j
                mov     eax, 1
                jmp     loc_109091C4
; ---------------------------------------------------------------------------

loc_1090904A:                           ; CODE XREF: sub_10909010+2E↑j
                push    0
                mov     ecx, [ebp+arg_0]
                call    ds:?Empty@dnString@@QAEXH@Z ; dnString::Empty(int)
                mov     edx, [ebp+var_48]
                mov     [ebp+var_14], edx
                mov     [ebp+var_10], 0
                jmp     short loc_1090906D
; ---------------------------------------------------------------------------

loc_10909064:                           ; CODE XREF: sub_10909010+1AA↓j
                mov     eax, [ebp+var_10]
                add     eax, 1
                mov     [ebp+var_10], eax

loc_1090906D:                           ; CODE XREF: sub_10909010+52↑j
                mov     ecx, [ebp+var_14]
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                xor     ecx, ecx
                cmp     [ebp+var_10], eax
                setl    cl
                test    ecx, ecx
                jz      loc_109091BF
                mov     edx, [ebp+var_10]
                imul    edx, 24h
                mov     eax, [ebp+var_14]
                mov     ecx, [eax]
                lea     edx, [ecx+edx+4]
                mov     [ebp+var_38], edx
                mov     ecx, [ebp+var_38]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                push    offset aS_0     ; "[%s]\r\n"
                lea     eax, [ebp+var_28]
                push    eax
                call    ds:?Printf@dnString@@SA?AV1@PB_WZZ ; dnString::Printf(wchar_t const *,...)
                add     esp, 0Ch
                mov     [ebp+var_4C], eax
                mov     ecx, [ebp+var_4C]
                mov     [ebp+var_50], ecx
;   try {
                mov     [ebp+var_4], 0
                mov     ecx, [ebp+var_50]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                mov     ecx, [ebp+arg_0]
                call    ds:??YdnString@@QAEAAV0@PB_W@Z ; dnString::operator+=(wchar_t const *)
;   } // starts at 109090BD
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_28]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                mov     edx, [ebp+var_10]
                imul    edx, 24h
                mov     eax, [ebp+var_14]
                mov     ecx, [eax]
                lea     edx, [ecx+edx+10h]
                mov     [ebp+var_3C], edx
                mov     eax, [ebp+var_3C]
                mov     [ebp+var_1C], eax
                mov     [ebp+var_18], 0
                jmp     short loc_10909111
; ---------------------------------------------------------------------------

loc_10909108:                           ; CODE XREF: sub_10909010+197↓j
                mov     ecx, [ebp+var_18]
                add     ecx, 1
                mov     [ebp+var_18], ecx

loc_10909111:                           ; CODE XREF: sub_10909010+F6↑j
                mov     ecx, [ebp+var_1C]
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                xor     edx, edx
                cmp     [ebp+var_18], eax
                setl    dl
                test    edx, edx
                jz      loc_109091AC
                mov     eax, [ebp+var_18]
                push    eax
                mov     ecx, [ebp+var_1C]
                call    sub_10902A80
                add     eax, 10h
                mov     [ebp+var_40], eax
                mov     ecx, [ebp+var_18]
                push    ecx
                mov     ecx, [ebp+var_1C]
                call    sub_10902A80
                add     eax, 4
                mov     [ebp+var_44], eax
                mov     ecx, [ebp+var_40]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                mov     ecx, [ebp+var_44]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                push    offset aSS_0    ; "%s=%s\r\n"
                lea     edx, [ebp+var_34]
                push    edx
                call    ds:?Printf@dnString@@SA?AV1@PB_WZZ ; dnString::Printf(wchar_t const *,...)
                add     esp, 10h
                mov     [ebp+var_54], eax
                mov     eax, [ebp+var_54]
                mov     [ebp+var_58], eax
;   try {
                mov     [ebp+var_4], 1
                mov     ecx, [ebp+var_58]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                mov     ecx, [ebp+arg_0]
                call    ds:??YdnString@@QAEAAV0@PB_W@Z ; dnString::operator+=(wchar_t const *)
;   } // starts at 1090917D
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_34]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                jmp     loc_10909108
; ---------------------------------------------------------------------------

loc_109091AC:                           ; CODE XREF: sub_10909010+114↑j
                push    offset asc_10912EF4 ; "\r\n"
                mov     ecx, [ebp+arg_0]
                call    ds:??YdnString@@QAEAAV0@PB_W@Z ; dnString::operator+=(wchar_t const *)
                jmp     loc_10909064
; ---------------------------------------------------------------------------

loc_109091BF:                           ; CODE XREF: sub_10909010+70↑j
                mov     eax, 1

loc_109091C4:                           ; CODE XREF: sub_10909010+35↑j
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    4
; } // starts at 10909010
sub_10909010    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_109091E0    proc near               ; CODE XREF: sub_1090BE40+4AD↓p

var_8C          = dword ptr -8Ch
var_88          = dword ptr -88h
var_84          = dword ptr -84h
var_80          = dword ptr -80h
var_44          = byte ptr -44h
var_38          = dword ptr -38h
var_34          = byte ptr -34h
var_28          = dword ptr -28h
var_24          = byte ptr -24h
var_18          = byte ptr -18h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch
arg_8           = dword ptr  10h

; FUNCTION CHUNK AT 10910DB0 SIZE 00000024 BYTES

; __unwind { // SEH_109091E0
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_109091E0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 80h
                push    ebx
                push    esi
                push    edi
                mov     [ebp+var_8C], ecx
                lea     ecx, [ebp+var_18]
                call    ds:??0dnString@@QAE@XZ ; dnString::dnString(void)
;   try {
                mov     [ebp+var_4], 0
                lea     eax, [ebp+var_18]
                push    eax
                mov     ecx, [ebp+arg_0]
                call    sub_10909010
                cmp     [ebp+arg_8], 0
                jz      loc_10909309
                lea     ecx, [ebp+var_24]
                call    ds:??0?$dnArray@E@@QAE@XZ ; dnArray<uchar>::dnArray<uchar>(void)
;   } // starts at 10909210
;   try {
                mov     byte ptr [ebp+var_4], 1
                lea     ecx, [ebp+var_18]
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                shl     eax, 1
                push    eax
                lea     ecx, [ebp+var_24]
                call    ds:?AddZeroed@?$dnArray@E@@QAEHH@Z ; dnArray<uchar>::AddZeroed(int)
                lea     ecx, [ebp+var_18]
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                shl     eax, 1
                mov     [ebp+var_88], eax
                lea     ecx, [ebp+var_18]
                call    ds:?GetData@dnArrayBase@@QAEPAXXZ ; dnArrayBase::GetData(void)
                mov     [ebp+var_84], eax
                lea     ecx, [ebp+var_24]
                call    ds:?GetData@dnArrayBase@@QAEPAXXZ ; dnArrayBase::GetData(void)
                mov     [ebp+var_80], eax
                mov     ecx, [ebp+var_88]
                mov     esi, [ebp+var_84]
                mov     edi, [ebp+var_80]
                mov     ebx, ecx
                shr     ecx, 2
                and     ebx, 3
                rep movsd
                mov     ecx, ebx
                rep movsb
                lea     ecx, [ebp+var_24]
                push    ecx
                call    sub_10904980
                add     esp, 4
                test    eax, eax
                jz      short loc_109092FC
                mov     edx, [ebp+arg_4]
                push    edx
                lea     ecx, [ebp+var_34]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
;   } // starts at 10909236
;   try {
                mov     byte ptr [ebp+var_4], 2
                lea     eax, [ebp+var_24]
                push    eax
                lea     ecx, [ebp+var_34]
                push    ecx
                call    ds:?s_WriteToFile@@YAHABVdnString@@AAV?$dnArray@E@@@Z ; s_WriteToFile(dnString const &,dnArray<uchar> &)
                add     esp, 8
                mov     [ebp+var_28], eax
;   } // starts at 109092B5
;   try {
                mov     byte ptr [ebp+var_4], 1
                lea     ecx, [ebp+var_34]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
;   } // starts at 109092CD
;   try {
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_24]
                call    ds:??1?$dnArray@E@@QAE@XZ ; dnArray<uchar>::~dnArray<uchar>(void)
;   } // starts at 109092DA
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_18]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                mov     eax, [ebp+var_28]
                jmp     short loc_1090934E
; ---------------------------------------------------------------------------

loc_109092FC:                           ; CODE XREF: sub_109091E0+C6↑j
;   try {
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_24]
                call    ds:??1?$dnArray@E@@QAE@XZ ; dnArray<uchar>::~dnArray<uchar>(void)

loc_10909309:                           ; CODE XREF: sub_109091E0+47↑j
                mov     edx, [ebp+arg_4]
                push    edx
                lea     ecx, [ebp+var_44]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
;   } // starts at 109092FC
;   try {
                mov     byte ptr [ebp+var_4], 3
                lea     eax, [ebp+var_18]
                push    eax
                lea     ecx, [ebp+var_44]
                push    ecx
                call    ds:?s_WriteStringToFile@@YAHABVdnString@@0@Z ; s_WriteStringToFile(dnString const &,dnString const &)
                add     esp, 8
                mov     [ebp+var_38], eax
;   } // starts at 10909316
;   try {
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_44]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
;   } // starts at 1090932E
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_18]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                mov     eax, [ebp+var_38]

loc_1090934E:                           ; CODE XREF: sub_109091E0+11A↑j
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                pop     ebx
                mov     esp, ebp
                pop     ebp
                retn    0Ch
; } // starts at 109091E0
sub_109091E0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10909370    proc near               ; DATA XREF: .rdata:10913528↓o

var_10          = dword ptr -10h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 10h
                mov     [ebp+var_10], ecx
                push    offset aFilesMap ; "Files map:"
                mov     ecx, [ebp+arg_0]
                call    ds:?Log@dnOutputDevice@@QAEXPB_W@Z ; dnOutputDevice::Log(wchar_t const *)
                mov     eax, [ebp+arg_0]
                push    eax
                mov     ecx, [ebp+var_10]
                add     ecx, 4
                call    sub_10908950
                mov     esp, ebp
                pop     ebp
                retn    4
sub_10909370    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

FConfigCache__GetFloat proc near        ; DATA XREF: .rdata:109134E8↓o

var_148         = dword ptr -148h
var_144         = dword ptr -144h
var_12C         = dword ptr -12Ch
var_A4          = dword ptr -0A4h
String          = word ptr -0A0h
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch
arg_8           = dword ptr  10h
arg_C           = dword ptr  14h

                push    ebp
                mov     ebp, esp
                sub     esp, 148h
                mov     [ebp+var_144], ecx
                mov     eax, [ebp+arg_C]
                push    eax
                push    50h
                lea     ecx, [ebp+String]
                push    ecx
                mov     edx, [ebp+arg_4]
                push    edx
                mov     eax, [ebp+arg_0]
                push    eax
                mov     ecx, [ebp+var_144]
                mov     edx, [ecx]
                mov     ecx, [ebp+var_144]
                mov     eax, [edx+14h]
                call    eax
                test    eax, eax
                jz      short loc_1090942F
                lea     ecx, [ebp+String]
                push    ecx             ; lpString
                lea     ecx, [ebp+var_12C]
                call    sub_10902900
                mov     [ebp+var_148], eax
                mov     ecx, [ebp+var_148]
                call    sub_10902980
                push    eax             ; String
                call    ds:atof
                add     esp, 4
                fstp    [ebp+var_A4]
                lea     ecx, [ebp+var_12C]
                call    sub_10902950
                mov     edx, [ebp+arg_8]
                movss   xmm0, [ebp+var_A4]
                movss   dword ptr [edx], xmm0
                mov     eax, 1
                jmp     short loc_10909431
; ---------------------------------------------------------------------------

loc_1090942F:                           ; CODE XREF: FConfigCache__GetFloat+39↑j
                xor     eax, eax

loc_10909431:                           ; CODE XREF: FConfigCache__GetFloat+8D↑j
                mov     esp, ebp
                pop     ebp
                retn    10h
FConfigCache__GetFloat endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10909440    proc near               ; CODE XREF: sub_10909650+154↓p

var_20          = dword ptr -20h
var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 20h
                mov     [ebp+var_20], ecx
                mov     [ebp+var_4], 0
                jmp     short loc_1090945B
; ---------------------------------------------------------------------------

loc_10909452:                           ; CODE XREF: sub_10909440:loc_10909487↓j
                mov     eax, [ebp+var_4]
                add     eax, 1
                mov     [ebp+var_4], eax

loc_1090945B:                           ; CODE XREF: sub_10909440+10↑j
                mov     ecx, [ebp+var_20]
                mov     edx, [ebp+var_4]
                cmp     edx, [ecx+4]
                jge     short loc_10909489
                mov     eax, [ebp+arg_0]
                push    eax
                mov     ecx, [ebp+var_4]
                push    ecx
                mov     ecx, [ebp+var_20]
                call    sub_109029A0
                mov     ecx, eax
                call    ds:??8dnString@@QBEHABV0@@Z ; dnString::operator==(dnString const &)
                test    eax, eax
                jz      short loc_10909487
                mov     eax, [ebp+var_4]
                jmp     short loc_10909495
; ---------------------------------------------------------------------------

loc_10909487:                           ; CODE XREF: sub_10909440+40↑j
                jmp     short loc_10909452
; ---------------------------------------------------------------------------

loc_10909489:                           ; CODE XREF: sub_10909440+24↑j
                mov     edx, [ebp+arg_0]
                push    edx
                mov     ecx, [ebp+var_20]
                call    sub_10906620

loc_10909495:                           ; CODE XREF: sub_10909440+45↑j
                mov     esp, ebp
                pop     ebp
                retn    4
sub_10909440    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_109094A0    proc near               ; CODE XREF: .text:10909884↓p
                                        ; sub_1090A940+402↓p ...

var_60          = dword ptr -60h
var_5C          = dword ptr -5Ch
var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch

; FUNCTION CHUNK AT 10910DE0 SIZE 0000001D BYTES

; __unwind { // SEH_109094A0
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_109094A0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 54h
                push    esi
                mov     [ebp+var_5C], ecx
                mov     eax, [ebp+var_5C]
                push    eax
                push    1Ch
                call    sub_10908170
                add     esp, 8
                mov     [ebp+var_1C], eax
;   try {
                mov     [ebp+var_4], 0
                cmp     [ebp+var_1C], 0
                jz      short loc_1090950D
                mov     ecx, [ebp+arg_0]
                push    ecx
                mov     ecx, [ebp+var_1C]
                add     ecx, 4
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
;   } // starts at 109094D0
;   try {
                mov     byte ptr [ebp+var_4], 1
                mov     edx, [ebp+arg_4]
                push    edx
                mov     ecx, [ebp+var_1C]
                add     ecx, 10h
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
;   } // starts at 109094ED
;   try {
                mov     byte ptr [ebp+var_4], 0
                mov     eax, [ebp+var_1C]
                mov     [ebp+var_60], eax
                jmp     short loc_10909514
; ---------------------------------------------------------------------------

loc_1090950D:                           ; CODE XREF: sub_109094A0+3B↑j
                mov     [ebp+var_60], 0

loc_10909514:                           ; CODE XREF: sub_109094A0+6B↑j
                mov     ecx, [ebp+var_60]
                mov     [ebp+var_18], ecx
;   } // starts at 10909501
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     edx, [ebp+var_18]
                mov     [ebp+var_14], edx
                mov     eax, [ebp+var_14]
                add     eax, 4
                push    eax
                call    sub_10902870
                add     esp, 4
                mov     ecx, [ebp+var_5C]
                mov     edx, [ecx+10h]
                sub     edx, 1
                and     eax, edx
                mov     [ebp+var_10], eax
                mov     eax, [ebp+var_5C]
                mov     ecx, [eax+0Ch]
                mov     edx, [ebp+var_14]
                mov     eax, [ebp+var_10]
                mov     ecx, [ecx+eax*4]
                mov     [edx], ecx
                mov     ecx, [ebp+var_5C]
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                sub     eax, 1
                mov     edx, [ebp+var_5C]
                mov     ecx, [edx+0Ch]
                mov     edx, [ebp+var_10]
                mov     [ecx+edx*4], eax
                mov     eax, [ebp+var_5C]
                mov     ecx, [eax+10h]
                lea     esi, [ecx+ecx+8]
                mov     ecx, [ebp+var_5C]
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                cmp     esi, eax
                jge     short loc_1090959A
                mov     edx, [ebp+var_5C]
                mov     eax, [edx+10h]
                shl     eax, 1
                mov     ecx, [ebp+var_5C]
                mov     [ecx+10h], eax
                mov     ecx, [ebp+var_5C]
                call    sub_10908C40

loc_1090959A:                           ; CODE XREF: sub_109094A0+E2↑j
                mov     eax, [ebp+var_14]
                add     eax, 10h
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn    8
; } // starts at 109094A0
sub_109094A0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_109095C0    proc near               ; CODE XREF: .text:1090989E↓p
                                        ; sub_10909930+B6↓p ...

var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8

; FUNCTION CHUNK AT 10910E10 SIZE 0000000C BYTES

; __unwind { // SEH_109095C0
                push    ebp
                mov     ebp, esp
                mov     eax, large fs:0
                push    0FFFFFFFFh
                push    offset SEH_109095C0
                push    eax
                mov     large fs:0, esp
                sub     esp, 8
                push    ebx
                push    edi
                mov     edi, ecx
                xor     ebx, ebx
                cmp     [edi+4], ebx
                jle     short loc_10909623
                mov     [ebp+var_10], ebx
                push    esi
                lea     ebx, [ebx+0]

loc_109095F0:                           ; CODE XREF: sub_109095C0+60↓j
                mov     esi, [edi]
                add     esi, [ebp+var_10]
                mov     [ebp+var_14], esi
                lea     ecx, [esi+10h]
;   try {
                mov     [ebp+var_4], 0
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                lea     ecx, [esi+4]
;   } // starts at 109095FB
                mov     [ebp+var_4], 0FFFFFFFFh
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                add     [ebp+var_10], 1Ch
                inc     ebx
                cmp     ebx, [edi+4]
                jl      short loc_109095F0
                pop     esi

loc_10909623:                           ; CODE XREF: sub_109095C0+24↑j
                mov     eax, [ebp+arg_0]
                push    eax
                push    1Ch
                mov     ecx, edi
                call    ds:?Empty@dnArrayBase@@QAEXHH@Z ; dnArrayBase::Empty(int,int)
                mov     ecx, [ebp+var_C]
                pop     edi
                pop     ebx
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    4
; } // starts at 109095C0
sub_109095C0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10909650    proc near               ; DATA XREF: .rdata:10913534↓o

var_CC          = dword ptr -0CCh
var_C8          = dword ptr -0C8h
var_C4          = dword ptr -0C4h
var_C0          = dword ptr -0C0h
var_BC          = dword ptr -0BCh
var_B8          = dword ptr -0B8h
var_B4          = dword ptr -0B4h
var_6C          = dword ptr -6Ch
var_68          = dword ptr -68h
var_64          = dword ptr -64h
var_60          = dword ptr -60h
var_54          = byte ptr -54h
var_48          = byte ptr -48h
var_3C          = dword ptr -3Ch
var_38          = byte ptr -38h
var_2C          = dword ptr -2Ch
var_28          = dword ptr -28h
var_24          = byte ptr -24h
var_18          = dword ptr -18h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch
arg_8           = dword ptr  10h
arg_C           = dword ptr  14h
arg_10          = dword ptr  18h
arg_14          = dword ptr  1Ch

; FUNCTION CHUNK AT 10910E30 SIZE 0000004D BYTES

; __unwind { // SEH_10909650
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_10909650
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0C0h
                mov     [ebp+var_B4], ecx
                mov     [ebp+var_64], 0
                lea     ecx, [ebp+var_18]
                call    sub_10902990
;   try {
                mov     [ebp+var_4], 1
                mov     eax, [ebp+arg_4]
                push    eax
                lea     ecx, [ebp+var_24]
                call    ds:??0FFilename@@QAE@PB_W@Z ; FFilename::FFilename(wchar_t const *)
;   } // starts at 10909683
;   try {
                mov     byte ptr [ebp+var_4], 2
                mov     ecx, [ebp+var_B4]
                cmp     dword ptr [ecx+18h], 0
                jz      loc_109097BD
                cmp     [ebp+var_B4], 0
                jz      short loc_109096C2
                mov     edx, [ebp+var_B4]
                add     edx, 4
                mov     [ebp+var_68], edx
                jmp     short loc_109096C9
; ---------------------------------------------------------------------------

loc_109096C2:                           ; CODE XREF: sub_10909650+62↑j
                mov     [ebp+var_68], 0

loc_109096C9:                           ; CODE XREF: sub_10909650+70↑j
                mov     eax, [ebp+var_68]
                mov     [ebp+var_2C], eax
                mov     [ebp+var_28], 0
                jmp     short loc_109096E1
; ---------------------------------------------------------------------------

loc_109096D8:                           ; CODE XREF: sub_10909650+166↓j
                mov     ecx, [ebp+var_28]
                add     ecx, 1
                mov     [ebp+var_28], ecx

loc_109096E1:                           ; CODE XREF: sub_10909650+86↑j
                mov     ecx, [ebp+var_2C]
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                xor     edx, edx
                cmp     [ebp+var_28], eax
                setl    dl
                test    edx, edx
                jz      loc_109097BB
                mov     eax, [ebp+var_28]
                imul    eax, 2Ch
                mov     ecx, [ebp+var_2C]
                mov     edx, [ecx]
                lea     eax, [edx+eax+4]
                mov     [ebp+var_6C], eax
                mov     ecx, [ebp+var_6C]
                push    ecx
                lea     ecx, [ebp+var_38]
                call    ds:??0FFilename@@QAE@ABVdnString@@@Z ; FFilename::FFilename(dnString const &)
;   } // starts at 10909697
;   try {
                mov     byte ptr [ebp+var_4], 3
                push    0
                lea     edx, [ebp+var_54]
                push    edx
                lea     ecx, [ebp+var_24]
                call    ds:?GetExtension@FFilename@@QBE?AVdnString@@H@Z ; FFilename::GetExtension(int)
                mov     [ebp+var_B8], eax
                mov     eax, [ebp+var_B8]
                mov     [ebp+var_BC], eax
;   } // starts at 10909719
;   try {
                mov     byte ptr [ebp+var_4], 4
                push    0
                lea     ecx, [ebp+var_48]
                push    ecx
                lea     ecx, [ebp+var_38]
                call    ds:?GetExtension@FFilename@@QBE?AVdnString@@H@Z ; FFilename::GetExtension(int)
                mov     [ebp+var_C0], eax
                mov     edx, [ebp+var_C0]
                mov     [ebp+var_C4], edx
;   } // starts at 1090973E
;   try {
                mov     byte ptr [ebp+var_4], 5
                mov     eax, [ebp+var_BC]
                push    eax
                mov     ecx, [ebp+var_C4]
                call    ds:??8dnString@@QBEHABV0@@Z ; dnString::operator==(dnString const &)
                mov     [ebp+var_3C], eax
;   } // starts at 10909763
;   try {
                mov     byte ptr [ebp+var_4], 4
                lea     ecx, [ebp+var_48]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
;   } // starts at 1090977D
;   try {
                mov     byte ptr [ebp+var_4], 3
                lea     ecx, [ebp+var_54]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                cmp     [ebp+var_3C], 0
                jz      short loc_109097A9
                lea     ecx, [ebp+var_38]
                push    ecx
                lea     ecx, [ebp+var_18]
                call    sub_10909440
;   } // starts at 1090978A

loc_109097A9:                           ; CODE XREF: sub_10909650+14B↑j
;   try {
                mov     byte ptr [ebp+var_4], 2
                lea     ecx, [ebp+var_38]
                call    ds:??1FFilename@@QAE@XZ ; FFilename::~FFilename(void)
                jmp     loc_109096D8
; ---------------------------------------------------------------------------

loc_109097BB:                           ; CODE XREF: sub_10909650+A4↑j
                jmp     short loc_10909822
; ---------------------------------------------------------------------------

loc_109097BD:                           ; CODE XREF: sub_10909650+55↑j
                mov     edx, [ebp+arg_14]
                push    edx
                mov     eax, [ebp+arg_10]
                push    eax
                mov     ecx, [ebp+arg_C]
                push    ecx
                mov     edx, [ebp+arg_8]
                push    edx
                lea     ecx, [ebp+var_24]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                lea     eax, [ebp+var_60]
                push    eax
                mov     ecx, ds:?GFileManager@@3PAVdnFileMgr@@A ; dnFileMgr * GFileManager
                mov     edx, [ecx]
                mov     eax, ds:?GFileManager@@3PAVdnFileMgr@@A ; dnFileMgr * GFileManager
                mov     ecx, [eax]
                mov     edx, [edx]
                mov     eax, [edx+40h]
                call    eax
                mov     [ebp+var_C8], eax
                mov     ecx, [ebp+var_C8]
                mov     [ebp+var_CC], ecx
;   } // starts at 109097A9
;   try {
                mov     byte ptr [ebp+var_4], 6
                mov     edx, [ebp+var_CC]
                push    edx
                lea     ecx, [ebp+var_18]
                call    sub_10904FB0
;   } // starts at 10909803
;   try {
                mov     byte ptr [ebp+var_4], 2
                lea     ecx, [ebp+var_60]
                call    sub_10905860

loc_10909822:                           ; CODE XREF: sub_10909650:loc_109097BB↑j
                lea     eax, [ebp+var_18]
                push    eax
                mov     ecx, [ebp+arg_0]
                call    sub_10905080
                mov     ecx, [ebp+var_64]
                or      ecx, 1
                mov     [ebp+var_64], ecx
;   } // starts at 10909816
;   try {
                mov     byte ptr [ebp+var_4], 1
                lea     ecx, [ebp+var_24]
                call    ds:??1FFilename@@QAE@XZ ; FFilename::~FFilename(void)
;   } // starts at 10909837
;   try {
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_18]
                call    sub_10905860
                mov     eax, [ebp+arg_0]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    18h
;   } // starts at 10909844
; } // starts at 10909650
sub_10909650    endp

; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                sub     esp, 50h
                mov     [ebp-50h], ecx
                mov     eax, [ebp+0Ch]
                push    eax
                mov     ecx, [ebp+8]
                push    ecx
                mov     ecx, [ebp-50h]
                call    sub_109094A0
                mov     esp, ebp
                pop     ebp
                retn    8
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                sub     esp, 34h
                mov     [ebp-34h], ecx
                push    0
                mov     ecx, [ebp-34h]
                call    sub_109095C0
                mov     eax, [ebp-34h]
                mov     dword ptr [eax+10h], 8
                mov     ecx, [ebp-34h]
                call    sub_10908C40
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_109098C0    proc near               ; CODE XREF: sub_1090A020+6E↓p
                                        ; sub_1090A350+DC↓p

var_64          = dword ptr -64h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8

; FUNCTION CHUNK AT 10910E90 SIZE 00000008 BYTES

; __unwind { // SEH_109098C0
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_109098C0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 58h
                mov     [ebp+var_64], ecx
                mov     eax, [ebp+arg_0]
                push    eax
                mov     ecx, [ebp+var_64]
                call    sub_10908AA0
;   try {
                mov     [ebp+var_4], 0
                mov     ecx, [ebp+var_64]
                mov     dword ptr [ecx+0Ch], 0
                mov     edx, [ebp+var_64]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+10h]
                mov     [edx+10h], ecx
                mov     ecx, [ebp+var_64]
                call    sub_10908C40
;   } // starts at 109098EA
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_64]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    4
; } // starts at 109098C0
sub_109098C0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10909930    proc near               ; CODE XREF: .text:10909CEE↓p
                                        ; sub_10909EE0+2E↓p

var_30          = dword ptr -30h
var_2C          = dword ptr -2Ch
var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch

; FUNCTION CHUNK AT 10910EB0 SIZE 0000001D BYTES

; __unwind { // SEH_10909930
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_10909930
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 24h
                push    1Ch
                mov     eax, [ebp+arg_0]
                push    eax
                mov     ecx, [ebp+arg_4]
                call    ds:?CountBytes@dnArrayBase@@QAEXAAVdnArchive@@H@Z ; dnArrayBase::CountBytes(dnArchive &,int)
                xor     ecx, ecx
                jz      short loc_109099BD
                mov     edx, [ebp+arg_4]
                add     edx, 4
                push    edx
                mov     eax, [ebp+arg_0]
                push    eax
                call    ds:??6@YAAAVdnArchive@@AAV0@AAVdnCompactIndex@@@Z ; operator<<(dnArchive &,dnCompactIndex &)
                add     esp, 8
                mov     ecx, [ebp+arg_0]
                call    ds:?IsLoading@dnArchive@@QAEHXZ ; dnArchive::IsLoading(void)
                test    eax, eax
                jz      short loc_10909996
                mov     ecx, [ebp+arg_4]
                mov     edx, [ebp+arg_4]
                mov     eax, [edx+4]
                mov     [ecx+8], eax
                push    1Ch
                mov     ecx, [ebp+arg_4]
                call    ds:?Realloc@dnArrayBase@@IAEXH@Z ; dnArrayBase::Realloc(int)

loc_10909996:                           ; CODE XREF: sub_10909930+4D↑j
                mov     ecx, [ebp+arg_4]
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                push    eax
                push    0
                mov     ecx, [ebp+arg_4]
                call    sub_10902A80
                push    eax
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx]
                mov     ecx, [ebp+arg_0]
                mov     eax, [edx+4]
                call    eax
                jmp     loc_10909AF6
; ---------------------------------------------------------------------------

loc_109099BD:                           ; CODE XREF: sub_10909930+2C↑j
                mov     ecx, [ebp+arg_0]
                call    ds:?IsLoading@dnArchive@@QAEHXZ ; dnArchive::IsLoading(void)
                test    eax, eax
                jz      loc_10909A8F
                lea     ecx, [ebp+var_10]
                push    ecx
                mov     edx, [ebp+arg_0]
                push    edx
                call    ds:??6@YAAAVdnArchive@@AAV0@AAVdnCompactIndex@@@Z ; operator<<(dnArchive &,dnCompactIndex &)
                add     esp, 8
                mov     eax, [ebp+var_10]
                push    eax
                mov     ecx, [ebp+arg_4]
                call    sub_109095C0
                mov     [ebp+var_14], 0
                jmp     short loc_109099FD
; ---------------------------------------------------------------------------

loc_109099F4:                           ; CODE XREF: sub_10909930+158↓j
                mov     ecx, [ebp+var_14]
                add     ecx, 1
                mov     [ebp+var_14], ecx

loc_109099FD:                           ; CODE XREF: sub_10909930+C2↑j
                mov     edx, [ebp+var_14]
                cmp     edx, [ebp+var_10]
                jge     loc_10909A8D
                mov     eax, [ebp+arg_4]
                push    eax
                push    1Ch
                call    sub_10908170
                add     esp, 8
                mov     [ebp+var_20], eax
;   try {
                mov     [ebp+var_4], 0
                cmp     [ebp+var_20], 0
                jz      short loc_10909A4F
                mov     ecx, [ebp+var_20]
                add     ecx, 4
                call    ds:??0dnString@@QAE@XZ ; dnString::dnString(void)
;   } // starts at 10909A1A
;   try {
                mov     byte ptr [ebp+var_4], 1
                mov     ecx, [ebp+var_20]
                add     ecx, 10h
                call    ds:??0dnString@@QAE@XZ ; dnString::dnString(void)
;   } // starts at 10909A33
;   try {
                mov     byte ptr [ebp+var_4], 0
                mov     ecx, [ebp+var_20]
                mov     [ebp+var_30], ecx
                jmp     short loc_10909A56
; ---------------------------------------------------------------------------

loc_10909A4F:                           ; CODE XREF: sub_10909930+F5↑j
                mov     [ebp+var_30], 0

loc_10909A56:                           ; CODE XREF: sub_10909930+11D↑j
                mov     edx, [ebp+var_30]
                mov     [ebp+var_1C], edx
;   } // starts at 10909A43
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_1C]
                add     eax, 10h
                push    eax
                mov     ecx, [ebp+var_1C]
                add     ecx, 4
                push    ecx
                mov     edx, [ebp+arg_0]
                push    edx
                call    ds:??6@YAAAVdnArchive@@AAV0@AAVdnString@@@Z ; operator<<(dnArchive &,dnString &)
                add     esp, 8
                push    eax
                call    ds:??6@YAAAVdnArchive@@AAV0@AAVdnString@@@Z ; operator<<(dnArchive &,dnString &)
                add     esp, 8
                jmp     loc_109099F4
; ---------------------------------------------------------------------------

loc_10909A8D:                           ; CODE XREF: sub_10909930+D3↑j
                jmp     short loc_10909AF6
; ---------------------------------------------------------------------------

loc_10909A8F:                           ; CODE XREF: sub_10909930+98↑j
                mov     eax, [ebp+arg_4]
                add     eax, 4
                push    eax
                mov     ecx, [ebp+arg_0]
                push    ecx
                call    ds:??6@YAAAVdnArchive@@AAV0@AAVdnCompactIndex@@@Z ; operator<<(dnArchive &,dnCompactIndex &)
                add     esp, 8
                mov     [ebp+var_18], 0
                jmp     short loc_10909AB5
; ---------------------------------------------------------------------------

loc_10909AAC:                           ; CODE XREF: sub_10909930+1C4↓j
                mov     edx, [ebp+var_18]
                add     edx, 1
                mov     [ebp+var_18], edx

loc_10909AB5:                           ; CODE XREF: sub_10909930+17A↑j
                mov     eax, [ebp+arg_4]
                mov     ecx, [ebp+var_18]
                cmp     ecx, [eax+4]
                jge     short loc_10909AF6
                mov     edx, [ebp+var_18]
                push    edx
                mov     ecx, [ebp+arg_4]
                call    sub_10902A80
                mov     [ebp+var_2C], eax
                mov     eax, [ebp+var_2C]
                add     eax, 10h
                push    eax
                mov     ecx, [ebp+var_2C]
                add     ecx, 4
                push    ecx
                mov     edx, [ebp+arg_0]
                push    edx
                call    ds:??6@YAAAVdnArchive@@AAV0@AAVdnString@@@Z ; operator<<(dnArchive &,dnString &)
                add     esp, 8
                push    eax
                call    ds:??6@YAAAVdnArchive@@AAV0@AAVdnString@@@Z ; operator<<(dnArchive &,dnString &)
                add     esp, 8
                jmp     short loc_10909AAC
; ---------------------------------------------------------------------------

loc_10909AF6:                           ; CODE XREF: sub_10909930+88↑j
                                        ; sub_10909930:loc_10909A8D↑j ...
                mov     eax, [ebp+arg_0]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
; } // starts at 10909930
sub_10909930    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10909B10    proc near               ; CODE XREF: sub_10909C10+C↓p
                                        ; .text:10909D2C↓p ...

var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 10910EE0 SIZE 00000008 BYTES

; __unwind { // SEH_10909B10
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_10909B10
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                push    ecx
                push    esi
                mov     esi, ecx
                mov     [ebp+var_10], esi
                call    ds:??0dnArrayBase@@QAE@XZ ; dnArrayBase::dnArrayBase(void)
                xor     eax, eax
                mov     ecx, esi
;   try {
                mov     [ebp+var_4], eax
                mov     [esi+0Ch], eax
                mov     dword ptr [esi+10h], 8
                call    sub_10908C40
                mov     ecx, [ebp+var_C]
                mov     eax, esi
                pop     esi
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
;   } // starts at 10909B39
; } // starts at 10909B10
sub_10909B10    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10909B60    proc near               ; CODE XREF: .text:10909CB0↓p
                                        ; .text:10909DC0↓p ...

var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8

; FUNCTION CHUNK AT 10910F00 SIZE 00000011 BYTES

; __unwind { // SEH_10909B60
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_10909B60
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 8
                push    esi
                push    edi
                mov     edi, [ebp+arg_0]
                mov     esi, ecx
                mov     [ebp+var_10], esi
                cmp     esi, edi
                jz      short loc_10909BF9
                mov     eax, [edi+4]
                push    ebx
                push    eax
                call    sub_109095C0
                xor     ebx, ebx
                cmp     [edi+4], ebx
                jle     short loc_10909BE4
                mov     [ebp+arg_0], ebx
                lea     ecx, [ecx+0]

loc_10909BA0:                           ; CODE XREF: sub_10909B60+82↓j
                push    1Ch
                push    1
                mov     ecx, esi
                call    ds:?Add@dnArrayBase@@QAEHHH@Z ; dnArrayBase::Add(int,int)
                mov     edx, [esi]
                lea     ecx, ds:0[eax*8]
                sub     ecx, eax
                lea     ecx, [edx+ecx*4]
                mov     [ebp+var_14], ecx
;   try {
                mov     [ebp+var_4], 0
                test    ecx, ecx
                jz      short loc_10909BD3
                mov     eax, [edi]
                add     eax, [ebp+arg_0]
                push    eax
                call    sub_109080E0

loc_10909BD3:                           ; CODE XREF: sub_10909B60+66↑j
                add     [ebp+arg_0], 1Ch
                inc     ebx
                cmp     ebx, [edi+4]
;   } // starts at 10909BBD
                mov     [ebp+var_4], 0FFFFFFFFh
                jl      short loc_10909BA0

loc_10909BE4:                           ; CODE XREF: sub_10909B60+38↑j
                pop     ebx
                pop     edi
                mov     eax, esi
                pop     esi
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    4
; ---------------------------------------------------------------------------

loc_10909BF9:                           ; CODE XREF: sub_10909B60+27↑j
                mov     ecx, [ebp+var_C]
                pop     edi
                mov     eax, esi
                pop     esi
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    4
; } // starts at 10909B60
sub_10909B60    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10909C10    proc near               ; CODE XREF: FConfigCache__SetString+78↓p

var_30          = dword ptr -30h

                push    ebp
                mov     ebp, esp
                sub     esp, 30h
                mov     [ebp+var_30], ecx
                mov     ecx, [ebp+var_30]
                call    sub_10909B10
                mov     eax, [ebp+var_30]
                mov     esp, ebp
                pop     ebp
                retn
sub_10909C10    endp

; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset sub_10910F28
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 58h
                mov     [ebp-64h], ecx
                mov     eax, [ebp+8]
                push    eax
                mov     ecx, [ebp-64h]
                call    sub_10908AA0
                mov     dword ptr [ebp-4], 0
                mov     ecx, [ebp-64h]
                mov     dword ptr [ecx+0Ch], 0
                mov     edx, [ebp-64h]
                mov     eax, [ebp+8]
                mov     ecx, [eax+10h]
                mov     [edx+10h], ecx
                mov     ecx, [ebp-64h]
                call    sub_10908C40
                mov     dword ptr [ebp-4], 0FFFFFFFFh
                mov     eax, [ebp-64h]
                mov     ecx, [ebp-0Ch]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    4
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                sub     esp, 44h
                mov     [ebp-44h], ecx
                mov     eax, [ebp+8]
                push    eax
                mov     ecx, [ebp-44h]
                call    sub_10909B60
                mov     ecx, [ebp-44h]
                mov     edx, [ebp+8]
                mov     eax, [edx+10h]
                mov     [ecx+10h], eax
                mov     ecx, [ebp-44h]
                call    sub_10908C40
                mov     eax, [ebp-44h]
                mov     esp, ebp
                pop     ebp
                retn    4
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                sub     esp, 4Ch
                mov     eax, [ebp+0Ch]
                push    eax
                mov     ecx, [ebp+8]
                push    ecx
                call    sub_10909930
                add     esp, 8
                mov     ecx, [ebp+8]
                call    ds:?IsLoading@dnArchive@@QAEHXZ ; dnArchive::IsLoading(void)
                test    eax, eax
                jz      short loc_10909D0B
                mov     ecx, [ebp+0Ch]
                call    sub_10908C40

loc_10909D0B:                           ; CODE XREF: .text:10909D01↑j
                mov     eax, [ebp+8]
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                sub     esp, 30h
                mov     [ebp-30h], ecx
                mov     ecx, [ebp-30h]
                call    sub_10909B10
                mov     eax, [ebp-30h]
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset sub_10910F48
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 58h
                mov     [ebp-64h], ecx
                mov     eax, [ebp+8]
                push    eax
                mov     ecx, [ebp-64h]
                call    sub_10908AA0
                mov     dword ptr [ebp-4], 0
                mov     ecx, [ebp-64h]
                mov     dword ptr [ecx+0Ch], 0
                mov     edx, [ebp-64h]
                mov     eax, [ebp+8]
                mov     ecx, [eax+10h]
                mov     [edx+10h], ecx
                mov     ecx, [ebp-64h]
                call    sub_10908C40
                mov     dword ptr [ebp-4], 0FFFFFFFFh
                mov     eax, [ebp-64h]
                mov     ecx, [ebp-0Ch]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    4
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                sub     esp, 44h
                mov     [ebp-44h], ecx
                mov     eax, [ebp+8]
                push    eax
                mov     ecx, [ebp-44h]
                call    sub_10909B60
                mov     ecx, [ebp-44h]
                mov     edx, [ebp+8]
                mov     eax, [edx+10h]
                mov     [ecx+10h], eax
                mov     ecx, [ebp-44h]
                call    sub_10908C40
                mov     eax, [ebp-44h]
                mov     esp, ebp
                pop     ebp
                retn    4
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset sub_10910F74
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 5Ch
                mov     [ebp-68h], ecx
                mov     eax, [ebp+8]
                push    eax
                mov     ecx, [ebp-68h]
                add     ecx, 4
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
                mov     dword ptr [ebp-4], 0
                mov     ecx, [ebp-68h]
                add     ecx, 10h
                mov     [ebp-64h], ecx
                mov     edx, [ebp+0Ch]
                push    edx
                mov     ecx, [ebp-64h]
                call    sub_10908AA0
                mov     byte ptr [ebp-4], 1
                mov     eax, [ebp-64h]
                mov     dword ptr [eax+0Ch], 0
                mov     ecx, [ebp-64h]
                mov     edx, [ebp+0Ch]
                mov     eax, [edx+10h]
                mov     [ecx+10h], eax
                mov     ecx, [ebp-64h]
                call    sub_10908C40
                mov     byte ptr [ebp-4], 0
                mov     dword ptr [ebp-4], 0FFFFFFFFh
                mov     eax, [ebp-68h]
                mov     ecx, [ebp-0Ch]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    8
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset sub_10910F8C
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 34h
                mov     [ebp-40h], ecx
                mov     ecx, [ebp-40h]
                add     ecx, 4
                call    ds:??0dnString@@QAE@XZ ; dnString::dnString(void)
                mov     dword ptr [ebp-4], 0
                mov     eax, [ebp-40h]
                add     eax, 10h
                mov     [ebp-3Ch], eax
                mov     ecx, [ebp-3Ch]
                call    sub_10909B10
                mov     dword ptr [ebp-4], 0FFFFFFFFh
                mov     eax, [ebp-40h]
                mov     ecx, [ebp-0Ch]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10909EE0    proc near               ; CODE XREF: sub_1090A510+15C↓p
                                        ; sub_1090A510+1AC↓p

var_54          = dword ptr -54h
var_50          = dword ptr -50h
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch

                push    ebp
                mov     ebp, esp
                sub     esp, 54h
                mov     eax, [ebp+arg_4]
                add     eax, 10h
                mov     [ebp+var_54], eax
                mov     ecx, [ebp+arg_4]
                add     ecx, 4
                push    ecx
                mov     edx, [ebp+arg_0]
                push    edx
                call    ds:??6@YAAAVdnArchive@@AAV0@AAVdnString@@@Z ; operator<<(dnArchive &,dnString &)
                add     esp, 8
                mov     [ebp+var_50], eax
                mov     eax, [ebp+var_54]
                push    eax
                mov     ecx, [ebp+var_50]
                push    ecx
                call    sub_10909930
                add     esp, 8
                mov     ecx, [ebp+var_50]
                call    ds:?IsLoading@dnArchive@@QAEHXZ ; dnArchive::IsLoading(void)
                test    eax, eax
                jz      short loc_10909F2B
                mov     ecx, [ebp+var_54]
                call    sub_10908C40

loc_10909F2B:                           ; CODE XREF: sub_10909EE0+41↑j
                mov     eax, [ebp+var_50]
                mov     esp, ebp
                pop     ebp
                retn
sub_10909EE0    endp

; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                sub     esp, 44h
                mov     [ebp-44h], ecx
                mov     eax, [ebp+8]
                push    eax
                mov     ecx, [ebp-44h]
                call    sub_10909B60
                mov     ecx, [ebp-44h]
                mov     edx, [ebp+8]
                mov     eax, [edx+10h]
                mov     [ecx+10h], eax
                mov     ecx, [ebp-44h]
                call    sub_10908C40
                mov     eax, [ebp-44h]
                mov     esp, ebp
                pop     ebp
                retn    4
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_10909F80    proc near               ; CODE XREF: sub_1090A780+96↓p

var_6C          = dword ptr -6Ch
var_68          = dword ptr -68h
var_64          = dword ptr -64h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8

; FUNCTION CHUNK AT 10910FA0 SIZE 00000014 BYTES

; __unwind { // SEH_10909F80
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_10909F80
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 60h
                mov     [ebp+var_6C], ecx
                mov     eax, [ebp+var_6C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx]
                mov     [eax], edx
                mov     eax, [ebp+arg_0]
                add     eax, 4
                push    eax
                mov     ecx, [ebp+var_6C]
                add     ecx, 4
                call    ds:??0dnString@@QAE@ABV0@@Z ; dnString::dnString(dnString const &)
;   try {
                mov     [ebp+var_4], 0
                mov     ecx, [ebp+arg_0]
                add     ecx, 10h
                mov     [ebp+var_68], ecx
                mov     edx, [ebp+var_6C]
                add     edx, 10h
                mov     [ebp+var_64], edx
                mov     eax, [ebp+var_68]
                push    eax
                mov     ecx, [ebp+var_64]
                call    sub_10908AA0
;   } // starts at 10909FBB
;   try {
                mov     byte ptr [ebp+var_4], 1
                mov     ecx, [ebp+var_64]
                mov     dword ptr [ecx+0Ch], 0
                mov     edx, [ebp+var_64]
                mov     eax, [ebp+var_68]
                mov     ecx, [eax+10h]
                mov     [edx+10h], ecx
                mov     ecx, [ebp+var_64]
                call    sub_10908C40
;   } // starts at 10909FE0
;   try {
                mov     byte ptr [ebp+var_4], 0
;   } // starts at 1090A002
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_6C]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    4
; } // starts at 10909F80
sub_10909F80    endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1090A020    proc near               ; CODE XREF: sub_1090A1C0+BB↓p

var_64          = dword ptr -64h
var_60          = dword ptr -60h
var_24          = dword ptr -24h
var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch

; FUNCTION CHUNK AT 10910FC0 SIZE 0000001D BYTES

; __unwind { // SEH_1090A020
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_1090A020
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 58h
                push    esi
                mov     [ebp+var_60], ecx
                push    24h
                push    1
                mov     ecx, [ebp+var_60]
                call    ds:?Add@dnArrayBase@@QAEHHH@Z ; dnArrayBase::Add(int,int)
                mov     [ebp+var_20], eax
                mov     eax, [ebp+var_20]
                imul    eax, 24h
                mov     ecx, [ebp+var_60]
                add     eax, [ecx]
                mov     [ebp+var_1C], eax
;   try {
                mov     [ebp+var_4], 0
                cmp     [ebp+var_1C], 0
                jz      short loc_1090A09F
                mov     edx, [ebp+arg_0]
                push    edx
                mov     ecx, [ebp+var_1C]
                add     ecx, 4
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
;   } // starts at 1090A05D
;   try {
                mov     byte ptr [ebp+var_4], 1
                mov     eax, [ebp+var_1C]
                add     eax, 10h
                mov     [ebp+var_24], eax
                mov     ecx, [ebp+arg_4]
                push    ecx
                mov     ecx, [ebp+var_24]
                call    sub_109098C0
;   } // starts at 1090A07A
;   try {
                mov     byte ptr [ebp+var_4], 0
                mov     edx, [ebp+var_1C]
                mov     [ebp+var_64], edx
                jmp     short loc_1090A0A6
; ---------------------------------------------------------------------------

loc_1090A09F:                           ; CODE XREF: sub_1090A020+48↑j
                mov     [ebp+var_64], 0

loc_1090A0A6:                           ; CODE XREF: sub_1090A020+7D↑j
                mov     eax, [ebp+var_64]
                mov     [ebp+var_18], eax
;   } // starts at 1090A093
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_18]
                mov     [ebp+var_14], ecx
                mov     edx, [ebp+var_14]
                add     edx, 4
                push    edx
                call    sub_10902870
                add     esp, 4
                mov     ecx, [ebp+var_60]
                mov     edx, [ecx+10h]
                sub     edx, 1
                and     eax, edx
                mov     [ebp+var_10], eax
                mov     eax, [ebp+var_60]
                mov     ecx, [eax+0Ch]
                mov     edx, [ebp+var_14]
                mov     eax, [ebp+var_10]
                mov     ecx, [ecx+eax*4]
                mov     [edx], ecx
                mov     ecx, [ebp+var_60]
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                sub     eax, 1
                mov     edx, [ebp+var_60]
                mov     ecx, [edx+0Ch]
                mov     edx, [ebp+var_10]
                mov     [ecx+edx*4], eax
                mov     eax, [ebp+var_60]
                mov     ecx, [eax+10h]
                lea     esi, [ecx+ecx+8]
                mov     ecx, [ebp+var_60]
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                cmp     esi, eax
                jge     short loc_1090A12C
                mov     edx, [ebp+var_60]
                mov     eax, [edx+10h]
                shl     eax, 1
                mov     ecx, [ebp+var_60]
                mov     [ecx+10h], eax
                mov     ecx, [ebp+var_60]
                call    sub_10908690

loc_1090A12C:                           ; CODE XREF: sub_1090A020+F4↑j
                mov     eax, [ebp+var_14]
                add     eax, 10h
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn    8
; } // starts at 1090A020
sub_1090A020    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1090A150    proc near               ; CODE XREF: sub_1090A350+14B↓p

var_4C          = dword ptr -4Ch
var_48          = dword ptr -48h
var_44          = dword ptr -44h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 4Ch
                mov     [ebp+var_4C], ecx
                mov     eax, [ebp+var_4C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx]
                mov     [eax], edx
                mov     eax, [ebp+arg_0]
                add     eax, 4
                push    eax
                mov     ecx, [ebp+var_4C]
                add     ecx, 4
                call    ds:??4dnString@@QAEAAV0@ABV0@@Z ; dnString::operator=(dnString const &)
                mov     ecx, [ebp+arg_0]
                add     ecx, 10h
                mov     [ebp+var_48], ecx
                mov     edx, [ebp+var_4C]
                add     edx, 10h
                mov     [ebp+var_44], edx
                mov     eax, [ebp+var_48]
                push    eax
                mov     ecx, [ebp+var_44]
                call    sub_10909B60
                mov     ecx, [ebp+var_44]
                mov     edx, [ebp+var_48]
                mov     eax, [edx+10h]
                mov     [ecx+10h], eax
                mov     ecx, [ebp+var_44]
                call    sub_10908C40
                mov     eax, [ebp+var_4C]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_1090A150    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1090A1C0    proc near               ; CODE XREF: sub_1090A940+2C4↓p
                                        ; sub_1090C7B0+B0↓p ...

var_68          = dword ptr -68h
var_2C          = dword ptr -2Ch
var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_4           = dword ptr -4
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch

                push    ebp
                mov     ebp, esp
                sub     esp, 68h
                mov     [ebp+var_68], ecx
                mov     eax, [ebp+arg_0]
                push    eax
                call    sub_10902040
                add     esp, 4
                mov     [ebp+var_14], eax
                mov     ecx, [ebp+var_68]
                mov     edx, [ecx+10h]
                sub     edx, 1
                and     edx, [ebp+var_14]
                mov     eax, [ebp+var_68]
                mov     ecx, [eax+0Ch]
                mov     edx, [ecx+edx*4]
                mov     [ebp+var_4], edx
                jmp     short loc_1090A203
; ---------------------------------------------------------------------------

loc_1090A1F2:                           ; CODE XREF: sub_1090A1C0:loc_1090A26E↓j
                mov     eax, [ebp+var_4]
                imul    eax, 24h
                mov     ecx, [ebp+var_68]
                mov     edx, [ecx]
                mov     eax, [eax+edx]
                mov     [ebp+var_4], eax

loc_1090A203:                           ; CODE XREF: sub_1090A1C0+30↑j
                cmp     [ebp+var_4], 0FFFFFFFFh
                jz      short loc_1090A270
                mov     ecx, [ebp+var_4]
                imul    ecx, 24h
                mov     edx, [ebp+var_68]
                add     ecx, [edx]
                mov     [ebp+var_18], ecx
                mov     eax, [ebp+arg_0]
                push    eax
                mov     ecx, [ebp+var_18]
                add     ecx, 4
                call    ds:??8dnString@@QBEHPB_W@Z ; dnString::operator==(wchar_t const *)
                test    eax, eax
                jz      short loc_1090A26E
                mov     ecx, [ebp+var_4]
                imul    ecx, 24h
                mov     edx, [ebp+var_68]
                mov     eax, [edx]
                lea     ecx, [eax+ecx+10h]
                mov     [ebp+var_2C], ecx
                mov     edx, [ebp+arg_4]
                push    edx
                mov     ecx, [ebp+var_2C]
                call    sub_10909B60
                mov     eax, [ebp+var_2C]
                mov     ecx, [ebp+arg_4]
                mov     edx, [ecx+10h]
                mov     [eax+10h], edx
                mov     ecx, [ebp+var_2C]
                call    sub_10908C40
                mov     eax, [ebp+var_4]
                imul    eax, 24h
                mov     ecx, [ebp+var_68]
                mov     edx, [ecx]
                lea     eax, [edx+eax+10h]
                jmp     short loc_1090A280
; ---------------------------------------------------------------------------

loc_1090A26E:                           ; CODE XREF: sub_1090A1C0+69↑j
                jmp     short loc_1090A1F2
; ---------------------------------------------------------------------------

loc_1090A270:                           ; CODE XREF: sub_1090A1C0+47↑j
                mov     eax, [ebp+arg_4]
                push    eax
                mov     ecx, [ebp+arg_0]
                push    ecx
                mov     ecx, [ebp+var_68]
                call    sub_1090A020

loc_1090A280:                           ; CODE XREF: sub_1090A1C0+AC↑j
                mov     esp, ebp
                pop     ebp
                retn    8
sub_1090A1C0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1090A290    proc near               ; CODE XREF: sub_1090A510+BC↓p
                                        ; .text:1090A75E↓p ...

var_24          = dword ptr -24h
var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8

; FUNCTION CHUNK AT 10910FF0 SIZE 0000000C BYTES

; __unwind { // SEH_1090A290
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_1090A290
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 18h
                mov     [ebp+var_24], ecx
                mov     eax, 1
                test    eax, eax
                jz      short loc_1090A322
                mov     [ebp+var_10], 0
                jmp     short loc_1090A2C9
; ---------------------------------------------------------------------------

loc_1090A2C0:                           ; CODE XREF: sub_1090A290:loc_1090A320↓j
                mov     ecx, [ebp+var_10]
                add     ecx, 1
                mov     [ebp+var_10], ecx

loc_1090A2C9:                           ; CODE XREF: sub_1090A290+2E↑j
                mov     edx, [ebp+var_24]
                mov     eax, [ebp+var_10]
                cmp     eax, [edx+4]
                jge     short loc_1090A322
                mov     ecx, [ebp+var_10]
                imul    ecx, 24h
                mov     edx, [ebp+var_24]
                add     ecx, [edx]
                mov     [ebp+var_20], ecx
;   try {
                mov     [ebp+var_4], 0
                mov     eax, [ebp+var_20]
                add     eax, 10h
                mov     [ebp+var_1C], eax
                mov     ecx, [ebp+var_1C]
                call    sub_10906EC0
;   } // starts at 1090A2E2
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_20]
                add     ecx, 4
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                xor     ecx, ecx
                and     ecx, 1
                jz      short loc_1090A320
                mov     edx, [ebp+var_20]
                push    edx
                call    sub_10901030
                add     esp, 4

loc_1090A320:                           ; CODE XREF: sub_1090A290+82↑j
                jmp     short loc_1090A2C0
; ---------------------------------------------------------------------------

loc_1090A322:                           ; CODE XREF: sub_1090A290+25↑j
                                        ; sub_1090A290+42↑j
                mov     eax, [ebp+arg_0]
                push    eax
                push    24h
                mov     ecx, [ebp+var_24]
                call    ds:?Empty@dnArrayBase@@QAEXHH@Z ; dnArrayBase::Empty(int,int)
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    4
; } // starts at 1090A290
sub_1090A290    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1090A350    proc near               ; CODE XREF: sub_1090A890+25↓p
                                        ; .text:1090AEB5↓p ...

var_48          = dword ptr -48h
var_44          = dword ptr -44h
var_40          = dword ptr -40h
var_3C          = dword ptr -3Ch
var_38          = dword ptr -38h
var_2C          = dword ptr -2Ch
var_28          = dword ptr -28h
var_24          = dword ptr -24h
var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8

; FUNCTION CHUNK AT 10911010 SIZE 00000026 BYTES

; __unwind { // SEH_1090A350
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_1090A350
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 3Ch
                push    ebx
                push    esi
                push    edi
                mov     [ebp+var_44], ecx
                push    24h
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+4]
                push    ecx
                mov     ecx, [ebp+var_44]
                call    ds:??0dnArrayBase@@IAE@HH@Z ; dnArrayBase::dnArrayBase(int,int)
;   try {
                mov     [ebp+var_4], 0
                mov     edx, 1
                test    edx, edx
                jz      loc_1090A458
                mov     eax, [ebp+var_44]
                mov     dword ptr [eax+4], 0
                mov     [ebp+var_10], 0
                jmp     short loc_1090A3B3
; ---------------------------------------------------------------------------

loc_1090A3AA:                           ; CODE XREF: sub_1090A350+FE↓j
                mov     ecx, [ebp+var_10]
                add     ecx, 1
                mov     [ebp+var_10], ecx

loc_1090A3B3:                           ; CODE XREF: sub_1090A350+58↑j
                mov     edx, [ebp+arg_0]
                mov     eax, [ebp+var_10]
                cmp     eax, [edx+4]
                jge     loc_1090A453
                push    24h
                push    1
                mov     ecx, [ebp+var_44]
                call    ds:?Add@dnArrayBase@@QAEHHH@Z ; dnArrayBase::Add(int,int)
                mov     [ebp+var_20], eax
                mov     ecx, [ebp+var_20]
                imul    ecx, 24h
                mov     edx, [ebp+var_44]
                add     ecx, [edx]
                mov     [ebp+var_1C], ecx
;   } // starts at 1090A383
;   try {
                mov     byte ptr [ebp+var_4], 1
                cmp     [ebp+var_1C], 0
                jz      short loc_1090A43D
                mov     eax, [ebp+var_10]
                imul    eax, 24h
                mov     ecx, [ebp+arg_0]
                add     eax, [ecx]
                mov     [ebp+var_24], eax
                mov     edx, [ebp+var_1C]
                mov     eax, [ebp+var_24]
                mov     ecx, [eax]
                mov     [edx], ecx
                mov     edx, [ebp+var_24]
                add     edx, 4
                push    edx
                mov     ecx, [ebp+var_1C]
                add     ecx, 4
                call    ds:??0dnString@@QAE@ABV0@@Z ; dnString::dnString(dnString const &)
;   } // starts at 1090A3E0
;   try {
                mov     byte ptr [ebp+var_4], 2
                mov     eax, [ebp+var_1C]
                add     eax, 10h
                mov     [ebp+var_28], eax
                mov     ecx, [ebp+var_24]
                add     ecx, 10h
                push    ecx
                mov     ecx, [ebp+var_28]
                call    sub_109098C0
;   } // starts at 1090A415
;   try {
                mov     byte ptr [ebp+var_4], 1
                mov     edx, [ebp+var_1C]
                mov     [ebp+var_48], edx
                jmp     short loc_1090A444
; ---------------------------------------------------------------------------

loc_1090A43D:                           ; CODE XREF: sub_1090A350+98↑j
                mov     [ebp+var_48], 0

loc_1090A444:                           ; CODE XREF: sub_1090A350+EB↑j
                mov     eax, [ebp+var_48]
                mov     [ebp+var_18], eax
;   } // starts at 1090A431
;   try {
                mov     byte ptr [ebp+var_4], 0
                jmp     loc_1090A3AA
; ---------------------------------------------------------------------------

loc_1090A453:                           ; CODE XREF: sub_1090A350+6C↑j
                jmp     loc_1090A4EA
; ---------------------------------------------------------------------------

loc_1090A458:                           ; CODE XREF: sub_1090A350+41↑j
                mov     ecx, 1
                test    ecx, ecx
                jz      short loc_1090A4A4
                mov     [ebp+var_14], 0
                jmp     short loc_1090A473
; ---------------------------------------------------------------------------

loc_1090A46A:                           ; CODE XREF: sub_1090A350+150↓j
                mov     edx, [ebp+var_14]
                add     edx, 1
                mov     [ebp+var_14], edx

loc_1090A473:                           ; CODE XREF: sub_1090A350+118↑j
                mov     eax, [ebp+var_44]
                mov     ecx, [ebp+var_14]
                cmp     ecx, [eax+4]
                jge     short loc_1090A4A2
                mov     edx, [ebp+var_14]
                imul    edx, 24h
                mov     eax, [ebp+arg_0]
                add     edx, [eax]
                mov     [ebp+var_2C], edx
                mov     ecx, [ebp+var_2C]
                push    ecx
                mov     ecx, [ebp+var_14]
                imul    ecx, 24h
                mov     edx, [ebp+var_44]
                add     ecx, [edx]
                call    sub_1090A150
                jmp     short loc_1090A46A
; ---------------------------------------------------------------------------

loc_1090A4A2:                           ; CODE XREF: sub_1090A350+12C↑j
                jmp     short loc_1090A4EA
; ---------------------------------------------------------------------------

loc_1090A4A4:                           ; CODE XREF: sub_1090A350+10F↑j
                mov     eax, [ebp+var_44]
                cmp     dword ptr [eax+4], 0
                jz      short loc_1090A4EA
                xor     ecx, ecx
                imul    ecx, 24h
                mov     edx, [ebp+arg_0]
                add     ecx, [edx]
                mov     [ebp+var_38], ecx
                mov     eax, [ebp+var_44]
                mov     ecx, [eax+4]
                imul    ecx, 24h
                mov     [ebp+var_40], ecx
                xor     edx, edx
                imul    edx, 24h
                mov     eax, [ebp+var_44]
                add     edx, [eax]
                mov     [ebp+var_3C], edx
                mov     ecx, [ebp+var_40]
                mov     esi, [ebp+var_38]
                mov     edi, [ebp+var_3C]
                mov     ebx, ecx
                shr     ecx, 2
                and     ebx, 3
                rep movsd
                mov     ecx, ebx
                rep movsb
;   } // starts at 1090A44A

loc_1090A4EA:                           ; CODE XREF: sub_1090A350:loc_1090A453↑j
                                        ; sub_1090A350:loc_1090A4A2↑j ...
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_44]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                pop     ebx
                mov     esp, ebp
                pop     ebp
                retn    4
; } // starts at 1090A350
sub_1090A350    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1090A510    proc near               ; CODE XREF: .text:1090A90E↓p
                                        ; sub_1090AE30+2E↓p

var_88          = dword ptr -88h
var_38          = dword ptr -38h
var_34          = dword ptr -34h
var_24          = dword ptr -24h
var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch

; FUNCTION CHUNK AT 10911040 SIZE 0000001D BYTES

; __unwind { // SEH_1090A510
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_1090A510
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 7Ch
                push    24h
                mov     eax, [ebp+arg_0]
                push    eax
                mov     ecx, [ebp+arg_4]
                call    ds:?CountBytes@dnArrayBase@@QAEXAAVdnArchive@@H@Z ; dnArrayBase::CountBytes(dnArchive &,int)
                xor     ecx, ecx
                jz      short loc_1090A5A3
                mov     edx, [ebp+arg_4]
                add     edx, 4
                push    edx
                mov     eax, [ebp+arg_0]
                push    eax
                call    ds:??6@YAAAVdnArchive@@AAV0@AAVdnCompactIndex@@@Z ; operator<<(dnArchive &,dnCompactIndex &)
                add     esp, 8
                mov     ecx, [ebp+arg_0]
                call    ds:?IsLoading@dnArchive@@QAEHXZ ; dnArchive::IsLoading(void)
                test    eax, eax
                jz      short loc_1090A576
                mov     ecx, [ebp+arg_4]
                mov     edx, [ebp+arg_4]
                mov     eax, [edx+4]
                mov     [ecx+8], eax
                push    24h
                mov     ecx, [ebp+arg_4]
                call    ds:?Realloc@dnArrayBase@@IAEXH@Z ; dnArrayBase::Realloc(int)

loc_1090A576:                           ; CODE XREF: sub_1090A510+4D↑j
                xor     ecx, ecx
                imul    ecx, 24h
                mov     edx, [ebp+arg_4]
                add     ecx, [edx]
                mov     [ebp+var_24], ecx
                mov     ecx, [ebp+arg_4]
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                push    eax
                mov     eax, [ebp+var_24]
                push    eax
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx]
                mov     ecx, [ebp+arg_0]
                mov     eax, [edx+4]
                call    eax
                jmp     loc_1090A6C6
; ---------------------------------------------------------------------------

loc_1090A5A3:                           ; CODE XREF: sub_1090A510+2C↑j
                mov     ecx, [ebp+arg_0]
                call    ds:?IsLoading@dnArchive@@QAEHXZ ; dnArchive::IsLoading(void)
                test    eax, eax
                jz      loc_1090A67B
                lea     ecx, [ebp+var_10]
                push    ecx
                mov     edx, [ebp+arg_0]
                push    edx
                call    ds:??6@YAAAVdnArchive@@AAV0@AAVdnCompactIndex@@@Z ; operator<<(dnArchive &,dnCompactIndex &)
                add     esp, 8
                mov     eax, [ebp+var_10]
                push    eax
                mov     ecx, [ebp+arg_4]
                call    sub_1090A290
                mov     [ebp+var_14], 0
                jmp     short loc_1090A5E3
; ---------------------------------------------------------------------------

loc_1090A5DA:                           ; CODE XREF: sub_1090A510+164↓j
                mov     ecx, [ebp+var_14]
                add     ecx, 1
                mov     [ebp+var_14], ecx

loc_1090A5E3:                           ; CODE XREF: sub_1090A510+C8↑j
                mov     edx, [ebp+var_14]
                cmp     edx, [ebp+var_10]
                jge     loc_1090A679
                push    24h
                push    1
                mov     ecx, [ebp+arg_4]
                call    ds:?Add@dnArrayBase@@QAEHHH@Z ; dnArrayBase::Add(int,int)
                mov     [ebp+var_34], eax
                mov     eax, [ebp+var_34]
                imul    eax, 24h
                mov     ecx, [ebp+arg_4]
                add     eax, [ecx]
                mov     [ebp+var_20], eax
;   try {
                mov     [ebp+var_4], 0
                cmp     [ebp+var_20], 0
                jz      short loc_1090A64A
                mov     ecx, [ebp+var_20]
                add     ecx, 4
                call    ds:??0dnString@@QAE@XZ ; dnString::dnString(void)
;   } // starts at 1090A60D
;   try {
                mov     byte ptr [ebp+var_4], 1
                mov     edx, [ebp+var_20]
                add     edx, 10h
                mov     [ebp+var_38], edx
                mov     ecx, [ebp+var_38]
                call    sub_10909B10
;   } // starts at 1090A626
;   try {
                mov     byte ptr [ebp+var_4], 0
                mov     eax, [ebp+var_20]
                mov     [ebp+var_88], eax
                jmp     short loc_1090A654
; ---------------------------------------------------------------------------

loc_1090A64A:                           ; CODE XREF: sub_1090A510+108↑j
                mov     [ebp+var_88], 0

loc_1090A654:                           ; CODE XREF: sub_1090A510+138↑j
                mov     ecx, [ebp+var_88]
                mov     [ebp+var_1C], ecx
;   } // starts at 1090A63B
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     edx, [ebp+var_1C]
                push    edx
                mov     eax, [ebp+arg_0]
                push    eax
                call    sub_10909EE0
                add     esp, 8
                jmp     loc_1090A5DA
; ---------------------------------------------------------------------------

loc_1090A679:                           ; CODE XREF: sub_1090A510+D9↑j
                jmp     short loc_1090A6C6
; ---------------------------------------------------------------------------

loc_1090A67B:                           ; CODE XREF: sub_1090A510+9E↑j
                mov     ecx, [ebp+arg_4]
                add     ecx, 4
                push    ecx
                mov     edx, [ebp+arg_0]
                push    edx
                call    ds:??6@YAAAVdnArchive@@AAV0@AAVdnCompactIndex@@@Z ; operator<<(dnArchive &,dnCompactIndex &)
                add     esp, 8
                mov     [ebp+var_18], 0
                jmp     short loc_1090A6A1
; ---------------------------------------------------------------------------

loc_1090A698:                           ; CODE XREF: sub_1090A510+1B4↓j
                mov     eax, [ebp+var_18]
                add     eax, 1
                mov     [ebp+var_18], eax

loc_1090A6A1:                           ; CODE XREF: sub_1090A510+186↑j
                mov     ecx, [ebp+arg_4]
                mov     edx, [ebp+var_18]
                cmp     edx, [ecx+4]
                jge     short loc_1090A6C6
                mov     eax, [ebp+var_18]
                imul    eax, 24h
                mov     ecx, [ebp+arg_4]
                add     eax, [ecx]
                push    eax
                mov     edx, [ebp+arg_0]
                push    edx
                call    sub_10909EE0
                add     esp, 8
                jmp     short loc_1090A698
; ---------------------------------------------------------------------------

loc_1090A6C6:                           ; CODE XREF: sub_1090A510+8E↑j
                                        ; sub_1090A510:loc_1090A679↑j ...
                mov     eax, [ebp+arg_0]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
; } // starts at 1090A510
sub_1090A510    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1090A6E0    proc near               ; CODE XREF: sub_1090CBA0+86↓p
                                        ; sub_1090CBA0+10F↓p

var_3C          = dword ptr -3Ch
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 10911070 SIZE 00000008 BYTES

; __unwind { // SEH_1090A6E0
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_1090A6E0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 30h
                mov     [ebp+var_3C], ecx
                mov     ecx, [ebp+var_3C]
                call    ds:??0dnArrayBase@@QAE@XZ ; dnArrayBase::dnArrayBase(void)
;   try {
                mov     [ebp+var_4], 0
                mov     eax, [ebp+var_3C]
                mov     dword ptr [eax+0Ch], 0
                mov     ecx, [ebp+var_3C]
                mov     dword ptr [ecx+10h], 8
                mov     ecx, [ebp+var_3C]
                call    sub_10908690
;   } // starts at 1090A707
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_3C]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
; } // starts at 1090A6E0
sub_1090A6E0    endp

; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                sub     esp, 40h
                mov     [ebp-40h], ecx
                push    0
                mov     ecx, [ebp-40h]
                call    sub_1090A290
                mov     eax, [ebp-40h]
                mov     dword ptr [eax+10h], 8
                mov     ecx, [ebp-40h]
                call    sub_10908690
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1090A780    proc near               ; CODE XREF: .text:1090A860↓p
                                        ; .text:1090AE00↓p ...

var_7C          = dword ptr -7Ch
var_78          = dword ptr -78h
var_2C          = dword ptr -2Ch
var_28          = dword ptr -28h
var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8

; FUNCTION CHUNK AT 10911090 SIZE 00000011 BYTES

; __unwind { // SEH_1090A780
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_1090A780
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 70h
                mov     [ebp+var_78], ecx
                mov     eax, [ebp+var_78]
                cmp     eax, [ebp+arg_0]
                jz      loc_1090A836
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+4]
                push    edx
                mov     ecx, [ebp+var_78]
                call    sub_1090A290
                mov     [ebp+var_10], 0
                jmp     short loc_1090A7CB
; ---------------------------------------------------------------------------

loc_1090A7C2:                           ; CODE XREF: sub_1090A780+B4↓j
                mov     eax, [ebp+var_10]
                add     eax, 1
                mov     [ebp+var_10], eax

loc_1090A7CB:                           ; CODE XREF: sub_1090A780+40↑j
                mov     ecx, [ebp+arg_0]
                mov     edx, [ebp+var_10]
                cmp     edx, [ecx+4]
                jge     short loc_1090A836
                push    24h
                push    1
                mov     ecx, [ebp+var_78]
                call    ds:?Add@dnArrayBase@@QAEHHH@Z ; dnArrayBase::Add(int,int)
                mov     [ebp+var_28], eax
                mov     eax, [ebp+var_28]
                imul    eax, 24h
                mov     ecx, [ebp+var_78]
                add     eax, [ecx]
                mov     [ebp+var_18], eax
;   try {
                mov     [ebp+var_4], 0
                cmp     [ebp+var_18], 0
                jz      short loc_1090A820
                mov     edx, [ebp+var_10]
                imul    edx, 24h
                mov     eax, [ebp+arg_0]
                add     edx, [eax]
                mov     [ebp+var_2C], edx
                mov     ecx, [ebp+var_2C]
                push    ecx
                mov     ecx, [ebp+var_18]
                call    sub_10909F80
                mov     [ebp+var_7C], eax
                jmp     short loc_1090A827
; ---------------------------------------------------------------------------

loc_1090A820:                           ; CODE XREF: sub_1090A780+7F↑j
                mov     [ebp+var_7C], 0

loc_1090A827:                           ; CODE XREF: sub_1090A780+9E↑j
                mov     edx, [ebp+var_7C]
                mov     [ebp+var_14], edx
;   } // starts at 1090A7F4
                mov     [ebp+var_4], 0FFFFFFFFh
                jmp     short loc_1090A7C2
; ---------------------------------------------------------------------------

loc_1090A836:                           ; CODE XREF: sub_1090A780+24↑j
                                        ; sub_1090A780+54↑j
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    4
; } // starts at 1090A780
sub_1090A780    endp

; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                sub     esp, 58h
                mov     [ebp-58h], ecx
                mov     eax, [ebp+8]
                push    eax
                mov     ecx, [ebp-58h]
                call    sub_1090A780
                mov     ecx, [ebp-58h]
                mov     edx, [ebp+8]
                mov     eax, [edx+10h]
                mov     [ecx+10h], eax
                mov     ecx, [ebp-58h]
                call    sub_10908690
                mov     eax, [ebp-58h]
                mov     esp, ebp
                pop     ebp
                retn    4
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1090A890    proc near               ; CODE XREF: sub_1090B3A0+6E↓p

var_6C          = dword ptr -6Ch
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8

; FUNCTION CHUNK AT 109110B0 SIZE 00000008 BYTES

; __unwind { // SEH_1090A890
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_1090A890
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 60h
                mov     [ebp+var_6C], ecx
                mov     eax, [ebp+arg_0]
                push    eax
                mov     ecx, [ebp+var_6C]
                call    sub_1090A350
;   try {
                mov     [ebp+var_4], 0
                mov     ecx, [ebp+var_6C]
                mov     dword ptr [ecx+0Ch], 0
                mov     edx, [ebp+var_6C]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+10h]
                mov     [edx+10h], ecx
                mov     ecx, [ebp+var_6C]
                call    sub_10908690
;   } // starts at 1090A8BA
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_6C]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    4
; } // starts at 1090A890
sub_1090A890    endp

; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                sub     esp, 5Ch
                mov     eax, [ebp+0Ch]
                push    eax
                mov     ecx, [ebp+8]
                push    ecx
                call    sub_1090A510
                add     esp, 8
                mov     ecx, [ebp+8]
                call    ds:?IsLoading@dnArchive@@QAEHXZ ; dnArchive::IsLoading(void)
                test    eax, eax
                jz      short loc_1090A92B
                mov     ecx, [ebp+0Ch]
                call    sub_10908690

loc_1090A92B:                           ; CODE XREF: .text:1090A921↑j
                mov     eax, [ebp+8]
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1090A940    proc near               ; CODE XREF: sub_1090B840+5C3↓p
                                        ; sub_1090CBA0+1A1↓p

var_CC          = dword ptr -0CCh
var_C6          = word ptr -0C6h
var_C4          = dword ptr -0C4h
var_C0          = dword ptr -0C0h
var_BC          = dword ptr -0BCh
var_B6          = word ptr -0B6h
var_B4          = dword ptr -0B4h
var_B0          = dword ptr -0B0h
var_AC          = dword ptr -0ACh
var_A8          = dword ptr -0A8h
var_A2          = word ptr -0A2h
var_A0          = dword ptr -0A0h
var_9C          = dword ptr -9Ch
var_98          = dword ptr -98h
var_92          = word ptr -92h
var_90          = dword ptr -90h
var_8C          = dword ptr -8Ch
var_88          = dword ptr -88h
var_58          = dword ptr -58h
var_44          = byte ptr -44h
var_38          = dword ptr -38h
Str             = dword ptr -34h
var_30          = dword ptr -30h
var_2C          = dword ptr -2Ch
var_28          = dword ptr -28h
var_24          = byte ptr -24h
var_18          = byte ptr -18h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch
arg_8           = dword ptr  10h

; FUNCTION CHUNK AT 109110D0 SIZE 00000023 BYTES

; __unwind { // SEH_1090A940
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_1090A940
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0C0h
                mov     [ebp+var_88], ecx
                cmp     [ebp+arg_4], 0
                jnz     short loc_1090A98F
                push    0
                mov     ecx, [ebp+var_88]
                call    sub_1090A290
                mov     eax, [ebp+var_88]
                mov     dword ptr [eax+10h], 8
                mov     ecx, [ebp+var_88]
                call    sub_10908690

loc_1090A98F:                           ; CODE XREF: sub_1090A940+28↑j
                lea     ecx, [ebp+var_24]
                call    ds:??0dnString@@QAE@XZ ; dnString::dnString(void)
;   try {
                mov     [ebp+var_4], 0
                mov     ecx, ds:?GFileManager@@3PAVdnFileMgr@@A ; dnFileMgr * GFileManager
                mov     edx, [ecx]
                push    edx
                mov     eax, [ebp+arg_0]
                push    eax
                lea     ecx, [ebp+var_24]
                push    ecx
                call    ds:?appLoadFileToString@@YAHAAVdnString@@PB_WPAVdnFileMgr@@@Z ; appLoadFileToString(dnString &,wchar_t const *,dnFileMgr *)
                add     esp, 0Ch
                test    eax, eax
                jnz     short loc_1090A9D2
;   } // starts at 1090A998
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_24]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                jmp     loc_1090AD69
; ---------------------------------------------------------------------------

loc_1090A9D2:                           ; CODE XREF: sub_1090A940+7B↑j
                lea     ecx, [ebp+var_18]
                call    ds:??0?$dnArray@E@@QAE@XZ ; dnArray<uchar>::dnArray<uchar>(void)
;   try {
                mov     byte ptr [ebp+var_4], 1
                cmp     [ebp+arg_8], 0
                jz      short loc_1090AA26
                mov     edx, ds:?GFileManager@@3PAVdnFileMgr@@A ; dnFileMgr * GFileManager
                mov     eax, [edx]
                push    eax
                mov     ecx, [ebp+arg_0]
                push    ecx
                lea     edx, [ebp+var_18]
                push    edx
                call    ds:?appLoadFileToArray@@YAHAAV?$dnArray@E@@PB_WPAVdnFileMgr@@@Z ; appLoadFileToArray(dnArray<uchar> &,wchar_t const *,dnFileMgr *)
                add     esp, 0Ch
                test    eax, eax
                jz      short loc_1090AA26
                lea     eax, [ebp+var_18]
                push    eax
                call    sub_10901AF0
                add     esp, 4
                test    eax, eax
                jz      short loc_1090AA26
                lea     ecx, [ebp+var_18]
                call    ds:?GetData@dnArrayBase@@QAEPAXXZ ; dnArrayBase::GetData(void)
                push    eax
                lea     ecx, [ebp+var_24]
                call    ds:??4dnString@@QAEAAV0@PB_W@Z ; dnString::operator=(wchar_t const *)

loc_1090AA26:                           ; CODE XREF: sub_1090A940+A3↑j
                                        ; sub_1090A940+C1↑j ...
                lea     ecx, [ebp+var_24]
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                test    eax, eax
                jle     loc_1090AD4C
                lea     ecx, [ebp+var_24]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                mov     [ebp+var_30], eax
                mov     [ebp+var_28], 0
                mov     [ebp+var_2C], 0

loc_1090AA51:                           ; CODE XREF: sub_1090A940:loc_1090AD47↓j
                cmp     [ebp+var_2C], 0
                jnz     loc_1090AD4C

loc_1090AA5B:                           ; CODE XREF: sub_1090A940+13A↓j
                mov     ecx, [ebp+var_30]
                movzx   edx, word ptr [ecx]
                cmp     edx, 0Dh
                jz      short loc_1090AA71
                mov     eax, [ebp+var_30]
                movzx   ecx, word ptr [eax]
                cmp     ecx, 0Ah
                jnz     short loc_1090AA7C

loc_1090AA71:                           ; CODE XREF: sub_1090A940+124↑j
                mov     edx, [ebp+var_30]
                add     edx, 2
                mov     [ebp+var_30], edx
                jmp     short loc_1090AA5B
; ---------------------------------------------------------------------------

loc_1090AA7C:                           ; CODE XREF: sub_1090A940+12F↑j
                mov     eax, [ebp+var_30]
                mov     [ebp+Str], eax

loc_1090AA82:                           ; CODE XREF: sub_1090A940+16B↓j
                mov     ecx, [ebp+var_30]
                movzx   edx, word ptr [ecx]
                test    edx, edx
                jz      short loc_1090AAAD
                mov     eax, [ebp+var_30]
                movzx   ecx, word ptr [eax]
                cmp     ecx, 0Dh
                jz      short loc_1090AAAD
                mov     edx, [ebp+var_30]
                movzx   eax, word ptr [edx]
                cmp     eax, 0Ah
                jz      short loc_1090AAAD
                mov     ecx, [ebp+var_30]
                add     ecx, 2
                mov     [ebp+var_30], ecx
                jmp     short loc_1090AA82
; ---------------------------------------------------------------------------

loc_1090AAAD:                           ; CODE XREF: sub_1090A940+14A↑j
                                        ; sub_1090A940+155↑j ...
                mov     edx, [ebp+var_30]
                movzx   eax, word ptr [edx]
                test    eax, eax
                jnz     short loc_1090AABE
                mov     [ebp+var_2C], 1

loc_1090AABE:                           ; CODE XREF: sub_1090A940+175↑j
                xor     ecx, ecx
                mov     edx, [ebp+var_30]
                mov     [edx], cx
                mov     eax, [ebp+var_30]
                add     eax, 2
                mov     [ebp+var_30], eax
                mov     ecx, [ebp+Str]
                movzx   edx, word ptr [ecx]
                cmp     edx, 5Bh
                jnz     loc_1090AC1D
                mov     eax, [ebp+Str]
                mov     [ebp+var_8C], eax
                mov     ecx, [ebp+var_8C]
                add     ecx, 2
                mov     [ebp+var_90], ecx

loc_1090AAF6:                           ; CODE XREF: sub_1090A940+1D5↓j
                mov     edx, [ebp+var_8C]
                mov     ax, [edx]
                mov     [ebp+var_92], ax
                add     [ebp+var_8C], 2
                cmp     [ebp+var_92], 0
                jnz     short loc_1090AAF6
                mov     ecx, [ebp+var_8C]
                sub     ecx, [ebp+var_90]
                sar     ecx, 1
                mov     [ebp+var_98], ecx
                mov     edx, [ebp+var_98]
                mov     eax, [ebp+Str]
                movzx   ecx, word ptr [eax+edx*2-2]
                cmp     ecx, 5Dh
                jnz     loc_1090AC1D
                mov     edx, [ebp+Str]
                add     edx, 2
                mov     [ebp+Str], edx
                mov     eax, [ebp+Str]
                mov     [ebp+var_9C], eax
                mov     ecx, [ebp+var_9C]
                add     ecx, 2
                mov     [ebp+var_A0], ecx

loc_1090AB63:                           ; CODE XREF: sub_1090A940+242↓j
                mov     edx, [ebp+var_9C]
                mov     ax, [edx]
                mov     [ebp+var_A2], ax
                add     [ebp+var_9C], 2
                cmp     [ebp+var_A2], 0
                jnz     short loc_1090AB63
                mov     ecx, [ebp+var_9C]
                sub     ecx, [ebp+var_A0]
                sar     ecx, 1
                mov     [ebp+var_A8], ecx
                xor     edx, edx
                mov     eax, [ebp+var_A8]
                mov     ecx, [ebp+Str]
                mov     [ecx+eax*2-2], dx
                mov     edx, [ebp+Str]
                push    edx
                lea     ecx, [ebp+var_44]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
;   } // starts at 1090A9DB
;   try {
                mov     byte ptr [ebp+var_4], 2
                lea     eax, [ebp+var_44]
                push    eax
                mov     ecx, [ebp+var_88]
                call    sub_10908790
                mov     [ebp+var_28], eax
;   } // starts at 1090ABB5
;   try {
                mov     byte ptr [ebp+var_4], 1
                lea     ecx, [ebp+var_44]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                cmp     [ebp+var_28], 0
                jnz     short loc_1090AC18
                lea     ecx, [ebp+var_58]
                call    sub_10909B10
                lea     ecx, [ebp+var_58]
                mov     [ebp+var_AC], ecx
;   } // starts at 1090ABCB
;   try {
                mov     byte ptr [ebp+var_4], 3
                mov     edx, [ebp+var_AC]
                push    edx
                mov     eax, [ebp+Str]
                push    eax
                mov     ecx, [ebp+var_88]
                call    sub_1090A1C0
                mov     [ebp+var_28], eax
;   } // starts at 1090ABEF
;   try {
                mov     byte ptr [ebp+var_4], 1
                lea     ecx, [ebp+var_58]
                call    sub_10906EC0

loc_1090AC18:                           ; CODE XREF: sub_1090A940+29C↑j
                jmp     loc_1090AD47
; ---------------------------------------------------------------------------

loc_1090AC1D:                           ; CODE XREF: sub_1090A940+198↑j
                                        ; sub_1090A940+1FC↑j
                cmp     [ebp+var_28], 0
                jz      loc_1090AD47
                mov     ecx, [ebp+Str]
                movzx   edx, word ptr [ecx]
                test    edx, edx
                jz      loc_1090AD47
                push    3Dh             ; Ch
                mov     eax, [ebp+Str]
                push    eax             ; Str
                call    ds:wcschr
                add     esp, 8
                mov     [ebp+var_38], eax
                cmp     [ebp+var_38], 0
                jz      loc_1090AD47
                xor     ecx, ecx
                mov     edx, [ebp+var_38]
                mov     [edx], cx
                mov     eax, [ebp+var_38]
                add     eax, 2
                mov     [ebp+var_38], eax
                mov     ecx, [ebp+var_38]
                movzx   edx, word ptr [ecx]
                cmp     edx, 22h
                jnz     loc_1090AD37
                mov     eax, [ebp+var_38]
                mov     [ebp+var_B0], eax
                mov     ecx, [ebp+var_B0]
                add     ecx, 2
                mov     [ebp+var_B4], ecx

loc_1090AC89:                           ; CODE XREF: sub_1090A940+368↓j
                mov     edx, [ebp+var_B0]
                mov     ax, [edx]
                mov     [ebp+var_B6], ax
                add     [ebp+var_B0], 2
                cmp     [ebp+var_B6], 0
                jnz     short loc_1090AC89
                mov     ecx, [ebp+var_B0]
                sub     ecx, [ebp+var_B4]
                sar     ecx, 1
                mov     [ebp+var_BC], ecx
                mov     edx, [ebp+var_BC]
                mov     eax, [ebp+var_38]
                movzx   ecx, word ptr [eax+edx*2-2]
                cmp     ecx, 22h
                jnz     short loc_1090AD37
                mov     edx, [ebp+var_38]
                add     edx, 2
                mov     [ebp+var_38], edx
                mov     eax, [ebp+var_38]
                mov     [ebp+var_C0], eax
                mov     ecx, [ebp+var_C0]
                add     ecx, 2
                mov     [ebp+var_C4], ecx

loc_1090ACF2:                           ; CODE XREF: sub_1090A940+3D1↓j
                mov     edx, [ebp+var_C0]
                mov     ax, [edx]
                mov     [ebp+var_C6], ax
                add     [ebp+var_C0], 2
                cmp     [ebp+var_C6], 0
                jnz     short loc_1090ACF2
                mov     ecx, [ebp+var_C0]
                sub     ecx, [ebp+var_C4]
                sar     ecx, 1
                mov     [ebp+var_CC], ecx
                xor     edx, edx
                mov     eax, [ebp+var_CC]
                mov     ecx, [ebp+var_38]
                mov     [ecx+eax*2-2], dx

loc_1090AD37:                           ; CODE XREF: sub_1090A940+32B↑j
                                        ; sub_1090A940+38F↑j
                mov     edx, [ebp+var_38]
                push    edx
                mov     eax, [ebp+Str]
                push    eax
                mov     ecx, [ebp+var_28]
                call    sub_109094A0

loc_1090AD47:                           ; CODE XREF: sub_1090A940:loc_1090AC18↑j
                                        ; sub_1090A940+2E1↑j ...
                jmp     loc_1090AA51
;   } // starts at 1090AC0C
; ---------------------------------------------------------------------------

loc_1090AD4C:                           ; CODE XREF: sub_1090A940+F1↑j
                                        ; sub_1090A940+115↑j
;   try {
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_18]
                call    ds:??1?$dnArray@E@@QAE@XZ ; dnArray<uchar>::~dnArray<uchar>(void)
;   } // starts at 1090AD4C
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_24]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)

loc_1090AD69:                           ; CODE XREF: sub_1090A940+8D↑j
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    0Ch
; } // starts at 1090A940
sub_1090A940    endp

; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset sub_10911108
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 30h
                mov     [ebp-3Ch], ecx
                mov     ecx, [ebp-3Ch]
                call    ds:??0dnArrayBase@@QAE@XZ ; dnArrayBase::dnArrayBase(void)
                mov     dword ptr [ebp-4], 0
                mov     eax, [ebp-3Ch]
                mov     dword ptr [eax+0Ch], 0
                mov     ecx, [ebp-3Ch]
                mov     dword ptr [ecx+10h], 8
                mov     ecx, [ebp-3Ch]
                call    sub_10908690
                mov     dword ptr [ebp-4], 0FFFFFFFFh
                mov     eax, [ebp-3Ch]
                mov     ecx, [ebp-0Ch]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                sub     esp, 58h
                mov     [ebp-58h], ecx
                mov     eax, [ebp+8]
                push    eax
                mov     ecx, [ebp-58h]
                call    sub_1090A780
                mov     ecx, [ebp-58h]
                mov     edx, [ebp+8]
                mov     eax, [edx+10h]
                mov     [ecx+10h], eax
                mov     ecx, [ebp-58h]
                call    sub_10908690
                mov     eax, [ebp-58h]
                mov     esp, ebp
                pop     ebp
                retn    4
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1090AE30    proc near               ; CODE XREF: sub_1090B4E0+159↓p
                                        ; sub_1090B4E0+1A9↓p

var_60          = dword ptr -60h
var_5C          = dword ptr -5Ch
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch

                push    ebp
                mov     ebp, esp
                sub     esp, 60h
                mov     eax, [ebp+arg_4]
                add     eax, 10h
                mov     [ebp+var_60], eax
                mov     ecx, [ebp+arg_4]
                add     ecx, 4
                push    ecx
                mov     edx, [ebp+arg_0]
                push    edx
                call    ds:??6@YAAAVdnArchive@@AAV0@AAVdnString@@@Z ; operator<<(dnArchive &,dnString &)
                add     esp, 8
                mov     [ebp+var_5C], eax
                mov     eax, [ebp+var_60]
                push    eax
                mov     ecx, [ebp+var_5C]
                push    ecx
                call    sub_1090A510
                add     esp, 8
                mov     ecx, [ebp+var_5C]
                call    ds:?IsLoading@dnArchive@@QAEHXZ ; dnArchive::IsLoading(void)
                test    eax, eax
                jz      short loc_1090AE7B
                mov     ecx, [ebp+var_60]
                call    sub_10908690

loc_1090AE7B:                           ; CODE XREF: sub_1090AE30+41↑j
                mov     eax, [ebp+var_5C]
                mov     esp, ebp
                pop     ebp
                retn
sub_1090AE30    endp

; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset sub_10911128
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 5Ch
                mov     [ebp-68h], ecx
                mov     eax, [ebp+8]
                push    eax
                mov     ecx, [ebp-68h]
                call    sub_1090A350
                mov     dword ptr [ebp-4], 0
                mov     ecx, [ebp-68h]
                mov     dword ptr [ecx+0Ch], 0
                mov     edx, [ebp-68h]
                mov     eax, [ebp+8]
                mov     ecx, [eax+10h]
                mov     [edx+10h], ecx
                mov     ecx, [ebp-68h]
                call    sub_10908690
                mov     dword ptr [ebp-4], 0FFFFFFFFh
                mov     eax, [ebp-68h]
                mov     ecx, [ebp-0Ch]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    4
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1090AF00    proc near               ; CODE XREF: .text:1090B057↓p
                                        ; sub_1090B4E0+123↓p ...

var_3C          = dword ptr -3Ch
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 10911140 SIZE 00000008 BYTES

; __unwind { // SEH_1090AF00
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_1090AF00
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 30h
                mov     [ebp+var_3C], ecx
                mov     ecx, [ebp+var_3C]
                call    ds:??0dnArrayBase@@QAE@XZ ; dnArrayBase::dnArrayBase(void)
;   try {
                mov     [ebp+var_4], 0
                mov     eax, [ebp+var_3C]
                mov     dword ptr [eax+0Ch], 0
                mov     ecx, [ebp+var_3C]
                mov     dword ptr [ecx+10h], 8
                mov     ecx, [ebp+var_3C]
                call    sub_10908690
;   } // starts at 1090AF27
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     edx, [ebp+var_3C]
                mov     dword ptr [edx+14h], 0
                mov     eax, [ebp+var_3C]
                mov     dword ptr [eax+18h], 0
                mov     eax, [ebp+var_3C]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
; } // starts at 1090AF00
sub_1090AF00    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1090AF80    proc near               ; CODE XREF: .text:1090B003↓p
                                        ; sub_1090B110+9C↓p ...

var_58          = dword ptr -58h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 58h
                mov     [ebp+var_58], ecx
                mov     eax, [ebp+arg_0]
                push    eax
                mov     ecx, [ebp+var_58]
                call    sub_1090A780
                mov     ecx, [ebp+var_58]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+10h]
                mov     [ecx+10h], eax
                mov     ecx, [ebp+var_58]
                call    sub_10908690
                mov     ecx, [ebp+var_58]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+14h]
                mov     [ecx+14h], eax
                mov     ecx, [ebp+var_58]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+18h]
                mov     [ecx+18h], eax
                mov     eax, [ebp+var_58]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_1090AF80    endp

; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                sub     esp, 54h
                mov     [ebp-54h], ecx
                mov     eax, [ebp-54h]
                mov     ecx, [ebp+8]
                mov     edx, [ecx]
                mov     [eax], edx
                mov     eax, [ebp+8]
                add     eax, 4
                push    eax
                mov     ecx, [ebp-54h]
                add     ecx, 4
                call    ds:??4dnString@@QAEAAV0@ABV0@@Z ; dnString::operator=(dnString const &)
                mov     ecx, [ebp+8]
                add     ecx, 10h
                push    ecx
                mov     ecx, [ebp-54h]
                add     ecx, 10h
                call    sub_1090AF80
                mov     eax, [ebp-54h]
                mov     esp, ebp
                pop     ebp
                retn    4
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset sub_1091116C
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 30h
                mov     [ebp-3Ch], ecx
                mov     ecx, [ebp-3Ch]
                add     ecx, 4
                call    ds:??0dnString@@QAE@XZ ; dnString::dnString(void)
                mov     dword ptr [ebp-4], 0
                mov     ecx, [ebp-3Ch]
                add     ecx, 10h
                call    sub_1090AF00
                mov     dword ptr [ebp-4], 0FFFFFFFFh
                mov     eax, [ebp-3Ch]
                mov     ecx, [ebp-0Ch]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1090B080    proc near               ; CODE XREF: .text:1090B2BF↓p

var_68          = dword ptr -68h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8

; FUNCTION CHUNK AT 10911180 SIZE 00000008 BYTES

; __unwind { // SEH_1090B080
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_1090B080
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 5Ch
                mov     [ebp+var_68], ecx
                mov     eax, [ebp+arg_0]
                push    eax
                mov     ecx, [ebp+var_68]
                call    sub_1090A350
;   try {
                mov     [ebp+var_4], 0
                mov     ecx, [ebp+var_68]
                mov     dword ptr [ecx+0Ch], 0
                mov     edx, [ebp+var_68]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+10h]
                mov     [edx+10h], ecx
                mov     ecx, [ebp+var_68]
                call    sub_10908690
;   } // starts at 1090B0AA
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     edx, [ebp+var_68]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+14h]
                mov     [edx+14h], ecx
                mov     edx, [ebp+var_68]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+18h]
                mov     [edx+18h], ecx
                mov     eax, [ebp+var_68]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    4
; } // starts at 1090B080
sub_1090B080    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1090B110    proc near               ; CODE XREF: sub_1090CF60+2CD↓p
                                        ; sub_1090CF60+384↓p

var_68          = dword ptr -68h
var_64          = dword ptr -64h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 68h
                mov     [ebp+var_68], ecx
                mov     eax, [ebp+var_68]
                cmp     eax, [ebp+arg_0]
                jz      loc_1090B1B3
                mov     ecx, [ebp+var_68]
                mov     edx, [ecx+4]
                mov     [ebp+var_4], edx
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+4]
                mov     [ebp+var_C], ecx
                mov     edx, [ebp+var_C]
                push    edx
                push    2Ch
                mov     ecx, [ebp+var_68]
                call    ds:?AddZeroed@dnArrayBase@@QAEHHH@Z ; dnArrayBase::AddZeroed(int,int)
                mov     [ebp+var_8], 0
                jmp     short loc_1090B158
; ---------------------------------------------------------------------------

loc_1090B14F:                           ; CODE XREF: sub_1090B110+A1↓j
                mov     eax, [ebp+var_8]
                add     eax, 1
                mov     [ebp+var_8], eax

loc_1090B158:                           ; CODE XREF: sub_1090B110+3D↑j
                mov     ecx, [ebp+arg_0]
                mov     edx, [ebp+var_8]
                cmp     edx, [ecx+4]
                jge     short loc_1090B1B3
                mov     eax, [ebp+var_8]
                imul    eax, 2Ch
                mov     ecx, [ebp+arg_0]
                add     eax, [ecx]
                mov     [ebp+var_10], eax
                mov     edx, [ebp+var_4]
                add     edx, [ebp+var_8]
                imul    edx, 2Ch
                mov     eax, [ebp+var_68]
                add     edx, [eax]
                mov     [ebp+var_64], edx
                mov     ecx, [ebp+var_64]
                mov     edx, [ebp+var_10]
                mov     eax, [edx]
                mov     [ecx], eax
                mov     ecx, [ebp+var_10]
                add     ecx, 4
                push    ecx
                mov     ecx, [ebp+var_64]
                add     ecx, 4
                call    ds:??4dnString@@QAEAAV0@ABV0@@Z ; dnString::operator=(dnString const &)
                mov     edx, [ebp+var_10]
                add     edx, 10h
                push    edx
                mov     ecx, [ebp+var_64]
                add     ecx, 10h
                call    sub_1090AF80
                jmp     short loc_1090B14F
; ---------------------------------------------------------------------------

loc_1090B1B3:                           ; CODE XREF: sub_1090B110+F↑j
                                        ; sub_1090B110+51↑j
                mov     eax, [ebp+var_68]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_1090B110    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1090B1C0    proc near               ; CODE XREF: .text:1090B2EE↓p
                                        ; sub_1090B4E0+BF↓p ...

var_2C          = dword ptr -2Ch
var_28          = dword ptr -28h
var_24          = dword ptr -24h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8

; FUNCTION CHUNK AT 109111A0 SIZE 0000000C BYTES

; __unwind { // SEH_1090B1C0
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_1090B1C0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 20h
                mov     [ebp+var_2C], ecx
                mov     eax, 1
                test    eax, eax
                jz      short loc_1090B252
                mov     [ebp+var_10], 0
                jmp     short loc_1090B1F9
; ---------------------------------------------------------------------------

loc_1090B1F0:                           ; CODE XREF: sub_1090B1C0:loc_1090B250↓j
                mov     ecx, [ebp+var_10]
                add     ecx, 1
                mov     [ebp+var_10], ecx

loc_1090B1F9:                           ; CODE XREF: sub_1090B1C0+2E↑j
                mov     edx, [ebp+var_2C]
                mov     eax, [ebp+var_10]
                cmp     eax, [edx+4]
                jge     short loc_1090B252
                mov     ecx, [ebp+var_10]
                imul    ecx, 2Ch
                mov     edx, [ebp+var_2C]
                add     ecx, [edx]
                mov     [ebp+var_28], ecx
;   try {
                mov     [ebp+var_4], 0
                mov     eax, [ebp+var_28]
                add     eax, 10h
                mov     [ebp+var_24], eax
                mov     ecx, [ebp+var_24]
                call    sub_109073D0
;   } // starts at 1090B212
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_28]
                add     ecx, 4
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                xor     ecx, ecx
                and     ecx, 1
                jz      short loc_1090B250
                mov     edx, [ebp+var_28]
                push    edx
                call    sub_10901030
                add     esp, 4

loc_1090B250:                           ; CODE XREF: sub_1090B1C0+82↑j
                jmp     short loc_1090B1F0
; ---------------------------------------------------------------------------

loc_1090B252:                           ; CODE XREF: sub_1090B1C0+25↑j
                                        ; sub_1090B1C0+42↑j
                mov     eax, [ebp+arg_0]
                push    eax
                push    2Ch
                mov     ecx, [ebp+var_2C]
                call    ds:?Empty@dnArrayBase@@QAEXHH@Z ; dnArrayBase::Empty(int,int)
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    4
; } // starts at 1090B1C0
sub_1090B1C0    endp

; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset sub_109111CC
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 5Ch
                mov     [ebp-68h], ecx
                mov     eax, [ebp+8]
                push    eax
                mov     ecx, [ebp-68h]
                add     ecx, 4
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
                mov     dword ptr [ebp-4], 0
                mov     ecx, [ebp+0Ch]
                push    ecx
                mov     ecx, [ebp-68h]
                add     ecx, 10h
                call    sub_1090B080
                mov     dword ptr [ebp-4], 0FFFFFFFFh
                mov     eax, [ebp-68h]
                mov     ecx, [ebp-0Ch]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    8
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                sub     esp, 40h
                mov     [ebp-40h], ecx
                push    0
                mov     ecx, [ebp-40h]
                call    sub_1090B1C0
                mov     eax, [ebp-40h]
                mov     dword ptr [eax+10h], 8
                mov     ecx, [ebp-40h]
                call    sub_10904AD0
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1090B310    proc near               ; CODE XREF: sub_1090BE40+5D4↓p

var_4C          = dword ptr -4Ch
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 4Ch
                mov     [ebp+var_4C], ecx
                mov     [ebp+var_4], 0
                mov     ecx, [ebp+var_4C]
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                sub     eax, 1
                mov     [ebp+var_8], eax
                jmp     short loc_1090B33A
; ---------------------------------------------------------------------------

loc_1090B331:                           ; CODE XREF: sub_1090B310:loc_1090B379↓j
                mov     eax, [ebp+var_8]
                sub     eax, 1
                mov     [ebp+var_8], eax

loc_1090B33A:                           ; CODE XREF: sub_1090B310+1F↑j
                cmp     [ebp+var_8], 0
                jl      short loc_1090B37B
                mov     ecx, [ebp+var_8]
                imul    ecx, 2Ch
                mov     edx, [ebp+var_4C]
                add     ecx, [edx]
                mov     [ebp+var_C], ecx
                mov     eax, [ebp+arg_0]
                push    eax
                mov     ecx, [ebp+var_C]
                add     ecx, 4
                call    ds:??8dnString@@QBEHPB_W@Z ; dnString::operator==(wchar_t const *)
                test    eax, eax
                jz      short loc_1090B379
                push    1
                mov     ecx, [ebp+var_8]
                push    ecx
                mov     ecx, [ebp+var_4C]
                call    sub_10907570
                mov     edx, [ebp+var_4]
                add     edx, 1
                mov     [ebp+var_4], edx

loc_1090B379:                           ; CODE XREF: sub_1090B310+50↑j
                jmp     short loc_1090B331
; ---------------------------------------------------------------------------

loc_1090B37B:                           ; CODE XREF: sub_1090B310+2E↑j
                cmp     [ebp+var_4], 0
                jz      short loc_1090B389
                mov     ecx, [ebp+var_4C]
                call    sub_10908A60

loc_1090B389:                           ; CODE XREF: sub_1090B310+6F↑j
                mov     eax, [ebp+var_4]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_1090B310    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1090B3A0    proc near               ; CODE XREF: sub_1090B750+A4↓p

var_64          = dword ptr -64h
var_60          = dword ptr -60h
var_24          = dword ptr -24h
var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch

; FUNCTION CHUNK AT 109111E0 SIZE 0000001D BYTES

; __unwind { // SEH_1090B3A0
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_1090B3A0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 58h
                push    esi
                mov     [ebp+var_60], ecx
                push    2Ch
                push    1
                mov     ecx, [ebp+var_60]
                call    ds:?Add@dnArrayBase@@QAEHHH@Z ; dnArrayBase::Add(int,int)
                mov     [ebp+var_20], eax
                mov     eax, [ebp+var_20]
                imul    eax, 2Ch
                mov     ecx, [ebp+var_60]
                add     eax, [ecx]
                mov     [ebp+var_1C], eax
;   try {
                mov     [ebp+var_4], 0
                cmp     [ebp+var_1C], 0
                jz      short loc_1090B437
                mov     edx, [ebp+arg_0]
                push    edx
                mov     ecx, [ebp+var_1C]
                add     ecx, 4
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
;   } // starts at 1090B3DD
;   try {
                mov     byte ptr [ebp+var_4], 1
                mov     eax, [ebp+var_1C]
                add     eax, 10h
                mov     [ebp+var_24], eax
                mov     ecx, [ebp+arg_4]
                push    ecx
                mov     ecx, [ebp+var_24]
                call    sub_1090A890
                mov     edx, [ebp+var_24]
                mov     eax, [ebp+arg_4]
                mov     ecx, [eax+14h]
                mov     [edx+14h], ecx
                mov     edx, [ebp+var_24]
                mov     eax, [ebp+arg_4]
                mov     ecx, [eax+18h]
                mov     [edx+18h], ecx
;   } // starts at 1090B3FA
;   try {
                mov     byte ptr [ebp+var_4], 0
                mov     edx, [ebp+var_1C]
                mov     [ebp+var_64], edx
                jmp     short loc_1090B43E
; ---------------------------------------------------------------------------

loc_1090B437:                           ; CODE XREF: sub_1090B3A0+48↑j
                mov     [ebp+var_64], 0

loc_1090B43E:                           ; CODE XREF: sub_1090B3A0+95↑j
                mov     eax, [ebp+var_64]
                mov     [ebp+var_18], eax
;   } // starts at 1090B42B
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_18]
                mov     [ebp+var_14], ecx
                mov     edx, [ebp+var_14]
                add     edx, 4
                push    edx
                call    sub_10902870
                add     esp, 4
                mov     ecx, [ebp+var_60]
                mov     edx, [ecx+10h]
                sub     edx, 1
                and     eax, edx
                mov     [ebp+var_10], eax
                mov     eax, [ebp+var_60]
                mov     ecx, [eax+0Ch]
                mov     edx, [ebp+var_14]
                mov     eax, [ebp+var_10]
                mov     ecx, [ecx+eax*4]
                mov     [edx], ecx
                mov     ecx, [ebp+var_60]
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                sub     eax, 1
                mov     edx, [ebp+var_60]
                mov     ecx, [edx+0Ch]
                mov     edx, [ebp+var_10]
                mov     [ecx+edx*4], eax
                mov     eax, [ebp+var_60]
                mov     ecx, [eax+10h]
                lea     esi, [ecx+ecx+8]
                mov     ecx, [ebp+var_60]
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                cmp     esi, eax
                jge     short loc_1090B4C4
                mov     edx, [ebp+var_60]
                mov     eax, [edx+10h]
                shl     eax, 1
                mov     ecx, [ebp+var_60]
                mov     [ecx+10h], eax
                mov     ecx, [ebp+var_60]
                call    sub_10904AD0

loc_1090B4C4:                           ; CODE XREF: sub_1090B3A0+10C↑j
                mov     eax, [ebp+var_14]
                add     eax, 10h
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn    8
; } // starts at 1090B3A0
sub_1090B3A0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1090B4E0    proc near               ; CODE XREF: .text:1090B80E↓p
                                        ; sub_1090CF60+29A↓p ...

var_B4          = dword ptr -0B4h
var_34          = dword ptr -34h
var_24          = dword ptr -24h
var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch

; FUNCTION CHUNK AT 10911210 SIZE 0000001D BYTES

; __unwind { // SEH_1090B4E0
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_1090B4E0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0A8h
                push    2Ch
                mov     eax, [ebp+arg_0]
                push    eax
                mov     ecx, [ebp+arg_4]
                call    ds:?CountBytes@dnArrayBase@@QAEXAAVdnArchive@@H@Z ; dnArrayBase::CountBytes(dnArchive &,int)
                xor     ecx, ecx
                jz      short loc_1090B576
                mov     edx, [ebp+arg_4]
                add     edx, 4
                push    edx
                mov     eax, [ebp+arg_0]
                push    eax
                call    ds:??6@YAAAVdnArchive@@AAV0@AAVdnCompactIndex@@@Z ; operator<<(dnArchive &,dnCompactIndex &)
                add     esp, 8
                mov     ecx, [ebp+arg_0]
                call    ds:?IsLoading@dnArchive@@QAEHXZ ; dnArchive::IsLoading(void)
                test    eax, eax
                jz      short loc_1090B549
                mov     ecx, [ebp+arg_4]
                mov     edx, [ebp+arg_4]
                mov     eax, [edx+4]
                mov     [ecx+8], eax
                push    2Ch
                mov     ecx, [ebp+arg_4]
                call    ds:?Realloc@dnArrayBase@@IAEXH@Z ; dnArrayBase::Realloc(int)

loc_1090B549:                           ; CODE XREF: sub_1090B4E0+50↑j
                xor     ecx, ecx
                imul    ecx, 2Ch
                mov     edx, [ebp+arg_4]
                add     ecx, [edx]
                mov     [ebp+var_24], ecx
                mov     ecx, [ebp+arg_4]
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                push    eax
                mov     eax, [ebp+var_24]
                push    eax
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx]
                mov     ecx, [ebp+arg_0]
                mov     eax, [edx+4]
                call    eax
                jmp     loc_1090B693
; ---------------------------------------------------------------------------

loc_1090B576:                           ; CODE XREF: sub_1090B4E0+2F↑j
                mov     ecx, [ebp+arg_0]
                call    ds:?IsLoading@dnArchive@@QAEHXZ ; dnArchive::IsLoading(void)
                test    eax, eax
                jz      loc_1090B648
                lea     ecx, [ebp+var_10]
                push    ecx
                mov     edx, [ebp+arg_0]
                push    edx
                call    ds:??6@YAAAVdnArchive@@AAV0@AAVdnCompactIndex@@@Z ; operator<<(dnArchive &,dnCompactIndex &)
                add     esp, 8
                mov     eax, [ebp+var_10]
                push    eax
                mov     ecx, [ebp+arg_4]
                call    sub_1090B1C0
                mov     [ebp+var_14], 0
                jmp     short loc_1090B5B6
; ---------------------------------------------------------------------------

loc_1090B5AD:                           ; CODE XREF: sub_1090B4E0+161↓j
                mov     ecx, [ebp+var_14]
                add     ecx, 1
                mov     [ebp+var_14], ecx

loc_1090B5B6:                           ; CODE XREF: sub_1090B4E0+CB↑j
                mov     edx, [ebp+var_14]
                cmp     edx, [ebp+var_10]
                jge     loc_1090B646
                push    2Ch
                push    1
                mov     ecx, [ebp+arg_4]
                call    ds:?Add@dnArrayBase@@QAEHHH@Z ; dnArrayBase::Add(int,int)
                mov     [ebp+var_34], eax
                mov     eax, [ebp+var_34]
                imul    eax, 2Ch
                mov     ecx, [ebp+arg_4]
                add     eax, [ecx]
                mov     [ebp+var_20], eax
;   try {
                mov     [ebp+var_4], 0
                cmp     [ebp+var_20], 0
                jz      short loc_1090B617
                mov     ecx, [ebp+var_20]
                add     ecx, 4
                call    ds:??0dnString@@QAE@XZ ; dnString::dnString(void)
;   } // starts at 1090B5E0
;   try {
                mov     byte ptr [ebp+var_4], 1
                mov     ecx, [ebp+var_20]
                add     ecx, 10h
                call    sub_1090AF00
;   } // starts at 1090B5F9
;   try {
                mov     byte ptr [ebp+var_4], 0
                mov     edx, [ebp+var_20]
                mov     [ebp+var_B4], edx
                jmp     short loc_1090B621
; ---------------------------------------------------------------------------

loc_1090B617:                           ; CODE XREF: sub_1090B4E0+10B↑j
                mov     [ebp+var_B4], 0

loc_1090B621:                           ; CODE XREF: sub_1090B4E0+135↑j
                mov     eax, [ebp+var_B4]
                mov     [ebp+var_1C], eax
;   } // starts at 1090B608
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_1C]
                push    ecx
                mov     edx, [ebp+arg_0]
                push    edx
                call    sub_1090AE30
                add     esp, 8
                jmp     loc_1090B5AD
; ---------------------------------------------------------------------------

loc_1090B646:                           ; CODE XREF: sub_1090B4E0+DC↑j
                jmp     short loc_1090B693
; ---------------------------------------------------------------------------

loc_1090B648:                           ; CODE XREF: sub_1090B4E0+A1↑j
                mov     eax, [ebp+arg_4]
                add     eax, 4
                push    eax
                mov     ecx, [ebp+arg_0]
                push    ecx
                call    ds:??6@YAAAVdnArchive@@AAV0@AAVdnCompactIndex@@@Z ; operator<<(dnArchive &,dnCompactIndex &)
                add     esp, 8
                mov     [ebp+var_18], 0
                jmp     short loc_1090B66E
; ---------------------------------------------------------------------------

loc_1090B665:                           ; CODE XREF: sub_1090B4E0+1B1↓j
                mov     edx, [ebp+var_18]
                add     edx, 1
                mov     [ebp+var_18], edx

loc_1090B66E:                           ; CODE XREF: sub_1090B4E0+183↑j
                mov     eax, [ebp+arg_4]
                mov     ecx, [ebp+var_18]
                cmp     ecx, [eax+4]
                jge     short loc_1090B693
                mov     edx, [ebp+var_18]
                imul    edx, 2Ch
                mov     eax, [ebp+arg_4]
                add     edx, [eax]
                push    edx
                mov     ecx, [ebp+arg_0]
                push    ecx
                call    sub_1090AE30
                add     esp, 8
                jmp     short loc_1090B665
; ---------------------------------------------------------------------------

loc_1090B693:                           ; CODE XREF: sub_1090B4E0+91↑j
                                        ; sub_1090B4E0:loc_1090B646↑j ...
                mov     eax, [ebp+arg_0]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
; } // starts at 1090B4E0
sub_1090B4E0    endp

; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                sub     esp, 44h
                mov     [ebp-44h], ecx
                mov     eax, [ebp-44h]
                add     eax, 4
                mov     [ebp-40h], eax
                push    0
                mov     ecx, [ebp-40h]
                call    sub_1090B1C0
                mov     ecx, [ebp-40h]
                mov     dword ptr [ecx+10h], 8
                mov     ecx, [ebp-40h]
                call    sub_10904AD0
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1090B6F0    proc near               ; DATA XREF: .rdata:10913524↓o

var_44          = dword ptr -44h
var_40          = dword ptr -40h

                push    ebp
                mov     ebp, esp
                sub     esp, 44h
                mov     [ebp+var_44], ecx
                mov     eax, ds:GIsEditor
                cmp     dword ptr [eax], 0
                jz      short loc_1090B721
                mov     ecx, ds:GIsUCC
                cmp     dword ptr [ecx], 0
                jnz     short loc_1090B721
                push    0
                push    1
                mov     edx, [ebp+var_44]
                mov     eax, [edx]
                mov     ecx, [ebp+var_44]
                mov     edx, [eax+3Ch]
                call    edx
                jmp     short loc_1090B746
; ---------------------------------------------------------------------------

loc_1090B721:                           ; CODE XREF: sub_1090B6F0+11↑j
                                        ; sub_1090B6F0+1C↑j
                mov     eax, [ebp+var_44]
                add     eax, 4
                mov     [ebp+var_40], eax
                push    0
                mov     ecx, [ebp+var_40]
                call    sub_1090B1C0
                mov     ecx, [ebp+var_40]
                mov     dword ptr [ecx+10h], 8
                mov     ecx, [ebp+var_40]
                call    sub_10904AD0

loc_1090B746:                           ; CODE XREF: sub_1090B6F0+2F↑j
                mov     esp, ebp
                pop     ebp
                retn
sub_1090B6F0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1090B750    proc near               ; CODE XREF: sub_1090B840+583↓p
                                        ; sub_1090CBA0+E6↓p ...

var_80          = dword ptr -80h
var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_4           = dword ptr -4
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch

                push    ebp
                mov     ebp, esp
                sub     esp, 80h
                mov     [ebp+var_80], ecx
                mov     eax, [ebp+arg_0]
                push    eax
                call    sub_10902040
                add     esp, 4
                mov     [ebp+var_14], eax
                mov     ecx, [ebp+var_80]
                mov     edx, [ecx+10h]
                sub     edx, 1
                and     edx, [ebp+var_14]
                mov     eax, [ebp+var_80]
                mov     ecx, [eax+0Ch]
                mov     edx, [ecx+edx*4]
                mov     [ebp+var_4], edx
                jmp     short loc_1090B796
; ---------------------------------------------------------------------------

loc_1090B785:                           ; CODE XREF: sub_1090B750:loc_1090B7E7↓j
                mov     eax, [ebp+var_4]
                imul    eax, 2Ch
                mov     ecx, [ebp+var_80]
                mov     edx, [ecx]
                mov     eax, [eax+edx]
                mov     [ebp+var_4], eax

loc_1090B796:                           ; CODE XREF: sub_1090B750+33↑j
                cmp     [ebp+var_4], 0FFFFFFFFh
                jz      short loc_1090B7E9
                mov     ecx, [ebp+var_4]
                imul    ecx, 2Ch
                mov     edx, [ebp+var_80]
                add     ecx, [edx]
                mov     [ebp+var_18], ecx
                mov     eax, [ebp+arg_0]
                push    eax
                mov     ecx, [ebp+var_18]
                add     ecx, 4
                call    ds:??8dnString@@QBEHPB_W@Z ; dnString::operator==(wchar_t const *)
                test    eax, eax
                jz      short loc_1090B7E7
                mov     ecx, [ebp+arg_4]
                push    ecx
                mov     edx, [ebp+var_4]
                imul    edx, 2Ch
                mov     eax, [ebp+var_80]
                mov     ecx, [eax]
                lea     ecx, [ecx+edx+10h]
                call    sub_1090AF80
                mov     edx, [ebp+var_4]
                imul    edx, 2Ch
                mov     eax, [ebp+var_80]
                mov     ecx, [eax]
                lea     eax, [ecx+edx+10h]
                jmp     short loc_1090B7F9
; ---------------------------------------------------------------------------

loc_1090B7E7:                           ; CODE XREF: sub_1090B750+6C↑j
                jmp     short loc_1090B785
; ---------------------------------------------------------------------------

loc_1090B7E9:                           ; CODE XREF: sub_1090B750+4A↑j
                mov     edx, [ebp+arg_4]
                push    edx
                mov     eax, [ebp+arg_0]
                push    eax
                mov     ecx, [ebp+var_80]
                call    sub_1090B3A0

loc_1090B7F9:                           ; CODE XREF: sub_1090B750+95↑j
                mov     esp, ebp
                pop     ebp
                retn    8
sub_1090B750    endp

; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                sub     esp, 5Ch
                mov     eax, [ebp+0Ch]
                push    eax
                mov     ecx, [ebp+8]
                push    ecx
                call    sub_1090B4E0
                add     esp, 8
                mov     ecx, [ebp+8]
                call    ds:?IsLoading@dnArchive@@QAEHXZ ; dnArchive::IsLoading(void)
                test    eax, eax
                jz      short loc_1090B82B
                mov     ecx, [ebp+0Ch]
                call    sub_10904AD0

loc_1090B82B:                           ; CODE XREF: .text:1090B821↑j
                mov     eax, [ebp+8]
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1090B840    proc near               ; CODE XREF: sub_1090BE40+184↓p
                                        ; sub_1090BE40+302↓p ...

var_37C         = dword ptr -37Ch
var_378         = dword ptr -378h
var_374         = dword ptr -374h
var_370         = dword ptr -370h
var_36C         = dword ptr -36Ch
var_368         = dword ptr -368h
var_364         = dword ptr -364h
var_360         = dword ptr -360h
var_35A         = word ptr -35Ah
var_358         = dword ptr -358h
var_354         = dword ptr -354h
var_350         = dword ptr -350h
var_34A         = word ptr -34Ah
var_348         = dword ptr -348h
var_344         = dword ptr -344h
var_340         = dword ptr -340h
var_33A         = word ptr -33Ah
var_338         = dword ptr -338h
var_334         = dword ptr -334h
var_330         = dword ptr -330h
var_32C         = dword ptr -32Ch
var_326         = word ptr -326h
var_324         = dword ptr -324h
var_320         = dword ptr -320h
var_31C         = dword ptr -31Ch
var_316         = word ptr -316h
var_314         = dword ptr -314h
var_310         = dword ptr -310h
var_30A         = word ptr -30Ah
var_308         = dword ptr -308h
var_304         = dword ptr -304h
var_300         = dword ptr -300h
var_2FC         = dword ptr -2FCh
var_284         = dword ptr -284h
var_280         = dword ptr -280h
var_27C         = dword ptr -27Ch
var_278         = dword ptr -278h
var_274         = dword ptr -274h
var_270         = byte ptr -270h
var_264         = dword ptr -264h
var_248         = byte ptr -248h
var_23C         = byte ptr -23Ch
var_230         = byte ptr -230h
var_224         = dword ptr -224h
var_220         = dword ptr -220h
var_21C         = byte ptr -21Ch
var_216         = word ptr -216h
var_214         = word ptr -214h
var_210         = dword ptr -210h
Str1            = word ptr -20Ch
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch
arg_8           = dword ptr  10h
arg_C           = dword ptr  14h

; FUNCTION CHUNK AT 10911240 SIZE 00000047 BYTES

; __unwind { // SEH_1090B840
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_1090B840
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 370h
                push    edi
                mov     [ebp+var_2FC], ecx
                mov     [ebp+var_210], 0
                cmp     [ebp+arg_0], 0
                jz      short loc_1090B880
                mov     eax, [ebp+arg_0]
                mov     [ebp+var_278], eax
                jmp     short loc_1090B895
; ---------------------------------------------------------------------------

loc_1090B880:                           ; CODE XREF: sub_1090B840+33↑j
                mov     ecx, [ebp+var_2FC]
                add     ecx, 20h
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                mov     [ebp+var_278], eax

loc_1090B895:                           ; CODE XREF: sub_1090B840+3E↑j
                mov     ecx, [ebp+var_278]
                mov     [ebp+var_300], ecx
                lea     edx, [ebp+Str1]
                mov     [ebp+var_304], edx
                mov     eax, [ebp+var_304]
                mov     [ebp+var_308], eax

loc_1090B8B9:                           ; CODE XREF: sub_1090B840+BF↓j
                mov     ecx, [ebp+var_300]
                mov     dx, [ecx]
                mov     [ebp+var_30A], dx
                mov     eax, [ebp+var_304]
                mov     cx, [ebp+var_30A]
                mov     [eax], cx
                mov     edx, [ebp+var_300]
                add     edx, 2
                mov     [ebp+var_300], edx
                mov     eax, [ebp+var_304]
                add     eax, 2
                mov     [ebp+var_304], eax
                cmp     [ebp+var_30A], 0
                jnz     short loc_1090B8B9
                lea     ecx, [ebp+Str1]
                mov     [ebp+var_310], ecx
                mov     edx, [ebp+var_310]
                add     edx, 2
                mov     [ebp+var_314], edx

loc_1090B91C:                           ; CODE XREF: sub_1090B840+FB↓j
                mov     eax, [ebp+var_310]
                mov     cx, [eax]
                mov     [ebp+var_316], cx
                add     [ebp+var_310], 2
                cmp     [ebp+var_316], 0
                jnz     short loc_1090B91C
                mov     edx, [ebp+var_310]
                sub     edx, [ebp+var_314]
                sar     edx, 1
                mov     [ebp+var_31C], edx
                mov     eax, [ebp+var_31C]
                mov     [ebp+var_224], eax
                cmp     [ebp+var_224], 5
                jl      short loc_1090B990
                mov     ecx, [ebp+var_224]
                movzx   edx, [ebp+ecx*2+var_214]
                cmp     edx, 2Eh
                jz      loc_1090B9FD
                mov     eax, [ebp+var_224]
                movzx   ecx, [ebp+eax*2+var_216]
                cmp     ecx, 2Eh
                jz      short loc_1090B9FD

loc_1090B990:                           ; CODE XREF: sub_1090B840+124↑j
                lea     edx, [ebp+Str1]
                add     edx, 0FFFFFFFEh
                mov     [ebp+var_320], edx
                mov     eax, [ebp+var_320]
                add     eax, 2
                mov     [ebp+var_324], eax

loc_1090B9AE:                           ; CODE XREF: sub_1090B840+18E↓j
                mov     ecx, [ebp+var_320]
                mov     dx, [ecx+2]
                mov     [ebp+var_326], dx
                add     [ebp+var_320], 2
                cmp     [ebp+var_326], 0
                jnz     short loc_1090B9AE
                mov     edi, [ebp+var_320]
                mov     eax, [ebp+var_324]
                mov     [ebp+var_32C], eax
                mov     ecx, ds:dword_10913718
                mov     [edi], ecx
                mov     edx, ds:dword_1091371C
                mov     [edi+4], edx
                mov     ax, ds:word_10913720
                mov     [edi+8], ax

loc_1090B9FD:                           ; CODE XREF: sub_1090B840+137↑j
                                        ; sub_1090B840+14E↑j
                push    offset aUserIni ; "User.ini"
                lea     ecx, [ebp+Str1]
                push    ecx             ; Str1
                call    ds:_wcsicmp
                add     esp, 8
                test    eax, eax
                jnz     loc_1090BAAA
                cmp     [ebp+arg_8], 0
                jz      loc_1090BAAA
                mov     ecx, [ebp+var_2FC]
                add     ecx, 2Ch
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                mov     [ebp+var_27C], eax
                mov     edx, [ebp+var_27C]
                mov     [ebp+var_330], edx
                lea     eax, [ebp+Str1]
                mov     [ebp+var_334], eax
                mov     ecx, [ebp+var_334]
                mov     [ebp+var_338], ecx

loc_1090BA5D:                           ; CODE XREF: sub_1090B840+263↓j
                mov     edx, [ebp+var_330]
                mov     ax, [edx]
                mov     [ebp+var_33A], ax
                mov     ecx, [ebp+var_334]
                mov     dx, [ebp+var_33A]
                mov     [ecx], dx
                mov     eax, [ebp+var_330]
                add     eax, 2
                mov     [ebp+var_330], eax
                mov     ecx, [ebp+var_334]
                add     ecx, 2
                mov     [ebp+var_334], ecx
                cmp     [ebp+var_33A], 0
                jnz     short loc_1090BA5D
                jmp     loc_1090BC09
; ---------------------------------------------------------------------------

loc_1090BAAA:                           ; CODE XREF: sub_1090B840+1D4↑j
                                        ; sub_1090B840+1DE↑j
                push    offset aSystemIni ; "System.ini"
                lea     edx, [ebp+Str1]
                push    edx             ; Str1
                call    ds:_wcsicmp
                add     esp, 8
                test    eax, eax
                jnz     loc_1090BB57
                cmp     [ebp+arg_8], 0
                jz      loc_1090BB57
                mov     ecx, [ebp+var_2FC]
                add     ecx, 20h
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                mov     [ebp+var_280], eax
                mov     eax, [ebp+var_280]
                mov     [ebp+var_340], eax
                lea     ecx, [ebp+Str1]
                mov     [ebp+var_344], ecx
                mov     edx, [ebp+var_344]
                mov     [ebp+var_348], edx

loc_1090BB0A:                           ; CODE XREF: sub_1090B840+310↓j
                mov     eax, [ebp+var_340]
                mov     cx, [eax]
                mov     [ebp+var_34A], cx
                mov     edx, [ebp+var_344]
                mov     ax, [ebp+var_34A]
                mov     [edx], ax
                mov     ecx, [ebp+var_340]
                add     ecx, 2
                mov     [ebp+var_340], ecx
                mov     edx, [ebp+var_344]
                add     edx, 2
                mov     [ebp+var_344], edx
                cmp     [ebp+var_34A], 0
                jnz     short loc_1090BB0A
                jmp     loc_1090BC09
; ---------------------------------------------------------------------------

loc_1090BB57:                           ; CODE XREF: sub_1090B840+281↑j
                                        ; sub_1090B840+28B↑j
                push    offset aProgressIni ; "Progress.ini"
                lea     eax, [ebp+Str1]
                push    eax             ; Str1
                call    ds:_wcsicmp
                add     esp, 8
                test    eax, eax
                jnz     loc_1090BC09
                mov     [ebp+var_210], 1
                cmp     [ebp+arg_8], 0
                jz      loc_1090BC09
                mov     ecx, [ebp+var_2FC]
                add     ecx, 38h
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                mov     [ebp+var_284], eax
                mov     ecx, [ebp+var_284]
                mov     [ebp+var_350], ecx
                lea     edx, [ebp+Str1]
                mov     [ebp+var_354], edx
                mov     eax, [ebp+var_354]
                mov     [ebp+var_358], eax

loc_1090BBC1:                           ; CODE XREF: sub_1090B840+3C7↓j
                mov     ecx, [ebp+var_350]
                mov     dx, [ecx]
                mov     [ebp+var_35A], dx
                mov     eax, [ebp+var_354]
                mov     cx, [ebp+var_35A]
                mov     [eax], cx
                mov     edx, [ebp+var_350]
                add     edx, 2
                mov     [ebp+var_350], edx
                mov     eax, [ebp+var_354]
                add     eax, 2
                mov     [ebp+var_354], eax
                cmp     [ebp+var_35A], 0
                jnz     short loc_1090BBC1

loc_1090BC09:                           ; CODE XREF: sub_1090B840+265↑j
                                        ; sub_1090B840+312↑j ...
                lea     ecx, [ebp+Str1]
                push    ecx
                lea     ecx, [ebp+var_21C]
                call    ds:??0FFilename@@QAE@PB_W@Z ; FFilename::FFilename(wchar_t const *)
;   try {
                mov     [ebp+var_4], 0
                lea     edx, [ebp+var_23C]
                push    edx
                lea     ecx, [ebp+var_21C]
                call    ds:?GetCleanFilename@FFilename@@QBE?AVdnString@@XZ ; FFilename::GetCleanFilename(void)
                mov     [ebp+var_360], eax
                mov     eax, [ebp+var_360]
                mov     [ebp+var_364], eax
;   } // starts at 1090BC1C
;   try {
                mov     byte ptr [ebp+var_4], 1
                mov     ecx, [ebp+var_364]
                call    ds:?ToLower@dnString@@QAEPB_WXZ ; dnString::ToLower(void)
                push    eax
                lea     ecx, [ebp+var_230]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
;   } // starts at 1090BC48
;   try {
                mov     byte ptr [ebp+var_4], 2
                lea     ecx, [ebp+var_230]
                push    ecx
                mov     ecx, [ebp+var_2FC]
                add     ecx, 4
                call    sub_109088C0
                mov     [ebp+var_220], eax
;   } // starts at 1090BC65
;   try {
                mov     byte ptr [ebp+var_4], 1
                lea     ecx, [ebp+var_230]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
;   } // starts at 1090BC84
;   try {
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_23C]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                cmp     [ebp+var_220], 0
                jnz     loc_1090BE08
                cmp     [ebp+arg_4], 0
                jnz     short loc_1090BCE8
                lea     edx, [ebp+Str1]
                push    edx
                mov     eax, ds:?GFileManager@@3PAVdnFileMgr@@A ; dnFileMgr * GFileManager
                mov     ecx, [eax]
                mov     edx, ds:?GFileManager@@3PAVdnFileMgr@@A ; dnFileMgr * GFileManager
                mov     eax, [edx]
                mov     edx, [ecx]
                mov     ecx, eax
                mov     eax, [edx+20h]
                call    eax
                test    eax, eax
                jl      loc_1090BE08
                cmp     [ebp+arg_C], 0
                jnz     loc_1090BE08

loc_1090BCE8:                           ; CODE XREF: sub_1090B840+475↑j
                mov     ecx, [ebp+var_2FC]
                cmp     dword ptr [ecx+18h], 0
                jz      short loc_1090BD5C

loc_1090BCF4:                           ; CODE XREF: sub_1090B840+51A↓j
                lea     edx, [ebp+var_248]
                push    edx
                lea     ecx, [ebp+var_21C]
                call    ds:?GetCleanFilename@FFilename@@QBE?AVdnString@@XZ ; FFilename::GetCleanFilename(void)
                mov     [ebp+var_368], eax
                mov     eax, [ebp+var_368]
                mov     [ebp+var_36C], eax
;   } // starts at 1090BC94
;   try {
                mov     byte ptr [ebp+var_4], 3
                lea     ecx, [ebp+Str1]
                push    ecx
                mov     ecx, [ebp+var_36C]
                call    ds:?ToLower@dnString@@QAEPB_WXZ ; dnString::ToLower(void)
                push    eax
                push    offset aFconfigfileFin ; "FConfigFile::Find: Couldn't find file ["...
                mov     edx, ds:?GLog@@3PAVdnOutputDevice@@A ; dnOutputDevice * GLog
                mov     eax, [edx]
                push    eax
                call    ds:?Logf@dnOutputDevice@@QAAXPB_WZZ ; dnOutputDevice::Logf(wchar_t const *,...)
                add     esp, 10h
;   } // starts at 1090BD19
;   try {
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_248]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                xor     ecx, ecx
                jnz     short loc_1090BCF4

loc_1090BD5C:                           ; CODE XREF: sub_1090B840+4B2↑j
                lea     ecx, [ebp+var_264]
                call    sub_1090AF00
                mov     [ebp+var_370], eax
                mov     edx, [ebp+var_370]
                mov     [ebp+var_374], edx
;   } // starts at 1090BD48
;   try {
                mov     byte ptr [ebp+var_4], 4
                lea     eax, [ebp+var_270]
                push    eax
                lea     ecx, [ebp+var_21C]
                call    ds:?GetCleanFilename@FFilename@@QBE?AVdnString@@XZ ; FFilename::GetCleanFilename(void)
                mov     [ebp+var_378], eax
                mov     ecx, [ebp+var_378]
                mov     [ebp+var_37C], ecx
;   } // starts at 1090BD79
;   try {
                mov     byte ptr [ebp+var_4], 5
                mov     edx, [ebp+var_374]
                push    edx
                mov     ecx, [ebp+var_37C]
                call    ds:?ToLower@dnString@@QAEPB_WXZ ; dnString::ToLower(void)
                push    eax
                mov     ecx, [ebp+var_2FC]
                add     ecx, 4
                call    sub_1090B750
                mov     [ebp+var_220], eax
;   } // starts at 1090BDA2
;   try {
                mov     byte ptr [ebp+var_4], 4
                lea     ecx, [ebp+var_270]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
;   } // starts at 1090BDCE
;   try {
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_264]
                call    sub_109073D0
                mov     eax, [ebp+var_210]
                push    eax
                push    0
                lea     ecx, [ebp+Str1]
                push    ecx
                mov     ecx, [ebp+var_220]
                call    sub_1090A940

loc_1090BE08:                           ; CODE XREF: sub_1090B840+46B↑j
                                        ; sub_1090B840+498↑j ...
                mov     edx, [ebp+var_220]
                mov     [ebp+var_274], edx
;   } // starts at 1090BDDE
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_21C]
                call    ds:??1FFilename@@QAE@XZ ; FFilename::~FFilename(void)
                mov     eax, [ebp+var_274]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                mov     esp, ebp
                pop     ebp
                retn    10h
; } // starts at 1090B840
sub_1090B840    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1090BE40    proc near               ; CODE XREF: sub_1090CDC0+61↓p
                                        ; DATA XREF: .rdata:10913518↓o

var_698         = dword ptr -698h
var_694         = dword ptr -694h
var_690         = dword ptr -690h
var_68C         = dword ptr -68Ch
var_688         = dword ptr -688h
var_684         = dword ptr -684h
var_680         = dword ptr -680h
var_67C         = dword ptr -67Ch
var_678         = dword ptr -678h
var_674         = dword ptr -674h
var_670         = dword ptr -670h
var_66C         = dword ptr -66Ch
var_668         = dword ptr -668h
var_664         = dword ptr -664h
var_660         = dword ptr -660h
var_B8          = dword ptr -0B8h
var_B4          = byte ptr -0B4h
var_A8          = dword ptr -0A8h
var_A4          = byte ptr -0A4h
var_95          = byte ptr -95h
var_94          = byte ptr -94h
var_88          = dword ptr -88h
var_84          = byte ptr -84h
var_75          = byte ptr -75h
var_74          = byte ptr -74h
var_68          = dword ptr -68h
var_64          = byte ptr -64h
var_58          = byte ptr -58h
var_4C          = dword ptr -4Ch
var_48          = dword ptr -48h
var_44          = byte ptr -44h
var_38          = byte ptr -38h
var_2C          = byte ptr -2Ch
var_20          = dword ptr -20h
var_1C          = byte ptr -1Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch

; FUNCTION CHUNK AT 109112A0 SIZE 0000009D BYTES

; __unwind { // SEH_1090BE40
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_1090BE40
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 68Ch
                mov     [ebp+var_670], ecx
                mov     [ebp+var_B8], 0
                mov     eax, [ebp+arg_4]
                push    eax
                lea     ecx, [ebp+var_1C]
                call    ds:??0FFilename@@QAE@PB_W@Z ; FFilename::FFilename(wchar_t const *)
;   try {
                mov     [ebp+var_4], 0
                push    offset aSystemIni_0 ; "system.ini"
                lea     ecx, [ebp+var_1C]
                call    ds:??8dnString@@QBEHPB_W@Z ; dnString::operator==(wchar_t const *)
                test    eax, eax
                jz      short loc_1090BEA7
                mov     ecx, [ebp+var_670]
                add     ecx, 20h
                push    ecx
                lea     ecx, [ebp+var_1C]
                call    ds:??4FFilename@@QAEAAV0@ABV0@@Z ; FFilename::operator=(FFilename const &)

loc_1090BEA7:                           ; CODE XREF: sub_1090BE40+52↑j
                lea     edx, [ebp+var_64]
                push    edx
                lea     ecx, [ebp+var_1C]
                call    ds:?GetCleanFilename@FFilename@@QBE?AVdnString@@XZ ; FFilename::GetCleanFilename(void)
                mov     [ebp+var_674], eax
                mov     eax, [ebp+var_674]
                mov     [ebp+var_678], eax
;   } // starts at 1090BE7B
;   try {
                mov     byte ptr [ebp+var_4], 1
                mov     ecx, [ebp+var_678]
                push    ecx
                lea     ecx, [ebp+var_58]
                call    ds:??0FFilename@@QAE@ABVdnString@@@Z ; FFilename::FFilename(dnString const &)
;   } // starts at 1090BEC6
;   try {
                mov     byte ptr [ebp+var_4], 2
                lea     edx, [ebp+var_58]
                push    edx
                lea     ecx, [ebp+var_1C]
                call    ds:??4FFilename@@QAEAAV0@ABV0@@Z ; FFilename::operator=(FFilename const &)
;   } // starts at 1090BEDA
;   try {
                mov     byte ptr [ebp+var_4], 1
                lea     ecx, [ebp+var_58]
                call    ds:??1FFilename@@QAE@XZ ; FFilename::~FFilename(void)
;   } // starts at 1090BEEB
;   try {
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_64]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                mov     [ebp+var_10], 0
                mov     [ebp+var_20], 0
                cmp     [ebp+arg_4], 0
                jz      loc_1090C35B
                lea     ecx, [ebp+var_2C]
                call    ds:??0FFilename@@QAE@XZ ; FFilename::FFilename(void)
;   } // starts at 1090BEF8
;   try {
                mov     byte ptr [ebp+var_4], 3
                lea     eax, [ebp+var_74]
                push    eax
                mov     ecx, [ebp+var_670]
                add     ecx, 20h
                call    ds:?GetCleanFilename@FFilename@@QBE?AVdnString@@XZ ; FFilename::GetCleanFilename(void)
                mov     [ebp+var_67C], eax
                mov     ecx, [ebp+var_67C]
                mov     [ebp+var_680], ecx
;   } // starts at 1090BF26
;   try {
                mov     byte ptr [ebp+var_4], 4
                mov     edx, [ebp+var_680]
                push    edx
                lea     ecx, [ebp+var_1C]
                call    ds:??8dnString@@QBEHABV0@@Z ; dnString::operator==(dnString const &)
                mov     [ebp+var_68], eax
;   } // starts at 1090BF4F
;   try {
                mov     byte ptr [ebp+var_4], 3
                lea     ecx, [ebp+var_74]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                cmp     [ebp+var_68], 0
                jz      loc_1090C09C
                mov     eax, [ebp+var_670]
                add     eax, 20h
                push    eax
                lea     ecx, [ebp+var_2C]
                call    ds:??4FFilename@@QAEAAV0@ABV0@@Z ; FFilename::operator=(FFilename const &)
                mov     ecx, ds:GIsEditor
                cmp     dword ptr [ecx], 0
                jnz     loc_1090C097
                mov     edx, ds:GIsUCC
                cmp     dword ptr [edx], 0
                jnz     loc_1090C097
                push    0
                push    1
                push    0
                lea     ecx, [ebp+var_1C]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                mov     ecx, [ebp+var_670]
                call    sub_1090B840
                mov     [ebp+var_10], eax
                cmp     [ebp+var_10], 0
                jz      loc_1090C097
                lea     ecx, [ebp+var_38]
                call    ds:??0dnString@@QAE@XZ ; dnString::dnString(void)
;   } // starts at 1090BF66
;   try {
                mov     byte ptr [ebp+var_4], 5
                lea     eax, [ebp+var_38]
                push    eax
                mov     ecx, [ebp+var_10]
                call    sub_10909010
                mov     ecx, [ebp+var_10]
                cmp     dword ptr [ecx+14h], 0
                jz      short loc_1090C040
                push    offset aSystemIni_0 ; "system.ini"
                lea     ecx, [ebp+var_84]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
;   } // starts at 1090BFDF
;   try {
                mov     byte ptr [ebp+var_4], 6
                mov     edx, [ebp+var_B8]
                or      edx, 1
                mov     [ebp+var_B8], edx
                lea     eax, [ebp+var_38]
                push    eax
                lea     ecx, [ebp+var_84]
                push    ecx
                call    ds:?s_WriteStringToFile@@YAHABVdnString@@0@Z ; s_WriteStringToFile(dnString const &,dnString const &)
                add     esp, 8
                test    eax, eax
                jz      short loc_1090C040
                mov     [ebp+var_684], 1
                jmp     short loc_1090C04A
; ---------------------------------------------------------------------------

loc_1090C040:                           ; CODE XREF: sub_1090BE40+1B6↑j
                                        ; sub_1090BE40+1F2↑j
                mov     [ebp+var_684], 0

loc_1090C04A:                           ; CODE XREF: sub_1090BE40+1FE↑j
                mov     dl, byte ptr [ebp+var_684]
                mov     [ebp+var_75], dl
;   } // starts at 1090C009
;   try {
                mov     [ebp+var_4], 5
                mov     eax, [ebp+var_B8]
                and     eax, 1
                jz      short loc_1090C078
                and     [ebp+var_B8], 0FFFFFFFEh
                lea     ecx, [ebp+var_84]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)

loc_1090C078:                           ; CODE XREF: sub_1090BE40+223↑j
                movzx   ecx, [ebp+var_75]
                test    ecx, ecx
                jz      short loc_1090C08A
                mov     edx, [ebp+var_10]
                mov     dword ptr [edx+14h], 0
;   } // starts at 1090C053

loc_1090C08A:                           ; CODE XREF: sub_1090BE40+23E↑j
;   try {
                mov     byte ptr [ebp+var_4], 3
                lea     ecx, [ebp+var_38]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)

loc_1090C097:                           ; CODE XREF: sub_1090BE40+159↑j
                                        ; sub_1090BE40+168↑j ...
                jmp     loc_1090C30F
; ---------------------------------------------------------------------------

loc_1090C09C:                           ; CODE XREF: sub_1090BE40+137↑j
                lea     eax, [ebp+var_94]
                push    eax
                mov     ecx, [ebp+var_670]
                add     ecx, 2Ch
                call    ds:?GetCleanFilename@FFilename@@QBE?AVdnString@@XZ ; FFilename::GetCleanFilename(void)
                mov     [ebp+var_688], eax
                mov     ecx, [ebp+var_688]
                mov     [ebp+var_68C], ecx
;   } // starts at 1090C08A
;   try {
                mov     byte ptr [ebp+var_4], 7
                mov     edx, [ebp+var_68C]
                push    edx
                lea     ecx, [ebp+var_1C]
                call    ds:??8dnString@@QBEHABV0@@Z ; dnString::operator==(dnString const &)
                mov     [ebp+var_88], eax
;   } // starts at 1090C0C4
;   try {
                mov     byte ptr [ebp+var_4], 3
                lea     ecx, [ebp+var_94]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                cmp     [ebp+var_88], 0
                jz      loc_1090C220
                mov     eax, [ebp+var_670]
                add     eax, 2Ch
                push    eax
                lea     ecx, [ebp+var_2C]
                call    ds:??4FFilename@@QAEAAV0@ABV0@@Z ; FFilename::operator=(FFilename const &)
                mov     ecx, ds:GIsEditor
                cmp     dword ptr [ecx], 0
                jnz     loc_1090C21B
                mov     edx, ds:GIsUCC
                cmp     dword ptr [edx], 0
                jnz     loc_1090C21B
                push    0
                push    1
                push    0
                lea     ecx, [ebp+var_1C]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                mov     ecx, [ebp+var_670]
                call    sub_1090B840
                mov     [ebp+var_10], eax
                cmp     [ebp+var_10], 0
                jz      loc_1090C21B
                lea     ecx, [ebp+var_44]
                call    ds:??0dnString@@QAE@XZ ; dnString::dnString(void)
;   } // starts at 1090C0DE
;   try {
                mov     byte ptr [ebp+var_4], 8
                lea     eax, [ebp+var_44]
                push    eax
                mov     ecx, [ebp+var_10]
                call    sub_10909010
                mov     ecx, [ebp+var_10]
                cmp     dword ptr [ecx+14h], 0
                jz      short loc_1090C1BE
                push    offset aUserIni_0 ; "user.ini"
                lea     ecx, [ebp+var_A4]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
;   } // starts at 1090C15D
;   try {
                mov     byte ptr [ebp+var_4], 9
                mov     edx, [ebp+var_B8]
                or      edx, 2
                mov     [ebp+var_B8], edx
                lea     eax, [ebp+var_44]
                push    eax
                lea     ecx, [ebp+var_A4]
                push    ecx
                call    ds:?s_WriteStringToFile@@YAHABVdnString@@0@Z ; s_WriteStringToFile(dnString const &,dnString const &)
                add     esp, 8
                test    eax, eax
                jz      short loc_1090C1BE
                mov     [ebp+var_690], 1
                jmp     short loc_1090C1C8
; ---------------------------------------------------------------------------

loc_1090C1BE:                           ; CODE XREF: sub_1090BE40+334↑j
                                        ; sub_1090BE40+370↑j
                mov     [ebp+var_690], 0

loc_1090C1C8:                           ; CODE XREF: sub_1090BE40+37C↑j
                mov     dl, byte ptr [ebp+var_690]
                mov     [ebp+var_95], dl
;   } // starts at 1090C187
;   try {
                mov     [ebp+var_4], 8
                mov     eax, [ebp+var_B8]
                and     eax, 2
                jz      short loc_1090C1F9
                and     [ebp+var_B8], 0FFFFFFFDh
                lea     ecx, [ebp+var_A4]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)

loc_1090C1F9:                           ; CODE XREF: sub_1090BE40+3A4↑j
                movzx   ecx, [ebp+var_95]
                test    ecx, ecx
                jz      short loc_1090C20E
                mov     edx, [ebp+var_10]
                mov     dword ptr [edx+14h], 0
;   } // starts at 1090C1D4

loc_1090C20E:                           ; CODE XREF: sub_1090BE40+3C2↑j
;   try {
                mov     byte ptr [ebp+var_4], 3
                lea     ecx, [ebp+var_44]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)

loc_1090C21B:                           ; CODE XREF: sub_1090BE40+2D7↑j
                                        ; sub_1090BE40+2E6↑j ...
                jmp     loc_1090C30F
; ---------------------------------------------------------------------------

loc_1090C220:                           ; CODE XREF: sub_1090BE40+2B5↑j
                lea     eax, [ebp+var_B4]
                push    eax
                mov     ecx, [ebp+var_670]
                add     ecx, 38h
                call    ds:?GetCleanFilename@FFilename@@QBE?AVdnString@@XZ ; FFilename::GetCleanFilename(void)
                mov     [ebp+var_694], eax
                mov     ecx, [ebp+var_694]
                mov     [ebp+var_698], ecx
;   } // starts at 1090C20E
;   try {
                mov     byte ptr [ebp+var_4], 0Ah
                mov     edx, [ebp+var_698]
                push    edx
                lea     ecx, [ebp+var_1C]
                call    ds:??8dnString@@QBEHABV0@@Z ; dnString::operator==(dnString const &)
                mov     [ebp+var_A8], eax
;   } // starts at 1090C248
;   try {
                mov     byte ptr [ebp+var_4], 3
                lea     ecx, [ebp+var_B4]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                cmp     [ebp+var_A8], 0
                jz      loc_1090C302
                mov     [ebp+var_20], 1
                mov     eax, [ebp+var_670]
                add     eax, 38h
                push    eax
                lea     ecx, [ebp+var_2C]
                call    ds:??4FFilename@@QAEAAV0@ABV0@@Z ; FFilename::operator=(FFilename const &)
                mov     ecx, ds:GIsEditor
                cmp     dword ptr [ecx], 0
                jnz     short loc_1090C300
                mov     edx, ds:GIsUCC
                cmp     dword ptr [edx], 0
                jnz     short loc_1090C300
                push    0
                push    1
                push    0
                lea     ecx, [ebp+var_1C]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                mov     ecx, [ebp+var_670]
                call    sub_1090B840
                mov     [ebp+var_10], eax
                cmp     [ebp+var_10], 0
                jz      short loc_1090C300
                mov     eax, [ebp+var_10]
                cmp     dword ptr [eax+14h], 0
                jz      short loc_1090C300
                push    1
                push    offset aProgressIni_0 ; "progress.ini"
                mov     ecx, [ebp+var_10]
                push    ecx
                mov     ecx, [ebp+var_670]
                call    sub_109091E0
                test    eax, eax
                jz      short loc_1090C300
                mov     edx, [ebp+var_10]
                mov     dword ptr [edx+14h], 0

loc_1090C300:                           ; CODE XREF: sub_1090BE40+462↑j
                                        ; sub_1090BE40+46D↑j ...
                jmp     short loc_1090C30F
; ---------------------------------------------------------------------------

loc_1090C302:                           ; CODE XREF: sub_1090BE40+439↑j
                lea     eax, [ebp+var_1C]
                push    eax
                lea     ecx, [ebp+var_2C]
                call    ds:??4FFilename@@QAEAAV0@ABV0@@Z ; FFilename::operator=(FFilename const &)

loc_1090C30F:                           ; CODE XREF: sub_1090BE40:loc_1090C097↑j
                                        ; sub_1090BE40:loc_1090C21B↑j ...
                push    0
                push    1
                push    0
                lea     ecx, [ebp+var_1C]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                mov     ecx, [ebp+var_670]
                call    sub_1090B840
                mov     [ebp+var_10], eax
                cmp     [ebp+var_10], 0
                jz      short loc_1090C349
                mov     ecx, [ebp+var_20]
                push    ecx
                lea     ecx, [ebp+var_2C]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                mov     ecx, [ebp+var_10]
                call    sub_10908D00
;   } // starts at 1090C262

loc_1090C349:                           ; CODE XREF: sub_1090BE40+4F1↑j
;   try {
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_2C]
                call    ds:??1FFilename@@QAE@XZ ; FFilename::~FFilename(void)
                jmp     loc_1090C3F5
; ---------------------------------------------------------------------------

loc_1090C35B:                           ; CODE XREF: sub_1090BE40+D7↑j
                cmp     [ebp+var_670], 0
                jz      short loc_1090C375
                mov     edx, [ebp+var_670]
                add     edx, 4
                mov     [ebp+var_660], edx
                jmp     short loc_1090C37F
; ---------------------------------------------------------------------------

loc_1090C375:                           ; CODE XREF: sub_1090BE40+522↑j
                mov     [ebp+var_660], 0

loc_1090C37F:                           ; CODE XREF: sub_1090BE40+533↑j
                mov     eax, [ebp+var_660]
                mov     [ebp+var_4C], eax
                mov     [ebp+var_48], 0
                jmp     short loc_1090C39A
; ---------------------------------------------------------------------------

loc_1090C391:                           ; CODE XREF: sub_1090BE40+5B3↓j
                mov     ecx, [ebp+var_48]
                add     ecx, 1
                mov     [ebp+var_48], ecx

loc_1090C39A:                           ; CODE XREF: sub_1090BE40+54F↑j
                mov     ecx, [ebp+var_4C]
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                xor     edx, edx
                cmp     [ebp+var_48], eax
                setl    dl
                test    edx, edx
                jz      short loc_1090C3F5
                mov     eax, [ebp+var_48]
                imul    eax, 2Ch
                mov     ecx, [ebp+var_4C]
                mov     edx, [ecx]
                lea     eax, [edx+eax+4]
                mov     [ebp+var_664], eax
                mov     ecx, [ebp+var_48]
                imul    ecx, 2Ch
                mov     edx, [ebp+var_4C]
                mov     eax, [edx]
                lea     ecx, [eax+ecx+10h]
                mov     [ebp+var_668], ecx
                push    0
                mov     ecx, [ebp+var_664]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                mov     ecx, [ebp+var_668]
                call    sub_10908D00
                jmp     short loc_1090C391
; ---------------------------------------------------------------------------

loc_1090C3F5:                           ; CODE XREF: sub_1090BE40+516↑j
                                        ; sub_1090BE40+56D↑j
                cmp     [ebp+arg_0], 0
                jz      short loc_1090C44F
                cmp     [ebp+arg_4], 0
                jz      short loc_1090C41B
                lea     ecx, [ebp+var_1C]
                call    ds:?ToLower@dnString@@QAEPB_WXZ ; dnString::ToLower(void)
                push    eax
                mov     ecx, [ebp+var_670]
                add     ecx, 4
                call    sub_1090B310
                jmp     short loc_1090C44F
; ---------------------------------------------------------------------------

loc_1090C41B:                           ; CODE XREF: sub_1090BE40+5BF↑j
                mov     edx, [ebp+var_670]
                add     edx, 4
                mov     [ebp+var_66C], edx
                push    0
                mov     ecx, [ebp+var_66C]
                call    sub_1090B1C0
                mov     eax, [ebp+var_66C]
                mov     dword ptr [eax+10h], 8
                mov     ecx, [ebp+var_66C]
                call    sub_10904AD0
;   } // starts at 1090C349

loc_1090C44F:                           ; CODE XREF: sub_1090BE40+5B9↑j
                                        ; sub_1090BE40+5D9↑j
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_1C]
                call    ds:??1FFilename@@QAE@XZ ; FFilename::~FFilename(void)
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    8
; } // starts at 1090BE40
sub_1090BE40    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1090C470    proc near               ; DATA XREF: .rdata:1091351C↓o

var_298         = dword ptr -298h
var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 298h
                mov     [ebp+var_298], ecx
                push    0
                push    1
                push    1
                mov     eax, [ebp+arg_0]
                push    eax
                mov     ecx, [ebp+var_298]
                call    sub_1090B840
                mov     [ebp+var_4], eax
                cmp     [ebp+var_4], 0
                jz      short loc_1090C4A7
                mov     ecx, [ebp+var_4]
                mov     dword ptr [ecx+18h], 1

loc_1090C4A7:                           ; CODE XREF: sub_1090C470+2B↑j
                mov     esp, ebp
                pop     ebp
                retn    4
sub_1090C470    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __stdcall FConfigCache::GetString2(int, int, wchar_t *Dest, size_t Count, int)
FConfigCache__GetString2 proc near      ; DATA XREF: .rdata:109134F0↓o

var_2BC         = dword ptr -2BCh
Source          = dword ptr -2B8h
var_30          = byte ptr -30h
var_24          = byte ptr -24h
var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch
Dest            = dword ptr  10h
Count           = dword ptr  14h
arg_10          = dword ptr  18h

; FUNCTION CHUNK AT 10911350 SIZE 00000012 BYTES

; __unwind { // SEH_1090C4B0
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_1090C4B0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 2B0h
                mov     [ebp+var_2BC], ecx
                xor     eax, eax
                mov     ecx, [ebp+Dest]
                mov     [ecx], ax
                push    0
                push    1
                push    0
                mov     edx, [ebp+arg_10]
                push    edx
                mov     ecx, [ebp+var_2BC]
                call    sub_1090B840
                mov     [ebp+var_10], eax
                cmp     [ebp+var_10], 0
                jnz     short loc_1090C501
                xor     eax, eax
                jmp     loc_1090C5B4
; ---------------------------------------------------------------------------

loc_1090C501:                           ; CODE XREF: FConfigCache__GetString2+48↑j
                mov     eax, [ebp+arg_0]
                push    eax
                lea     ecx, [ebp+var_24]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
;   try {
                mov     [ebp+var_4], 0
                lea     ecx, [ebp+var_24]
                push    ecx
                mov     ecx, [ebp+var_10]
                call    sub_10908790
                mov     [ebp+var_18], eax
;   } // starts at 1090C50E
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_24]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                cmp     [ebp+var_18], 0
                jnz     short loc_1090C53E
                xor     eax, eax
                jmp     short loc_1090C5B4
; ---------------------------------------------------------------------------

loc_1090C53E:                           ; CODE XREF: FConfigCache__GetString2+88↑j
                mov     edx, [ebp+arg_4]
                push    edx
                lea     ecx, [ebp+var_30]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
;   try {
                mov     [ebp+var_4], 1
                lea     eax, [ebp+var_30]
                push    eax
                mov     ecx, [ebp+var_18]
                call    sub_10908590
                mov     [ebp+var_14], eax
;   } // starts at 1090C54B
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_30]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                cmp     [ebp+var_14], 0
                jnz     short loc_1090C57B
                xor     eax, eax
                jmp     short loc_1090C5B4
; ---------------------------------------------------------------------------

loc_1090C57B:                           ; CODE XREF: FConfigCache__GetString2+C5↑j
                mov     ecx, [ebp+var_14]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                mov     [ebp+Source], eax
                mov     ecx, [ebp+Count]
                push    ecx             ; Count
                mov     edx, [ebp+Source]
                push    edx             ; Source
                mov     eax, [ebp+Dest]
                push    eax             ; Dest
                call    ds:wcsncpy
                add     esp, 0Ch
                xor     ecx, ecx
                mov     edx, [ebp+Count]
                mov     eax, [ebp+Dest]
                mov     [eax+edx*2-2], cx
                mov     eax, 1

loc_1090C5B4:                           ; CODE XREF: FConfigCache__GetString2+4C↑j
                                        ; FConfigCache__GetString2+8C↑j ...
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    14h
; } // starts at 1090C4B0
FConfigCache__GetString2 endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

FConfigCache__GetSection proc near      ; DATA XREF: .rdata:109134F8↓o

var_2D0         = dword ptr -2D0h
var_2CA         = word ptr -2CAh
var_2C8         = dword ptr -2C8h
var_2C4         = dword ptr -2C4h
var_2C0         = dword ptr -2C0h
var_2BC         = dword ptr -2BCh
var_2B8         = dword ptr -2B8h
var_2B4         = dword ptr -2B4h
var_2B0         = dword ptr -2B0h
var_2C          = byte ptr -2Ch
var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
Dest            = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch
arg_8           = dword ptr  10h
arg_C           = dword ptr  14h

; FUNCTION CHUNK AT 10911370 SIZE 00000009 BYTES

; __unwind { // SEH_1090C5D0
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_1090C5D0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 2C4h
                mov     [ebp+var_2C0], ecx
                xor     eax, eax
                mov     ecx, [ebp+arg_4]
                mov     [ecx], ax
                push    0
                push    1
                push    0
                mov     edx, [ebp+arg_C]
                push    edx
                mov     ecx, [ebp+var_2C0]
                call    sub_1090B840
                mov     [ebp+var_10], eax
                cmp     [ebp+var_10], 0
                jnz     short loc_1090C621
                xor     eax, eax
                jmp     loc_1090C7A0
; ---------------------------------------------------------------------------

loc_1090C621:                           ; CODE XREF: FConfigCache__GetSection+48↑j
                mov     eax, [ebp+arg_0]
                push    eax
                lea     ecx, [ebp+var_2C]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
;   try {
                mov     [ebp+var_4], 0
                lea     ecx, [ebp+var_2C]
                push    ecx
                mov     ecx, [ebp+var_10]
                call    sub_10908790
                mov     [ebp+var_18], eax
;   } // starts at 1090C62E
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_2C]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                cmp     [ebp+var_18], 0
                jnz     short loc_1090C661
                xor     eax, eax
                jmp     loc_1090C7A0
; ---------------------------------------------------------------------------

loc_1090C661:                           ; CODE XREF: FConfigCache__GetSection+88↑j
                mov     edx, [ebp+arg_4]
                mov     [ebp+Dest], edx
                mov     eax, [ebp+var_18]
                mov     [ebp+var_20], eax
                mov     [ebp+var_1C], 0
                jmp     short loc_1090C67F
; ---------------------------------------------------------------------------

loc_1090C676:                           ; CODE XREF: FConfigCache__GetSection+1B5↓j
                mov     ecx, [ebp+var_1C]
                add     ecx, 1
                mov     [ebp+var_1C], ecx

loc_1090C67F:                           ; CODE XREF: FConfigCache__GetSection+A4↑j
                mov     ecx, [ebp+var_20]
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                xor     edx, edx
                cmp     [ebp+var_1C], eax
                setl    dl
                test    edx, edx
                jz      loc_1090C78A
                mov     eax, [ebp+var_1C]
                push    eax
                mov     ecx, [ebp+var_20]
                call    sub_10902A80
                add     eax, 4
                mov     [ebp+var_2B0], eax
                mov     ecx, [ebp+var_2B0]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                mov     [ebp+var_2B4], eax
                mov     ecx, [ebp+var_2B4]
                mov     [ebp+var_2C4], ecx
                mov     edx, [ebp+var_2C4]
                add     edx, 2
                mov     [ebp+var_2C8], edx

loc_1090C6DA:                           ; CODE XREF: FConfigCache__GetSection+129↓j
                mov     eax, [ebp+var_2C4]
                mov     cx, [eax]
                mov     [ebp+var_2CA], cx
                add     [ebp+var_2C4], 2
                cmp     [ebp+var_2CA], 0
                jnz     short loc_1090C6DA
                mov     edx, [ebp+var_2C4]
                sub     edx, [ebp+var_2C8]
                sar     edx, 1
                mov     [ebp+var_2D0], edx
                mov     eax, [ebp+Dest]
                sub     eax, [ebp+arg_4]
                sar     eax, 1
                mov     ecx, [ebp+var_2D0]
                lea     edx, [eax+ecx+1]
                cmp     edx, [ebp+arg_8]
                jge     short loc_1090C78A
                mov     eax, [ebp+var_1C]
                push    eax
                mov     ecx, [ebp+var_20]
                call    sub_10902A80
                add     eax, 10h
                mov     [ebp+var_2B8], eax
                mov     ecx, [ebp+var_1C]
                push    ecx
                mov     ecx, [ebp+var_20]
                call    sub_10902A80
                add     eax, 4
                mov     [ebp+var_2BC], eax
                mov     ecx, [ebp+var_2B8]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                mov     ecx, [ebp+var_2BC]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax             ; Args
                push    offset aSS_1    ; "%s=%s"
                mov     edx, [ebp+Dest]
                push    edx             ; Dest
                call    sub_10901F50
                add     esp, 10h
                mov     ecx, [ebp+Dest]
                lea     edx, [ecx+eax*2+2]
                mov     [ebp+Dest], edx
                jmp     loc_1090C676
; ---------------------------------------------------------------------------

loc_1090C78A:                           ; CODE XREF: FConfigCache__GetSection+C2↑j
                                        ; FConfigCache__GetSection+154↑j
                xor     eax, eax
                mov     ecx, [ebp+Dest]
                mov     [ecx], ax
                mov     edx, [ebp+Dest]
                add     edx, 2
                mov     [ebp+Dest], edx
                mov     eax, 1

loc_1090C7A0:                           ; CODE XREF: FConfigCache__GetSection+4C↑j
                                        ; FConfigCache__GetSection+8C↑j
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    10h
; } // starts at 1090C5D0
FConfigCache__GetSection endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1090C7B0    proc near               ; DATA XREF: .rdata:10913514↓o

var_2D0         = dword ptr -2D0h
var_2CC         = dword ptr -2CCh
var_34          = dword ptr -34h
var_20          = byte ptr -20h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch
arg_8           = dword ptr  10h
arg_C           = dword ptr  14h

; FUNCTION CHUNK AT 10911390 SIZE 00000011 BYTES

; __unwind { // SEH_1090C7B0
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_1090C7B0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 2C4h
                mov     [ebp+var_2CC], ecx
                push    0
                push    1
                mov     eax, [ebp+arg_4]
                push    eax
                mov     ecx, [ebp+arg_C]
                push    ecx
                mov     ecx, [ebp+var_2CC]
                call    sub_1090B840
                mov     [ebp+var_10], eax
                cmp     [ebp+var_10], 0
                jnz     short loc_1090C7FB
                xor     eax, eax
                jmp     loc_1090C896
; ---------------------------------------------------------------------------

loc_1090C7FB:                           ; CODE XREF: sub_1090C7B0+42↑j
                mov     edx, [ebp+arg_0]
                push    edx
                lea     ecx, [ebp+var_20]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
;   try {
                mov     [ebp+var_4], 0
                lea     eax, [ebp+var_20]
                push    eax
                mov     ecx, [ebp+var_10]
                call    sub_10908790
                mov     [ebp+var_14], eax
;   } // starts at 1090C808
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_20]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                cmp     [ebp+var_14], 0
                jnz     short loc_1090C877
                cmp     [ebp+arg_4], 0
                jz      short loc_1090C877
                lea     ecx, [ebp+var_34]
                call    sub_10909B10
                lea     ecx, [ebp+var_34]
                mov     [ebp+var_2D0], ecx
;   try {
                mov     [ebp+var_4], 1
                mov     edx, [ebp+var_2D0]
                push    edx
                mov     eax, [ebp+arg_0]
                push    eax
                mov     ecx, [ebp+var_10]
                call    sub_1090A1C0
                mov     [ebp+var_14], eax
;   } // starts at 1090C84B
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_34]
                call    sub_10906EC0

loc_1090C877:                           ; CODE XREF: sub_1090C7B0+82↑j
                                        ; sub_1090C7B0+88↑j
                cmp     [ebp+var_14], 0
                jz      short loc_1090C893
                cmp     [ebp+arg_4], 0
                jnz     short loc_1090C889
                cmp     [ebp+arg_8], 0
                jnz     short loc_1090C893

loc_1090C889:                           ; CODE XREF: sub_1090C7B0+D1↑j
                mov     ecx, [ebp+var_10]
                mov     dword ptr [ecx+14h], 1

loc_1090C893:                           ; CODE XREF: sub_1090C7B0+CB↑j
                                        ; sub_1090C7B0+D7↑j
                mov     eax, [ebp+var_14]

loc_1090C896:                           ; CODE XREF: sub_1090C7B0+46↑j
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    10h
; } // starts at 1090C7B0
sub_1090C7B0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __stdcall FConfigCache::SetString(int, int, wchar_t *Str2, int)
FConfigCache__SetString proc near       ; DATA XREF: .rdata:10913510↓o

var_2F8         = dword ptr -2F8h
var_2F4         = dword ptr -2F4h
var_2F0         = word ptr -2F0h
var_2EE         = word ptr -2EEh
var_2EC         = dword ptr -2ECh
var_2E8         = dword ptr -2E8h
var_2E4         = dword ptr -2E4h
var_2E0         = dword ptr -2E0h
var_2DC         = dword ptr -2DCh
Str1            = dword ptr -2D8h
var_44          = byte ptr -44h
var_38          = dword ptr -38h
var_24          = byte ptr -24h
var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch
Str2            = dword ptr  10h
arg_C           = dword ptr  14h

; FUNCTION CHUNK AT 109113B0 SIZE 0000001A BYTES

; __unwind { // SEH_1090C8B0
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_1090C8B0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 2ECh
                mov     [ebp+var_2E0], ecx
                push    0
                push    1
                push    1
                mov     eax, [ebp+arg_C]
                push    eax
                mov     ecx, [ebp+var_2E0]
                call    sub_1090B840
                mov     [ebp+var_10], eax
                mov     ecx, [ebp+arg_0]
                push    ecx
                lea     ecx, [ebp+var_24]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
;   try {
                mov     [ebp+var_4], 0
                lea     edx, [ebp+var_24]
                push    edx
                mov     ecx, [ebp+var_10]
                call    sub_10908790
                mov     [ebp+var_14], eax
;   } // starts at 1090C8F9
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_24]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                cmp     [ebp+var_14], 0
                jnz     short loc_1090C962
                lea     ecx, [ebp+var_38]
                call    sub_10909C10
                lea     eax, [ebp+var_38]
                mov     [ebp+var_2E4], eax
;   try {
                mov     [ebp+var_4], 1
                mov     ecx, [ebp+var_2E4]
                push    ecx
                mov     edx, [ebp+arg_0]
                push    edx
                mov     ecx, [ebp+var_10]
                call    sub_1090A1C0
                mov     [ebp+var_14], eax
;   } // starts at 1090C936
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_38]
                call    sub_10906EC0

loc_1090C962:                           ; CODE XREF: FConfigCache__SetString+73↑j
                mov     eax, [ebp+arg_4]
                push    eax
                lea     ecx, [ebp+var_44]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
;   try {
                mov     [ebp+var_4], 2
                lea     ecx, [ebp+var_44]
                push    ecx
                mov     ecx, [ebp+var_14]
                call    sub_10908590
                mov     [ebp+var_18], eax
;   } // starts at 1090C96F
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_44]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                cmp     [ebp+var_18], 0
                jnz     short loc_1090C9BA
                mov     edx, [ebp+Str2]
                push    edx
                mov     eax, [ebp+arg_4]
                push    eax
                mov     ecx, [ebp+var_14]
                call    sub_109094A0
                mov     ecx, [ebp+var_10]
                mov     dword ptr [ecx+14h], 1
                jmp     loc_1090CAA5
; ---------------------------------------------------------------------------

loc_1090C9BA:                           ; CODE XREF: FConfigCache__SetString+E9↑j
                mov     ecx, [ebp+var_18]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                mov     [ebp+Str1], eax
                mov     edx, [ebp+Str2]
                push    edx             ; Str2
                mov     eax, [ebp+Str1]
                push    eax             ; Str1
                call    ds:_wcsicmp
                add     esp, 8
                test    eax, eax
                jz      loc_1090CAA5
                mov     ecx, [ebp+var_18]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                mov     [ebp+var_2DC], eax
                mov     ecx, [ebp+Str2]
                mov     [ebp+var_2E8], ecx
                mov     edx, [ebp+var_2DC]
                mov     [ebp+var_2EC], edx

loc_1090CA09:                           ; CODE XREF: FConfigCache__SetString+1B1↓j
                mov     eax, [ebp+var_2EC]
                mov     cx, [eax]
                mov     [ebp+var_2EE], cx
                mov     edx, [ebp+var_2E8]
                cmp     cx, [edx]
                jnz     short loc_1090CA6F
                cmp     [ebp+var_2EE], 0
                jz      short loc_1090CA63
                mov     eax, [ebp+var_2EC]
                mov     cx, [eax+2]
                mov     [ebp+var_2F0], cx
                mov     edx, [ebp+var_2E8]
                cmp     cx, [edx+2]
                jnz     short loc_1090CA6F
                add     [ebp+var_2EC], 4
                add     [ebp+var_2E8], 4
                cmp     [ebp+var_2F0], 0
                jnz     short loc_1090CA09

loc_1090CA63:                           ; CODE XREF: FConfigCache__SetString+17C↑j
                mov     [ebp+var_2F4], 0
                jmp     short loc_1090CA7A
; ---------------------------------------------------------------------------

loc_1090CA6F:                           ; CODE XREF: FConfigCache__SetString+172↑j
                                        ; FConfigCache__SetString+199↑j
                sbb     eax, eax
                sbb     eax, 0FFFFFFFFh
                mov     [ebp+var_2F4], eax

loc_1090CA7A:                           ; CODE XREF: FConfigCache__SetString+1BD↑j
                mov     ecx, [ebp+var_2F4]
                mov     [ebp+var_2F8], ecx
                xor     edx, edx
                cmp     [ebp+var_2F8], 0
                setnz   dl
                mov     eax, [ebp+var_10]
                mov     [eax+14h], edx
                mov     ecx, [ebp+Str2]
                push    ecx
                mov     ecx, [ebp+var_18]
                call    ds:??4dnString@@QAEAAV0@PB_W@Z ; dnString::operator=(wchar_t const *)

loc_1090CAA5:                           ; CODE XREF: FConfigCache__SetString+105↑j
                                        ; FConfigCache__SetString+12F↑j
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    10h
; } // starts at 1090C8B0
FConfigCache__SetString endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

FConfigCache__GetSectionPrivate proc near ; DATA XREF: .rdata:109134FC↓o

var_2D0         = dword ptr -2D0h
var_28          = dword ptr -28h
var_24          = dword ptr -24h
var_20          = byte ptr -20h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch

; FUNCTION CHUNK AT 109113E0 SIZE 00000009 BYTES

; __unwind { // SEH_1090CAC0
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_1090CAC0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 2C4h
                mov     [ebp+var_2D0], ecx
                push    0
                push    1
                push    0
                mov     eax, [ebp+arg_4]
                push    eax
                mov     ecx, [ebp+var_2D0]
                call    sub_1090B840
                mov     [ebp+var_10], eax
                cmp     [ebp+var_10], 0
                jz      loc_1090CB87
                mov     ecx, [ebp+arg_0]
                push    ecx
                lea     ecx, [ebp+var_20]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
;   try {
                mov     [ebp+var_4], 0
                lea     edx, [ebp+var_20]
                push    edx
                mov     ecx, [ebp+var_10]
                call    sub_10908790
                mov     [ebp+var_14], eax
;   } // starts at 1090CB13
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_20]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                cmp     [ebp+var_14], 0
                jz      short loc_1090CB87
                mov     eax, [ebp+var_14]
                mov     [ebp+var_28], eax
                mov     [ebp+var_24], 0
                mov     ecx, [ebp+var_28]
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                xor     ecx, ecx
                cmp     [ebp+var_24], eax
                setl    cl
                test    ecx, ecx
                jz      short loc_1090CB87
                push    0
                mov     ecx, [ebp+var_14]
                call    sub_109095C0
                mov     edx, [ebp+var_14]
                mov     dword ptr [edx+10h], 8
                mov     ecx, [ebp+var_14]
                call    sub_10908C40
                mov     eax, [ebp+var_10]
                mov     dword ptr [eax+14h], 1

loc_1090CB87:                           ; CODE XREF: FConfigCache__GetSectionPrivate+40↑j
                                        ; FConfigCache__GetSectionPrivate+7D↑j ...
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    8
; } // starts at 1090CAC0
FConfigCache__GetSectionPrivate endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1090CBA0    proc near               ; CODE XREF: sub_1090D430+3D5↓p
                                        ; sub_1090D430+50C↓p ...

var_BC          = dword ptr -0BCh
var_B8          = dword ptr -0B8h
var_B4          = dword ptr -0B4h
var_B0          = dword ptr -0B0h
var_AC          = dword ptr -0ACh
var_A8          = dword ptr -0A8h
var_A4          = dword ptr -0A4h
var_78          = byte ptr -78h
var_6C          = dword ptr -6Ch
var_58          = dword ptr -58h
var_54          = dword ptr -54h
var_50          = byte ptr -50h
var_44          = dword ptr -44h
var_30          = dword ptr -30h
var_2C          = dword ptr -2Ch
var_28          = dword ptr -28h
var_24          = byte ptr -24h
var_18          = byte ptr -18h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch

; FUNCTION CHUNK AT 10911400 SIZE 00000034 BYTES

; __unwind { // SEH_1090CBA0
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_1090CBA0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0B0h
                mov     [ebp+var_A4], ecx
                mov     eax, [ebp+arg_0]
                push    eax
                lea     ecx, [ebp+var_24]
                call    ds:??0FFilename@@QAE@PB_W@Z ; FFilename::FFilename(wchar_t const *)
;   try {
                mov     [ebp+var_4], 0
                mov     ecx, [ebp+arg_4]
                push    ecx
                lea     ecx, [ebp+var_18]
                call    ds:??0FFilename@@QAE@PB_W@Z ; FFilename::FFilename(wchar_t const *)
;   } // starts at 1090CBD1
;   try {
                mov     byte ptr [ebp+var_4], 1
                lea     ecx, [ebp+var_24]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                mov     edx, ds:?GFileManager@@3PAVdnFileMgr@@A ; dnFileMgr * GFileManager
                mov     eax, [edx]
                mov     ecx, ds:?GFileManager@@3PAVdnFileMgr@@A ; dnFileMgr * GFileManager
                mov     ecx, [ecx]
                mov     edx, [eax]
                mov     eax, [edx+20h]
                call    eax
                test    eax, eax
                jl      loc_1090CD67
                mov     [ebp+var_28], 0
                cmp     [ebp+arg_4], 0
                jz      loc_1090CCAC
                lea     ecx, [ebp+var_44]
                call    sub_1090A6E0
                mov     [ebp+var_30], 0
                mov     [ebp+var_2C], 0
                lea     ecx, [ebp+var_44]
                mov     [ebp+var_A8], ecx
;   } // starts at 1090CBE5
;   try {
                mov     byte ptr [ebp+var_4], 2
                lea     edx, [ebp+var_50]
                push    edx
                lea     ecx, [ebp+var_18]
                call    ds:?GetCleanFilename@FFilename@@QBE?AVdnString@@XZ ; FFilename::GetCleanFilename(void)
                mov     [ebp+var_AC], eax
                mov     eax, [ebp+var_AC]
                mov     [ebp+var_B0], eax
;   } // starts at 1090CC42
;   try {
                mov     byte ptr [ebp+var_4], 3
                mov     ecx, [ebp+var_A8]
                push    ecx
                mov     ecx, [ebp+var_B0]
                call    ds:?ToLower@dnString@@QAEPB_WXZ ; dnString::ToLower(void)
                push    eax
                mov     ecx, [ebp+var_A4]
                add     ecx, 4
                call    sub_1090B750
                mov     [ebp+var_28], eax
;   } // starts at 1090CC65
;   try {
                mov     byte ptr [ebp+var_4], 2
                lea     ecx, [ebp+var_50]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
;   } // starts at 1090CC8E
;   try {
                mov     byte ptr [ebp+var_4], 1
                lea     ecx, [ebp+var_44]
                call    sub_109073D0
                jmp     loc_1090CD30
; ---------------------------------------------------------------------------

loc_1090CCAC:                           ; CODE XREF: sub_1090CBA0+7D↑j
                lea     ecx, [ebp+var_6C]
                call    sub_1090A6E0
                mov     [ebp+var_58], 0
                mov     [ebp+var_54], 0
                lea     edx, [ebp+var_6C]
                mov     [ebp+var_B4], edx
;   } // starts at 1090CC9B
;   try {
                mov     byte ptr [ebp+var_4], 4
                lea     eax, [ebp+var_78]
                push    eax
                lea     ecx, [ebp+var_24]
                call    ds:?GetCleanFilename@FFilename@@QBE?AVdnString@@XZ ; FFilename::GetCleanFilename(void)
                mov     [ebp+var_B8], eax
                mov     ecx, [ebp+var_B8]
                mov     [ebp+var_BC], ecx
;   } // starts at 1090CCCB
;   try {
                mov     byte ptr [ebp+var_4], 5
                mov     edx, [ebp+var_B4]
                push    edx
                mov     ecx, [ebp+var_BC]
                call    ds:?ToLower@dnString@@QAEPB_WXZ ; dnString::ToLower(void)
                push    eax
                mov     ecx, [ebp+var_A4]
                add     ecx, 4
                call    sub_1090B750
                mov     [ebp+var_28], eax
;   } // starts at 1090CCEE
;   try {
                mov     byte ptr [ebp+var_4], 4
                lea     ecx, [ebp+var_78]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
;   } // starts at 1090CD17
;   try {
                mov     byte ptr [ebp+var_4], 1
                lea     ecx, [ebp+var_6C]
                call    sub_109073D0

loc_1090CD30:                           ; CODE XREF: sub_1090CBA0+107↑j
                push    0
                push    0
                lea     ecx, [ebp+var_24]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                mov     ecx, [ebp+var_28]
                call    sub_1090A940

loc_1090CD46:                           ; CODE XREF: sub_1090CBA0+1C3↓j
                mov     eax, [ebp+arg_0]
                push    eax
                push    offset aGconfigLoadfil ; "GConfig::LoadFile has loaded file:  %s"
                mov     ecx, ds:?GLog@@3PAVdnOutputDevice@@A ; dnOutputDevice * GLog
                mov     edx, [ecx]
                push    edx
                call    ds:?Logf@dnOutputDevice@@QAAXPB_WZZ ; dnOutputDevice::Logf(wchar_t const *,...)
                add     esp, 0Ch
                xor     eax, eax
                jnz     short loc_1090CD46
                jmp     short loc_1090CD86
; ---------------------------------------------------------------------------

loc_1090CD67:                           ; CODE XREF: sub_1090CBA0+6C↑j
                                        ; sub_1090CBA0+1E4↓j
                mov     ecx, [ebp+arg_0]
                push    ecx
                push    offset aFconfigcachein ; "FConfigCacheIni::LoadFile failed loadin"...
                mov     edx, ds:?GLog@@3PAVdnOutputDevice@@A ; dnOutputDevice * GLog
                mov     eax, [edx]
                push    eax
                call    ds:?Logf@dnOutputDevice@@QAAXPB_WZZ ; dnOutputDevice::Logf(wchar_t const *,...)
                add     esp, 0Ch
                xor     ecx, ecx
                jnz     short loc_1090CD67
;   } // starts at 1090CD24

loc_1090CD86:                           ; CODE XREF: sub_1090CBA0+1C5↑j
;   try {
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_18]
                call    ds:??1FFilename@@QAE@XZ ; FFilename::~FFilename(void)
;   } // starts at 1090CD86
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_24]
                call    ds:??1FFilename@@QAE@XZ ; FFilename::~FFilename(void)
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    8
; } // starts at 1090CBA0
sub_1090CBA0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1090CDC0    proc near               ; CODE XREF: sub_1090CF60+2EC↓p
                                        ; sub_1090CF60+3A3↓p ...

var_D4          = dword ptr -0D4h
var_D0          = dword ptr -0D0h
var_CC          = dword ptr -0CCh
var_B8          = dword ptr -0B8h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 10911440 SIZE 00000046 BYTES

; __unwind { // SEH_1090CDC0
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_1090CDC0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0C8h
                mov     [ebp+var_D4], ecx
                mov     [ebp+var_B8], 0
                mov     eax, [ebp+var_D4]
                mov     dword ptr [eax], offset ??_7FConfigCacheIni@@6B@ ; const FConfigCacheIni::`vftable'
;   try {
                mov     [ebp+var_4], 4
                mov     ecx, ds:GIsEditor
                cmp     dword ptr [ecx], 0
                jz      short loc_1090CE28
                mov     edx, ds:GIsUCC
                cmp     dword ptr [edx], 0
                jnz     short loc_1090CE28
                push    0
                push    1
                mov     ecx, [ebp+var_D4]
                call    sub_1090BE40
                jmp     short loc_1090CE5C
; ---------------------------------------------------------------------------

loc_1090CE28:                           ; CODE XREF: sub_1090CDC0+4A↑j
                                        ; sub_1090CDC0+55↑j
                mov     eax, [ebp+var_D4]
                add     eax, 4
                mov     [ebp+var_CC], eax
                push    0
                mov     ecx, [ebp+var_CC]
                call    sub_1090B1C0
                mov     ecx, [ebp+var_CC]
                mov     dword ptr [ecx+10h], 8
                mov     ecx, [ebp+var_CC]
                call    sub_10904AD0
;   } // starts at 1090CDFA

loc_1090CE5C:                           ; CODE XREF: sub_1090CDC0+66↑j
;   try {
                mov     byte ptr [ebp+var_4], 3
                mov     ecx, [ebp+var_D4]
                add     ecx, 38h
                call    ds:??1FFilename@@QAE@XZ ; FFilename::~FFilename(void)
;   } // starts at 1090CE5C
;   try {
                mov     byte ptr [ebp+var_4], 2
                mov     ecx, [ebp+var_D4]
                add     ecx, 2Ch
                call    ds:??1FFilename@@QAE@XZ ; FFilename::~FFilename(void)
;   } // starts at 1090CE6F
;   try {
                mov     byte ptr [ebp+var_4], 1
                mov     ecx, [ebp+var_D4]
                add     ecx, 20h
                call    ds:??1FFilename@@QAE@XZ ; FFilename::~FFilename(void)
;   } // starts at 1090CE82
;   try {
                mov     byte ptr [ebp+var_4], 0
                mov     edx, [ebp+var_D4]
                add     edx, 4
                mov     [ebp+var_D0], edx
                mov     ecx, [ebp+var_D0]
                call    sub_10907700
;   } // starts at 1090CE95
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_D4]
                call    sub_10902430
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
; } // starts at 1090CDC0
sub_1090CDC0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1090CEE0    proc near               ; DATA XREF: WinMain(x,x,x,x)+2CD↓o

var_20          = dword ptr -20h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 10911490 SIZE 0000001C BYTES

; __unwind { // SEH_1090CEE0
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_1090CEE0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 14h
                push    3B2h
                push    offset aRBuckeyePcstab_0 ; "r:\\BUCKEYE-PCSTABLE\\Core\\Inc\\FConfi"...
                push    offset aFconfigcachein_0 ; "FConfigCacheIni"
                push    44h
                call    sub_10901050
                add     esp, 10h
                mov     [ebp+var_14], eax
;   try {
                mov     [ebp+var_4], 0
                cmp     [ebp+var_14], 0
                jz      short loc_1090CF31
                mov     ecx, [ebp+var_14]
                call    sub_109078B0
                mov     [ebp+var_20], eax
                jmp     short loc_1090CF38
; ---------------------------------------------------------------------------

loc_1090CF31:                           ; CODE XREF: sub_1090CEE0+42↑j
                mov     [ebp+var_20], 0

loc_1090CF38:                           ; CODE XREF: sub_1090CEE0+4F↑j
                mov     eax, [ebp+var_20]
                mov     [ebp+var_10], eax
;   } // starts at 1090CF17
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_10]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
; } // starts at 1090CEE0
sub_1090CEE0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1090CF60    proc near               ; DATA XREF: .rdata:10913530↓o

var_1BC         = dword ptr -1BCh
var_1B8         = dword ptr -1B8h
var_1B4         = dword ptr -1B4h
var_1B0         = dword ptr -1B0h
var_1AC         = dword ptr -1ACh
var_1A8         = dword ptr -1A8h
var_1A4         = dword ptr -1A4h
var_164         = dword ptr -164h
var_140         = dword ptr -140h
var_138         = dword ptr -138h
var_134         = dword ptr -134h
var_130         = dword ptr -130h
var_12C         = dword ptr -12Ch
var_128         = byte ptr -128h
var_11C         = byte ptr -11Ch
var_110         = byte ptr -110h
var_F4          = byte ptr -0F4h
var_F0          = byte ptr -0F0h
var_A8          = byte ptr -0A8h
var_8C          = byte ptr -8Ch
var_88          = byte ptr -88h
var_44          = byte ptr -44h
var_38          = byte ptr -38h
var_2C          = dword ptr -2Ch
var_28          = byte ptr -28h
var_1C          = dword ptr -1Ch
var_18          = byte ptr -18h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 109114C0 SIZE 0000006A BYTES

; __unwind { // SEH_1090CF60
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_1090CF60
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 1B0h
                mov     [ebp+var_1A4], ecx
                call    ds:?GetLanguage@UObject@@SAPB_WXZ ; UObject::GetLanguage(void)
                push    eax
                lea     ecx, [ebp+var_18]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
;   try {
                mov     [ebp+var_4], 0

loc_1090CF9B:                           ; CODE XREF: sub_1090CF60+62↓j
                lea     ecx, [ebp+var_18]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                push    offset aLanguageExtens ; "Language extension: %s"
                push    2FAh
                mov     eax, ds:?GLog@@3PAVdnOutputDevice@@A ; dnOutputDevice * GLog
                mov     ecx, [eax]
                push    ecx
                call    ds:?Logf@dnOutputDevice@@QAAXW4EName@@PB_WZZ ; dnOutputDevice::Logf(EName,wchar_t const *,...)
                add     esp, 10h
                xor     edx, edx
                jnz     short loc_1090CF9B
                lea     ecx, [ebp+var_38]
                call    ds:??0dnString@@QAE@XZ ; dnString::dnString(void)
;   } // starts at 1090CF94
;   try {
                mov     byte ptr [ebp+var_4], 1
                push    offset aPc      ; "PC"
                lea     ecx, [ebp+var_38]
                call    ds:??YdnString@@QAEAAV0@PB_W@Z ; dnString::operator+=(wchar_t const *)
                lea     ecx, [ebp+var_28]
                call    ds:??0dnString@@QAE@XZ ; dnString::dnString(void)
;   } // starts at 1090CFCD
;   try {
                mov     byte ptr [ebp+var_4], 2
                lea     ecx, [ebp+var_18]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                lea     ecx, [ebp+var_38]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                push    offset aSystemLocaliza ; "..\\System\\Localization\\%s_Coalesced_"...
                lea     eax, [ebp+var_11C]
                push    eax
                call    ds:?Printf@dnString@@SA?AV1@PB_WZZ ; dnString::Printf(wchar_t const *,...)
                add     esp, 10h
                mov     [ebp+var_1A8], eax
                mov     ecx, [ebp+var_1A8]
                mov     [ebp+var_1AC], ecx
;   } // starts at 1090CFE8
;   try {
                mov     byte ptr [ebp+var_4], 3
                mov     edx, [ebp+var_1AC]
                push    edx
                lea     ecx, [ebp+var_28]
                call    ds:??4dnString@@QAEAAV0@ABV0@@Z ; dnString::operator=(dnString const &)
;   } // starts at 1090D027
;   try {
                mov     byte ptr [ebp+var_4], 2
                lea     ecx, [ebp+var_11C]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                mov     eax, ds:?GNull@@3PAVdnOutputDevice@@A ; dnOutputDevice * GNull
                mov     ecx, [eax]
                push    ecx
                push    0
                lea     ecx, [ebp+var_28]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                mov     edx, ds:?GFileManager@@3PAVdnFileMgr@@A ; dnFileMgr * GFileManager
                mov     eax, [edx]
                mov     ecx, ds:?GFileManager@@3PAVdnFileMgr@@A ; dnFileMgr * GFileManager
                mov     ecx, [ecx]
                mov     edx, [eax]
                mov     eax, [edx+18h]
                call    eax
                mov     [ebp+var_2C], eax
                mov     [ebp+var_1C], 0
                push    offset aInt     ; "int"
                lea     ecx, [ebp+var_18]
                call    ds:??9dnString@@QBEHPB_W@Z ; dnString::operator!=(wchar_t const *)
                test    eax, eax
                jz      loc_1090D13A
                lea     ecx, [ebp+var_44]
                call    ds:??0dnString@@QAE@XZ ; dnString::dnString(void)
;   } // starts at 1090D03B
;   try {
                mov     byte ptr [ebp+var_4], 4
                push    offset aInt     ; "int"
                lea     ecx, [ebp+var_38]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                push    offset aSystemLocaliza ; "..\\System\\Localization\\%s_Coalesced_"...
                lea     ecx, [ebp+var_128]
                push    ecx
                call    ds:?Printf@dnString@@SA?AV1@PB_WZZ ; dnString::Printf(wchar_t const *,...)
                add     esp, 10h
                mov     [ebp+var_1B0], eax
                mov     edx, [ebp+var_1B0]
                mov     [ebp+var_1B4], edx
;   } // starts at 1090D09F
;   try {
                mov     byte ptr [ebp+var_4], 5
                mov     eax, [ebp+var_1B4]
                push    eax
                lea     ecx, [ebp+var_44]
                call    ds:??4dnString@@QAEAAV0@ABV0@@Z ; dnString::operator=(dnString const &)
;   } // starts at 1090D0D9
;   try {
                mov     byte ptr [ebp+var_4], 4
                lea     ecx, [ebp+var_128]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                mov     ecx, ds:?GNull@@3PAVdnOutputDevice@@A ; dnOutputDevice * GNull
                mov     edx, [ecx]
                push    edx
                push    0
                lea     ecx, [ebp+var_44]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                mov     eax, ds:?GFileManager@@3PAVdnFileMgr@@A ; dnFileMgr * GFileManager
                mov     ecx, [eax]
                mov     edx, ds:?GFileManager@@3PAVdnFileMgr@@A ; dnFileMgr * GFileManager
                mov     eax, [edx]
                mov     edx, [ecx]
                mov     ecx, eax
                mov     eax, [edx+18h]
                call    eax
                mov     [ebp+var_1C], eax
;   } // starts at 1090D0ED
;   try {
                mov     byte ptr [ebp+var_4], 2
                lea     ecx, [ebp+var_44]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)

loc_1090D13A:                           ; CODE XREF: sub_1090CF60+130↑j
                cmp     [ebp+var_2C], 0
                jnz     short loc_1090D19A
                cmp     [ebp+var_1C], 0
                jnz     short loc_1090D19A

loc_1090D146:                           ; CODE XREF: sub_1090CF60+209↓j
                lea     ecx, [ebp+var_28]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                push    offset aCanTFindAndLoa ; "Can't find and load Coalesced file %s o"...
                mov     ecx, ds:?GLog@@3PAVdnOutputDevice@@A ; dnOutputDevice * GLog
                mov     edx, [ecx]
                push    edx
                call    ds:?Logf@dnOutputDevice@@QAAXPB_WZZ ; dnOutputDevice::Logf(wchar_t const *,...)
                add     esp, 0Ch
                xor     eax, eax
                jnz     short loc_1090D146
;   } // starts at 1090D12D
;   try {
                mov     byte ptr [ebp+var_4], 1
                lea     ecx, [ebp+var_28]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
;   } // starts at 1090D16B
;   try {
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_38]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
;   } // starts at 1090D178
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_18]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                jmp     loc_1090D419
; ---------------------------------------------------------------------------

loc_1090D19A:                           ; CODE XREF: sub_1090CF60+1DE↑j
                                        ; sub_1090CF60+1E4↑j
                cmp     [ebp+var_2C], 0
                jz      loc_1090D251
                lea     ecx, [ebp+var_8C]
                call    sub_109078B0
;   try {
                mov     byte ptr [ebp+var_4], 6
                mov     ecx, [ebp+var_2C]
                push    ecx
                lea     ecx, [ebp+var_A8]
                call    ds:??0FNameAsStringProxyArchive@@QAE@AAVdnArchive@@@Z ; FNameAsStringProxyArchive::FNameAsStringProxyArchive(dnArchive &)
;   } // starts at 1090D1AF
;   try {
                mov     byte ptr [ebp+var_4], 7
                lea     edx, [ebp+var_8C]
                test    edx, edx
                jz      short loc_1090D1E2
                lea     eax, [ebp+var_8C]
                add     eax, 4
                mov     [ebp+var_140], eax
                jmp     short loc_1090D1EC
; ---------------------------------------------------------------------------

loc_1090D1E2:                           ; CODE XREF: sub_1090CF60+26F↑j
                mov     [ebp+var_140], 0

loc_1090D1EC:                           ; CODE XREF: sub_1090CF60+280↑j
                mov     ecx, [ebp+var_140]
                push    ecx
                lea     edx, [ebp+var_A8]
                push    edx
                call    sub_1090B4E0
                add     esp, 8
                lea     ecx, [ebp+var_A8]
                call    ds:?IsLoading@dnArchive@@QAEHXZ ; dnArchive::IsLoading(void)
                test    eax, eax
                jz      short loc_1090D21D
                mov     ecx, [ebp+var_140]
                call    sub_10904AD0

loc_1090D21D:                           ; CODE XREF: sub_1090CF60+2B0↑j
                lea     eax, [ebp+var_88]
                push    eax
                mov     ecx, [ebp+var_1A4]
                add     ecx, 4
                call    sub_1090B110
;   } // starts at 1090D1C3
;   try {
                mov     byte ptr [ebp+var_4], 6
                lea     ecx, [ebp+var_A8]
                call    ds:??1FNameAsStringProxyArchive@@UAE@XZ ; FNameAsStringProxyArchive::~FNameAsStringProxyArchive(void)
;   } // starts at 1090D232
;   try {
                mov     byte ptr [ebp+var_4], 2
                lea     ecx, [ebp+var_8C]
                call    sub_1090CDC0

loc_1090D251:                           ; CODE XREF: sub_1090CF60+23E↑j
                cmp     [ebp+var_1C], 0
                jz      loc_1090D308
                lea     ecx, [ebp+var_F4]
                call    sub_109078B0
;   } // starts at 1090D242
;   try {
                mov     byte ptr [ebp+var_4], 8
                mov     ecx, [ebp+var_1C]
                push    ecx
                lea     ecx, [ebp+var_110]
                call    ds:??0FNameAsStringProxyArchive@@QAE@AAVdnArchive@@@Z ; FNameAsStringProxyArchive::FNameAsStringProxyArchive(dnArchive &)
;   } // starts at 1090D266
;   try {
                mov     byte ptr [ebp+var_4], 9
                lea     edx, [ebp+var_F4]
                test    edx, edx
                jz      short loc_1090D299
                lea     eax, [ebp+var_F4]
                add     eax, 4
                mov     [ebp+var_164], eax
                jmp     short loc_1090D2A3
; ---------------------------------------------------------------------------

loc_1090D299:                           ; CODE XREF: sub_1090CF60+326↑j
                mov     [ebp+var_164], 0

loc_1090D2A3:                           ; CODE XREF: sub_1090CF60+337↑j
                mov     ecx, [ebp+var_164]
                push    ecx
                lea     edx, [ebp+var_110]
                push    edx
                call    sub_1090B4E0
                add     esp, 8
                lea     ecx, [ebp+var_110]
                call    ds:?IsLoading@dnArchive@@QAEHXZ ; dnArchive::IsLoading(void)
                test    eax, eax
                jz      short loc_1090D2D4
                mov     ecx, [ebp+var_164]
                call    sub_10904AD0

loc_1090D2D4:                           ; CODE XREF: sub_1090CF60+367↑j
                lea     eax, [ebp+var_F0]
                push    eax
                mov     ecx, [ebp+var_1A4]
                add     ecx, 4
                call    sub_1090B110
;   } // starts at 1090D27A
;   try {
                mov     byte ptr [ebp+var_4], 8
                lea     ecx, [ebp+var_110]
                call    ds:??1FNameAsStringProxyArchive@@UAE@XZ ; FNameAsStringProxyArchive::~FNameAsStringProxyArchive(void)
;   } // starts at 1090D2E9
;   try {
                mov     byte ptr [ebp+var_4], 2
                lea     ecx, [ebp+var_F4]
                call    sub_1090CDC0

loc_1090D308:                           ; CODE XREF: sub_1090CF60+2F5↑j
                cmp     [ebp+var_2C], 0
                jnz     short loc_1090D321
                cmp     [ebp+var_1C], 0
                jz      short loc_1090D321
                mov     ecx, [ebp+var_1A4]
                mov     dword ptr [ecx+1Ch], 1

loc_1090D321:                           ; CODE XREF: sub_1090CF60+3AC↑j
                                        ; sub_1090CF60+3B2↑j
                push    2Ch
                mov     ecx, [ebp+var_1A4]
                add     ecx, 4
                call    ds:?Shrink@dnArrayBase@@QAEXH@Z ; dnArrayBase::Shrink(int)
                mov     ecx, [ebp+var_1A4]
                add     ecx, 4
                call    sub_10904AD0
                cmp     [ebp+var_2C], 0
                jz      short loc_1090D391
                mov     edx, [ebp+var_2C]
                mov     [ebp+var_130], edx
                mov     eax, [ebp+var_130]
                mov     [ebp+var_12C], eax
                cmp     [ebp+var_12C], 0
                jz      short loc_1090D380
                push    1
                mov     ecx, [ebp+var_12C]
                mov     edx, [ecx]
                mov     ecx, [ebp+var_12C]
                mov     eax, [edx]
                call    eax
                mov     [ebp+var_1B8], eax
                jmp     short loc_1090D38A
; ---------------------------------------------------------------------------

loc_1090D380:                           ; CODE XREF: sub_1090CF60+402↑j
                mov     [ebp+var_1B8], 0

loc_1090D38A:                           ; CODE XREF: sub_1090CF60+41E↑j
                mov     [ebp+var_2C], 0

loc_1090D391:                           ; CODE XREF: sub_1090CF60+3E4↑j
                cmp     [ebp+var_1C], 0
                jz      short loc_1090D3E2
                mov     ecx, [ebp+var_1C]
                mov     [ebp+var_138], ecx
                mov     edx, [ebp+var_138]
                mov     [ebp+var_134], edx
                cmp     [ebp+var_134], 0
                jz      short loc_1090D3D1
                push    1
                mov     eax, [ebp+var_134]
                mov     edx, [eax]
                mov     ecx, [ebp+var_134]
                mov     eax, [edx]
                call    eax
                mov     [ebp+var_1BC], eax
                jmp     short loc_1090D3DB
; ---------------------------------------------------------------------------

loc_1090D3D1:                           ; CODE XREF: sub_1090CF60+453↑j
                mov     [ebp+var_1BC], 0

loc_1090D3DB:                           ; CODE XREF: sub_1090CF60+46F↑j
                mov     [ebp+var_1C], 0

loc_1090D3E2:                           ; CODE XREF: sub_1090CF60+435↑j
                mov     ecx, [ebp+var_1A4]
                mov     dword ptr [ecx+18h], 1
;   } // starts at 1090D2F9
;   try {
                mov     byte ptr [ebp+var_4], 1
                lea     ecx, [ebp+var_28]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
;   } // starts at 1090D3EF
;   try {
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_38]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
;   } // starts at 1090D3FC
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_18]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)

loc_1090D419:                           ; CODE XREF: sub_1090CF60+235↑j
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
; } // starts at 1090CF60
sub_1090CF60    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1090D430    proc near               ; CODE XREF: sub_1090ECE0+399↓p

var_2AC         = dword ptr -2ACh
var_2A8         = dword ptr -2A8h
var_2A4         = dword ptr -2A4h
var_2A0         = dword ptr -2A0h
var_29C         = dword ptr -29Ch
var_298         = dword ptr -298h
var_294         = dword ptr -294h
var_290         = dword ptr -290h
var_28C         = dword ptr -28Ch
var_288         = dword ptr -288h
var_284         = dword ptr -284h
var_280         = dword ptr -280h
var_27C         = dword ptr -27Ch
var_278         = dword ptr -278h
var_274         = dword ptr -274h
var_270         = dword ptr -270h
var_26C         = dword ptr -26Ch
var_268         = dword ptr -268h
var_264         = dword ptr -264h
var_260         = dword ptr -260h
var_250         = dword ptr -250h
var_108         = dword ptr -108h
var_104         = dword ptr -104h
var_100         = dword ptr -100h
var_FC          = byte ptr -0FCh
var_F0          = byte ptr -0F0h
var_E1          = byte ptr -0E1h
var_E0          = byte ptr -0E0h
var_D4          = byte ptr -0D4h
var_C5          = byte ptr -0C5h
var_C4          = byte ptr -0C4h
var_B8          = byte ptr -0B8h
var_AC          = byte ptr -0ACh
var_A0          = byte ptr -0A0h
var_91          = byte ptr -91h
var_90          = byte ptr -90h
var_74          = byte ptr -74h
var_68          = dword ptr -68h
var_64          = dword ptr -64h
var_60          = byte ptr -60h
var_54          = byte ptr -54h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch
arg_8           = dword ptr  10h

; FUNCTION CHUNK AT 10911540 SIZE 00000143 BYTES

; __unwind { // SEH_1090D430
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_1090D430
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 2A0h
                mov     [ebp+var_108], 0
                lea     ecx, [ebp+var_54]
                call    sub_109078B0
;   try {
                mov     [ebp+var_4], 0
                mov     eax, [ebp+arg_4]
                push    eax
                push    offset aCoalescingLoca ; "Coalescing Locale:%s"
                mov     ecx, ds:?GWarn@@3PAVdnFeedbackContext@@A ; dnFeedbackContext * GWarn
                mov     edx, [ecx]
                push    edx
                call    ds:?Logf@dnOutputDevice@@QAAXPB_WZZ ; dnOutputDevice::Logf(wchar_t const *,...)
                add     esp, 0Ch
                mov     [ebp+var_68], 0
                jmp     short loc_1090D494
; ---------------------------------------------------------------------------

loc_1090D48B:                           ; CODE XREF: sub_1090D430+534↓j
                mov     eax, [ebp+var_68]
                add     eax, 1
                mov     [ebp+var_68], eax

loc_1090D494:                           ; CODE XREF: sub_1090D430+59↑j
                mov     ecx, [ebp+arg_0]
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                cmp     [ebp+var_68], eax
                jge     loc_1090D969
                mov     ecx, [ebp+var_68]
                push    ecx
                mov     ecx, [ebp+arg_0]
                call    sub_10902A00
                push    eax
                lea     ecx, [ebp+var_74]
                call    ds:??0FFilename@@QAE@ABVdnString@@@Z ; FFilename::FFilename(dnString const &)
;   } // starts at 1090D460
;   try {
                mov     byte ptr [ebp+var_4], 1
                push    0
                lea     edx, [ebp+var_A0]
                push    edx
                lea     ecx, [ebp+var_74]
                call    ds:?GetExtension@FFilename@@QBE?AVdnString@@H@Z ; FFilename::GetExtension(int)
                mov     [ebp+var_260], eax
                mov     eax, [ebp+var_260]
                mov     [ebp+var_264], eax
;   } // starts at 1090D4BC
;   try {
                mov     byte ptr [ebp+var_4], 2
                mov     ecx, [ebp+var_108]
                or      ecx, 1
                mov     [ebp+var_108], ecx
                mov     edx, [ebp+arg_4]
                push    edx
                mov     ecx, [ebp+var_264]
                call    ds:??8dnString@@QBEHPB_W@Z ; dnString::operator==(wchar_t const *)
                test    eax, eax
                jnz     loc_1090D5AD
                push    0
                lea     eax, [ebp+var_AC]
                push    eax
                lea     ecx, [ebp+var_74]
                call    ds:?GetExtension@FFilename@@QBE?AVdnString@@H@Z ; FFilename::GetExtension(int)
                mov     [ebp+var_268], eax
                mov     ecx, [ebp+var_268]
                mov     [ebp+var_26C], ecx
;   } // starts at 1090D4E4
;   try {
                mov     [ebp+var_4], 3
                mov     edx, [ebp+var_108]
                or      edx, 2
                mov     [ebp+var_108], edx
                push    offset aInt     ; "int"
                mov     ecx, [ebp+var_26C]
                call    ds:??8dnString@@QBEHPB_W@Z ; dnString::operator==(wchar_t const *)
                test    eax, eax
                jnz     short loc_1090D5AD
                push    0
                lea     eax, [ebp+var_B8]
                push    eax
                lea     ecx, [ebp+var_74]
                call    ds:?GetExtension@FFilename@@QBE?AVdnString@@H@Z ; FFilename::GetExtension(int)
                mov     [ebp+var_270], eax
                mov     ecx, [ebp+var_270]
                mov     [ebp+var_274], ecx
;   } // starts at 1090D533
;   try {
                mov     [ebp+var_4], 4
                mov     edx, [ebp+var_108]
                or      edx, 4
                mov     [ebp+var_108], edx
                push    offset aIni     ; "ini"
                mov     ecx, [ebp+var_274]
                call    ds:??8dnString@@QBEHPB_W@Z ; dnString::operator==(wchar_t const *)
                test    eax, eax
                jz      short loc_1090D608

loc_1090D5AD:                           ; CODE XREF: sub_1090D430+D9↑j
                                        ; sub_1090D430+12C↑j
                push    1
                lea     eax, [ebp+var_C4]
                push    eax
                lea     ecx, [ebp+var_74]
                call    ds:?GetBaseFilename@FFilename@@QBE?AVdnString@@H@Z ; FFilename::GetBaseFilename(int)
                mov     [ebp+var_278], eax
                mov     ecx, [ebp+var_278]
                mov     [ebp+var_27C], ecx
;   } // starts at 1090D582
;   try {
                mov     [ebp+var_4], 5
                mov     edx, [ebp+var_108]
                or      edx, 8
                mov     [ebp+var_108], edx
                push    offset aCoalesced ; "Coalesced"
                mov     ecx, [ebp+var_27C]
                call    ds:??9dnString@@QBEHPB_W@Z ; dnString::operator!=(wchar_t const *)
                test    eax, eax
                jz      short loc_1090D608
                mov     [ebp+var_280], 1
                jmp     short loc_1090D612
; ---------------------------------------------------------------------------

loc_1090D608:                           ; CODE XREF: sub_1090D430+17B↑j
                                        ; sub_1090D430+1CA↑j
                mov     [ebp+var_280], 0

loc_1090D612:                           ; CODE XREF: sub_1090D430+1D6↑j
                mov     al, byte ptr [ebp+var_280]
                mov     [ebp+var_91], al
;   } // starts at 1090D5D1
;   try {
                mov     [ebp+var_4], 4
                mov     ecx, [ebp+var_108]
                and     ecx, 8
                jz      short loc_1090D643
                and     [ebp+var_108], 0FFFFFFF7h
                lea     ecx, [ebp+var_C4]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
;   } // starts at 1090D61E

loc_1090D643:                           ; CODE XREF: sub_1090D430+1FE↑j
;   try {
                mov     [ebp+var_4], 3
                mov     edx, [ebp+var_108]
                and     edx, 4
                jz      short loc_1090D668
                and     [ebp+var_108], 0FFFFFFFBh
                lea     ecx, [ebp+var_B8]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
;   } // starts at 1090D643

loc_1090D668:                           ; CODE XREF: sub_1090D430+223↑j
;   try {
                mov     [ebp+var_4], 2
                mov     eax, [ebp+var_108]
                and     eax, 2
                jz      short loc_1090D68D
                and     [ebp+var_108], 0FFFFFFFDh
                lea     ecx, [ebp+var_AC]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
;   } // starts at 1090D668

loc_1090D68D:                           ; CODE XREF: sub_1090D430+248↑j
;   try {
                mov     [ebp+var_4], 1
                mov     ecx, [ebp+var_108]
                and     ecx, 1
                jz      short loc_1090D6B2
                and     [ebp+var_108], 0FFFFFFFEh
                lea     ecx, [ebp+var_A0]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)

loc_1090D6B2:                           ; CODE XREF: sub_1090D430+26D↑j
                movzx   edx, [ebp+var_91]
                test    edx, edx
                jz      loc_1090D957
                lea     ecx, [ebp+var_74]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                push    offset aAddingFileS ; "\t...Adding file:%s"
                mov     eax, ds:?GWarn@@3PAVdnFeedbackContext@@A ; dnFeedbackContext * GWarn
                mov     ecx, [eax]
                push    ecx
                call    ds:?Logf@dnOutputDevice@@QAAXPB_WZZ ; dnOutputDevice::Logf(wchar_t const *,...)
                add     esp, 0Ch
                push    1
                lea     edx, [ebp+var_D4]
                push    edx
                lea     ecx, [ebp+var_74]
                call    ds:?GetBaseFilename@FFilename@@QBE?AVdnString@@H@Z ; FFilename::GetBaseFilename(int)
                mov     [ebp+var_284], eax
                mov     eax, [ebp+var_284]
                mov     [ebp+var_288], eax
;   } // starts at 1090D68D
;   try {
                mov     byte ptr [ebp+var_4], 6
                mov     ecx, [ebp+var_108]
                or      ecx, 10h
                mov     [ebp+var_108], ecx
                push    offset aDefuserxbox ; "defuserxbox"
                mov     ecx, [ebp+var_288]
                call    ds:??8dnString@@QBEHPB_W@Z ; dnString::operator==(wchar_t const *)
                test    eax, eax
                jnz     short loc_1090D788
                push    1
                lea     edx, [ebp+var_E0]
                push    edx
                lea     ecx, [ebp+var_74]
                call    ds:?GetBaseFilename@FFilename@@QBE?AVdnString@@H@Z ; FFilename::GetBaseFilename(int)
                mov     [ebp+var_28C], eax
                mov     eax, [ebp+var_28C]
                mov     [ebp+var_290], eax
;   } // starts at 1090D705
;   try {
                mov     [ebp+var_4], 7
                mov     ecx, [ebp+var_108]
                or      ecx, 20h
                mov     [ebp+var_108], ecx
                push    offset aDefuserps3 ; "defuserps3"
                mov     ecx, [ebp+var_290]
                call    ds:??8dnString@@QBEHPB_W@Z ; dnString::operator==(wchar_t const *)
                test    eax, eax
                jnz     short loc_1090D788
                mov     [ebp+var_294], 0
                jmp     short loc_1090D792
; ---------------------------------------------------------------------------

loc_1090D788:                           ; CODE XREF: sub_1090D430+2FB↑j
                                        ; sub_1090D430+34A↑j
                mov     [ebp+var_294], 1

loc_1090D792:                           ; CODE XREF: sub_1090D430+356↑j
                mov     dl, byte ptr [ebp+var_294]
                mov     [ebp+var_C5], dl
;   } // starts at 1090D751
;   try {
                mov     [ebp+var_4], 6
                mov     eax, [ebp+var_108]
                and     eax, 20h
                jz      short loc_1090D7C3
                and     [ebp+var_108], 0FFFFFFDFh
                lea     ecx, [ebp+var_E0]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
;   } // starts at 1090D79E

loc_1090D7C3:                           ; CODE XREF: sub_1090D430+37E↑j
;   try {
                mov     [ebp+var_4], 1
                mov     ecx, [ebp+var_108]
                and     ecx, 10h
                jz      short loc_1090D7E8
                and     [ebp+var_108], 0FFFFFFEFh
                lea     ecx, [ebp+var_D4]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)

loc_1090D7E8:                           ; CODE XREF: sub_1090D430+3A3↑j
                movzx   edx, [ebp+var_C5]
                test    edx, edx
                jz      short loc_1090D80F
                push    offset aDefuserIni ; "defuser.ini"
                lea     ecx, [ebp+var_74]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                lea     ecx, [ebp+var_54]
                call    sub_1090CBA0
                jmp     loc_1090D957
; ---------------------------------------------------------------------------

loc_1090D80F:                           ; CODE XREF: sub_1090D430+3C1↑j
                push    1
                lea     eax, [ebp+var_F0]
                push    eax
                lea     ecx, [ebp+var_74]
                call    ds:?GetBaseFilename@FFilename@@QBE?AVdnString@@H@Z ; FFilename::GetBaseFilename(int)
                mov     [ebp+var_298], eax
                mov     ecx, [ebp+var_298]
                mov     [ebp+var_29C], ecx
;   } // starts at 1090D7C3
;   try {
                mov     byte ptr [ebp+var_4], 8
                mov     edx, [ebp+var_108]
                or      edx, 40h
                mov     [ebp+var_108], edx
                push    offset aDefaultxbox ; "defaultxbox"
                mov     ecx, [ebp+var_29C]
                call    ds:??8dnString@@QBEHPB_W@Z ; dnString::operator==(wchar_t const *)
                test    eax, eax
                jnz     short loc_1090D8B9
                push    1
                lea     eax, [ebp+var_FC]
                push    eax
                lea     ecx, [ebp+var_74]
                call    ds:?GetBaseFilename@FFilename@@QBE?AVdnString@@H@Z ; FFilename::GetBaseFilename(int)
                mov     [ebp+var_2A0], eax
                mov     ecx, [ebp+var_2A0]
                mov     [ebp+var_2A4], ecx
;   } // starts at 1090D833
;   try {
                mov     [ebp+var_4], 9
                mov     edx, [ebp+var_108]
                or      edx, 80h
                mov     [ebp+var_108], edx
                push    offset aDefaultps3 ; "defaultps3"
                mov     ecx, [ebp+var_2A4]
                call    ds:??8dnString@@QBEHPB_W@Z ; dnString::operator==(wchar_t const *)
                test    eax, eax
                jnz     short loc_1090D8B9
                mov     [ebp+var_2A8], 0
                jmp     short loc_1090D8C3
; ---------------------------------------------------------------------------

loc_1090D8B9:                           ; CODE XREF: sub_1090D430+429↑j
                                        ; sub_1090D430+47B↑j
                mov     [ebp+var_2A8], 1

loc_1090D8C3:                           ; CODE XREF: sub_1090D430+487↑j
                mov     al, byte ptr [ebp+var_2A8]
                mov     [ebp+var_E1], al
;   } // starts at 1090D87F
;   try {
                mov     [ebp+var_4], 8
                mov     ecx, [ebp+var_108]
                and     ecx, 80h
                jz      short loc_1090D8FA
                and     [ebp+var_108], 0FFFFFF7Fh
                lea     ecx, [ebp+var_FC]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
;   } // starts at 1090D8CF

loc_1090D8FA:                           ; CODE XREF: sub_1090D430+4B2↑j
;   try {
                mov     [ebp+var_4], 1
                mov     edx, [ebp+var_108]
                and     edx, 40h
                jz      short loc_1090D91F
                and     [ebp+var_108], 0FFFFFFBFh
                lea     ecx, [ebp+var_F0]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)

loc_1090D91F:                           ; CODE XREF: sub_1090D430+4DA↑j
                movzx   eax, [ebp+var_E1]
                test    eax, eax
                jz      short loc_1090D943
                push    offset aDefaultIni ; "default.ini"
                lea     ecx, [ebp+var_74]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                lea     ecx, [ebp+var_54]
                call    sub_1090CBA0
                jmp     short loc_1090D957
; ---------------------------------------------------------------------------

loc_1090D943:                           ; CODE XREF: sub_1090D430+4F8↑j
                push    0
                lea     ecx, [ebp+var_74]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                lea     ecx, [ebp+var_54]
                call    sub_1090CBA0
;   } // starts at 1090D8FA

loc_1090D957:                           ; CODE XREF: sub_1090D430+28B↑j
                                        ; sub_1090D430+3DA↑j ...
;   try {
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_74]
                call    ds:??1FFilename@@QAE@XZ ; FFilename::~FFilename(void)
                jmp     loc_1090D48B
; ---------------------------------------------------------------------------

loc_1090D969:                           ; CODE XREF: sub_1090D430+70↑j
                mov     ecx, [ebp+arg_8]
                push    ecx
                lea     ecx, [ebp+var_60]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
;   } // starts at 1090D957
;   try {
                mov     byte ptr [ebp+var_4], 0Ah
                push    0
                push    0
                lea     ecx, [ebp+var_60]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                mov     edx, ds:?GFileManager@@3PAVdnFileMgr@@A ; dnFileMgr * GFileManager
                mov     eax, [edx]
                mov     ecx, ds:?GFileManager@@3PAVdnFileMgr@@A ; dnFileMgr * GFileManager
                mov     ecx, [ecx]
                mov     edx, [eax]
                mov     eax, [edx+24h]
                call    eax
                mov     ecx, ds:?GNull@@3PAVdnOutputDevice@@A ; dnOutputDevice * GNull
                mov     edx, [ecx]
                push    edx
                push    0
                lea     ecx, [ebp+var_60]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                mov     eax, ds:?GFileManager@@3PAVdnFileMgr@@A ; dnFileMgr * GFileManager
                mov     ecx, [eax]
                mov     edx, ds:?GFileManager@@3PAVdnFileMgr@@A ; dnFileMgr * GFileManager
                mov     eax, [edx]
                mov     edx, [ecx]
                mov     ecx, eax
                mov     eax, [edx+1Ch]
                call    eax
                mov     [ebp+var_64], eax
                cmp     [ebp+var_64], 0
                jz      loc_1090DAB3
                mov     ecx, [ebp+var_64]
                push    ecx
                lea     ecx, [ebp+var_90]
                call    ds:??0FNameAsStringProxyArchive@@QAE@AAVdnArchive@@@Z ; FNameAsStringProxyArchive::FNameAsStringProxyArchive(dnArchive &)
;   } // starts at 1090D976
;   try {
                mov     byte ptr [ebp+var_4], 0Bh
                lea     edx, [ebp+var_54]
                test    edx, edx
                jz      short loc_1090DA02
                lea     eax, [ebp+var_54]
                add     eax, 4
                mov     [ebp+var_250], eax
                jmp     short loc_1090DA0C
; ---------------------------------------------------------------------------

loc_1090DA02:                           ; CODE XREF: sub_1090D430+5C2↑j
                mov     [ebp+var_250], 0

loc_1090DA0C:                           ; CODE XREF: sub_1090D430+5D0↑j
                mov     ecx, [ebp+var_250]
                push    ecx
                lea     edx, [ebp+var_90]
                push    edx
                call    sub_1090B4E0
                add     esp, 8
                lea     ecx, [ebp+var_90]
                call    ds:?IsLoading@dnArchive@@QAEHXZ ; dnArchive::IsLoading(void)
                test    eax, eax
                jz      short loc_1090DA3D
                mov     ecx, [ebp+var_250]
                call    sub_10904AD0

loc_1090DA3D:                           ; CODE XREF: sub_1090D430+600↑j
                mov     eax, [ebp+var_64]
                mov     [ebp+var_104], eax
                mov     ecx, [ebp+var_104]
                mov     [ebp+var_100], ecx
                cmp     [ebp+var_100], 0
                jz      short loc_1090DA77
                push    1
                mov     edx, [ebp+var_100]
                mov     eax, [edx]
                mov     ecx, [ebp+var_100]
                mov     edx, [eax]
                call    edx
                mov     [ebp+var_2AC], eax
                jmp     short loc_1090DA81
; ---------------------------------------------------------------------------

loc_1090DA77:                           ; CODE XREF: sub_1090D430+629↑j
                mov     [ebp+var_2AC], 0

loc_1090DA81:                           ; CODE XREF: sub_1090D430+645↑j
                lea     ecx, [ebp+var_60]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                push    offset aSavingS ; "Saving: %s\n\n"
                mov     eax, ds:?GWarn@@3PAVdnFeedbackContext@@A ; dnFeedbackContext * GWarn
                mov     ecx, [eax]
                push    ecx
                call    ds:?Logf@dnOutputDevice@@QAAXPB_WZZ ; dnOutputDevice::Logf(wchar_t const *,...)
                add     esp, 0Ch
;   } // starts at 1090D9E9
;   try {
                mov     byte ptr [ebp+var_4], 0Ah
                lea     ecx, [ebp+var_90]
                call    ds:??1FNameAsStringProxyArchive@@UAE@XZ ; FNameAsStringProxyArchive::~FNameAsStringProxyArchive(void)
                jmp     short loc_1090DAD4
; ---------------------------------------------------------------------------

loc_1090DAB3:                           ; CODE XREF: sub_1090D430+5A3↑j
                lea     ecx, [ebp+var_60]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                push    offset aCouldNotCreate ; "Could not Create file:%s\n\n"
                mov     edx, ds:?GWarn@@3PAVdnFeedbackContext@@A ; dnFeedbackContext * GWarn
                mov     eax, [edx]
                push    eax
                call    ds:?Logf@dnOutputDevice@@QAAXPB_WZZ ; dnOutputDevice::Logf(wchar_t const *,...)
                add     esp, 0Ch
;   } // starts at 1090DAA1

loc_1090DAD4:                           ; CODE XREF: sub_1090D430+681↑j
;   try {
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_60]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
;   } // starts at 1090DAD4
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_54]
                call    sub_1090CDC0
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
; } // starts at 1090D430
sub_1090D430    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1090DB00    proc near               ; DATA XREF: .rdata:10913538↓o

var_10          = dword ptr -10h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 10h
                mov     [ebp+var_10], ecx
                mov     ecx, [ebp+var_10]
                call    sub_1090CDC0
                mov     eax, [ebp+arg_0]
                and     eax, 1
                jz      short loc_1090DB25
                mov     ecx, [ebp+var_10]
                push    ecx
                call    sub_10901030
                add     esp, 4

loc_1090DB25:                           ; CODE XREF: sub_1090DB00+17↑j
                mov     eax, [ebp+var_10]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_1090DB00    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __stdcall WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd)
_WinMain@16     proc near               ; CODE XREF: ___tmainCRTStartup+13B↓p

var_2228        = dword ptr -2228h
var_221C        = dword ptr -221Ch
var_2218        = dword ptr -2218h
var_2214        = dword ptr -2214h
var_2210        = dword ptr -2210h
var_220C        = dword ptr -220Ch
var_2208        = dword ptr -2208h
var_2204        = dword ptr -2204h
var_2200        = dword ptr -2200h
var_21FC        = dword ptr -21FCh
var_21F8        = dword ptr -21F8h
var_21F4        = dword ptr -21F4h
var_21F0        = dword ptr -21F0h
var_21EA        = word ptr -21EAh
var_21E8        = dword ptr -21E8h
var_21E4        = dword ptr -21E4h
var_21E0        = dword ptr -21E0h
var_21DC        = dword ptr -21DCh
var_21D8        = dword ptr -21D8h
var_21D2        = word ptr -21D2h
var_21D0        = dword ptr -21D0h
var_21CC        = dword ptr -21CCh
var_21C8        = dword ptr -21C8h
var_21C4        = dword ptr -21C4h
var_21C0        = dword ptr -21C0h
var_21BC        = dword ptr -21BCh
var_21B8        = dword ptr -21B8h
var_2184        = dword ptr -2184h
var_2180        = dword ptr -2180h
var_217C        = dword ptr -217Ch
var_2178        = dword ptr -2178h
var_14C         = dword ptr -14Ch
var_148         = dword ptr -148h
var_144         = dword ptr -144h
var_140         = dword ptr -140h
var_13C         = dword ptr -13Ch
var_138         = byte ptr -138h
var_12C         = byte ptr -12Ch
var_120         = byte ptr -120h
var_114         = byte ptr -114h
var_108         = byte ptr -108h
var_FC          = byte ptr -0FCh
var_F0          = byte ptr -0F0h
var_E4          = byte ptr -0E4h
var_D8          = byte ptr -0D8h
var_CC          = byte ptr -0CCh
var_C0          = dword ptr -0C0h
var_BC          = dword ptr -0BCh
var_B8          = dword ptr -0B8h
var_B4          = byte ptr -0B4h
var_A8          = byte ptr -0A8h
var_9C          = byte ptr -9Ch
var_90          = byte ptr -90h
var_84          = dword ptr -84h
var_80          = byte ptr -80h
var_74          = byte ptr -74h
var_68          = byte ptr -68h
var_5C          = dword ptr -5Ch
var_54          = dword ptr -54h
var_50          = dword ptr -50h
var_4C          = dword ptr -4Ch
var_48          = byte ptr -48h
var_3C          = dword ptr -3Ch
var_38          = dword ptr -38h
var_34          = dword ptr -34h
var_30          = dword ptr -30h
var_2C          = byte ptr -2Ch
var_1D          = byte ptr -1Dh
var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_8           = qword ptr -8
hInstance       = dword ptr  8
hPrevInstance   = dword ptr  0Ch
lpCmdLine       = dword ptr  10h
nShowCmd        = dword ptr  14h

                push    ebp
                mov     ebp, esp
                mov     eax, 221Ch
                call    __alloca_probe
                push    esi
                mov     [ebp+var_144], 0
                mov     dword_10922648, 1
                call    ds:InitCommonControls
                push    offset LibFileName ; "RICHED32.DLL"
                call    ds:LoadLibraryW
                push    offset aDbghelpDll ; "DBGHELP.DLL"
                call    ds:LoadLibraryW
                mov     eax, ds:?CrashHandler_WindowedExceptionHandler@@YGJPAU_EXCEPTION_POINTERS@@@Z ; CrashHandler_WindowedExceptionHandler(_EXCEPTION_POINTERS *)
                push    eax
                call    ds:_SetCrashHandlerFilter@4 ; SetCrashHandlerFilter(x)
                mov     ecx, dword_109226A0
                and     ecx, 1
                jnz     short loc_1090DB9E
                mov     edx, dword_109226A0
                or      edx, 1
                mov     dword_109226A0, edx
                mov     ecx, offset unk_1092269C
                call    sub_10901CE0

loc_1090DB9E:                           ; CODE XREF: WinMain(x,x,x,x)+53↑j
                mov     eax, ds:?CrashHandler_AssertHandler@@YAXPAXPBD1HPB_W@Z ; CrashHandler_AssertHandler(void *,char const *,char const *,int,wchar_t const *)
                push    eax
                mov     ecx, ds:?StaticEnterSafeMode@UObject@@SAXPB_W@Z ; UObject::StaticEnterSafeMode(wchar_t const *)
                push    ecx
                call    ds:dnInitAssertMgr
                add     esp, 8
                mov     [ebp+var_14], 0
                mov     edx, ds:GIsStarted
                mov     dword ptr [edx], 1
                mov     [ebp+var_1C], 0
                mov     eax, [ebp+hInstance]
                mov     hInstance, eax
                call    ds:GetCommandLineW
                mov     [ebp+var_1C], eax
                lea     ecx, [ebp+var_80]
                push    ecx
                call    sub_10902810
                add     esp, 4
                mov     ecx, eax
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                mov     [ebp+var_148], eax
                mov     edx, [ebp+var_148]
                mov     [ebp+var_21C8], edx
                mov     [ebp+var_21CC], offset GPackage ; "Launch"
                mov     eax, [ebp+var_21CC]
                mov     [ebp+var_21D0], eax

loc_1090DC1B:                           ; CODE XREF: WinMain(x,x,x,x)+131↓j
                mov     ecx, [ebp+var_21C8]
                mov     dx, [ecx]
                mov     [ebp+var_21D2], dx
                mov     eax, [ebp+var_21CC]
                mov     cx, [ebp+var_21D2]
                mov     [eax], cx
                mov     edx, [ebp+var_21C8]
                add     edx, 2
                mov     [ebp+var_21C8], edx
                mov     eax, [ebp+var_21CC]
                add     eax, 2
                mov     [ebp+var_21CC], eax
                cmp     [ebp+var_21D2], 0
                jnz     short loc_1090DC1B
                lea     ecx, [ebp+var_80]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                push    offset aNocompiledanim ; "nocompiledanims"
                mov     ecx, [ebp+var_1C]
                push    ecx
                call    sub_10902850
                add     esp, 8
                test    eax, eax
                jz      short loc_1090DC8D
                mov     edx, ds:g_CompiledAnims
                mov     dword ptr [edx], 0

loc_1090DC8D:                           ; CODE XREF: WinMain(x,x,x,x)+14F↑j
                mov     [ebp+var_1D], 0
                push    offset Name     ; "DNFDedicatedServerMutex"
                push    1               ; bInitialOwner
                push    0               ; lpMutexAttributes
                call    ds:CreateMutexW
                mov     ecx, ds:?GDedicatedServerMutex@@3PAUHINSTANCE__@@A ; HINSTANCE__ * GDedicatedServerMutex
                mov     [ecx], eax
                mov     edx, ds:?GDedicatedServerMutex@@3PAUHINSTANCE__@@A ; HINSTANCE__ * GDedicatedServerMutex
                cmp     dword ptr [edx], 0
                jz      short loc_1090DCF5
                call    ds:GetLastError
                cmp     eax, 0B7h
                jz      short loc_1090DCCB
                call    ds:GetLastError
                cmp     eax, 5
                jnz     short loc_1090DCF5

loc_1090DCCB:                           ; CODE XREF: WinMain(x,x,x,x)+18E↑j
                push    offset aServer  ; "server"
                call    ds:GetCommandLineW
                push    eax
                call    sub_10902850
                add     esp, 8
                test    eax, eax
                jnz     short loc_1090DCE7
                mov     [ebp+var_1D], 1

loc_1090DCE7:                           ; CODE XREF: WinMain(x,x,x,x)+1B1↑j
                mov     eax, ds:?GDedicatedServerMutex@@3PAUHINSTANCE__@@A ; HINSTANCE__ * GDedicatedServerMutex
                mov     ecx, [eax]
                push    ecx             ; hMutex
                call    ds:ReleaseMutex

loc_1090DCF5:                           ; CODE XREF: WinMain(x,x,x,x)+181↑j
                                        ; WinMain(x,x,x,x)+199↑j
                push    offset aServer  ; "server"
                call    ds:GetCommandLineW
                push    eax
                call    sub_10902850
                add     esp, 8
                test    eax, eax
                jnz     short loc_1090DD28
                mov     edx, ds:?GDedicatedServerMutex@@3PAUHINSTANCE__@@A ; HINSTANCE__ * GDedicatedServerMutex
                mov     eax, [edx]
                push    eax             ; hObject
                call    ds:CloseHandle
                mov     ecx, ds:?GDedicatedServerMutex@@3PAUHINSTANCE__@@A ; HINSTANCE__ * GDedicatedServerMutex
                mov     dword ptr [ecx], 0

loc_1090DD28:                           ; CODE XREF: WinMain(x,x,x,x)+1DB↑j
                push    offset aDukeforevermut ; "DukeForeverMutex"
                push    1               ; bInitialOwner
                push    0               ; lpMutexAttributes
                call    ds:CreateMutexW
                mov     edx, ds:?GLaunchMutex@@3PAUHINSTANCE__@@A ; HINSTANCE__ * GLaunchMutex
                mov     [edx], eax
                call    ds:GetLastError
                cmp     eax, 0B7h
                jz      short loc_1090DD57
                call    ds:GetLastError
                cmp     eax, 5
                jnz     short loc_1090DDB7

loc_1090DD57:                           ; CODE XREF: WinMain(x,x,x,x)+21A↑j
                mov     eax, ds:?GLaunchMutex@@3PAUHINSTANCE__@@A ; HINSTANCE__ * GLaunchMutex
                cmp     dword ptr [eax], 0
                jz      short loc_1090DD7B
                mov     ecx, ds:?GLaunchMutex@@3PAUHINSTANCE__@@A ; HINSTANCE__ * GLaunchMutex
                mov     edx, [ecx]
                push    edx             ; hObject
                call    ds:CloseHandle
                mov     eax, ds:?GLaunchMutex@@3PAUHINSTANCE__@@A ; HINSTANCE__ * GLaunchMutex
                mov     dword ptr [eax], 0

loc_1090DD7B:                           ; CODE XREF: WinMain(x,x,x,x)+22F↑j
                movzx   ecx, [ebp+var_1D]
                test    ecx, ecx
                jz      short loc_1090DD99
                push    0               ; uType
                push    offset Caption  ; "ERROR"
                push    offset Text     ; "A dedicated server is currently running"...
                push    0               ; hWnd
                call    ds:MessageBoxW
                jmp     short loc_1090DDAD
; ---------------------------------------------------------------------------

loc_1090DD99:                           ; CODE XREF: WinMain(x,x,x,x)+251↑j
                push    0               ; uType
                push    offset Caption  ; "ERROR"
                push    offset aOnlyOneInstanc ; "Only one instance of Duke Nukem Forever"...
                push    0               ; hWnd
                call    ds:MessageBoxW

loc_1090DDAD:                           ; CODE XREF: WinMain(x,x,x,x)+267↑j
                mov     eax, 1
                jmp     loc_1090EC8B
; ---------------------------------------------------------------------------

loc_1090DDB7:                           ; CODE XREF: WinMain(x,x,x,x)+225↑j
                call    ds:?EngineIsDemoVersion@@YAHXZ ; EngineIsDemoVersion(void)
                test    eax, eax
                jz      short loc_1090DDE6

loc_1090DDC1:                           ; CODE XREF: WinMain(x,x,x,x)+2AA↓j
                push    offset aMismatchedSyst ; "Mismatched system files.  Application c"...
                mov     edx, ds:?GLog@@3PAVdnOutputDevice@@A ; dnOutputDevice * GLog
                mov     eax, [edx]
                push    eax
                call    ds:?Logf@dnOutputDevice@@QAAXPB_WZZ ; dnOutputDevice::Logf(wchar_t const *,...)
                add     esp, 8
                xor     ecx, ecx
                jnz     short loc_1090DDC1
                mov     eax, 1
                jmp     loc_1090EC8B
; ---------------------------------------------------------------------------

loc_1090DDE6:                           ; CODE XREF: WinMain(x,x,x,x)+28F↑j
                mov     edx, ds:?GIsGuarded@@3HA ; int GIsGuarded
                mov     dword ptr [edx], 1
                mov     eax, ds:GIsClient
                mov     dword ptr [eax], 1
                push    offset sub_1090CEE0
                push    offset unk_10922654
                push    offset unk_10921E10
                push    offset unk_10921E34
                push    offset unk_10921E40
                push    0
                mov     ecx, [ebp+var_1C]
                push    ecx
                push    offset aDukeforever ; "DukeForever"
                call    ds:?appInit@@YAXPB_W0PAVFMalloc@@PAVdnOutputDevice@@PAVdnOutputDeviceError@@PAVdnFeedbackContext@@PAVdnFileMgr@@P6APAVdnConfigCache@@XZ@Z ; appInit(wchar_t const *,wchar_t const *,FMalloc *,dnOutputDevice *,dnOutputDeviceError *,dnFeedbackContext *,dnFileMgr *,dnConfigCache * (*)(void))
                add     esp, 20h
                push    offset aMake    ; "MAKE"
                lea     edx, [ebp+var_90]
                push    edx
                call    sub_109027C0
                add     esp, 4
                mov     ecx, eax
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                call    sub_10902850
                add     esp, 8
                mov     [ebp+var_84], eax
                lea     ecx, [ebp+var_90]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                cmp     [ebp+var_84], 0
                jz      short loc_1090DE84

loc_1090DE6A:                           ; CODE XREF: WinMain(x,x,x,x)+352↓j
                push    offset aUccMakeIsObsol ; "'ucc -make' is obsolete, use 'ucc make'"...
                mov     eax, ds:?GLog@@3PAVdnOutputDevice@@A ; dnOutputDevice * GLog
                mov     ecx, [eax]
                push    ecx
                call    ds:?Logf@dnOutputDevice@@QAAXPB_WZZ ; dnOutputDevice::Logf(wchar_t const *,...)
                add     esp, 8
                xor     edx, edx
                jnz     short loc_1090DE6A

loc_1090DE84:                           ; CODE XREF: WinMain(x,x,x,x)+338↑j
                push    offset aEnablefilelogg ; "EnableFileLogging"
                mov     eax, [ebp+var_1C]
                push    eax
                call    sub_10902850
                add     esp, 8
                test    eax, eax
                jz      short loc_1090DEA3
                mov     dword_10922648, 0

loc_1090DEA3:                           ; CODE XREF: WinMain(x,x,x,x)+367↑j
                push    offset aNofilelogging ; "nofilelogging"
                mov     ecx, [ebp+var_1C]
                push    ecx
                call    sub_10902850
                add     esp, 8
                test    eax, eax
                jnz     short loc_1090DEEA
                push    0
                lea     edx, [ebp+var_C]
                push    edx
                push    offset aDisablefilelog ; "DisableFileLogging"
                push    offset aEngineEngine ; "Engine.Engine"
                mov     eax, ds:?GConfig@@3PAVdnConfigCache@@A ; dnConfigCache * GConfig
                mov     ecx, [eax]
                mov     edx, ds:?GConfig@@3PAVdnConfigCache@@A ; dnConfigCache * GConfig
                mov     eax, [edx]
                mov     edx, [ecx]
                mov     ecx, eax
                mov     eax, [edx+4]
                call    eax
                test    eax, eax
                jz      short loc_1090DEF4
                cmp     [ebp+var_C], 0
                jz      short loc_1090DEF4

loc_1090DEEA:                           ; CODE XREF: WinMain(x,x,x,x)+386↑j
                mov     dword_10922648, 1

loc_1090DEF4:                           ; CODE XREF: WinMain(x,x,x,x)+3B2↑j
                                        ; WinMain(x,x,x,x)+3B8↑j
                mov     ecx, ds:GIsServer
                mov     dword ptr [ecx], 1
                push    offset aServer_0 ; "SERVER"
                lea     edx, [ebp+var_9C]
                push    edx
                call    sub_109027C0
                add     esp, 4
                mov     ecx, eax
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                call    sub_10902850
                add     esp, 8
                neg     eax
                sbb     eax, eax
                add     eax, 1
                mov     ecx, ds:GIsClient
                mov     [ecx], eax
                lea     ecx, [ebp+var_9C]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                mov     edx, ds:GIsEditor
                mov     dword ptr [edx], 0
                mov     eax, ds:?GIsScriptable@@3HA ; int GIsScriptable
                mov     dword ptr [eax], 1
                mov     ecx, ds:GIsClient
                cmp     dword ptr [ecx], 0
                jz      short loc_1090DF9E
                or      [ebp+var_144], 1
                push    offset aLazy    ; "LAZY"
                lea     edx, [ebp+var_A8]
                push    edx
                call    sub_109027C0
                add     esp, 4
                mov     ecx, eax
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                call    sub_10902850
                add     esp, 8
                test    eax, eax
                jnz     short loc_1090DF9E
                mov     [ebp+var_21D8], 0
                jmp     short loc_1090DFA8
; ---------------------------------------------------------------------------

loc_1090DF9E:                           ; CODE XREF: WinMain(x,x,x,x)+430↑j
                                        ; WinMain(x,x,x,x)+460↑j
                mov     [ebp+var_21D8], 1

loc_1090DFA8:                           ; CODE XREF: WinMain(x,x,x,x)+46C↑j
                mov     eax, ds:GLazyLoad
                mov     ecx, [ebp+var_21D8]
                mov     [eax], ecx
                mov     edx, [ebp+var_144]
                and     edx, 1
                jz      short loc_1090DFD3
                and     [ebp+var_144], 0FFFFFFFEh
                lea     ecx, [ebp+var_A8]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)

loc_1090DFD3:                           ; CODE XREF: WinMain(x,x,x,x)+48E↑j
                mov     eax, ds:GIsClient
                cmp     dword ptr [eax], 0
                jz      short loc_1090DFFE
                push    offset aLog_0   ; "LOG"
                mov     ecx, [ebp+var_1C]
                push    ecx
                call    sub_10902850
                add     esp, 8
                test    eax, eax
                jz      short loc_1090DFFE
                mov     [ebp+var_21DC], 1
                jmp     short loc_1090E008
; ---------------------------------------------------------------------------

loc_1090DFFE:                           ; CODE XREF: WinMain(x,x,x,x)+4AB↑j
                                        ; WinMain(x,x,x,x)+4C0↑j
                mov     [ebp+var_21DC], 0

loc_1090E008:                           ; CODE XREF: WinMain(x,x,x,x)+4CC↑j
                mov     edx, [ebp+var_21DC]
                mov     [ebp+var_10], edx
                lea     eax, [ebp+var_B4]
                push    eax
                call    sub_10902810
                add     esp, 4
                mov     ecx, eax
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                mov     [ebp+var_14C], eax
                mov     ecx, [ebp+var_14C]
                mov     [ebp+var_21E0], ecx
                mov     [ebp+var_21E4], offset GPackage ; "Launch"
                mov     edx, [ebp+var_21E4]
                mov     [ebp+var_21E8], edx

loc_1090E050:                           ; CODE XREF: WinMain(x,x,x,x)+566↓j
                mov     eax, [ebp+var_21E0]
                mov     cx, [eax]
                mov     [ebp+var_21EA], cx
                mov     edx, [ebp+var_21E4]
                mov     ax, [ebp+var_21EA]
                mov     [edx], ax
                mov     ecx, [ebp+var_21E0]
                add     ecx, 2
                mov     [ebp+var_21E0], ecx
                mov     edx, [ebp+var_21E4]
                add     edx, 2
                mov     [ebp+var_21E4], edx
                cmp     [ebp+var_21EA], 0
                jnz     short loc_1090E050
                lea     ecx, [ebp+var_B4]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                cmp     [ebp+var_10], 0
                jnz     short loc_1090E0E6
                push    offset aServer  ; "server"
                mov     eax, [ebp+var_1C]
                push    eax
                call    sub_10902850
                add     esp, 8
                test    eax, eax
                jnz     short loc_1090E0E6
                push    offset aTestrendev ; "TestRenDev"
                mov     ecx, [ebp+var_1C]
                push    ecx             ; int
                call    sub_10902180
                add     esp, 8
                test    eax, eax
                jnz     short loc_1090E0E6
                push    1Eh
                push    77h
                push    offset aLogoBik ; "Logo.bik"
                call    ds:?InitBinkSplash@@YAXPB_WKH@Z ; InitBinkSplash(wchar_t const *,ulong,int)
                add     esp, 0Ch

loc_1090E0E6:                           ; CODE XREF: WinMain(x,x,x,x)+578↑j
                                        ; WinMain(x,x,x,x)+58D↑j ...
                call    ds:?InitWindowing@@YAXXZ ; InitWindowing(void)
                call    ds:?SetGlobalExecHook@@YAXXZ ; SetGlobalExecHook(void)
                mov     edx, ds:GIsServer
                cmp     dword ptr [edx], 0
                jz      short loc_1090E145
                mov     eax, ds:GIsClient
                cmp     dword ptr [eax], 0
                jnz     short loc_1090E145
                mov     ecx, ds:GIsEditor
                cmp     dword ptr [ecx], 0
                jnz     short loc_1090E145
                mov     edx, ds:GIsUCC
                cmp     dword ptr [edx], 0
                jnz     short loc_1090E145
                mov     eax, ds:?GLog@@3PAVdnOutputDevice@@A ; dnOutputDevice * GLog
                mov     ecx, [eax]
                push    ecx
                push    offset aConfigserver ; "CONFIGSERVER"
                mov     edx, ds:?GExec@@3PAVFExec@@A ; FExec * GExec
                mov     eax, [edx]
                mov     ecx, ds:?GExec@@3PAVFExec@@A ; FExec * GExec
                mov     ecx, [ecx]
                mov     edx, [eax]
                mov     eax, [edx]
                call    eax
                jmp     loc_1090E2CC
; ---------------------------------------------------------------------------

loc_1090E145:                           ; CODE XREF: WinMain(x,x,x,x)+5CB↑j
                                        ; WinMain(x,x,x,x)+5D5↑j ...
                push    163h
                push    offset aLaunchCpp ; ".\\Launch.cpp"
                push    offset aGlogwindow ; "GLogWindow"
                push    2F4h
                call    sub_10901050
                add     esp, 10h
                mov     [ebp+var_BC], eax
                cmp     [ebp+var_BC], 0
                jz      short loc_1090E1B8
                push    0
                push    ecx
                mov     ecx, esp
                mov     [ebp+var_C0], esp
                push    1
                push    offset aGamelog ; "GameLog"
                call    ds:??0dnName@@QAE@PB_WW4EFindName@@@Z ; dnName::dnName(wchar_t const *,EFindName)
                push    offset unk_10921E44
                push    offset unk_10921E48
                mov     ecx, [ebp+var_BC]
                call    ds:??0WLog@@QAE@PB_WAAPAVdnArchive@@VdnName@@PAVWWindow@@@Z ; WLog::WLog(wchar_t const *,dnArchive * &,dnName,WWindow *)
                mov     ecx, [ebp+var_BC]
                mov     dword ptr [ecx], offset ??_7WLog@@6B@ ; const WLog::`vftable'
                mov     edx, [ebp+var_BC]
                mov     [ebp+var_21F0], edx
                jmp     short loc_1090E1C2
; ---------------------------------------------------------------------------

loc_1090E1B8:                           ; CODE XREF: WinMain(x,x,x,x)+63E↑j
                mov     [ebp+var_21F0], 0

loc_1090E1C2:                           ; CODE XREF: WinMain(x,x,x,x)+686↑j
                mov     eax, [ebp+var_21F0]
                mov     [ebp+var_B8], eax
                mov     ecx, ds:?GLogWindow@@3PAVWLog@@A ; WLog * GLogWindow
                mov     edx, [ebp+var_B8]
                mov     [ecx], edx
                push    0
                mov     eax, [ebp+var_10]
                push    eax
                mov     ecx, ds:?GLogWindow@@3PAVWLog@@A ; WLog * GLogWindow
                mov     ecx, [ecx]
                call    ds:?OpenWindow@WLog@@QAEXHH@Z ; WLog::OpenWindow(int,int)
                push    0
                push    offset GPackage ; "Launch"
                push    offset aStart   ; "Start"
                lea     edx, [ebp+var_CC]
                push    edx
                call    ds:?LocalizeGeneral@@YA?BVdnString@@PBDPB_W1@Z ; LocalizeGeneral(char const *,wchar_t const *,wchar_t const *)
                add     esp, 10h
                push    eax
                push    314h
                mov     eax, ds:?GLogWindow@@3PAVWLog@@A ; WLog * GLogWindow
                mov     ecx, [eax]
                add     ecx, 44h
                call    ds:?Log@dnOutputDevice@@QAEXW4EName@@ABVdnString@@@Z ; dnOutputDevice::Log(EName,dnString const &)
                lea     ecx, [ebp+var_CC]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                mov     ecx, ds:GIsClient
                cmp     dword ptr [ecx], 0
                jz      loc_1090E2CC
                mov     edx, ds:GUnicodeOS
                cmp     dword ptr [edx], 0
                jz      short loc_1090E26B
                push    1               ; hData
                push    offset String   ; "IsBrowser"
                mov     eax, ds:?GLogWindow@@3PAVWLog@@A ; WLog * GLogWindow
                mov     ecx, [eax]
                call    ds:??BWWindow@@QBEPAUHWND__@@XZ ; WWindow::operator HWND__ *(void)
                push    eax             ; hWnd
                call    ds:SetPropW
                mov     [ebp+var_21F4], eax
                jmp     short loc_1090E2CC
; ---------------------------------------------------------------------------

loc_1090E26B:                           ; CODE XREF: WinMain(x,x,x,x)+716↑j
                push    offset String   ; "IsBrowser"
                call    ds:?winGetSizeANSI@@YAHPB_W@Z ; winGetSizeANSI(wchar_t const *)
                add     esp, 4
                add     eax, 7
                and     eax, 0FFFFFFF8h
                call    __alloca_probe_16
                mov     [ebp+var_21F8], esp
                push    1               ; hData
                push    offset String   ; "IsBrowser"
                call    ds:?winGetSizeANSI@@YAHPB_W@Z ; winGetSizeANSI(wchar_t const *)
                add     esp, 4
                push    eax
                push    offset String   ; "IsBrowser"
                mov     ecx, [ebp+var_21F8]
                push    ecx
                call    ds:?winToANSI@@YAPADPADPB_WH@Z ; winToANSI(char *,wchar_t const *,int)
                add     esp, 0Ch
                push    eax             ; lpString
                mov     edx, ds:?GLogWindow@@3PAVWLog@@A ; WLog * GLogWindow
                mov     ecx, [edx]
                call    ds:??BWWindow@@QBEPAUHWND__@@XZ ; WWindow::operator HWND__ *(void)
                push    eax             ; hWnd
                call    ds:SetPropA
                mov     [ebp+var_21F4], eax

loc_1090E2CC:                           ; CODE XREF: WinMain(x,x,x,x)+610↑j
                                        ; WinMain(x,x,x,x)+707↑j ...
                call    sub_10901C10
                fstp    [ebp+var_8]
                push    77h
                call    ds:?InitEngine@@YAPAVUEngine@@K@Z ; InitEngine(ulong)
                add     esp, 4
                mov     [ebp+var_18], eax
                call    sub_10901BF0
                call    sub_10901C10
                fsub    [ebp+var_8]
                fstp    [ebp+var_8]
                cmp     [ebp+var_18], 0
                jz      loc_1090EB03
                push    0
                push    offset GPackage ; "Launch"
                push    offset aRun     ; "Run"
                lea     eax, [ebp+var_D8]
                push    eax
                call    ds:?LocalizeGeneral@@YA?BVdnString@@PBDPB_W1@Z ; LocalizeGeneral(char const *,wchar_t const *,wchar_t const *)
                add     esp, 10h
                push    eax
                push    314h
                mov     ecx, ds:?GLogWindow@@3PAVWLog@@A ; WLog * GLogWindow
                mov     ecx, [ecx]
                add     ecx, 44h
                call    ds:?Log@dnOutputDevice@@QAEXW4EName@@ABVdnString@@@Z ; dnOutputDevice::Log(EName,dnString const &)
                lea     ecx, [ebp+var_D8]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                call    ds:?ExitSplash@@YAXXZ ; ExitSplash(void)
                lea     ecx, [ebp+var_2C]
                call    ds:??0dnString@@QAE@XZ ; dnString::dnString(void)
                lea     edx, [ebp+var_2C]
                push    edx
                push    offset aExec    ; "EXEC="
                mov     eax, [ebp+var_1C]
                push    eax
                call    sub_10902840
                add     esp, 0Ch
                test    eax, eax
                jz      loc_1090E447
                lea     ecx, [ebp+var_2C]
                push    ecx
                lea     edx, [ebp+var_F0]
                push    edx
                push    offset aExec_0  ; "exec "
                lea     ecx, [ebp+var_E4]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
                mov     ecx, eax
                call    ds:??HdnString@@QBE?AV0@ABV0@@Z ; dnString::operator+(dnString const &)
                push    eax
                lea     ecx, [ebp+var_2C]
                call    ds:??4dnString@@QAEAAV0@ABV0@@Z ; dnString::operator=(dnString const &)
                lea     ecx, [ebp+var_F0]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                lea     ecx, [ebp+var_E4]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                mov     eax, [ebp+var_18]
                cmp     dword ptr [eax+44h], 0
                jz      loc_1090E447
                mov     ecx, [ebp+var_18]
                mov     ecx, [ecx+44h]
                add     ecx, 2Ch
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                test    eax, eax
                jz      short loc_1090E447
                push    0
                mov     edx, [ebp+var_18]
                mov     ecx, [edx+44h]
                add     ecx, 2Ch
                call    sub_10902AA0
                cmp     dword ptr [eax], 0
                jz      short loc_1090E447
                mov     eax, ds:?GLogWindow@@3PAVWLog@@A ; WLog * GLogWindow
                cmp     dword ptr [eax], 0
                jz      short loc_1090E3FF
                mov     ecx, ds:?GLogWindow@@3PAVWLog@@A ; WLog * GLogWindow
                mov     edx, [ecx]
                add     edx, 44h
                mov     [ebp+var_21FC], edx
                jmp     short loc_1090E409
; ---------------------------------------------------------------------------

loc_1090E3FF:                           ; CODE XREF: WinMain(x,x,x,x)+8BA↑j
                mov     [ebp+var_21FC], 0

loc_1090E409:                           ; CODE XREF: WinMain(x,x,x,x)+8CD↑j
                push    0
                mov     eax, [ebp+var_18]
                mov     ecx, [eax+44h]
                add     ecx, 2Ch
                call    sub_10902AA0
                mov     ecx, [eax]
                add     ecx, 2Ch
                mov     [ebp+var_2200], ecx
                mov     edx, [ebp+var_21FC]
                push    edx
                lea     ecx, [ebp+var_2C]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                mov     eax, [ebp+var_2200]
                mov     edx, [eax]
                mov     ecx, [ebp+var_2200]
                mov     eax, [edx]
                call    eax

loc_1090E447:                           ; CODE XREF: WinMain(x,x,x,x)+831↑j
                                        ; WinMain(x,x,x,x)+884↑j ...
                mov     ecx, ds:GIsEditor
                cmp     dword ptr [ecx], 0
                jnz     loc_1090EAE0
                mov     edx, ds:GIsUCC
                cmp     dword ptr [edx], 0
                jnz     loc_1090EAE0
                mov     eax, ds:GEngine
                mov     ecx, [eax]
                cmp     dword ptr [ecx+44h], 0
                jz      loc_1090EAE0
                mov     edx, ds:GEngine
                mov     eax, [edx]
                mov     ecx, [eax+44h]
                add     ecx, 2Ch
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                test    eax, eax
                jz      loc_1090EAE0
                mov     ecx, ds:GEngine
                mov     edx, [ecx]
                mov     eax, [edx+80h]
                mov     [ebp+var_217C], eax
                mov     ecx, ds:?g_ActorSemaphore@@3VdnThread_Semaphore@@A ; dnThread_Semaphore g_ActorSemaphore
                call    ds:?Lock@dnThread_Semaphore@@QAEXXZ ; dnThread_Semaphore::Lock(void)
                push    0
                mov     ecx, [ebp+var_217C]
                add     ecx, 2Ch
                call    sub_1090ECD0
                mov     ecx, [eax]
                mov     [ebp+var_2178], ecx
                mov     ecx, ds:?g_ActorSemaphore@@3VdnThread_Semaphore@@A ; dnThread_Semaphore g_ActorSemaphore
                call    ds:?UnLock@dnThread_Semaphore@@QAEXXZ ; dnThread_Semaphore::UnLock(void)
                mov     ecx, [ebp+var_2178]
                call    ds:?GetLocalPlayerPawn@ALevelInfo@@QAEPAVAPlayerPawn@@XZ ; ALevelInfo::GetLocalPlayerPawn(void)
                mov     [ebp+var_30], eax
                push    0
                mov     edx, ds:GEngine
                mov     eax, [edx]
                mov     ecx, [eax+44h]
                add     ecx, 2Ch
                call    sub_10902AA0
                mov     ecx, [eax]
                mov     [ebp+var_38], ecx
                push    0
                mov     edx, ds:GEngine
                mov     eax, [edx]
                mov     ecx, [eax+44h]
                add     ecx, 2Ch
                call    sub_10902AA0
                mov     ecx, [eax]
                mov     edx, [ecx+34h]
                mov     [ebp+var_34], edx
                cmp     [ebp+var_38], 0
                jz      loc_1090EAE0
                cmp     [ebp+var_34], 0
                jz      loc_1090EAE0
                cmp     [ebp+var_30], 0
                jz      loc_1090EAE0
                mov     eax, ds:GEngine
                mov     ecx, [eax]
                mov     edx, [ecx+80h]
                mov     [ebp+var_2184], edx
                mov     ecx, ds:?g_ActorSemaphore@@3VdnThread_Semaphore@@A ; dnThread_Semaphore g_ActorSemaphore
                call    ds:?Lock@dnThread_Semaphore@@QAEXXZ ; dnThread_Semaphore::Lock(void)
                push    0
                mov     ecx, [ebp+var_2184]
                add     ecx, 2Ch
                call    sub_1090ECD0
                mov     eax, [eax]
                mov     [ebp+var_2180], eax
                mov     ecx, ds:?g_ActorSemaphore@@3VdnThread_Semaphore@@A ; dnThread_Semaphore g_ActorSemaphore
                call    ds:?UnLock@dnThread_Semaphore@@QAEXXZ ; dnThread_Semaphore::UnLock(void)
                mov     ecx, [ebp+var_2180]
                call    ds:?GetLocalPlayerPawn@ALevelInfo@@QAEPAVAPlayerPawn@@XZ ; ALevelInfo::GetLocalPlayerPawn(void)
                mov     [ebp+var_50], eax
                cmp     [ebp+var_50], 0
                jz      loc_1090E6A5
                push    1
                push    0
                push    0
                push    0
                push    1
                mov     ecx, [ebp+var_50]
                call    ds:?GetClass@UObject@@QBEPAVUClass@@XZ ; UObject::GetClass(void)
                mov     ecx, eax
                call    ds:?GetDefaultObject@UClass@@QAEPAVUObject@@XZ ; UClass::GetDefaultObject(void)
                mov     ecx, eax
                call    ds:?LoadConfig@UObject@@QAEXHPAVUClass@@PB_WHH@Z ; UObject::LoadConfig(int,UClass *,wchar_t const *,int,int)
                push    0
                push    0
                push    0
                push    0
                push    0
                mov     ecx, [ebp+var_50]
                call    ds:?LoadConfig@UObject@@QAEXHPAVUClass@@PB_WHH@Z ; UObject::LoadConfig(int,UClass *,wchar_t const *,int,int)
                lea     ecx, [ebp+var_5C]
                call    sub_109058B0
                jmp     short loc_1090E5DE
; ---------------------------------------------------------------------------

loc_1090E5D6:                           ; CODE XREF: WinMain(x,x,x,x):loc_1090E6A0↓j
                lea     ecx, [ebp+var_5C]
                call    sub_10904EB0

loc_1090E5DE:                           ; CODE XREF: WinMain(x,x,x,x)+AA4↑j
                lea     ecx, [ebp+var_5C]
                call    sub_109028E0
                test    eax, eax
                jz      loc_1090E6A5
                lea     ecx, [ebp+var_5C]
                call    sub_10905060
                mov     esi, eax
                mov     ecx, [ebp+var_50]
                call    ds:?GetClass@UObject@@QBEPAVUClass@@XZ ; UObject::GetClass(void)
                cmp     esi, eax
                jz      loc_1090E6A0
                mov     ecx, [ebp+var_50]
                call    ds:?GetClass@UObject@@QBEPAVUClass@@XZ ; UObject::GetClass(void)
                mov     [ebp+var_21C0], eax
                lea     ecx, [ebp+var_5C]
                call    sub_10905070
                mov     [ebp+var_21BC], eax
                mov     ecx, [ebp+var_21BC]
                mov     [ebp+var_21B8], ecx
                jmp     short loc_1090E646
; ---------------------------------------------------------------------------

loc_1090E634:                           ; CODE XREF: WinMain(x,x,x,x):loc_1090E669↓j
                mov     ecx, [ebp+var_21B8]
                call    ds:?GetSuperStruct@UStruct@@QBEPAV1@XZ ; UStruct::GetSuperStruct(void)
                mov     [ebp+var_21B8], eax

loc_1090E646:                           ; CODE XREF: WinMain(x,x,x,x)+B02↑j
                cmp     [ebp+var_21B8], 0
                jz      short loc_1090E66B
                mov     edx, [ebp+var_21B8]
                cmp     edx, [ebp+var_21C0]
                jnz     short loc_1090E669
                mov     [ebp+var_21C4], 1
                jmp     short loc_1090E675
; ---------------------------------------------------------------------------

loc_1090E669:                           ; CODE XREF: WinMain(x,x,x,x)+B2B↑j
                jmp     short loc_1090E634
; ---------------------------------------------------------------------------

loc_1090E66B:                           ; CODE XREF: WinMain(x,x,x,x)+B1D↑j
                mov     [ebp+var_21C4], 0

loc_1090E675:                           ; CODE XREF: WinMain(x,x,x,x)+B37↑j
                cmp     [ebp+var_21C4], 0
                jz      short loc_1090E6A0
                push    0
                push    0
                push    0
                push    0
                push    0
                lea     ecx, [ebp+var_5C]
                call    sub_10905070
                mov     ecx, eax
                call    ds:?GetDefaultObject@UClass@@QAEPAVUObject@@XZ ; UClass::GetDefaultObject(void)
                mov     ecx, eax
                call    ds:?LoadConfig@UObject@@QAEXHPAVUClass@@PB_WHH@Z ; UObject::LoadConfig(int,UClass *,wchar_t const *,int,int)

loc_1090E6A0:                           ; CODE XREF: WinMain(x,x,x,x)+AD3↑j
                                        ; WinMain(x,x,x,x)+B4C↑j
                jmp     loc_1090E5D6
; ---------------------------------------------------------------------------

loc_1090E6A5:                           ; CODE XREF: WinMain(x,x,x,x)+A60↑j
                                        ; WinMain(x,x,x,x)+AB8↑j
                movss   xmm0, ds:dword_10913428
                movss   [ebp+var_3C], xmm0
                push    offset aSystem  ; "system"
                lea     eax, [ebp+var_3C]
                push    eax
                push    offset aDialogvolume ; "DialogVolume"
                push    offset aMilesaudioMile ; "MilesAudio.MilesAudioSubsystem"
                mov     ecx, ds:?GConfig@@3PAVdnConfigCache@@A ; dnConfigCache * GConfig
                mov     edx, [ecx]
                mov     eax, ds:?GConfig@@3PAVdnConfigCache@@A ; dnConfigCache * GConfig
                mov     ecx, [eax]
                mov     edx, [edx]
                mov     eax, [edx+0Ch]
                call    eax
                fld     [ebp+var_3C]
                sub     esp, 8
                fstp    qword ptr [esp+2228h+var_2228]
                push    offset aSetIniEngineEn ; "set ini:Engine.Engine.AudioDevice Dialo"...
                lea     ecx, [ebp+var_48]
                push    ecx
                call    ds:?Printf@dnString@@SA?AV1@PB_WZZ ; dnString::Printf(wchar_t const *,...)
                add     esp, 10h
                cmp     [ebp+var_34], 0
                jz      short loc_1090E70A
                mov     edx, [ebp+var_34]
                add     edx, 28h
                mov     [ebp+var_2204], edx
                jmp     short loc_1090E714
; ---------------------------------------------------------------------------

loc_1090E70A:                           ; CODE XREF: WinMain(x,x,x,x)+BCA↑j
                mov     [ebp+var_2204], 0

loc_1090E714:                           ; CODE XREF: WinMain(x,x,x,x)+BD8↑j
                mov     eax, [ebp+var_2204]
                push    eax
                lea     ecx, [ebp+var_48]
                call    ds:?GetPtr@dnString@@QAEPB_WXZ ; dnString::GetPtr(void)
                push    eax
                mov     ecx, [ebp+var_38]
                add     ecx, 2Ch
                mov     edx, [ebp+var_38]
                mov     eax, [edx+2Ch]
                mov     edx, [eax]
                call    edx
                push    offset aSystem  ; "system"
                lea     eax, [ebp+var_3C]
                push    eax
                push    offset aSoundvolume ; "SoundVolume"
                push    offset aMilesaudioMile ; "MilesAudio.MilesAudioSubsystem"
                mov     ecx, ds:?GConfig@@3PAVdnConfigCache@@A ; dnConfigCache * GConfig
                mov     edx, [ecx]
                mov     eax, ds:?GConfig@@3PAVdnConfigCache@@A ; dnConfigCache * GConfig
                mov     ecx, [eax]
                mov     edx, [edx]
                mov     eax, [edx+0Ch]
                call    eax
                fld     [ebp+var_3C]
                sub     esp, 8
                fstp    qword ptr [esp+2228h+var_2228]
                push    offset aSetIniEngineEn_0 ; "set ini:Engine.Engine.AudioDevice Sound"...
                lea     ecx, [ebp+var_FC]
                push    ecx
                call    ds:?Printf@dnString@@SA?AV1@PB_WZZ ; dnString::Printf(wchar_t const *,...)
                add     esp, 10h
                push    eax
                lea     ecx, [ebp+var_48]
                call    ds:??4dnString@@QAEAAV0@ABV0@@Z ; dnString::operator=(dnString const &)
                lea     ecx, [ebp+var_FC]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                cmp     [ebp+var_34], 0
                jz      short loc_1090E7A6
                mov     edx, [ebp+var_34]
                add     edx, 28h
                mov     [ebp+var_2208], edx
                jmp     short loc_1090E7B0
; ---------------------------------------------------------------------------

loc_1090E7A6:                           ; CODE XREF: WinMain(x,x,x,x)+C66↑j
                mov     [ebp+var_2208], 0

loc_1090E7B0:                           ; CODE XREF: WinMain(x,x,x,x)+C74↑j
                mov     eax, [ebp+var_2208]
                push    eax
                lea     ecx, [ebp+var_48]
                call    ds:?GetPtr@dnString@@QAEPB_WXZ ; dnString::GetPtr(void)
                push    eax
                mov     ecx, [ebp+var_38]
                add     ecx, 2Ch
                mov     edx, [ebp+var_38]
                mov     eax, [edx+2Ch]
                mov     edx, [eax]
                call    edx
                push    offset aSystem  ; "system"
                lea     eax, [ebp+var_3C]
                push    eax
                push    offset aMusicvolume ; "MusicVolume"
                push    offset aMilesaudioMile ; "MilesAudio.MilesAudioSubsystem"
                mov     ecx, ds:?GConfig@@3PAVdnConfigCache@@A ; dnConfigCache * GConfig
                mov     edx, [ecx]
                mov     eax, ds:?GConfig@@3PAVdnConfigCache@@A ; dnConfigCache * GConfig
                mov     ecx, [eax]
                mov     edx, [edx]
                mov     eax, [edx+0Ch]
                call    eax
                fld     [ebp+var_3C]
                sub     esp, 8
                fstp    qword ptr [esp+2228h+var_2228]
                push    offset aSetIniEngineEn_1 ; "set ini:Engine.Engine.AudioDevice Music"...
                lea     ecx, [ebp+var_108]
                push    ecx
                call    ds:?Printf@dnString@@SA?AV1@PB_WZZ ; dnString::Printf(wchar_t const *,...)
                add     esp, 10h
                push    eax
                lea     ecx, [ebp+var_48]
                call    ds:??4dnString@@QAEAAV0@ABV0@@Z ; dnString::operator=(dnString const &)
                lea     ecx, [ebp+var_108]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                cmp     [ebp+var_34], 0
                jz      short loc_1090E842
                mov     edx, [ebp+var_34]
                add     edx, 28h
                mov     [ebp+var_220C], edx
                jmp     short loc_1090E84C
; ---------------------------------------------------------------------------

loc_1090E842:                           ; CODE XREF: WinMain(x,x,x,x)+D02↑j
                mov     [ebp+var_220C], 0

loc_1090E84C:                           ; CODE XREF: WinMain(x,x,x,x)+D10↑j
                mov     eax, [ebp+var_220C]
                push    eax
                lea     ecx, [ebp+var_48]
                call    ds:?GetPtr@dnString@@QAEPB_WXZ ; dnString::GetPtr(void)
                push    eax
                mov     ecx, [ebp+var_38]
                add     ecx, 2Ch
                mov     edx, [ebp+var_38]
                mov     eax, [edx+2Ch]
                mov     edx, [eax]
                call    edx
                push    offset aSystem  ; "system"
                lea     eax, [ebp+var_3C]
                push    eax
                push    offset aBrightness ; "Brightness"
                push    offset aEngineWindowsc ; "Engine.WindowsClient"
                mov     ecx, ds:?GConfig@@3PAVdnConfigCache@@A ; dnConfigCache * GConfig
                mov     edx, [ecx]
                mov     eax, ds:?GConfig@@3PAVdnConfigCache@@A ; dnConfigCache * GConfig
                mov     ecx, [eax]
                mov     edx, [edx]
                mov     eax, [edx+0Ch]
                call    eax
                fld     [ebp+var_3C]
                sub     esp, 8
                fstp    qword ptr [esp+2228h+var_2228]
                push    offset aSetIniEngineEn_2 ; "set ini:Engine.Engine.ViewportManager B"...
                lea     ecx, [ebp+var_114]
                push    ecx
                call    ds:?Printf@dnString@@SA?AV1@PB_WZZ ; dnString::Printf(wchar_t const *,...)
                add     esp, 10h
                push    eax
                lea     ecx, [ebp+var_48]
                call    ds:??4dnString@@QAEAAV0@ABV0@@Z ; dnString::operator=(dnString const &)
                lea     ecx, [ebp+var_114]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                cmp     [ebp+var_34], 0
                jz      short loc_1090E8DE
                mov     edx, [ebp+var_34]
                add     edx, 28h
                mov     [ebp+var_2210], edx
                jmp     short loc_1090E8E8
; ---------------------------------------------------------------------------

loc_1090E8DE:                           ; CODE XREF: WinMain(x,x,x,x)+D9E↑j
                mov     [ebp+var_2210], 0

loc_1090E8E8:                           ; CODE XREF: WinMain(x,x,x,x)+DAC↑j
                mov     eax, [ebp+var_2210]
                push    eax
                lea     ecx, [ebp+var_48]
                call    ds:?GetPtr@dnString@@QAEPB_WXZ ; dnString::GetPtr(void)
                push    eax
                mov     ecx, [ebp+var_38]
                add     ecx, 2Ch
                mov     edx, [ebp+var_38]
                mov     eax, [edx+2Ch]
                mov     edx, [eax]
                call    edx
                mov     [ebp+var_54], 0
                push    offset aUserIni ; "User.ini"
                lea     eax, [ebp+var_54]
                push    eax
                push    offset aPrefabconfigin ; "PrefabConfigIndex"
                push    offset aEnginePlayerpa ; "Engine.PlayerPawn"
                mov     ecx, ds:?GConfig@@3PAVdnConfigCache@@A ; dnConfigCache * GConfig
                mov     edx, [ecx]
                mov     eax, ds:?GConfig@@3PAVdnConfigCache@@A ; dnConfigCache * GConfig
                mov     ecx, [eax]
                mov     edx, [edx]
                mov     eax, [edx+8]
                call    eax
                mov     ecx, [ebp+var_54]
                push    ecx             ; int
                call    ?UpdateControllerSettingsViaPrefab@@YAXH@Z ; UpdateControllerSettingsViaPrefab(int)
                add     esp, 4
                mov     [ebp+var_4C], 0
                push    offset aUserIni ; "User.ini"
                lea     edx, [ebp+var_4C]
                push    edx
                push    offset aBswapjoysticks ; "bSwapJoysticks"
                push    offset aEnginePlayerpa ; "Engine.PlayerPawn"
                mov     eax, ds:?GConfig@@3PAVdnConfigCache@@A ; dnConfigCache * GConfig
                mov     ecx, [eax]
                mov     edx, ds:?GConfig@@3PAVdnConfigCache@@A ; dnConfigCache * GConfig
                mov     eax, [edx]
                mov     edx, [ecx]
                mov     ecx, eax
                mov     eax, [edx+4]
                call    eax
                cmp     [ebp+var_4C], 0
                jz      loc_1090EAD7
                lea     ecx, [ebp+var_74]
                call    ds:??0dnString@@QAE@XZ ; dnString::dnString(void)
                lea     ecx, [ebp+var_68]
                call    ds:??0dnString@@QAE@XZ ; dnString::dnString(void)
                push    offset aUserIni ; "User.ini"
                lea     ecx, [ebp+var_74]
                push    ecx
                push    offset aJoy7    ; "joy7"
                push    offset aEngineInput ; "Engine.Input"
                mov     edx, ds:?GConfig@@3PAVdnConfigCache@@A ; dnConfigCache * GConfig
                mov     eax, [edx]
                mov     ecx, ds:?GConfig@@3PAVdnConfigCache@@A ; dnConfigCache * GConfig
                mov     ecx, [ecx]
                mov     edx, [eax]
                mov     eax, [edx+10h]
                call    eax
                push    offset aUserIni ; "User.ini"
                lea     ecx, [ebp+var_68]
                push    ecx
                push    offset aJoy8    ; "joy8"
                push    offset aEngineInput ; "Engine.Input"
                mov     edx, ds:?GConfig@@3PAVdnConfigCache@@A ; dnConfigCache * GConfig
                mov     eax, [edx]
                mov     ecx, ds:?GConfig@@3PAVdnConfigCache@@A ; dnConfigCache * GConfig
                mov     ecx, [ecx]
                mov     edx, [eax]
                mov     eax, [edx+10h]
                call    eax
                lea     ecx, [ebp+var_68]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                push    offset aSetnosaveInput ; "setnosave Input joy7 %s"
                lea     ecx, [ebp+var_120]
                push    ecx
                call    ds:?Printf@dnString@@SA?AV1@PB_WZZ ; dnString::Printf(wchar_t const *,...)
                add     esp, 0Ch
                push    eax
                lea     ecx, [ebp+var_48]
                call    ds:??4dnString@@QAEAAV0@ABV0@@Z ; dnString::operator=(dnString const &)
                lea     ecx, [ebp+var_120]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                mov     edx, ds:?GLog@@3PAVdnOutputDevice@@A ; dnOutputDevice * GLog
                mov     eax, [edx]
                push    eax
                lea     ecx, [ebp+var_48]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                mov     ecx, ds:GEngine
                mov     edx, [ecx]
                mov     eax, ds:GEngine
                mov     ecx, [eax]
                add     ecx, 28h
                mov     edx, [edx+28h]
                mov     eax, [edx]
                call    eax
                lea     ecx, [ebp+var_74]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                push    offset aSetnosaveInput_0 ; "setnosave Input joy8 %s"
                lea     ecx, [ebp+var_12C]
                push    ecx
                call    ds:?Printf@dnString@@SA?AV1@PB_WZZ ; dnString::Printf(wchar_t const *,...)
                add     esp, 0Ch
                push    eax
                lea     ecx, [ebp+var_48]
                call    ds:??4dnString@@QAEAAV0@ABV0@@Z ; dnString::operator=(dnString const &)
                lea     ecx, [ebp+var_12C]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                mov     edx, ds:?GLog@@3PAVdnOutputDevice@@A ; dnOutputDevice * GLog
                mov     eax, [edx]
                push    eax
                lea     ecx, [ebp+var_48]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                mov     ecx, ds:GEngine
                mov     edx, [ecx]
                mov     eax, ds:GEngine
                mov     ecx, [eax]
                add     ecx, 28h
                mov     edx, [edx+28h]
                mov     eax, [edx]
                call    eax
                mov     ecx, [ebp+var_38]
                cmp     dword ptr [ecx+5Ch], 0
                jz      short loc_1090EAC5
                mov     edx, [ebp+var_38]
                mov     eax, [edx+5Ch]
                mov     ecx, [ebp+var_38]
                mov     ecx, [ecx+5Ch]
                mov     edx, [eax]
                mov     eax, [edx+64h]
                call    eax

loc_1090EAC5:                           ; CODE XREF: WinMain(x,x,x,x)+F80↑j
                lea     ecx, [ebp+var_68]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                lea     ecx, [ebp+var_74]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)

loc_1090EAD7:                           ; CODE XREF: WinMain(x,x,x,x)+E4B↑j
                lea     ecx, [ebp+var_48]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)

loc_1090EAE0:                           ; CODE XREF: WinMain(x,x,x,x)+920↑j
                                        ; WinMain(x,x,x,x)+92F↑j ...
                mov     ecx, ds:GIsRequestingExit
                cmp     dword ptr [ecx], 0
                jnz     short loc_1090EAFA
                push    0
                mov     edx, [ebp+var_18]
                push    edx
                call    ds:?MainLoop@@YAXPAVUEngine@@K@Z ; MainLoop(UEngine *,ulong)
                add     esp, 8

loc_1090EAFA:                           ; CODE XREF: WinMain(x,x,x,x)+FB9↑j
                lea     ecx, [ebp+var_2C]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)

loc_1090EB03:                           ; CODE XREF: WinMain(x,x,x,x)+7C6↑j
                call    ds:?Shutdown@DRM@@YA_NXZ ; DRM::Shutdown(void)
                push    0
                push    0
                push    offset aRunningIni ; "Running.ini"
                mov     eax, ds:?GFileManager@@3PAVdnFileMgr@@A ; dnFileMgr * GFileManager
                mov     ecx, [eax]
                mov     edx, ds:?GFileManager@@3PAVdnFileMgr@@A ; dnFileMgr * GFileManager
                mov     eax, [edx]
                mov     edx, [ecx]
                mov     ecx, eax
                mov     eax, [edx+24h]
                call    eax
                mov     ecx, ds:GUnicodeOS
                cmp     dword ptr [ecx], 0
                jz      short loc_1090EB57
                push    offset String   ; "IsBrowser"
                mov     edx, ds:?GLogWindow@@3PAVWLog@@A ; WLog * GLogWindow
                mov     ecx, [edx]
                call    ds:??BWWindow@@QBEPAUHWND__@@XZ ; WWindow::operator HWND__ *(void)
                push    eax             ; hWnd
                call    ds:RemovePropW
                mov     [ebp+var_2214], eax
                jmp     short loc_1090EBB6
; ---------------------------------------------------------------------------

loc_1090EB57:                           ; CODE XREF: WinMain(x,x,x,x)+1003↑j
                push    offset String   ; "IsBrowser"
                call    ds:?winGetSizeANSI@@YAHPB_W@Z ; winGetSizeANSI(wchar_t const *)
                add     esp, 4
                add     eax, 7
                and     eax, 0FFFFFFF8h
                call    __alloca_probe_16
                mov     [ebp+var_2218], esp
                push    offset String   ; "IsBrowser"
                call    ds:?winGetSizeANSI@@YAHPB_W@Z ; winGetSizeANSI(wchar_t const *)
                add     esp, 4
                push    eax
                push    offset String   ; "IsBrowser"
                mov     eax, [ebp+var_2218]
                push    eax
                call    ds:?winToANSI@@YAPADPADPB_WH@Z ; winToANSI(char *,wchar_t const *,int)
                add     esp, 0Ch
                push    eax             ; lpString
                mov     ecx, ds:?GLogWindow@@3PAVWLog@@A ; WLog * GLogWindow
                mov     ecx, [ecx]
                call    ds:??BWWindow@@QBEPAUHWND__@@XZ ; WWindow::operator HWND__ *(void)
                push    eax             ; hWnd
                call    ds:RemovePropA
                mov     [ebp+var_2214], eax

loc_1090EBB6:                           ; CODE XREF: WinMain(x,x,x,x)+1025↑j
                push    0
                push    offset GPackage ; "Launch"
                push    offset aExit    ; "Exit"
                lea     edx, [ebp+var_138]
                push    edx
                call    ds:?LocalizeGeneral@@YA?BVdnString@@PBDPB_W1@Z ; LocalizeGeneral(char const *,wchar_t const *,wchar_t const *)
                add     esp, 10h
                push    eax
                push    314h
                mov     eax, ds:?GLogWindow@@3PAVWLog@@A ; WLog * GLogWindow
                mov     ecx, [eax]
                add     ecx, 44h
                call    ds:?Log@dnOutputDevice@@QAEXW4EName@@ABVdnString@@@Z ; dnOutputDevice::Log(EName,dnString const &)
                lea     ecx, [ebp+var_138]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                mov     ecx, ds:?GLogWindow@@3PAVWLog@@A ; WLog * GLogWindow
                mov     edx, [ecx]
                mov     [ebp+var_140], edx
                mov     eax, [ebp+var_140]
                mov     [ebp+var_13C], eax
                cmp     [ebp+var_13C], 0
                jz      short loc_1090EC34
                push    1
                mov     ecx, [ebp+var_13C]
                mov     edx, [ecx]
                mov     ecx, [ebp+var_13C]
                mov     eax, [edx+4]
                call    eax
                mov     [ebp+var_221C], eax
                jmp     short loc_1090EC3E
; ---------------------------------------------------------------------------

loc_1090EC34:                           ; CODE XREF: WinMain(x,x,x,x)+10E5↑j
                mov     [ebp+var_221C], 0

loc_1090EC3E:                           ; CODE XREF: WinMain(x,x,x,x)+1102↑j
                call    ds:?appPreExit@@YAXXZ ; appPreExit(void)
                mov     ecx, ds:?GIsGuarded@@3HA ; int GIsGuarded
                mov     dword ptr [ecx], 0
                call    ds:?appExit@@YAXXZ ; appExit(void)
                push    0
                call    _SetAssertionFailedHandler
                add     esp, 4
                push    0
                call    _SetAssertionFailedExHandler
                add     esp, 4
                push    0
                call    _SetEnterSafeModeHandler
                add     esp, 4
                push    0
                call    ds:_SetCrashHandlerFilter@4 ; SetCrashHandlerFilter(x)
                mov     edx, ds:GIsStarted
                mov     dword ptr [edx], 0
                mov     eax, [ebp+var_14]

loc_1090EC8B:                           ; CODE XREF: WinMain(x,x,x,x)+282↑j
                                        ; WinMain(x,x,x,x)+2B1↑j
                lea     esp, [ebp-2220h]
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn    10h
_WinMain@16     endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1090ECA0    proc near               ; DATA XREF: .rdata:10913F28↓o

arg_0           = byte ptr  8

                push    ebp
                mov     ebp, esp
                push    esi
                mov     esi, ecx
                call    ds:??1WLog@@UAE@XZ ; WLog::~WLog(void)
                test    [ebp+arg_0], 1
                jz      short loc_1090ECC2
                call    ds:?GetMalloc@@YAPAVFMalloc@@XZ ; GetMalloc(void)
                mov     edx, [eax]
                mov     ecx, eax
                mov     eax, [edx+10h]
                push    esi
                call    eax

loc_1090ECC2:                           ; CODE XREF: sub_1090ECA0+10↑j
                mov     eax, esi
                pop     esi
                pop     ebp
                retn    4
sub_1090ECA0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_1090ECD0    proc near               ; CODE XREF: WinMain(x,x,x,x)+98D↑p
                                        ; WinMain(x,x,x,x)+A34↑p

arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                mov     eax, [ecx]
                mov     ecx, [ebp+arg_0]
                lea     eax, [eax+ecx*4]
                pop     ebp
                retn    4
sub_1090ECD0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

; int __stdcall sub_1090ECE0(wchar_t *Str1, int)
sub_1090ECE0    proc near               ; DATA XREF: .rdata:1091352C↓o

var_114         = dword ptr -114h
var_110         = dword ptr -110h
var_10C         = dword ptr -10Ch
var_108         = dword ptr -108h
var_104         = dword ptr -104h
var_C8          = dword ptr -0C8h
var_BC          = byte ptr -0BCh
var_B0          = byte ptr -0B0h
var_A4          = byte ptr -0A4h
var_98          = byte ptr -98h
var_8C          = byte ptr -8Ch
var_80          = byte ptr -80h
var_74          = byte ptr -74h
var_68          = byte ptr -68h
var_5C          = byte ptr -5Ch
var_50          = byte ptr -50h
var_44          = byte ptr -44h
var_38          = dword ptr -38h
var_34          = dword ptr -34h
var_30          = dword ptr -30h
var_24          = dword ptr -24h
var_18          = byte ptr -18h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
Str1            = dword ptr  8
arg_4           = dword ptr  0Ch

; FUNCTION CHUNK AT 10911690 SIZE 00000096 BYTES

; __unwind { // SEH_1090ECE0
                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_1090ECE0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 108h
                mov     [ebp+var_104], ecx
                lea     ecx, [ebp+var_24]
                call    sub_10902990
;   try {
                mov     [ebp+var_4], 0
                call    ds:?GetLanguage@UObject@@SAPB_WXZ ; UObject::GetLanguage(void)
                push    eax
                lea     ecx, [ebp+var_18]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
;   } // starts at 1090ED0C
;   try {
                mov     byte ptr [ebp+var_4], 1
                push    0
                push    0
                push    1
                push    0
                push    offset aSystemLocaliza_0 ; "../System/Localization/*"
                lea     eax, [ebp+var_30]
                push    eax
                mov     ecx, ds:?GFileManager@@3PAVdnFileMgr@@A ; dnFileMgr * GFileManager
                mov     edx, [ecx]
                mov     eax, ds:?GFileManager@@3PAVdnFileMgr@@A ; dnFileMgr * GFileManager
                mov     ecx, [eax]
                mov     edx, [edx]
                mov     eax, [edx+40h]
                call    eax
;   } // starts at 1090ED23
;   try {
                mov     byte ptr [ebp+var_4], 2
                mov     [ebp+var_34], 0
                jmp     short loc_1090ED64
; ---------------------------------------------------------------------------

loc_1090ED5B:                           ; CODE XREF: sub_1090ECE0:loc_1090EDA9↓j
                                        ; sub_1090ECE0+3AE↓j
                mov     ecx, [ebp+var_34]
                add     ecx, 1
                mov     [ebp+var_34], ecx

loc_1090ED64:                           ; CODE XREF: sub_1090ECE0+79↑j
                lea     ecx, [ebp+var_30]
                call    ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
                cmp     [ebp+var_34], eax
                jge     loc_1090F093
                mov     edx, [ebp+var_34]
                push    edx
                lea     ecx, [ebp+var_30]
                call    sub_109029A0
                mov     [ebp+var_38], eax
                cmp     [ebp+arg_4], 0
                jz      short loc_1090EDAB
                lea     ecx, [ebp+var_18]
                call    ds:?Len@dnString@@QBEHXZ ; dnString::Len(void)
                test    eax, eax
                jz      short loc_1090EDA9
                mov     eax, [ebp+var_38]
                push    eax
                lea     ecx, [ebp+var_18]
                call    ds:??9dnString@@QBEHABV0@@Z ; dnString::operator!=(dnString const &)
                test    eax, eax
                jz      short loc_1090EDAB

loc_1090EDA9:                           ; CODE XREF: sub_1090ECE0+B6↑j
                jmp     short loc_1090ED5B
; ---------------------------------------------------------------------------

loc_1090EDAB:                           ; CODE XREF: sub_1090ECE0+A9↑j
                                        ; sub_1090ECE0+C7↑j
                lea     ecx, [ebp+var_24]
                call    ds:?Clear@dnArrayBase@@QAEXXZ ; dnArrayBase::Clear(void)
                push    offset aSystemMapsIni ; "../System/Maps.ini"
                lea     ecx, [ebp+var_50]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
;   } // starts at 1090ED4E
;   try {
                mov     byte ptr [ebp+var_4], 3
                lea     ecx, [ebp+var_50]
                push    ecx
                lea     ecx, [ebp+var_24]
                call    sub_10906620
;   } // starts at 1090EDC2
;   try {
                mov     byte ptr [ebp+var_4], 2
                lea     ecx, [ebp+var_50]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                push    offset aSystemChalleng ; "../System/ChallengeInfo.ini"
                lea     ecx, [ebp+var_5C]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
;   } // starts at 1090EDD2
;   try {
                mov     byte ptr [ebp+var_4], 4
                lea     edx, [ebp+var_5C]
                push    edx
                lea     ecx, [ebp+var_24]
                call    sub_10906620
;   } // starts at 1090EDED
;   try {
                mov     byte ptr [ebp+var_4], 2
                lea     ecx, [ebp+var_5C]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                push    offset aXbox    ; "xbox"
                mov     eax, [ebp+Str1]
                push    eax             ; Str1
                call    ds:_wcsicmp
                add     esp, 8
                test    eax, eax
                jnz     short loc_1090EE7B
                push    offset aSystemDefuserx ; "../System/defuserxbox.ini"
                lea     ecx, [ebp+var_68]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
;   } // starts at 1090EDFD
;   try {
                mov     byte ptr [ebp+var_4], 5
                lea     ecx, [ebp+var_68]
                push    ecx
                lea     ecx, [ebp+var_24]
                call    sub_10906620
;   } // starts at 1090EE2E
;   try {
                mov     byte ptr [ebp+var_4], 2
                lea     ecx, [ebp+var_68]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                push    offset aSystemDefaultx ; "../System/defaultxbox.ini"
                lea     ecx, [ebp+var_74]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
;   } // starts at 1090EE3E
;   try {
                mov     byte ptr [ebp+var_4], 6
                lea     edx, [ebp+var_74]
                push    edx
                lea     ecx, [ebp+var_24]
                call    sub_10906620
;   } // starts at 1090EE59
;   try {
                mov     byte ptr [ebp+var_4], 2
                lea     ecx, [ebp+var_74]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                jmp     loc_1090EF5A
; ---------------------------------------------------------------------------

loc_1090EE7B:                           ; CODE XREF: sub_1090ECE0+13E↑j
                push    offset aPs3     ; "ps3"
                mov     eax, [ebp+Str1]
                push    eax             ; Str1
                call    ds:_wcsicmp
                add     esp, 8
                test    eax, eax
                jnz     short loc_1090EEF2
                push    offset aSystemDefuserp ; "../System/defuserps3.ini"
                lea     ecx, [ebp+var_80]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
;   } // starts at 1090EE69
;   try {
                mov     byte ptr [ebp+var_4], 7
                lea     ecx, [ebp+var_80]
                push    ecx
                lea     ecx, [ebp+var_24]
                call    sub_10906620
;   } // starts at 1090EE9F
;   try {
                mov     byte ptr [ebp+var_4], 2
                lea     ecx, [ebp+var_80]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                push    offset aSystemDefaultp ; "../System/defaultps3.ini"
                lea     ecx, [ebp+var_8C]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
;   } // starts at 1090EEAF
;   try {
                mov     byte ptr [ebp+var_4], 8
                lea     edx, [ebp+var_8C]
                push    edx
                lea     ecx, [ebp+var_24]
                call    sub_10906620
;   } // starts at 1090EECD
;   try {
                mov     byte ptr [ebp+var_4], 2
                lea     ecx, [ebp+var_8C]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                jmp     short loc_1090EF5A
; ---------------------------------------------------------------------------

loc_1090EEF2:                           ; CODE XREF: sub_1090ECE0+1AF↑j
                push    offset aSystemDefuserI ; "../System/defuser.ini"
                lea     ecx, [ebp+var_98]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
;   } // starts at 1090EEE0
;   try {
                mov     byte ptr [ebp+var_4], 9
                lea     eax, [ebp+var_98]
                push    eax
                lea     ecx, [ebp+var_24]
                call    sub_10906620
;   } // starts at 1090EF03
;   try {
                mov     byte ptr [ebp+var_4], 2
                lea     ecx, [ebp+var_98]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                push    offset aSystemDefaultI ; "../System/default.ini"
                lea     ecx, [ebp+var_A4]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
;   } // starts at 1090EF16
;   try {
                mov     byte ptr [ebp+var_4], 0Ah
                lea     ecx, [ebp+var_A4]
                push    ecx
                lea     ecx, [ebp+var_24]
                call    sub_10906620
;   } // starts at 1090EF37
;   try {
                mov     byte ptr [ebp+var_4], 2
                lea     ecx, [ebp+var_A4]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)

loc_1090EF5A:                           ; CODE XREF: sub_1090ECE0+196↑j
                                        ; sub_1090ECE0+210↑j
                push    offset aSystemDefprogr ; "../System/defprogress.ini"
                lea     ecx, [ebp+var_B0]
                call    ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
;   } // starts at 1090EF4A
;   try {
                mov     byte ptr [ebp+var_4], 0Bh
                lea     edx, [ebp+var_B0]
                push    edx
                lea     ecx, [ebp+var_24]
                call    sub_10906620
;   } // starts at 1090EF6B
;   try {
                mov     byte ptr [ebp+var_4], 2
                lea     ecx, [ebp+var_B0]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                mov     ecx, [ebp+var_38]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                push    offset aSystemS ; "../System/*.%s"
                lea     eax, [ebp+var_BC]
                push    eax
                call    ds:?Printf@dnString@@SA?AV1@PB_WZZ ; dnString::Printf(wchar_t const *,...)
                add     esp, 0Ch
                mov     [ebp+var_108], eax
                mov     ecx, [ebp+var_108]
                mov     [ebp+var_10C], ecx
;   } // starts at 1090EF7E
;   try {
                mov     byte ptr [ebp+var_4], 0Ch
                push    0
                push    0
                push    0
                push    1
                mov     ecx, [ebp+var_10C]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                lea     edx, [ebp+var_C8]
                push    edx
                mov     eax, ds:?GFileManager@@3PAVdnFileMgr@@A ; dnFileMgr * GFileManager
                mov     ecx, [eax]
                mov     edx, ds:?GFileManager@@3PAVdnFileMgr@@A ; dnFileMgr * GFileManager
                mov     eax, [edx]
                mov     edx, [eax]
                mov     eax, [edx+40h]
                call    eax
                mov     [ebp+var_110], eax
                mov     ecx, [ebp+var_110]
                mov     [ebp+var_114], ecx
;   } // starts at 1090EFBF
;   try {
                mov     byte ptr [ebp+var_4], 0Dh
                mov     edx, [ebp+var_114]
                push    edx
                lea     ecx, [ebp+var_24]
                call    sub_10908510
;   } // starts at 1090F007
;   try {
                mov     byte ptr [ebp+var_4], 0Ch
                lea     ecx, [ebp+var_C8]
                call    sub_10905860
;   } // starts at 1090F01A
;   try {
                mov     byte ptr [ebp+var_4], 2
                lea     ecx, [ebp+var_BC]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                mov     ecx, [ebp+var_38]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                mov     eax, [ebp+Str1]
                push    eax
                push    offset aSystemLocaliza_1 ; "../System/Localization/%s_Coalesced_%s."...
                lea     ecx, [ebp+var_44]
                push    ecx
                call    ds:?Printf@dnString@@SA?AV1@PB_WZZ ; dnString::Printf(wchar_t const *,...)
                add     esp, 10h
;   } // starts at 1090F029
;   try {
                mov     byte ptr [ebp+var_4], 0Eh
                mov     edx, [ebp+Str1]
                push    edx
                lea     ecx, [ebp+var_44]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                mov     ecx, [ebp+var_38]
                call    ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
                push    eax
                lea     eax, [ebp+var_24]
                push    eax
                call    sub_1090D430
                add     esp, 10h
;   } // starts at 1090F059
;   try {
                mov     byte ptr [ebp+var_4], 2
                lea     ecx, [ebp+var_44]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
                jmp     loc_1090ED5B
;   } // starts at 1090F081
; ---------------------------------------------------------------------------

loc_1090F093:                           ; CODE XREF: sub_1090ECE0+90↑j
;   try {
                mov     byte ptr [ebp+var_4], 1
                lea     ecx, [ebp+var_30]
                call    sub_10905860
;   } // starts at 1090F093
;   try {
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_18]
                call    ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
;   } // starts at 1090F09F
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_24]
                call    sub_10905860
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn    8
; } // starts at 1090ECE0
sub_1090ECE0    endp

; ---------------------------------------------------------------------------
                align 4
                jmp     ds:WideCharToMultiByte
; ---------------------------------------------------------------------------
                jmp     ds:lstrlenW
; ---------------------------------------------------------------------------
                jmp     ds:GetModuleFileNameW
; ---------------------------------------------------------------------------
                jmp     ds:GetWindowsDirectoryW
; ---------------------------------------------------------------------------
                jmp     ds:GetSystemDirectoryW
; ---------------------------------------------------------------------------
                jmp     ds:GetModuleFileNameA
; ---------------------------------------------------------------------------
                jmp     ds:GetWindowsDirectoryA
; ---------------------------------------------------------------------------
                jmp     ds:GetSystemDirectoryA
; ---------------------------------------------------------------------------
                jmp     ds:SetFilePointer
; ---------------------------------------------------------------------------
                jmp     ds:CloseHandle
; ---------------------------------------------------------------------------
                jmp     ds:WriteFile
; ---------------------------------------------------------------------------
                jmp     ds:GetFileSize
; ---------------------------------------------------------------------------
                jmp     ds:CreateFileA
; ---------------------------------------------------------------------------
                jmp     ds:CreateFileW
; ---------------------------------------------------------------------------
                jmp     ds:GetLastError
; ---------------------------------------------------------------------------
                jmp     ds:DeleteFileA
; ---------------------------------------------------------------------------
                jmp     ds:DeleteFileW
; ---------------------------------------------------------------------------
                jmp     ds:SetFileAttributesA
; ---------------------------------------------------------------------------
                jmp     ds:SetFileAttributesW
; ---------------------------------------------------------------------------
                jmp     ds:MoveFileA
; ---------------------------------------------------------------------------
                jmp     ds:MoveFileW
; ---------------------------------------------------------------------------
                jmp     ds:SetCurrentDirectoryA
; ---------------------------------------------------------------------------
                jmp     ds:SetCurrentDirectoryW
; ---------------------------------------------------------------------------
                jmp     ds:GetCurrentDirectoryA
; ---------------------------------------------------------------------------
                jmp     ds:GetCurrentDirectoryW
; ---------------------------------------------------------------------------
                jmp     ds:CopyFileA
; ---------------------------------------------------------------------------
                jmp     ds:CopyFileW
; ---------------------------------------------------------------------------
                jmp     ds:CreateDirectoryA
; ---------------------------------------------------------------------------
                jmp     ds:CreateDirectoryW
; ---------------------------------------------------------------------------
                jmp     ds:FindClose
; ---------------------------------------------------------------------------
                jmp     ds:FindNextFileW
; ---------------------------------------------------------------------------
                jmp     ds:FindFirstFileW
; ---------------------------------------------------------------------------
                jmp     ds:RemoveDirectoryA
; ---------------------------------------------------------------------------
                jmp     ds:RemoveDirectoryW
; ---------------------------------------------------------------------------
                jmp     ds:ReleaseMutex
; ---------------------------------------------------------------------------
                jmp     ds:CreateMutexW
; ---------------------------------------------------------------------------
                jmp     ds:GetCommandLineW
; ---------------------------------------------------------------------------
                jmp     ds:LoadLibraryW
; ---------------------------------------------------------------------------
                jmp     ds:MessageBoxW
; ---------------------------------------------------------------------------
                jmp     ds:SendMessageA
; ---------------------------------------------------------------------------
                jmp     ds:SendMessageW
; ---------------------------------------------------------------------------
                jmp     ds:DispatchMessageW
; ---------------------------------------------------------------------------
                jmp     ds:TranslateMessage
; ---------------------------------------------------------------------------
                jmp     ds:PeekMessageW
; ---------------------------------------------------------------------------
                jmp     ds:UpdateWindow
; ---------------------------------------------------------------------------
                jmp     ds:ShowWindow
; ---------------------------------------------------------------------------
                jmp     ds:RemovePropA
; ---------------------------------------------------------------------------
                jmp     ds:RemovePropW
; ---------------------------------------------------------------------------
                jmp     ds:SetPropA
; ---------------------------------------------------------------------------
                jmp     ds:SetPropW
; [00000006 BYTES: COLLAPSED FUNCTION _SetEnterSafeModeHandler. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _SetAssertionFailedExHandler. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _SetAssertionFailedHandler. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                jmp     ds:??0Support@RBConvexPolyhedronGeometry@meq@@QAE@XZ ; meq::RBConvexPolyhedronGeometry::Support::Support(void)
; ---------------------------------------------------------------------------
                jmp     ds:??0Frame@meq@@QAE@XZ ; meq::Frame::Frame(void)
; ---------------------------------------------------------------------------
                jmp     ds:??0Point@meq@@QAE@XZ ; meq::Point::Point(void)
; ---------------------------------------------------------------------------
                jmp     ds:??0Vector@meq@@QAE@MMM@Z ; meq::Vector::Vector(float,float,float)
; ---------------------------------------------------------------------------
                jmp     ds:_SetCrashHandlerFilter@4 ; SetCrashHandlerFilter(x)
; ---------------------------------------------------------------------------
                jmp     ds:??A?$dnArray@E@@QAEAAEH@Z ; dnArray<uchar>::operator[](int)
; ---------------------------------------------------------------------------
                jmp     ds:?Remove@?$dnArray@E@@QAEXHH@Z ; dnArray<uchar>::Remove(int,int)
; ---------------------------------------------------------------------------
                jmp     ds:?GetTypedData@?$dnArray@E@@QAEPAEXZ ; dnArray<uchar>::GetTypedData(void)
; ---------------------------------------------------------------------------
                jmp     ds:?StaticEnterSafeMode@UObject@@SAXPB_W@Z ; UObject::StaticEnterSafeMode(wchar_t const *)
; ---------------------------------------------------------------------------
                jmp     ds:?appFailAssertEx@@YAXPBD0HPB_W@Z ; appFailAssertEx(char const *,char const *,int,wchar_t const *)
; ---------------------------------------------------------------------------
                jmp     ds:?appFailAssert@@YAXPBD0H@Z ; appFailAssert(char const *,char const *,int)
; ---------------------------------------------------------------------------
                jmp     ds:?winToUNICODE@@YAPA_WPA_WPBDH@Z ; winToUNICODE(wchar_t *,char const *,int)
; ---------------------------------------------------------------------------
                jmp     ds:?winGetSizeUNICODE@@YAHPBD@Z ; winGetSizeUNICODE(char const *)
; [00000006 BYTES: COLLAPSED FUNCTION dnPackageMgr_FindPackageLoader(wchar_t const *). PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                jmp     ds:?Add@?$dnArray@E@@QAEHHH@Z ; dnArray<uchar>::Add(int,int)
; ---------------------------------------------------------------------------
                jmp     ds:?Insert@?$dnArray@E@@QAEXHH@Z ; dnArray<uchar>::Insert(int,int)
; ---------------------------------------------------------------------------
                jmp     ds:?GetFName@UObject@@QBEABVdnName@@XZ ; UObject::GetFName(void)
; ---------------------------------------------------------------------------
                jmp     ds:?StaticClass@UClass@@SAPAV1@XZ ; UClass::StaticClass(void)
; ---------------------------------------------------------------------------
                jmp     ds:?appSaveStringToFile@@YAHABVdnString@@PB_WPAVdnFileMgr@@@Z ; appSaveStringToFile(dnString const &,wchar_t const *,dnFileMgr *)
; ---------------------------------------------------------------------------
                jmp     ds:??1?$dnArray@E@@QAE@XZ ; dnArray<uchar>::~dnArray<uchar>(void)
; ---------------------------------------------------------------------------
                jmp     ds:?appSaveArrayToFile@@YAHABV?$dnArray@E@@PB_WPAVdnFileMgr@@@Z ; appSaveArrayToFile(dnArray<uchar> const &,wchar_t const *,dnFileMgr *)
; ---------------------------------------------------------------------------
                jmp     ds:?AddZeroed@?$dnArray@E@@QAEHH@Z ; dnArray<uchar>::AddZeroed(int)
; ---------------------------------------------------------------------------
                jmp     ds:??0?$dnArray@E@@QAE@XZ ; dnArray<uchar>::dnArray<uchar>(void)
; ---------------------------------------------------------------------------
                jmp     ds:?s_WriteStringToFile@@YAHABVdnString@@0@Z ; s_WriteStringToFile(dnString const &,dnString const &)
; ---------------------------------------------------------------------------
                jmp     ds:?s_WriteToFile@@YAHABVdnString@@AAV?$dnArray@E@@@Z ; s_WriteToFile(dnString const &,dnArray<uchar> &)
; ---------------------------------------------------------------------------
                jmp     ds:?appLoadFileToArray@@YAHAAV?$dnArray@E@@PB_WPAVdnFileMgr@@@Z ; appLoadFileToArray(dnArray<uchar> &,wchar_t const *,dnFileMgr *)
; ---------------------------------------------------------------------------
                jmp     ds:?appLoadFileToString@@YAHAAVdnString@@PB_WPAVdnFileMgr@@@Z ; appLoadFileToString(dnString &,wchar_t const *,dnFileMgr *)
; ---------------------------------------------------------------------------
                jmp     ds:?GetLanguage@UObject@@SAPB_WXZ ; UObject::GetLanguage(void)
; ---------------------------------------------------------------------------
                jmp     ds:?appExit@@YAXXZ ; appExit(void)
; ---------------------------------------------------------------------------
                jmp     ds:?appPreExit@@YAXXZ ; appPreExit(void)
; ---------------------------------------------------------------------------
                jmp     ds:?Shutdown@DRM@@YA_NXZ ; DRM::Shutdown(void)
; ---------------------------------------------------------------------------
                jmp     ds:?MainLoop@@YAXPAVUEngine@@K@Z ; MainLoop(UEngine *,ulong)
; [00000006 BYTES: COLLAPSED FUNCTION UpdateControllerSettingsViaPrefab(int). PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                jmp     ds:?GetSuperStruct@UStruct@@QBEPAV1@XZ ; UStruct::GetSuperStruct(void)
; ---------------------------------------------------------------------------
                jmp     ds:?LoadConfig@UObject@@QAEXHPAVUClass@@PB_WHH@Z ; UObject::LoadConfig(int,UClass *,wchar_t const *,int,int)
; ---------------------------------------------------------------------------
                jmp     ds:?GetDefaultObject@UClass@@QAEPAVUObject@@XZ ; UClass::GetDefaultObject(void)
; ---------------------------------------------------------------------------
                jmp     ds:?GetClass@UObject@@QBEPAVUClass@@XZ ; UObject::GetClass(void)
; ---------------------------------------------------------------------------
                jmp     ds:?GetLocalPlayerPawn@ALevelInfo@@QAEPAVAPlayerPawn@@XZ ; ALevelInfo::GetLocalPlayerPawn(void)
; ---------------------------------------------------------------------------
                jmp     ds:?ExitSplash@@YAXXZ ; ExitSplash(void)
; ---------------------------------------------------------------------------
                jmp     ds:?InitEngine@@YAPAVUEngine@@K@Z ; InitEngine(ulong)
; ---------------------------------------------------------------------------
                jmp     ds:?winToANSI@@YAPADPADPB_WH@Z ; winToANSI(char *,wchar_t const *,int)
; ---------------------------------------------------------------------------
                jmp     ds:?winGetSizeANSI@@YAHPB_W@Z ; winGetSizeANSI(wchar_t const *)
; ---------------------------------------------------------------------------
                jmp     ds:??BWWindow@@QBEPAUHWND__@@XZ ; WWindow::operator HWND__ *(void)
; ---------------------------------------------------------------------------
                jmp     ds:?LocalizeGeneral@@YA?BVdnString@@PBDPB_W1@Z ; LocalizeGeneral(char const *,wchar_t const *,wchar_t const *)
; ---------------------------------------------------------------------------
                jmp     ds:?OpenWindow@WLog@@QAEXHH@Z ; WLog::OpenWindow(int,int)
; ---------------------------------------------------------------------------
                jmp     ds:??0WLog@@QAE@PB_WAAPAVdnArchive@@VdnName@@PAVWWindow@@@Z ; WLog::WLog(wchar_t const *,dnArchive * &,dnName,WWindow *)
; ---------------------------------------------------------------------------
                jmp     ds:?SetGlobalExecHook@@YAXXZ ; SetGlobalExecHook(void)
; ---------------------------------------------------------------------------
                jmp     ds:?InitWindowing@@YAXXZ ; InitWindowing(void)
; ---------------------------------------------------------------------------
                jmp     ds:?InitBinkSplash@@YAXPB_WKH@Z ; InitBinkSplash(wchar_t const *,ulong,int)
; ---------------------------------------------------------------------------
                jmp     ds:?appInit@@YAXPB_W0PAVFMalloc@@PAVdnOutputDevice@@PAVdnOutputDeviceError@@PAVdnFeedbackContext@@PAVdnFileMgr@@P6APAVdnConfigCache@@XZ@Z ; appInit(wchar_t const *,wchar_t const *,FMalloc *,dnOutputDevice *,dnOutputDeviceError *,dnFeedbackContext *,dnFileMgr *,dnConfigCache * (*)(void))
; ---------------------------------------------------------------------------
                jmp     ds:?EngineIsDemoVersion@@YAHXZ ; EngineIsDemoVersion(void)
; ---------------------------------------------------------------------------
                jmp     ds:?CrashHandler_AssertHandler@@YAXPAXPBD1HPB_W@Z ; CrashHandler_AssertHandler(void *,char const *,char const *,int,wchar_t const *)
; ---------------------------------------------------------------------------
                jmp     ds:?CrashHandler_WindowedExceptionHandler@@YGJPAU_EXCEPTION_POINTERS@@@Z ; CrashHandler_WindowedExceptionHandler(_EXCEPTION_POINTERS *)
; [00000006 BYTES: COLLAPSED FUNCTION FCommandTarget::Unused(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WWindow::SetMinWidth(int &). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WWindow::SetMinHeight(int &). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WWindow::Serialize(dnArchive &). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WLog::GetPackageName(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WWindow::DoDestroy(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WLog::GetWindowClassName(wchar_t *). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WLog::WndProc(uint,uint,long). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WWindow::CallDefaultProc(uint,uint,long). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WWindow::InterceptControlCommand(uint,uint,long). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WWindow::GetText(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WWindow::SetText(dnString const &). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WLog::SetText(wchar_t const *). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WWindow::GetLength(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WLog::OnCopyData(HWND__ *,tagCOPYDATASTRUCT *). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WTerminal::OnSetFocus(HWND__ *). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WWindow::OnKillFocus(HWND__ *). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WTerminal::OnSize(ulong,int,int). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WLog::OnCommand(int). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WWindow::OnSysCommand(int). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WWindow::OnActivate(int). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WWindow::OnChar(wchar_t). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WWindow::RecoverLostWindow(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WWindow::OnKeyDown(wchar_t). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WWindow::OnCut(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WWindow::OnCopy(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WWindow::OnPaste(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WLog::OnShowWindow(int). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WWindow::OnUndo(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WWindow::OnVScroll(uint,long). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WWindow::OnHScroll(uint,long). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WWindow::OnKeyUp(uint,long). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WWindow::OnPaint(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WLog::OnCreate(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WWindow::OnDrawItem(tagDRAWITEMSTRUCT *). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WWindow::OnMeasureItem(tagMEASUREITEMSTRUCT *). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WWindow::OnInitDialog(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WWindow::OnEnterIdle(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WWindow::OnMouseEnter(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WWindow::OnMouseLeave(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WWindow::OnMouseHover(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WWindow::OnTimer(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WWindow::OnReleaseCapture(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WWindow::OnMdiActivate(int). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WWindow::OnMouseMove(ulong,FPoint). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WWindow::OnLeftButtonDown(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WWindow::OnRightButtonDown(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WWindow::OnLeftButtonUp(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WWindow::OnRightButtonUp(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WWindow::OnFinishSplitterDrag(WDragInterceptor *,int). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WWindow::OnSetCursor(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WWindow::ShouldClose(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WLog::OnClose(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WLog::OnDestroy(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WWindow::ClipOrCenterWindowToMonitor(HWND__ *,uint). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WWindow::MyDrawEdge(HDC__ *,tagRECT *,int). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WTerminal::TypeChar(wchar_t). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WTerminal::Paste(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                jmp     ds:??1WLog@@UAE@XZ ; WLog::~WLog(void)
; ---------------------------------------------------------------------------
                jmp     ds:??0FOutputDeviceWindowsError@@QAE@XZ ; FOutputDeviceWindowsError::FOutputDeviceWindowsError(void)
; ---------------------------------------------------------------------------
                jmp     ds:?GetMalloc@@YAPAVFMalloc@@XZ ; GetMalloc(void)
; ---------------------------------------------------------------------------
                jmp     ds:??0dnOutputDevice@@QAE@XZ ; dnOutputDevice::dnOutputDevice(void)
; [00000006 BYTES: COLLAPSED FUNCTION dnOutputDevice::FlushRealtime(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnOutputDevice::PrintfArgList(wchar_t *,uint,wchar_t const *,char *). PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                jmp     ds:?Logf@dnOutputDevice@@QAAXW4EName@@PB_WZZ ; dnOutputDevice::Logf(EName,wchar_t const *,...)
; ---------------------------------------------------------------------------
                jmp     ds:?dnTimeStamp@@YAPB_WXZ ; dnTimeStamp(void)
; ---------------------------------------------------------------------------
                jmp     ds:??0dnFeedbackContext@@QAE@XZ ; dnFeedbackContext::dnFeedbackContext(void)
; [00000006 BYTES: COLLAPSED FUNCTION dnOutputDevice::Flush(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------
                jmp     ds:??DdnString@@QBEPB_WXZ ; dnString::operator*(void)
; ---------------------------------------------------------------------------
                jmp     ds:?dnLocalizeError@@YA?BVdnString@@PBDPB_W1@Z ; dnLocalizeError(char const *,wchar_t const *,wchar_t const *)
; ---------------------------------------------------------------------------
                jmp     ds:?dnWinToANSI@@YAPADPADPB_WH@Z ; dnWinToANSI(char *,wchar_t const *,int)
; ---------------------------------------------------------------------------
                jmp     ds:?dnWinGetSizeANSI@@YAHPB_W@Z ; dnWinGetSizeANSI(wchar_t const *)
; ---------------------------------------------------------------------------
                jmp     ds:??0dnString@@QAE@XZ ; dnString::dnString(void)
; ---------------------------------------------------------------------------
                jmp     ds:??0dnFileMgr@@QAE@XZ ; dnFileMgr::dnFileMgr(void)
; [00000006 BYTES: COLLAPSED FUNCTION dnFileMgr::PreInit(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnFileMgr::OpenLinearFile(wchar_t const *,int,int). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnFileMgr::CloseLinearFile(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnFileMgr::IsLinearFileOpen(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnFileMgr::CreateLinearReader(wchar_t const *). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnFileMgr::FindPackageFile(wchar_t const *,wchar_t *). PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                jmp     ds:?IsValidIndex@dnArrayBase@@QBEHH@Z ; dnArrayBase::IsValidIndex(int)
; ---------------------------------------------------------------------------
                jmp     ds:?Num@dnArrayBase@@QBEHXZ ; dnArrayBase::Num(void)
; ---------------------------------------------------------------------------
                jmp     ds:?dnSecondsSlow@@YANXZ ; dnSecondsSlow(void)
; ---------------------------------------------------------------------------
                jmp     ds:InitCRCTable
; ---------------------------------------------------------------------------
                jmp     ds:??4dnString@@QAEAAV0@PB_W@Z ; dnString::operator=(wchar_t const *)
; ---------------------------------------------------------------------------
                jmp     ds:??0dnArrayBase@@QAE@XZ ; dnArrayBase::dnArrayBase(void)
; ---------------------------------------------------------------------------
                jmp     ds:??0dnString@@QAE@PB_W@Z ; dnString::dnString(wchar_t const *)
; ---------------------------------------------------------------------------
                jmp     ds:?dnBaseDir@@YA?BVdnString@@XZ ; dnBaseDir(void)
; ---------------------------------------------------------------------------
                jmp     ds:?dnPackage@@YA?BVdnString@@XZ ; dnPackage(void)
; ---------------------------------------------------------------------------
                jmp     ds:?Add@dnArrayBase@@QAEHHH@Z ; dnArrayBase::Add(int,int)
; ---------------------------------------------------------------------------
                jmp     ds:?SafeString@dnName@@SAPB_WW4EName@@@Z ; dnName::SafeString(EName)
; ---------------------------------------------------------------------------
                jmp     ds:?SafeSuppressed@dnName@@SAHW4EName@@@Z ; dnName::SafeSuppressed(EName)
; ---------------------------------------------------------------------------
                jmp     ds:??0dnArchive@@QAE@XZ ; dnArchive::dnArchive(void)
; [00000006 BYTES: COLLAPSED FUNCTION dnArchive::SerializeBits(void *,int). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchive::SerializeInt(ulong &,ulong). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchive::Preload(UObject *). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchive::CountBytes(ulong,ulong). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchive::SetMode(int). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchive::operator<<(UObject * &). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchive::operator<<(dnName &). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchive::SerializeMaterial(UMaterialEx * &,dnName *). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchive::MapName(dnName *). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchive::MapObject(UObject *). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchive::Tell64(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchive::TotalSize(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchive::LinearTell(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchive::LinearTotalSize(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchive::AtEnd(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchive::Seek64(__int64). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchive::AttachLazyLoader(dnLazyLoader *). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchive::DetachLazyLoader(dnLazyLoader *). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchive::AttachLazyDataWorker(dnLazyDataWorker *). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchive::DetachLazyDataWorker(dnLazyDataWorker *). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchive::Precache(int). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchive::GetError(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchive::InitTOC(dnArchive *). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchive::HasTOC(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchive::GetCurrentPtr(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchive::Compress(uchar * *,ulong &). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchive::Lock(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchive::UnLock(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchive::GetLazyDataMode(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchive::SetLazyDataMode(dnLazyDataMode). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchive::AddDeferredLazyItem(dnLazyDataWorker *,int). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchive::FlushDeferredLazyItems(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchive::VerifyLinear(wchar_t const *). PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                jmp     ds:?Logf@dnOutputDevice@@QAAXABVdnString@@ZZ ; dnOutputDevice::Logf(dnString const &,...)
; ---------------------------------------------------------------------------
                jmp     ds:??0dnString@@QAE@PBD@Z ; dnString::dnString(char const *)
; ---------------------------------------------------------------------------
                jmp     ds:??1dnArchive@@UAE@XZ ; dnArchive::~dnArchive(void)
; ---------------------------------------------------------------------------
                jmp     ds:??0dnArchiveFileReader@@QAE@PAXPAVdnOutputDevice@@H@Z ; dnArchiveFileReader::dnArchiveFileReader(void *,dnOutputDevice *,int)
; ---------------------------------------------------------------------------
                jmp     ds:??0dnArchiveFileReaderCompressedWin32@@QAE@PAXPAVdnOutputDevice@@H@Z ; dnArchiveFileReaderCompressedWin32::dnArchiveFileReaderCompressedWin32(void *,dnOutputDevice *,int)
; ---------------------------------------------------------------------------
                jmp     ds:?Logf@dnOutputDevice@@QAAXPB_WZZ ; dnOutputDevice::Logf(wchar_t const *,...)
; [00000006 BYTES: COLLAPSED FUNCTION dnArchiveFileReaderCompressedWin32::Serialize(void *,int). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchiveFileReaderCompressedWin32::Tell(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchiveFileReaderCompressedWin32::Tell64(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchiveFileReaderCompressedWin32::TotalSize(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchiveFileReaderCompressedWin32::Seek(int). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchiveFileReaderCompressedWin32::Seek64(__int64). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchive::Flush(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchiveFileReaderCompressedWin32::Close(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchiveFileReaderCompressedWin32::InitTOC(dnArchive *). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchiveFileReaderCompressedWin32::HasTOC(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchiveFileReader::Serialize(void *,int). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchiveFileReader::Tell(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchiveFileReader::TotalSize(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchiveFileReader::Seek(int). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchiveFileReader::Precache(int). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchiveFileReader::Close(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchiveFileReader::Lock(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchiveFileReader::UnLock(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                jmp     ds:??1dnArchiveFileReader@@UAE@XZ ; dnArchiveFileReader::~dnArchiveFileReader(void)
; ---------------------------------------------------------------------------
                jmp     ds:??1dnArchiveFileReaderCompressedWin32@@UAE@XZ ; dnArchiveFileReaderCompressedWin32::~dnArchiveFileReaderCompressedWin32(void)
; ---------------------------------------------------------------------------
                jmp     ds:??0dnArchiveFileWriterCompressedWin32@@QAE@PAXPAVdnOutputDevice@@HH@Z ; dnArchiveFileWriterCompressedWin32::dnArchiveFileWriterCompressedWin32(void *,dnOutputDevice *,int,int)
; [00000006 BYTES: COLLAPSED FUNCTION dnArchiveFileWriterCompressedWin32::Serialize(void *,int). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchiveFileWriterCompressedWin32::Tell(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchiveFileWriterCompressedWin32::Seek(int). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchiveFileWriterCompressedWin32::Flush(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchiveFileWriterCompressedWin32::Close(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchiveFileWriterCompressedWin32::InitTOC(dnArchive *). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION dnArchiveFileWriterCompressedWin32::HasTOC(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                jmp     ds:??1dnArchiveFileWriterCompressedWin32@@UAE@XZ ; dnArchiveFileWriterCompressedWin32::~dnArchiveFileWriterCompressedWin32(void)
; ---------------------------------------------------------------------------
                jmp     ds:?GetData@dnArrayBase@@QAEPAXXZ ; dnArrayBase::GetData(void)
; ---------------------------------------------------------------------------
                jmp     ds:?IsError@dnArchive@@QAEHXZ ; dnArchive::IsError(void)
; ---------------------------------------------------------------------------
                jmp     ds:?Remove@dnArrayBase@@QAEXHHH@Z ; dnArrayBase::Remove(int,int,int)
; ---------------------------------------------------------------------------
                jmp     ds:??0dnName@@QAE@W4EName@@@Z ; dnName::dnName(EName)
; ---------------------------------------------------------------------------
                jmp     ds:??8dnName@@QBEHABV0@@Z ; dnName::operator==(dnName const &)
; ---------------------------------------------------------------------------
                jmp     ds:?Empty@dnArrayBase@@QAEXHH@Z ; dnArrayBase::Empty(int,int)
; ---------------------------------------------------------------------------
                jmp     ds:??0dnString@@QAE@ABV0@@Z ; dnString::dnString(dnString const &)
; ---------------------------------------------------------------------------
                jmp     ds:??1dnArrayBase@@QAE@XZ ; dnArrayBase::~dnArrayBase(void)
; ---------------------------------------------------------------------------
                jmp     ds:??0dnArrayBase@@IAE@HH@Z ; dnArrayBase::dnArrayBase(int,int)
; ---------------------------------------------------------------------------
                jmp     ds:??YdnString@@QAEAAV0@PB_W@Z ; dnString::operator+=(wchar_t const *)
; ---------------------------------------------------------------------------
                jmp     ds:??4dnString@@QAEAAV0@ABV0@@Z ; dnString::operator=(dnString const &)
; ---------------------------------------------------------------------------
                jmp     ds:?Left@dnString@@QBE?AV1@H@Z ; dnString::Left(int)
; ---------------------------------------------------------------------------
                jmp     ds:?InStr@dnString@@QBEHPB_WH@Z ; dnString::InStr(wchar_t const *,int)
; ---------------------------------------------------------------------------
                jmp     ds:?dnBaseContentDir@@YA?BVdnString@@XZ ; dnBaseContentDir(void)
; ---------------------------------------------------------------------------
                jmp     ds:??DdnString@@QBE?AV0@ABV0@@Z ; dnString::operator*(dnString const &)
; ---------------------------------------------------------------------------
                jmp     ds:??DdnString@@QBE?AV0@PB_W@Z ; dnString::operator*(wchar_t const *)
; ---------------------------------------------------------------------------
                jmp     ds:??1FFilename@@QAE@XZ ; FFilename::~FFilename(void)
; ---------------------------------------------------------------------------
                jmp     ds:??0FFilename@@QAE@XZ ; FFilename::FFilename(void)
; ---------------------------------------------------------------------------
                jmp     ds:??4FFilename@@QAEAAV0@ABV0@@Z ; FFilename::operator=(FFilename const &)
; ---------------------------------------------------------------------------
                jmp     ds:??0FFilename@@QAE@PB_W@Z ; FFilename::FFilename(wchar_t const *)
; ---------------------------------------------------------------------------
                jmp     ds:?Shrink@dnArrayBase@@QAEXH@Z ; dnArrayBase::Shrink(int)
; ---------------------------------------------------------------------------
                jmp     ds:?AddZeroed@dnArrayBase@@QAEHHH@Z ; dnArrayBase::AddZeroed(int,int)
; ---------------------------------------------------------------------------
                jmp     ds:?CountBytes@dnArrayBase@@QAEXAAVdnArchive@@H@Z ; dnArrayBase::CountBytes(dnArchive &,int)
; ---------------------------------------------------------------------------
                jmp     ds:??6@YAAAVdnArchive@@AAV0@AAVdnString@@@Z ; operator<<(dnArchive &,dnString &)
; ---------------------------------------------------------------------------
                jmp     ds:??8dnString@@QBEHABV0@@Z ; dnString::operator==(dnString const &)
; ---------------------------------------------------------------------------
                jmp     ds:??YdnString@@QAEAAV0@ABV0@@Z ; dnString::operator+=(dnString const &)
; ---------------------------------------------------------------------------
                jmp     ds:?Printf@dnString@@SA?AV1@PB_WZZ ; dnString::Printf(wchar_t const *,...)
; ---------------------------------------------------------------------------
                jmp     ds:?Empty@dnString@@QAEXH@Z ; dnString::Empty(int)
; ---------------------------------------------------------------------------
                jmp     ds:?Log@dnOutputDevice@@QAEXPB_W@Z ; dnOutputDevice::Log(wchar_t const *)
; ---------------------------------------------------------------------------
                jmp     ds:?GetExtension@FFilename@@QBE?AVdnString@@H@Z ; FFilename::GetExtension(int)
; ---------------------------------------------------------------------------
                jmp     ds:??0FFilename@@QAE@ABVdnString@@@Z ; FFilename::FFilename(dnString const &)
; ---------------------------------------------------------------------------
                jmp     ds:?Realloc@dnArrayBase@@IAEXH@Z ; dnArrayBase::Realloc(int)
; ---------------------------------------------------------------------------
                jmp     ds:?IsLoading@dnArchive@@QAEHXZ ; dnArchive::IsLoading(void)
; ---------------------------------------------------------------------------
                jmp     ds:??6@YAAAVdnArchive@@AAV0@AAVdnCompactIndex@@@Z ; operator<<(dnArchive &,dnCompactIndex &)
; ---------------------------------------------------------------------------
                jmp     ds:??8dnString@@QBEHPB_W@Z ; dnString::operator==(wchar_t const *)
; ---------------------------------------------------------------------------
                jmp     ds:?ToLower@dnString@@QAEPB_WXZ ; dnString::ToLower(void)
; ---------------------------------------------------------------------------
                jmp     ds:?GetCleanFilename@FFilename@@QBE?AVdnString@@XZ ; FFilename::GetCleanFilename(void)
; ---------------------------------------------------------------------------
                jmp     ds:??1FNameAsStringProxyArchive@@UAE@XZ ; FNameAsStringProxyArchive::~FNameAsStringProxyArchive(void)
; ---------------------------------------------------------------------------
                jmp     ds:??0FNameAsStringProxyArchive@@QAE@AAVdnArchive@@@Z ; FNameAsStringProxyArchive::FNameAsStringProxyArchive(dnArchive &)
; ---------------------------------------------------------------------------
                jmp     ds:??9dnString@@QBEHPB_W@Z ; dnString::operator!=(wchar_t const *)
; ---------------------------------------------------------------------------
                jmp     ds:?GetBaseFilename@FFilename@@QBE?AVdnString@@H@Z ; FFilename::GetBaseFilename(int)
; ---------------------------------------------------------------------------
                jmp     ds:?GetPtr@dnString@@QAEPB_WXZ ; dnString::GetPtr(void)
; ---------------------------------------------------------------------------
                jmp     ds:?UnLock@dnThread_Semaphore@@QAEXXZ ; dnThread_Semaphore::UnLock(void)
; ---------------------------------------------------------------------------
                jmp     ds:?Lock@dnThread_Semaphore@@QAEXXZ ; dnThread_Semaphore::Lock(void)
; ---------------------------------------------------------------------------
                jmp     ds:??HdnString@@QBE?AV0@ABV0@@Z ; dnString::operator+(dnString const &)
; ---------------------------------------------------------------------------
                jmp     ds:?Log@dnOutputDevice@@QAEXW4EName@@ABVdnString@@@Z ; dnOutputDevice::Log(EName,dnString const &)
; ---------------------------------------------------------------------------
                jmp     ds:??0dnName@@QAE@PB_WW4EFindName@@@Z ; dnName::dnName(wchar_t const *,EFindName)
; ---------------------------------------------------------------------------
                jmp     ds:dnInitAssertMgr
; ---------------------------------------------------------------------------
                jmp     ds:?Clear@dnArrayBase@@QAEXXZ ; dnArrayBase::Clear(void)
; ---------------------------------------------------------------------------
                jmp     ds:??9dnString@@QBEHABV0@@Z ; dnString::operator!=(dnString const &)
; ---------------------------------------------------------------------------
                jmp     ds:?Len@dnString@@QBEHXZ ; dnString::Len(void)
; ---------------------------------------------------------------------------
                jmp     ds:InitCommonControls
; ---------------------------------------------------------------------------
                jmp     ds:__imp_rand
; ---------------------------------------------------------------------------
                mov     eax, ecx
                mov     dword ptr [eax], offset ??_7type_info@@6B@ ; const type_info::`vftable'
                retn    4
; [0000004C BYTES: COLLAPSED FUNCTION type_info::`vector deleting destructor'(uint). PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                mov     eax, ecx
                retn    4
; ---------------------------------------------------------------------------
                align 10h
; [00000016 BYTES: COLLAPSED FUNCTION __alloca_probe_16. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000016 BYTES: COLLAPSED FUNCTION __alloca_probe_8. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION __CxxFrameHandler3. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                jmp     ds:_vsnwprintf
; ---------------------------------------------------------------------------
                align 10h
; [0000002B BYTES: COLLAPSED FUNCTION __alloca_probe. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 4
; [00000006 BYTES: COLLAPSED FUNCTION _purecall. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 10h
                jmp     ds:wcsncpy
; ---------------------------------------------------------------------------
                jmp     ds:wcschr
; ---------------------------------------------------------------------------
                jmp     ds:_wcsicmp
; ---------------------------------------------------------------------------
                jmp     ds:_wcsnicmp
; [00000006 BYTES: COLLAPSED FUNCTION memset. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                jmp     ds:wcsstr
; [00000006 BYTES: COLLAPSED FUNCTION memcpy. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                jmp     ds:wcsncmp
; ---------------------------------------------------------------------------
                jmp     ds:_wtoi
; ---------------------------------------------------------------------------
                jmp     ds:atof
; [000000A5 BYTES: COLLAPSED FUNCTION __onexit. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000017 BYTES: COLLAPSED FUNCTION _atexit. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                mov     eax, large fs:18h
                retn
; ---------------------------------------------------------------------------

_pre_cpp_init:
                push    offset byte_1090FF94
                call    _atexit
                mov     eax, dword_1092291C
                mov     dword ptr [esp], offset dword_10922908
                push    dword_10922918
                mov     dword_10922908, eax
                push    offset unk_109228F8
                push    offset unk_109228FC
                push    offset unk_109228F4
                call    ds:__getmainargs
                add     esp, 14h
                mov     dword_10922904, eax
                test    eax, eax
                jge     short locret_1090FA79
                push    8
                call    _amsg_exit
                pop     ecx

locret_1090FA79:                        ; CODE XREF: .text:1090FA6F↑j
                retn
; [000001DF BYTES: COLLAPSED FUNCTION ___tmainCRTStartup. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------

_check_managed_app:
                mov     eax, 5A4Dh
                cmp     ds:10900000h, ax
                jz      short loc_1090FC6A

loc_1090FC67:                           ; CODE XREF: .text:1090FC7B↓j
                                        ; .text:1090FC8F↓j ...
                xor     eax, eax
                retn
; ---------------------------------------------------------------------------

loc_1090FC6A:                           ; CODE XREF: .text:1090FC65↑j
                mov     eax, ds:1090003Ch
                lea     eax, [eax+10900000h]
                cmp     dword ptr [eax], 4550h
                jnz     short loc_1090FC67
                movzx   ecx, word ptr [eax+18h]
                cmp     ecx, 10Bh
                jz      short loc_1090FCA4
                cmp     ecx, 20Bh
                jnz     short loc_1090FC67
                cmp     dword ptr [eax+84h], 0Eh
                jbe     short loc_1090FC67
                xor     ecx, ecx
                cmp     [eax+0F8h], ecx
                jmp     short loc_1090FCB2
; ---------------------------------------------------------------------------

loc_1090FCA4:                           ; CODE XREF: .text:1090FC87↑j
                cmp     dword ptr [eax+74h], 0Eh
                jbe     short loc_1090FC67
                xor     ecx, ecx
                cmp     [eax+0E8h], ecx

loc_1090FCB2:                           ; CODE XREF: .text:1090FCA2↑j
                setnz   cl
                mov     eax, ecx
                retn
; ---------------------------------------------------------------------------

_pre_c_init:
                mov     eax, 5A4Dh
                cmp     ds:10900000h, ax
                jz      short loc_1090FCCA

loc_1090FCC6:                           ; CODE XREF: .text:1090FCDB↓j
                                        ; .text:1090FCEF↓j ...
                xor     eax, eax
                jmp     short loc_1090FD17
; ---------------------------------------------------------------------------

loc_1090FCCA:                           ; CODE XREF: .text:1090FCC4↑j
                mov     eax, ds:1090003Ch
                lea     eax, [eax+10900000h]
                cmp     dword ptr [eax], 4550h
                jnz     short loc_1090FCC6
                movzx   ecx, word ptr [eax+18h]
                cmp     ecx, 10Bh
                jz      short loc_1090FD04
                cmp     ecx, 20Bh
                jnz     short loc_1090FCC6
                cmp     dword ptr [eax+84h], 0Eh
                jbe     short loc_1090FCC6
                xor     ecx, ecx
                cmp     [eax+0F8h], ecx
                jmp     short loc_1090FD12
; ---------------------------------------------------------------------------

loc_1090FD04:                           ; CODE XREF: .text:1090FCE7↑j
                cmp     dword ptr [eax+74h], 0Eh
                jbe     short loc_1090FCC6
                xor     ecx, ecx
                cmp     [eax+0E8h], ecx

loc_1090FD12:                           ; CODE XREF: .text:1090FD02↑j
                setnz   cl
                mov     eax, ecx

loc_1090FD17:                           ; CODE XREF: .text:1090FCC8↑j
                push    2
                mov     dword_10922900, eax
                call    ds:__set_app_type
                push    0FFFFFFFFh
                call    ds:_encode_pointer
                pop     ecx
                pop     ecx
                mov     dword_10922C5C, eax
                mov     dword_10922C60, eax
                call    ds:__p__fmode
                mov     ecx, dword_10922924
                mov     [eax], ecx
                call    ds:__p__commode
                mov     ecx, dword_10922920
                mov     [eax], ecx
                mov     eax, ds:_adjust_fdiv
                mov     eax, [eax]
                mov     dword_10922C4C, eax
                call    sub_1090FF6E
                call    sub_10910199
                cmp     dword_109217EC, 0
                jnz     short loc_1090FD7F
                push    offset loc_10910196
                call    ds:__setusermatherr
                pop     ecx

loc_1090FD7F:                           ; CODE XREF: .text:1090FD71↑j
                call    __setdefaultprecision
                cmp     dword_109217E8, 0FFFFFFFFh
                jnz     short loc_1090FD96
                push    0FFFFFFFFh
                call    ds:_configthreadlocale
                pop     ecx

loc_1090FD96:                           ; CODE XREF: .text:1090FD8B↑j
                xor     eax, eax
                retn
; [0000000A BYTES: COLLAPSED FUNCTION start. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000012 BYTES: COLLAPSED FUNCTION ArrayUnwindFilter(_EXCEPTION_POINTERS *). PRESS CTRL-NUMPAD+ TO EXPAND]
; [0000005E BYTES: COLLAPSED FUNCTION __ArrayUnwind(void *,uint,int,void (*)(void *)). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000063 BYTES: COLLAPSED FUNCTION `eh vector destructor iterator'(void *,uint,int,void (*)(void *)). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _unlock. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION __dllonexit. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                jmp     ds:_encode_pointer
; [00000006 BYTES: COLLAPSED FUNCTION _lock. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                jmp     ds:_decode_pointer
; [00000045 BYTES: COLLAPSED FUNCTION __SEH_prolog4. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000014 BYTES: COLLAPSED FUNCTION __SEH_epilog4. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000025 BYTES: COLLAPSED FUNCTION SEH_10910070. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000042 BYTES: COLLAPSED FUNCTION __CxxUnhandledExceptionFilter(_EXCEPTION_POINTERS *). PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                push    offset ?__CxxUnhandledExceptionFilter@@YGJPAU_EXCEPTION_POINTERS@@@Z ; __CxxUnhandledExceptionFilter(_EXCEPTION_POINTERS *)
                call    ds:SetUnhandledExceptionFilter
                xor     eax, eax
                retn
; [00000006 BYTES: COLLAPSED FUNCTION _amsg_exit. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                jmp     ds:__getmainargs

; =============== S U B R O U T I N E =======================================


sub_1090FF6E    proc near               ; CODE XREF: .text:1090FD60↑p
                mov     edi, edi
                push    esi
                mov     eax, offset unk_10914FD8
                mov     esi, offset unk_10914FD8
                push    edi
                mov     edi, eax
                cmp     eax, esi
                jnb     short loc_1090FF91

loc_1090FF82:                           ; CODE XREF: sub_1090FF6E+21↓j
                mov     eax, [edi]
                test    eax, eax
                jz      short loc_1090FF8A
                call    eax

loc_1090FF8A:                           ; CODE XREF: sub_1090FF6E+18↑j
                add     edi, 4
                cmp     edi, esi
                jb      short loc_1090FF82

loc_1090FF91:                           ; CODE XREF: sub_1090FF6E+12↑j
                pop     edi
                pop     esi
                retn
sub_1090FF6E    endp

; ---------------------------------------------------------------------------
byte_1090FF94   db 8Bh, 0FFh            ; DATA XREF: .text:_pre_cpp_init↑o
; ---------------------------------------------------------------------------
                push    esi
                mov     eax, offset unk_10914FE0
                mov     esi, offset unk_10914FE0
                push    edi
                mov     edi, eax
                cmp     eax, esi
                jnb     short loc_1090FFB7

loc_1090FFA8:                           ; CODE XREF: .text:1090FFB5↓j
                mov     eax, [edi]
                test    eax, eax
                jz      short loc_1090FFB0
                call    eax

loc_1090FFB0:                           ; CODE XREF: .text:1090FFAC↑j
                add     edi, 4
                cmp     edi, esi
                jb      short loc_1090FFA8

loc_1090FFB7:                           ; CODE XREF: .text:1090FFA6↑j
                pop     edi
                pop     esi
                retn
; ---------------------------------------------------------------------------
                jmp     ds:_cexit
; ---------------------------------------------------------------------------
                jmp     ds:_exit
; [00000006 BYTES: COLLAPSED FUNCTION _XcptFilter. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                jmp     ds:_ismbblead
; ---------------------------------------------------------------------------
                jmp     ds:exit
; ---------------------------------------------------------------------------
                align 10h
; [00000035 BYTES: COLLAPSED FUNCTION __ValidateImageBase. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 10h
; [00000044 BYTES: COLLAPSED FUNCTION __FindPESection. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 10h
; [000000BD BYTES: COLLAPSED FUNCTION __IsNonwritableInCurrentImage. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 2
; [00000006 BYTES: COLLAPSED FUNCTION _initterm. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _initterm_e. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                jmp     ds:_configthreadlocale
; [00000024 BYTES: COLLAPSED FUNCTION __invoke_watson_if_error. PRESS CTRL-NUMPAD+ TO EXPAND]
; [0000002B BYTES: COLLAPSED FUNCTION __setdefaultprecision. PRESS CTRL-NUMPAD+ TO EXPAND]
                align 10h
                jmp     ds:__setusermatherr
; ---------------------------------------------------------------------------

loc_10910196:                           ; DATA XREF: .text:1090FD73↑o
                xor     eax, eax
                retn

; =============== S U B R O U T I N E =======================================


sub_10910199    proc near               ; CODE XREF: .text:1090FD65↑p
                xor     eax, eax
                retn
sub_10910199    endp

; ---------------------------------------------------------------------------
                jmp     ds:__p__commode
; ---------------------------------------------------------------------------
                jmp     ds:__p__fmode
; ---------------------------------------------------------------------------
                jmp     ds:__set_app_type
; [00000096 BYTES: COLLAPSED FUNCTION ___security_init_cookie. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION terminate(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION type_info::_type_info_dtor_internal_method(void). PRESS CTRL-NUMPAD+ TO EXPAND]
; [0000000F BYTES: COLLAPSED FUNCTION __security_check_cookie(x). PRESS CTRL-NUMPAD+ TO EXPAND]
                align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _except_handler4_common. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _invoke_watson. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _controlfp_s. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000106 BYTES: COLLAPSED FUNCTION ___report_gsfailure. PRESS CTRL-NUMPAD+ TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _crt_debugger_hook. PRESS CTRL-NUMPAD+ TO EXPAND]
; ---------------------------------------------------------------------------
                jmp     ds:InterlockedExchange
; ---------------------------------------------------------------------------
                jmp     ds:Sleep
; ---------------------------------------------------------------------------
                jmp     ds:InterlockedCompareExchange
; ---------------------------------------------------------------------------
                jmp     ds:GetStartupInfoA
; ---------------------------------------------------------------------------
                jmp     ds:SetUnhandledExceptionFilter
; ---------------------------------------------------------------------------
                jmp     ds:QueryPerformanceCounter
; ---------------------------------------------------------------------------
                jmp     ds:GetTickCount
; ---------------------------------------------------------------------------
                jmp     ds:GetCurrentThreadId
; ---------------------------------------------------------------------------
                jmp     ds:GetCurrentProcessId
; ---------------------------------------------------------------------------
                jmp     ds:GetSystemTimeAsFileTime
; ---------------------------------------------------------------------------
                jmp     ds:TerminateProcess
; ---------------------------------------------------------------------------
                jmp     ds:GetCurrentProcess
; ---------------------------------------------------------------------------
                jmp     ds:UnhandledExceptionFilter
; ---------------------------------------------------------------------------
                jmp     ds:IsDebuggerPresent
; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_109012A0

loc_109103E0:                           ; DATA XREF: .rdata:stru_10914FE8↓o
; __unwind { // SEH_109012A0
;   cleanup() // owned by 109012FE
                lea     ecx, [ebp+var_18]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; } // starts at 109103E0
; END OF FUNCTION CHUNK FOR sub_109012A0

; =============== S U B R O U T I N E =======================================


SEH_109012A0    proc near               ; DATA XREF: sub_109012A0+5↑o
                                        ; .rdata:10914E54↓o
                mov     eax, offset stru_10914FF0
                jmp     __CxxFrameHandler3
SEH_109012A0    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_109013B0

loc_10910400:                           ; DATA XREF: .rdata:stru_10915014↓o
; __unwind { // SEH_109013B0
;   cleanup() // owned by 10901444
                lea     ecx, [ebp+var_2024]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; } // starts at 10910400
; END OF FUNCTION CHUNK FOR sub_109013B0

; =============== S U B R O U T I N E =======================================


SEH_109013B0    proc near               ; DATA XREF: sub_109013B0+5↑o
                                        ; .rdata:10914E58↓o
                mov     eax, offset stru_1091501C
                jmp     __CxxFrameHandler3
SEH_109013B0    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_10902A30

loc_10910420:                           ; DATA XREF: .rdata:stru_10915040↓o
; __unwind { // SEH_10902A30
;   cleanup() // owned by 10902A52
                mov     ecx, [ebp+var_10]
                add     ecx, 4
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; } // starts at 10910420
; END OF FUNCTION CHUNK FOR sub_10902A30

; =============== S U B R O U T I N E =======================================


SEH_10902A30    proc near               ; DATA XREF: sub_10902A30+5↑o
                                        ; .rdata:10914E5C↓o
                mov     eax, offset stru_10915048
                jmp     __CxxFrameHandler3
SEH_10902A30    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_10902E30

loc_10910440:                           ; DATA XREF: .rdata:stru_109150B4↓o
; __unwind { // SEH_10902E30
                lea     ecx, [ebp+var_85C]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_1091044C:                           ; DATA XREF: .rdata:109150BC↓o
                mov     eax, [ebp+var_920]
                and     eax, 1
                jz      locret_1091046E
                and     [ebp+var_920], 0FFFFFFFEh
                lea     ecx, [ebp+var_86C]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

locret_1091046E:                        ; CODE XREF: sub_10902E30+D625↑j
                retn
; ---------------------------------------------------------------------------

loc_1091046F:                           ; DATA XREF: .rdata:109150C4↓o
                mov     eax, [ebp+var_920]
                and     eax, 2
                jz      locret_10910491
                and     [ebp+var_920], 0FFFFFFFDh
                lea     ecx, [ebp+var_878]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

locret_10910491:                        ; CODE XREF: sub_10902E30+D648↑j
                retn
; ---------------------------------------------------------------------------

loc_10910492:                           ; DATA XREF: .rdata:109150CC↓o
                lea     ecx, [ebp+var_884]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_1091049E:                           ; DATA XREF: .rdata:109150D4↓o
                lea     ecx, [ebp+var_894]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_109104AA:                           ; DATA XREF: .rdata:109150DC↓o
;   cleanup() // owned by 10902EFA
;   cleanup() // owned by 10902FB6
;   cleanup() // owned by 109030CE
;   cleanup() // owned by 10903133
;   cleanup() // owned by 109031AD
;   cleanup() // owned by 1090332A
;   cleanup() // owned by 109034F7
;   cleanup() // owned by 109035C1
                lea     ecx, [ebp+var_91C]
                jmp     sub_10902950
; } // starts at 10910440
; END OF FUNCTION CHUNK FOR sub_10902E30

; =============== S U B R O U T I N E =======================================


SEH_10902E30    proc near               ; DATA XREF: sub_10902E30+5↑o
                                        ; .rdata:10914E60↓o
                mov     eax, offset stru_10915090
                jmp     __CxxFrameHandler3
SEH_10902E30    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_10903620

loc_109104C0:                           ; DATA XREF: .rdata:stru_109150F4↓o
; __unwind { // SEH_10903620
;   cleanup() // owned by 10903647
                lea     ecx, [ebp+lParam]
                jmp     sub_10901A90
; } // starts at 109104C0
; END OF FUNCTION CHUNK FOR sub_10903620

; =============== S U B R O U T I N E =======================================


SEH_10903620    proc near               ; DATA XREF: sub_10903620+5↑o
                                        ; .rdata:10914E64↓o
                mov     eax, offset stru_109150FC
                jmp     __CxxFrameHandler3
SEH_10903620    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_109036D0

loc_109104E0:                           ; DATA XREF: .rdata:stru_10915120↓o
; __unwind { // SEH_109036D0
;   cleanup() // owned by 109036F7
                lea     ecx, [ebp+lParam]
                jmp     sub_10901A90
; } // starts at 109104E0
; END OF FUNCTION CHUNK FOR sub_109036D0

; =============== S U B R O U T I N E =======================================


SEH_109036D0    proc near               ; DATA XREF: sub_109036D0+5↑o
                                        ; .rdata:10914E68↓o
                mov     eax, offset stru_10915128
                jmp     __CxxFrameHandler3
SEH_109036D0    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_109038A0

loc_10910500:                           ; DATA XREF: .rdata:stru_1091514C↓o
; __unwind { // SEH_109038A0
;   cleanup() // owned by 10903919
                lea     ecx, [ebp+var_18]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; } // starts at 10910500
; END OF FUNCTION CHUNK FOR sub_109038A0

; =============== S U B R O U T I N E =======================================


SEH_109038A0    proc near               ; DATA XREF: sub_109038A0+5↑o
                                        ; .rdata:10914E6C↓o
                mov     eax, offset stru_10915154
                jmp     __CxxFrameHandler3
SEH_109038A0    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_10903980

loc_10910520:                           ; DATA XREF: .rdata:stru_10915178↓o
; __unwind { // SEH_10903980
;   cleanup() // owned by 109039F9
                lea     ecx, [ebp+var_18]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; } // starts at 10910520
; END OF FUNCTION CHUNK FOR sub_10903980

; =============== S U B R O U T I N E =======================================


SEH_10903980    proc near               ; DATA XREF: sub_10903980+5↑o
                                        ; .rdata:10914E70↓o
                mov     eax, offset stru_10915180
                jmp     __CxxFrameHandler3
SEH_10903980    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_10903B20

loc_10910540:                           ; DATA XREF: .rdata:stru_109151A4↓o
; __unwind { // SEH_10903B20
;   cleanup() // owned by 10903BAB
                lea     ecx, [ebp+var_1C]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; } // starts at 10910540
; END OF FUNCTION CHUNK FOR sub_10903B20

; =============== S U B R O U T I N E =======================================


SEH_10903B20    proc near               ; DATA XREF: sub_10903B20+5↑o
                                        ; .rdata:10914E74↓o
                mov     eax, offset stru_109151AC
                jmp     __CxxFrameHandler3
SEH_10903B20    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_10903FD0

loc_10910560:                           ; DATA XREF: .rdata:stru_109151D0↓o
; __unwind { // SEH_10903FD0
;   cleanup() // owned by 10904072
;   cleanup() // owned by 1090413C
                mov     eax, [ebp+var_C2C]
                and     eax, 1
                jz      locret_1091057F
                and     [ebp+var_C2C], 0FFFFFFFEh
                mov     ecx, [ebp+arg_0]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

locret_1091057F:                        ; CODE XREF: sub_10903FD0+C599↑j
                retn
; ---------------------------------------------------------------------------

loc_10910580:                           ; DATA XREF: .rdata:109151D8↓o
;   cleanup() // owned by 10904110
                lea     ecx, [ebp+var_C28]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; } // starts at 10910560
; END OF FUNCTION CHUNK FOR sub_10903FD0

; =============== S U B R O U T I N E =======================================


SEH_10903FD0    proc near               ; DATA XREF: sub_10903FD0+5↑o
                                        ; .rdata:10914E78↓o
                mov     eax, offset stru_109151E0
                jmp     __CxxFrameHandler3
SEH_10903FD0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


sub_109105A0    proc near               ; DATA XREF: .rdata:stru_10915204↓o
                mov     ecx, [ebp-1Ch]
                jmp     ds:??1dnArchive@@UAE@XZ ; dnArchive::~dnArchive(void)
sub_109105A0    endp


; =============== S U B R O U T I N E =======================================


sub_109105A9    proc near               ; DATA XREF: .text:10904235↑o
                                        ; .rdata:10914E7C↓o
                mov     eax, offset stru_1091520C
                jmp     __CxxFrameHandler3
sub_109105A9    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_10904290

loc_109105C0:                           ; DATA XREF: .rdata:stru_10915230↓o
; __unwind { // SEH_10904290
;   cleanup() // owned by 109042B7
                mov     ecx, [ebp+var_1C]
                jmp     ds:??1dnArchive@@UAE@XZ ; dnArchive::~dnArchive(void)
; } // starts at 109105C0
; END OF FUNCTION CHUNK FOR sub_10904290

; =============== S U B R O U T I N E =======================================


SEH_10904290    proc near               ; DATA XREF: sub_10904290+5↑o
                                        ; .rdata:10914E80↓o
                mov     eax, offset stru_10915238
                jmp     __CxxFrameHandler3
SEH_10904290    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_10904310

loc_109105E0:                           ; DATA XREF: .rdata:stru_1091525C↓o
; __unwind { // SEH_10904310
                push    offset aCompressedfile ; "CompressedFileReader"
                mov     eax, [ebp+var_2C]
                push    eax
                call    sub_10903810
                add     esp, 8
                retn
; ---------------------------------------------------------------------------

loc_109105F2:                           ; DATA XREF: .rdata:10915264↓o
;   cleanup() // owned by 10904496
;   cleanup() // owned by 10904500
                push    offset aWindowsfilerea ; "WindowsFileReader"
                mov     eax, [ebp+var_34]
                push    eax
                call    sub_10903810
                add     esp, 8
                retn
; } // starts at 109105E0
; END OF FUNCTION CHUNK FOR sub_10904310

; =============== S U B R O U T I N E =======================================


SEH_10904310    proc near               ; DATA XREF: sub_10904310+5↑o
                                        ; .rdata:10914E84↓o
                mov     eax, offset stru_1091526C
                jmp     __CxxFrameHandler3
SEH_10904310    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_109045D0

loc_10910610:                           ; DATA XREF: .rdata:stru_10915290↓o
; __unwind { // SEH_109045D0
                push    offset aWindowsfilewri ; "WindowsFileWriter"
                mov     eax, [ebp+var_2C]
                push    eax
                call    sub_10903810
                add     esp, 8
                retn
; ---------------------------------------------------------------------------

loc_10910622:                           ; DATA XREF: .rdata:10915298↓o
;   cleanup() // owned by 109047CA
;   cleanup() // owned by 10904830
                push    offset aWindowsfilewri ; "WindowsFileWriter"
                mov     eax, [ebp+var_34]
                push    eax
                call    sub_10903810
                add     esp, 8
                retn
; } // starts at 10910610
; END OF FUNCTION CHUNK FOR sub_109045D0

; =============== S U B R O U T I N E =======================================


SEH_109045D0    proc near               ; DATA XREF: sub_109045D0+5↑o
                                        ; .rdata:10914E88↓o
                mov     eax, offset stru_109152A0
                jmp     __CxxFrameHandler3
SEH_109045D0    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_10904FB0

loc_10910640:                           ; DATA XREF: .rdata:stru_109152C4↓o
; __unwind { // SEH_10904FB0
;   cleanup() // owned by 10905007
                mov     eax, [ebp+var_10]
                push    eax
                mov     ecx, [ebp+var_14]
                push    ecx
                call    nullsub_1
                add     esp, 8
                retn
; } // starts at 10910640
; END OF FUNCTION CHUNK FOR sub_10904FB0

; =============== S U B R O U T I N E =======================================


SEH_10904FB0    proc near               ; DATA XREF: sub_10904FB0+5↑o
                                        ; .rdata:10914E8C↓o
                mov     eax, offset stru_109152CC
                jmp     __CxxFrameHandler3
SEH_10904FB0    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_10905080

loc_10910660:                           ; DATA XREF: .rdata:stru_109152F0↓o
; __unwind { // SEH_10905080
;   cleanup() // owned by 109050BA
;   cleanup() // owned by 109050F5
                mov     ecx, [ebp+var_10]
                jmp     ds:??1dnArrayBase@@QAE@XZ ; dnArrayBase::~dnArrayBase(void)
; ---------------------------------------------------------------------------

loc_10910669:                           ; DATA XREF: .rdata:109152F8↓o
;   cleanup() // owned by 109050D9
                mov     eax, [ebp+var_10]
                push    eax
                mov     ecx, [ebp+var_14]
                push    ecx
                call    nullsub_1
                add     esp, 8
                retn
; } // starts at 10910660
; END OF FUNCTION CHUNK FOR sub_10905080

; =============== S U B R O U T I N E =======================================


SEH_10905080    proc near               ; DATA XREF: sub_10905080+5↑o
                                        ; .rdata:10914E90↓o
                mov     eax, offset stru_10915300
                jmp     __CxxFrameHandler3
SEH_10905080    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_109051A0

loc_10910690:                           ; DATA XREF: .rdata:stru_10915324↓o
; __unwind { // SEH_109051A0
;   cleanup() // owned by 109051F0
                mov     ecx, [ebp+var_14]
                add     ecx, 4
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; } // starts at 10910690
; END OF FUNCTION CHUNK FOR sub_109051A0

; =============== S U B R O U T I N E =======================================


SEH_109051A0    proc near               ; DATA XREF: sub_109051A0+5↑o
                                        ; .rdata:10914E94↓o
                mov     eax, offset stru_1091532C
                jmp     __CxxFrameHandler3
SEH_109051A0    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_10905580

loc_109106B0:                           ; DATA XREF: .rdata:stru_10915350↓o
; __unwind { // SEH_10905580
;   cleanup() // owned by 10905650
                lea     ecx, [ebp+var_270]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; } // starts at 109106B0
; END OF FUNCTION CHUNK FOR sub_10905580

; =============== S U B R O U T I N E =======================================


SEH_10905580    proc near               ; DATA XREF: sub_10905580+5↑o
                                        ; .rdata:10914E98↓o
                mov     eax, offset stru_10915358
                jmp     __CxxFrameHandler3
SEH_10905580    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_109057B0

loc_109106D0:                           ; DATA XREF: .rdata:stru_1091537C↓o
; __unwind { // SEH_109057B0
;   cleanup() // owned by 109057CE
                mov     ecx, [ebp+var_18]
                jmp     ds:??1dnArrayBase@@QAE@XZ ; dnArrayBase::~dnArrayBase(void)
; } // starts at 109106D0
; END OF FUNCTION CHUNK FOR sub_109057B0

; =============== S U B R O U T I N E =======================================


SEH_109057B0    proc near               ; DATA XREF: sub_109057B0+5↑o
                                        ; .rdata:10914E9C↓o
                mov     eax, offset stru_10915384
                jmp     __CxxFrameHandler3
SEH_109057B0    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_10905860

loc_109106F0:                           ; DATA XREF: .rdata:stru_109153A8↓o
; __unwind { // SEH_10905860
;   cleanup() // owned by 10905885
                mov     ecx, [ebp+var_10]
                jmp     ds:??1dnArrayBase@@QAE@XZ ; dnArrayBase::~dnArrayBase(void)
; } // starts at 109106F0
; END OF FUNCTION CHUNK FOR sub_10905860

; =============== S U B R O U T I N E =======================================


SEH_10905860    proc near               ; DATA XREF: sub_10905860+5↑o
                                        ; .rdata:10914EA0↓o
                mov     eax, offset stru_109153B0
                jmp     __CxxFrameHandler3
SEH_10905860    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_109058D0

loc_10910710:                           ; DATA XREF: .rdata:stru_109153D4↓o
; __unwind { // SEH_109058D0
;   cleanup() // owned by 109058F5
                mov     ecx, [ebp+var_10]
                jmp     ds:??1dnArrayBase@@QAE@XZ ; dnArrayBase::~dnArrayBase(void)
; } // starts at 10910710
; END OF FUNCTION CHUNK FOR sub_109058D0

; =============== S U B R O U T I N E =======================================


SEH_109058D0    proc near               ; DATA XREF: sub_109058D0+5↑o
                                        ; .rdata:10914EA4↓o
                mov     eax, offset stru_109153DC
                jmp     __CxxFrameHandler3
SEH_109058D0    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_10905920

loc_10910730:                           ; DATA XREF: .rdata:1091542C↓o
; __unwind { // SEH_10905920
;   cleanup() // owned by 10905956
;   cleanup() // owned by 109060CA
                lea     ecx, [ebp+var_28]
                jmp     sub_10905860
; ---------------------------------------------------------------------------

loc_10910738:                           ; DATA XREF: .rdata:10915434↓o
;   cleanup() // owned by 1090597B
;   cleanup() // owned by 10905E0B
;   cleanup() // owned by 10905F32
;   cleanup() // owned by 1090601E
;   cleanup() // owned by 10906082
                lea     ecx, [ebp+var_1C]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_10910741:                           ; DATA XREF: .rdata:1091543C↓o
                lea     ecx, [ebp+var_34]
                jmp     sub_109057B0
; ---------------------------------------------------------------------------

loc_10910749:                           ; DATA XREF: .rdata:10915444↓o
                lea     eax, [ebp+var_28]
                push    eax
                mov     ecx, [ebp+var_514]
                push    ecx
                call    nullsub_1
                add     esp, 8
                retn
; ---------------------------------------------------------------------------

loc_1091075D:                           ; DATA XREF: .rdata:1091544C↓o
                lea     eax, [ebp+var_28]
                push    eax
                mov     ecx, [ebp+var_51C]
                push    ecx
                call    nullsub_1
                add     esp, 8
                retn
; ---------------------------------------------------------------------------

loc_10910771:                           ; DATA XREF: .rdata:10915454↓o
                lea     ecx, [ebp+var_29C]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_1091077D:                           ; DATA XREF: .rdata:1091545C↓o
                lea     eax, [ebp+var_28]
                push    eax
                mov     ecx, [ebp+var_524]
                push    ecx
                call    nullsub_1
                add     esp, 8
                retn
; ---------------------------------------------------------------------------

loc_10910791:                           ; DATA XREF: .rdata:10915464↓o
                lea     eax, [ebp+var_28]
                push    eax
                mov     ecx, [ebp+var_52C]
                push    ecx
                call    nullsub_1
                add     esp, 8
                retn
; ---------------------------------------------------------------------------

loc_109107A5:                           ; DATA XREF: .rdata:1091546C↓o
                lea     eax, [ebp+var_28]
                push    eax
                mov     ecx, [ebp+var_534]
                push    ecx
                call    nullsub_1
                add     esp, 8
                retn
; ---------------------------------------------------------------------------

loc_109107B9:                           ; DATA XREF: .rdata:10915474↓o
                lea     eax, [ebp+var_28]
                push    eax
                mov     ecx, [ebp+var_53C]
                push    ecx
                call    nullsub_1
                add     esp, 8
                retn
; ---------------------------------------------------------------------------

loc_109107CD:                           ; DATA XREF: .rdata:1091547C↓o
                lea     ecx, [ebp+var_2A8]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_109107D9:                           ; DATA XREF: .rdata:10915484↓o
                lea     eax, [ebp+var_28]
                push    eax
                mov     ecx, [ebp+var_544]
                push    ecx
                call    nullsub_1
                add     esp, 8
                retn
; ---------------------------------------------------------------------------

loc_109107ED:                           ; DATA XREF: .rdata:1091548C↓o
                lea     eax, [ebp+var_28]
                push    eax
                mov     ecx, [ebp+var_54C]
                push    ecx
                call    nullsub_1
                add     esp, 8
                retn
; ---------------------------------------------------------------------------

loc_10910801:                           ; DATA XREF: .rdata:10915494↓o
                lea     ecx, [ebp+var_508]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_1091080D:                           ; DATA XREF: .rdata:1091549C↓o
                lea     eax, [ebp+var_28]
                push    eax
                mov     ecx, [ebp+var_554]
                push    ecx
                call    nullsub_1
                add     esp, 8
                retn
; ---------------------------------------------------------------------------

loc_10910821:                           ; DATA XREF: .rdata:109154A4↓o
                lea     ecx, [ebp+var_560]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_1091082D:                           ; DATA XREF: .rdata:109154AC↓o
                lea     eax, [ebp+var_28]
                push    eax
                mov     ecx, [ebp+var_568]
                push    ecx
                call    nullsub_1
                add     esp, 8
                retn
; ---------------------------------------------------------------------------

loc_10910841:                           ; DATA XREF: .rdata:109154B4↓o
;   cleanup() // owned by 10905992
;   cleanup() // owned by 10905A6E
;   cleanup() // owned by 10905AAF
;   cleanup() // owned by 10905AC9
;   cleanup() // owned by 10905B04
;   cleanup() // owned by 10905B32
;   cleanup() // owned by 10905B5D
;   cleanup() // owned by 10905B9B
;   cleanup() // owned by 10905BC1
;   cleanup() // owned by 10905BFF
;   cleanup() // owned by 10905C2C
;   cleanup() // owned by 10905C6D
;   cleanup() // owned by 10905C87
;   cleanup() // owned by 10905CC2
;   cleanup() // owned by 10905CEF
;   cleanup() // owned by 10905D1A
;   cleanup() // owned by 10905D58
;   cleanup() // owned by 10905D7E
;   cleanup() // owned by 10905DBC
;   cleanup() // owned by 10905EBA
;   cleanup() // owned by 10905EF4
;   cleanup() // owned by 10905F76
;   cleanup() // owned by 10905F8D
;   cleanup() // owned by 10905FE0
;   cleanup() // owned by 10906044
                lea     eax, [ebp+var_28]
                push    eax
                mov     ecx, [ebp+var_570]
                push    ecx
                call    nullsub_1
                add     esp, 8
                retn
; ---------------------------------------------------------------------------

loc_10910855:                           ; DATA XREF: .rdata:stru_10915424↓o
;   cleanup() // owned by 109060D7
                mov     eax, [ebp+var_574]
                and     eax, 1
                jz      locret_10910873
                and     [ebp+var_574], 0FFFFFFFEh
                mov     ecx, [ebp+arg_0]
                jmp     sub_10905860
; ---------------------------------------------------------------------------

locret_10910873:                        ; CODE XREF: sub_10905920+AF3E↑j
                retn
; } // starts at 10910730
; END OF FUNCTION CHUNK FOR sub_10905920

; =============== S U B R O U T I N E =======================================


SEH_10905920    proc near               ; DATA XREF: sub_10905920+5↑o
                                        ; .rdata:10914EA8↓o
                mov     eax, offset stru_10915400
                jmp     __CxxFrameHandler3
SEH_10905920    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_10906100

loc_10910880:                           ; DATA XREF: .rdata:stru_109154BC↓o
; __unwind { // SEH_10906100
;   cleanup() // owned by 10906155
                mov     ecx, [ebp+var_10]
                add     ecx, 8
                jmp     sub_10905860
; ---------------------------------------------------------------------------

loc_1091088B:                           ; DATA XREF: .rdata:109154C4↓o
;   cleanup() // owned by 10906168
                mov     ecx, [ebp+var_10]
                add     ecx, 14h
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_10910897:                           ; DATA XREF: .rdata:109154CC↓o
;   cleanup() // owned by 10906178
                mov     ecx, [ebp+var_10]
                add     ecx, 20h
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; } // starts at 10910880
; END OF FUNCTION CHUNK FOR sub_10906100

; =============== S U B R O U T I N E =======================================


SEH_10906100    proc near               ; DATA XREF: sub_10906100+5↑o
                                        ; .rdata:10914EAC↓o
                mov     eax, offset stru_109154D4
                jmp     __CxxFrameHandler3
SEH_10906100    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_109061B0

loc_109108B0:                           ; DATA XREF: .rdata:stru_1091551C↓o
; __unwind { // SEH_109061B0
;   cleanup() // owned by 109061DF
;   cleanup() // owned by 10906217
;   cleanup() // owned by 10906252
;   cleanup() // owned by 10906290
;   cleanup() // owned by 109062CB
                lea     ecx, [ebp+var_18]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_109108B9:                           ; DATA XREF: .rdata:10915524↓o
                lea     ecx, [ebp+var_24]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_109108C2:                           ; DATA XREF: .rdata:1091552C↓o
                lea     ecx, [ebp+var_30]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_109108CB:                           ; DATA XREF: .rdata:10915534↓o
                lea     ecx, [ebp+var_3C]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_109108D4:                           ; DATA XREF: .rdata:1091553C↓o
;   cleanup() // owned by 109061FC
;   cleanup() // owned by 1090623E
;   cleanup() // owned by 10906275
;   cleanup() // owned by 109062B7
                lea     ecx, [ebp+var_48]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; } // starts at 109108B0
; END OF FUNCTION CHUNK FOR sub_109061B0

; =============== S U B R O U T I N E =======================================


SEH_109061B0    proc near               ; DATA XREF: sub_109061B0+5↑o
                                        ; .rdata:10914EB0↓o
                mov     eax, offset stru_109154F8
                jmp     __CxxFrameHandler3
SEH_109061B0    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_10906340

loc_109108F0:                           ; DATA XREF: .rdata:stru_10915544↓o
; __unwind { // SEH_10906340
;   cleanup() // owned by 10906392
                mov     eax, [ebp+arg_0]
                push    eax
                mov     ecx, [ebp+arg_4]
                push    ecx
                call    nullsub_2
                add     esp, 8
                retn
; } // starts at 109108F0
; END OF FUNCTION CHUNK FOR sub_10906340

; =============== S U B R O U T I N E =======================================


SEH_10906340    proc near               ; DATA XREF: sub_10906340+5↑o
                                        ; .rdata:10914EB4↓o
                mov     eax, offset stru_1091554C
                jmp     __CxxFrameHandler3
SEH_10906340    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_109063D0

loc_10910910:                           ; DATA XREF: .rdata:stru_10915570↓o
; __unwind { // SEH_109063D0
                lea     ecx, [ebp+var_820]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_1091091C:                           ; DATA XREF: .rdata:10915578↓o
;   cleanup() // owned by 10906522
;   cleanup() // owned by 10906575
                lea     ecx, [ebp+var_82C]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; } // starts at 10910910
; END OF FUNCTION CHUNK FOR sub_109063D0

; =============== S U B R O U T I N E =======================================


SEH_109063D0    proc near               ; DATA XREF: sub_109063D0+5↑o
                                        ; .rdata:10914EB8↓o
                mov     eax, offset stru_10915580
                jmp     __CxxFrameHandler3
SEH_109063D0    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_10906670

loc_10910940:                           ; DATA XREF: .rdata:stru_109155A4↓o
; __unwind { // SEH_10906670
;   cleanup() // owned by 109066BA
                mov     ecx, [ebp+var_14]
                add     ecx, 8
                jmp     sub_10905860
; ---------------------------------------------------------------------------

loc_1091094B:                           ; DATA XREF: .rdata:109155AC↓o
;   cleanup() // owned by 109066AA
                mov     ecx, [ebp+var_14]
                add     ecx, 14h
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_10910957:                           ; DATA XREF: .rdata:109155B4↓o
;   cleanup() // owned by 10906697
                mov     ecx, [ebp+var_14]
                add     ecx, 20h
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; } // starts at 10910940
; END OF FUNCTION CHUNK FOR sub_10906670

; =============== S U B R O U T I N E =======================================


SEH_10906670    proc near               ; DATA XREF: sub_10906670+5↑o
                                        ; .rdata:10914EBC↓o
                mov     eax, offset stru_109155BC
                jmp     __CxxFrameHandler3
SEH_10906670    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_109066F0

loc_10910970:                           ; DATA XREF: .rdata:stru_10915604↓o
; __unwind { // SEH_109066F0
;   cleanup() // owned by 1090675A
;   cleanup() // owned by 1090693A
                mov     eax, [ebp+var_854]
                and     eax, 1
                jz      locret_1091098E
                and     [ebp+var_854], 0FFFFFFFEh
                mov     ecx, [ebp+arg_0]
                jmp     sub_10905860
; ---------------------------------------------------------------------------

locret_1091098E:                        ; CODE XREF: sub_109066F0+A289↑j
                retn
; ---------------------------------------------------------------------------

loc_1091098F:                           ; DATA XREF: .rdata:1091560C↓o
;   cleanup() // owned by 10906786
;   cleanup() // owned by 1090692E
                lea     ecx, [ebp+var_24]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_10910998:                           ; DATA XREF: .rdata:10915614↓o
;   cleanup() // owned by 10906795
;   cleanup() // owned by 10906922
                lea     ecx, [ebp+var_30]
                jmp     sub_10905860
; ---------------------------------------------------------------------------

loc_109109A0:                           ; DATA XREF: .rdata:1091561C↓o
;   cleanup() // owned by 109067A1
;   cleanup() // owned by 109067F0
;   cleanup() // owned by 109068A6
                lea     ecx, [ebp+var_18]
                jmp     sub_10905860
; ---------------------------------------------------------------------------

loc_109109A8:                           ; DATA XREF: .rdata:10915624↓o
                lea     ecx, [ebp+var_844]
                jmp     sub_10905860
; ---------------------------------------------------------------------------

loc_109109B3:                           ; DATA XREF: .rdata:1091562C↓o
;   cleanup() // owned by 109067DD
;   cleanup() // owned by 10906893
                lea     ecx, [ebp+var_850]
                jmp     sub_10905860
; } // starts at 10910970
; END OF FUNCTION CHUNK FOR sub_109066F0

; =============== S U B R O U T I N E =======================================


SEH_109066F0    proc near               ; DATA XREF: sub_109066F0+5↑o
                                        ; .rdata:10914EC0↓o
                mov     eax, offset stru_109155E0
                jmp     __CxxFrameHandler3
SEH_109066F0    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_10906960

loc_109109D0:                           ; DATA XREF: .rdata:stru_10915634↓o
; __unwind { // SEH_10906960
;   cleanup() // owned by 10906A74
                lea     ecx, [ebp+var_81C]
                jmp     sub_10905860
; } // starts at 109109D0
; END OF FUNCTION CHUNK FOR sub_10906960

; =============== S U B R O U T I N E =======================================


SEH_10906960    proc near               ; DATA XREF: sub_10906960+5↑o
                                        ; .rdata:10914EC4↓o
                mov     eax, offset stru_1091563C
                jmp     __CxxFrameHandler3
SEH_10906960    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_10906B60

loc_109109F0:                           ; DATA XREF: .rdata:stru_10915684↓o
; __unwind { // SEH_10906B60
                lea     ecx, [ebp+var_44]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_109109F9:                           ; DATA XREF: .rdata:1091568C↓o
                                        ; .rdata:10915694↓o
;   cleanup() // owned by 10906BC4
;   cleanup() // owned by 10906BD0
;   cleanup() // owned by 10906DD5
;   cleanup() // owned by 10906E1A
;   cleanup() // owned by 10906E85
                lea     ecx, [ebp+var_2C]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_10910A02:                           ; DATA XREF: .rdata:1091569C↓o
                lea     ecx, [ebp+var_20]
                jmp     sub_10905860
; ---------------------------------------------------------------------------

loc_10910A0A:                           ; DATA XREF: .rdata:109156A4↓o
                lea     ecx, [ebp+var_50]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_10910A13:                           ; DATA XREF: .rdata:109156AC↓o
                lea     ecx, [ebp+var_38]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_10910A1C:                           ; DATA XREF: .rdata:109156BC↓o
                lea     ecx, [ebp+var_38]
                jmp     sub_10905860
; ---------------------------------------------------------------------------

loc_10910A24:                           ; DATA XREF: .rdata:109156C4↓o
                lea     ecx, [ebp+var_38]
                jmp     ds:??1dnArrayBase@@QAE@XZ ; dnArrayBase::~dnArrayBase(void)
; ---------------------------------------------------------------------------

loc_10910A2D:                           ; DATA XREF: .rdata:109156CC↓o
                lea     ecx, [ebp+var_38]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_10910A36:                           ; DATA XREF: .rdata:109156D4↓o
                lea     ecx, [ebp+var_50]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_10910A3F:                           ; DATA XREF: .rdata:109156E4↓o
;   cleanup() // owned by 10906BFB
;   cleanup() // owned by 10906C2F
;   cleanup() // owned by 10906C41
;   cleanup() // owned by 10906C5D
;   cleanup() // owned by 10906C6A
;   cleanup() // owned by 10906CBC
;   cleanup() // owned by 10906CCD
;   cleanup() // owned by 10906CD9
;   cleanup() // owned by 10906D1C
;   cleanup() // owned by 10906D2E
;   cleanup() // owned by 10906D4A
;   cleanup() // owned by 10906D57
;   cleanup() // owned by 10906D9F
;   cleanup() // owned by 10906E0E
;   cleanup() // owned by 10906E4C
                lea     ecx, [ebp+var_20]
                jmp     ds:??1dnArrayBase@@QAE@XZ ; dnArrayBase::~dnArrayBase(void)
; ---------------------------------------------------------------------------

loc_10910A48:                           ; DATA XREF: .rdata:109156B4↓o
                lea     ecx, [ebp+var_20]
                jmp     ds:??1dnArrayBase@@QAE@XZ ; dnArrayBase::~dnArrayBase(void)
; ---------------------------------------------------------------------------

loc_10910A51:                           ; DATA XREF: .rdata:109156DC↓o
                lea     ecx, [ebp+var_20]
                jmp     ds:??1dnArrayBase@@QAE@XZ ; dnArrayBase::~dnArrayBase(void)
; } // starts at 109109F0
; END OF FUNCTION CHUNK FOR sub_10906B60

; =============== S U B R O U T I N E =======================================


SEH_10906B60    proc near               ; DATA XREF: sub_10906B60+B↑o
                                        ; .rdata:10914EC8↓o
                mov     eax, offset stru_10915660
                jmp     __CxxFrameHandler3
SEH_10906B60    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_10906FF0

loc_10910A70:                           ; DATA XREF: .rdata:stru_109156EC↓o
; __unwind { // SEH_10906FF0
;   cleanup() // owned by 10907022
                lea     ecx, [ebp+var_18]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; } // starts at 10910A70
; END OF FUNCTION CHUNK FOR sub_10906FF0

; =============== S U B R O U T I N E =======================================


SEH_10906FF0    proc near               ; DATA XREF: sub_10906FF0+5↑o
                                        ; .rdata:10914ECC↓o
                mov     eax, offset stru_109156F4
                jmp     __CxxFrameHandler3
SEH_10906FF0    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_109070D0

loc_10910A90:                           ; DATA XREF: .rdata:stru_10915718↓o
; __unwind { // SEH_109070D0
;   cleanup() // owned by 10907102
                lea     ecx, [ebp+var_18]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; } // starts at 10910A90
; END OF FUNCTION CHUNK FOR sub_109070D0

; =============== S U B R O U T I N E =======================================


SEH_109070D0    proc near               ; DATA XREF: sub_109070D0+5↑o
                                        ; .rdata:10914ED0↓o
                mov     eax, offset stru_10915720
                jmp     __CxxFrameHandler3
SEH_109070D0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


sub_10910AB0    proc near               ; DATA XREF: .rdata:stru_10915744↓o
                mov     ecx, [ebp-1Ch]
                add     ecx, 4
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
sub_10910AB0    endp


; =============== S U B R O U T I N E =======================================


sub_10910ABC    proc near               ; DATA XREF: .text:109071E5↑o
                                        ; .rdata:10914ED4↓o
                mov     eax, offset stru_1091574C
                jmp     __CxxFrameHandler3
sub_10910ABC    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


sub_10910AD0    proc near               ; DATA XREF: .rdata:stru_10915770↓o
                mov     ecx, [ebp-1Ch]
                add     ecx, 4
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
sub_10910AD0    endp


; =============== S U B R O U T I N E =======================================


sub_10910ADC    proc near               ; DATA XREF: .text:10907245↑o
                                        ; .rdata:10914ED8↓o
                mov     eax, offset stru_10915778
                jmp     __CxxFrameHandler3
sub_10910ADC    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_109072B0

loc_10910AF0:                           ; DATA XREF: .rdata:stru_1091579C↓o
; __unwind { // SEH_109072B0
;   cleanup() // owned by 1090730C
                mov     ecx, [ebp+var_20]
                add     ecx, 4
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; } // starts at 10910AF0
; END OF FUNCTION CHUNK FOR sub_109072B0

; =============== S U B R O U T I N E =======================================


SEH_109072B0    proc near               ; DATA XREF: sub_109072B0+5↑o
                                        ; .rdata:10914EDC↓o
                mov     eax, offset stru_109157A4
                jmp     __CxxFrameHandler3
SEH_109072B0    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_10907370

loc_10910B10:                           ; DATA XREF: .rdata:stru_109157C8↓o
; __unwind { // SEH_10907370
;   cleanup() // owned by 1090738E
                mov     ecx, [ebp+var_20]
                jmp     ds:??1dnArrayBase@@QAE@XZ ; dnArrayBase::~dnArrayBase(void)
; } // starts at 10910B10
; END OF FUNCTION CHUNK FOR sub_10907370

; =============== S U B R O U T I N E =======================================


SEH_10907370    proc near               ; DATA XREF: sub_10907370+5↑o
                                        ; .rdata:10914EE0↓o
                mov     eax, offset stru_109157D0
                jmp     __CxxFrameHandler3
SEH_10907370    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_109073D0

loc_10910B30:                           ; DATA XREF: .rdata:stru_109157F4↓o
; __unwind { // SEH_109073D0
;   cleanup() // owned by 10907420
                mov     ecx, [ebp+var_24]
                jmp     ds:??1dnArrayBase@@QAE@XZ ; dnArrayBase::~dnArrayBase(void)
; } // starts at 10910B30
; END OF FUNCTION CHUNK FOR sub_109073D0

; =============== S U B R O U T I N E =======================================


SEH_109073D0    proc near               ; DATA XREF: sub_109073D0+5↑o
                                        ; .rdata:10914EE4↓o
                mov     eax, offset stru_109157FC
                jmp     __CxxFrameHandler3
SEH_109073D0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


sub_10910B50    proc near               ; DATA XREF: .rdata:stru_10915820↓o
                mov     ecx, [ebp-24h]
                add     ecx, 4
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
sub_10910B50    endp


; =============== S U B R O U T I N E =======================================


sub_10910B5C    proc near               ; DATA XREF: .text:109074A5↑o
                                        ; .rdata:10914EE8↓o
                mov     eax, offset stru_10915828
                jmp     __CxxFrameHandler3
sub_10910B5C    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


sub_10910B70    proc near               ; DATA XREF: .rdata:stru_1091584C↓o
                mov     ecx, [ebp-24h]
                add     ecx, 4
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
sub_10910B70    endp


; =============== S U B R O U T I N E =======================================


sub_10910B7C    proc near               ; DATA XREF: .text:10907505↑o
                                        ; .rdata:10914EEC↓o
                mov     eax, offset stru_10915854
                jmp     __CxxFrameHandler3
sub_10910B7C    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_10907570

loc_10910B90:                           ; DATA XREF: .rdata:stru_10915878↓o
; __unwind { // SEH_10907570
;   cleanup() // owned by 109075CC
                mov     ecx, [ebp+var_28]
                add     ecx, 4
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; } // starts at 10910B90
; END OF FUNCTION CHUNK FOR sub_10907570

; =============== S U B R O U T I N E =======================================


SEH_10907570    proc near               ; DATA XREF: sub_10907570+5↑o
                                        ; .rdata:10914EF0↓o
                mov     eax, offset stru_10915880
                jmp     __CxxFrameHandler3
SEH_10907570    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_10907630

loc_10910BB0:                           ; DATA XREF: .rdata:stru_109158A4↓o
; __unwind { // SEH_10907630
;   cleanup() // owned by 1090764E
                mov     ecx, [ebp+var_20]
                jmp     ds:??1dnArrayBase@@QAE@XZ ; dnArrayBase::~dnArrayBase(void)
; } // starts at 10910BB0
; END OF FUNCTION CHUNK FOR sub_10907630

; =============== S U B R O U T I N E =======================================


SEH_10907630    proc near               ; DATA XREF: sub_10907630+5↑o
                                        ; .rdata:10914EF4↓o
                mov     eax, offset stru_109158AC
                jmp     __CxxFrameHandler3
SEH_10907630    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


sub_10910BD0    proc near               ; DATA XREF: .rdata:stru_109158D0↓o
                mov     ecx, [ebp-3Ch]
                jmp     sub_10907630
sub_10910BD0    endp


; =============== S U B R O U T I N E =======================================


sub_10910BD8    proc near               ; DATA XREF: .text:10907695↑o
                                        ; .rdata:10914EF8↓o
                mov     eax, offset stru_109158D8
                jmp     __CxxFrameHandler3
sub_10910BD8    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_10907700

loc_10910BF0:                           ; DATA XREF: .rdata:stru_109158FC↓o
; __unwind { // SEH_10907700
;   cleanup() // owned by 10907750
                mov     ecx, [ebp+var_24]
                jmp     ds:??1dnArrayBase@@QAE@XZ ; dnArrayBase::~dnArrayBase(void)
; } // starts at 10910BF0
; END OF FUNCTION CHUNK FOR sub_10907700

; =============== S U B R O U T I N E =======================================


SEH_10907700    proc near               ; DATA XREF: sub_10907700+5↑o
                                        ; .rdata:10914EFC↓o
                mov     eax, offset stru_10915904
                jmp     __CxxFrameHandler3
SEH_10907700    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


sub_10910C10    proc near               ; DATA XREF: .rdata:stru_10915928↓o
                mov     ecx, [ebp-3Ch]
                jmp     sub_10907630
sub_10910C10    endp


; =============== S U B R O U T I N E =======================================


sub_10910C18    proc near               ; DATA XREF: .text:10907795↑o
                                        ; .rdata:10914F00↓o
                mov     eax, offset stru_10915930
                jmp     __CxxFrameHandler3
sub_10910C18    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


sub_10910C30    proc near               ; DATA XREF: .rdata:stru_10915954↓o
                mov     ecx, [ebp-3Ch]
                jmp     sub_10907630
sub_10910C30    endp


; =============== S U B R O U T I N E =======================================


sub_10910C38    proc near               ; DATA XREF: .text:10907825↑o
                                        ; .rdata:10914F04↓o
                mov     eax, offset stru_1091595C
                jmp     __CxxFrameHandler3
sub_10910C38    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_109078B0

loc_10910C50:                           ; DATA XREF: .rdata:stru_109159A4↓o
; __unwind { // SEH_109078B0
;   cleanup() // owned by 109078D7
;   cleanup() // owned by 10907910
                mov     ecx, [ebp+var_14]
                jmp     sub_10902430
; ---------------------------------------------------------------------------

loc_10910C58:                           ; DATA XREF: .rdata:109159AC↓o
                mov     ecx, [ebp+var_10]
                jmp     sub_10907630
; ---------------------------------------------------------------------------

loc_10910C60:                           ; DATA XREF: .rdata:109159B4↓o
;   cleanup() // owned by 109078F0
;   cleanup() // owned by 10907914
                mov     ecx, [ebp+var_14]
                add     ecx, 4
                jmp     sub_10907890
; ---------------------------------------------------------------------------

loc_10910C6B:                           ; DATA XREF: .rdata:109159BC↓o
;   cleanup() // owned by 10907941
                mov     ecx, [ebp+var_14]
                add     ecx, 20h
                jmp     ds:??1FFilename@@QAE@XZ ; FFilename::~FFilename(void)
; ---------------------------------------------------------------------------

loc_10910C77:                           ; DATA XREF: .rdata:109159C4↓o
;   cleanup() // owned by 10907951
                mov     ecx, [ebp+var_14]
                add     ecx, 2Ch
                jmp     ds:??1FFilename@@QAE@XZ ; FFilename::~FFilename(void)
; } // starts at 10910C50
; END OF FUNCTION CHUNK FOR sub_109078B0

; =============== S U B R O U T I N E =======================================


SEH_109078B0    proc near               ; DATA XREF: sub_109078B0+5↑o
                                        ; .rdata:10914F08↓o
                mov     eax, offset stru_10915980
                jmp     __CxxFrameHandler3
SEH_109078B0    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_10907980

loc_10910C90:                           ; DATA XREF: .rdata:stru_109159CC↓o
; __unwind { // SEH_10907980
                lea     ecx, [ebp+var_18]
                jmp     ds:??1FFilename@@QAE@XZ ; FFilename::~FFilename(void)
; ---------------------------------------------------------------------------

loc_10910C99:                           ; DATA XREF: .rdata:109159D4↓o
                lea     ecx, [ebp+var_24]
                jmp     ds:??1FFilename@@QAE@XZ ; FFilename::~FFilename(void)
; ---------------------------------------------------------------------------

loc_10910CA2:                           ; DATA XREF: .rdata:109159DC↓o
;   cleanup() // owned by 109079AB
;   cleanup() // owned by 109079DF
;   cleanup() // owned by 10907A13
                lea     ecx, [ebp+var_30]
                jmp     ds:??1FFilename@@QAE@XZ ; FFilename::~FFilename(void)
; } // starts at 10910C90
; END OF FUNCTION CHUNK FOR sub_10907980

; =============== S U B R O U T I N E =======================================


SEH_10907980    proc near               ; DATA XREF: sub_10907980+5↑o
                                        ; .rdata:10914F0C↓o
                mov     eax, offset stru_109159E4
                jmp     __CxxFrameHandler3
SEH_10907980    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


sub_10910CC0    proc near               ; DATA XREF: .rdata:stru_10915A08↓o
                mov     ecx, [ebp-10h]
                add     ecx, 4
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
sub_10910CC0    endp


; =============== S U B R O U T I N E =======================================


sub_10910CCC    proc near               ; DATA XREF: .text:10907ED5↑o
                                        ; .rdata:10914F10↓o
                mov     eax, offset stru_10915A10
                jmp     __CxxFrameHandler3
sub_10910CCC    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


sub_10910CE0    proc near               ; DATA XREF: .rdata:stru_10915A34↓o
                mov     ecx, [ebp-10h]
                add     ecx, 4
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
sub_10910CE0    endp


; =============== S U B R O U T I N E =======================================


sub_10910CEC    proc near               ; DATA XREF: .text:10907FD5↑o
                                        ; .rdata:10914F14↓o
                mov     eax, offset stru_10915A3C
                jmp     __CxxFrameHandler3
sub_10910CEC    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_109080E0

loc_10910D00:                           ; DATA XREF: .rdata:stru_10915A60↓o
; __unwind { // SEH_109080E0
;   cleanup() // owned by 1090811B
                mov     ecx, [ebp+var_10]
                add     ecx, 4
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; } // starts at 10910D00
; END OF FUNCTION CHUNK FOR sub_109080E0

; =============== S U B R O U T I N E =======================================


SEH_109080E0    proc near               ; DATA XREF: sub_109080E0+5↑o
                                        ; .rdata:10914F18↓o
                mov     eax, offset stru_10915A68
                jmp     __CxxFrameHandler3
SEH_109080E0    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_10908AA0

loc_10910D20:                           ; DATA XREF: .rdata:stru_10915A8C↓o
; __unwind { // SEH_10908AA0
;   cleanup() // owned by 10908AD3
;   cleanup() // owned by 10908B4C
                mov     ecx, [ebp+var_38]
                jmp     ds:??1dnArrayBase@@QAE@XZ ; dnArrayBase::~dnArrayBase(void)
; ---------------------------------------------------------------------------

loc_10910D29:                           ; DATA XREF: .rdata:10915A94↓o
;   cleanup() // owned by 10908B1B
                mov     eax, [ebp+var_38]
                push    eax
                mov     ecx, [ebp+var_1C]
                push    ecx
                call    nullsub_3
                add     esp, 8
                retn
; } // starts at 10910D20
; END OF FUNCTION CHUNK FOR sub_10908AA0

; =============== S U B R O U T I N E =======================================


SEH_10908AA0    proc near               ; DATA XREF: sub_10908AA0+5↑o
                                        ; .rdata:10914F1C↓o
                mov     eax, offset stru_10915A9C
                jmp     __CxxFrameHandler3
SEH_10908AA0    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_10908D00

loc_10910D50:                           ; DATA XREF: .rdata:stru_10915AE4↓o
; __unwind { // SEH_10908D00
;   cleanup() // owned by 10908D53
;   cleanup() // owned by 10908DDF
;   cleanup() // owned by 10908E9F
;   cleanup() // owned by 10908EE9
;   cleanup() // owned by 10908F91
;   cleanup() // owned by 10908FB3
                lea     ecx, [ebp+var_18]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_10910D59:                           ; DATA XREF: .rdata:10915AEC↓o
                lea     ecx, [ebp+var_40]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_10910D62:                           ; DATA XREF: .rdata:10915AF4↓o
                lea     ecx, [ebp+var_4C]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_10910D6B:                           ; DATA XREF: .rdata:10915AFC↓o
                lea     ecx, [ebp+var_58]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_10910D74:                           ; DATA XREF: .rdata:10915B04↓o
;   cleanup() // owned by 10908DCB
;   cleanup() // owned by 10908E8B
;   cleanup() // owned by 10908ED5
;   cleanup() // owned by 10908F0E
                lea     ecx, [ebp+var_34]
                jmp     ds:??1?$dnArray@E@@QAE@XZ ; dnArray<uchar>::~dnArray<uchar>(void)
; } // starts at 10910D50
; END OF FUNCTION CHUNK FOR sub_10908D00

; =============== S U B R O U T I N E =======================================


SEH_10908D00    proc near               ; DATA XREF: sub_10908D00+5↑o
                                        ; .rdata:10914F20↓o
                mov     eax, offset stru_10915AC0
                jmp     __CxxFrameHandler3
SEH_10908D00    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_10909010

loc_10910D90:                           ; DATA XREF: .rdata:stru_10915B0C↓o
; __unwind { // SEH_10909010
                lea     ecx, [ebp+var_28]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_10910D99:                           ; DATA XREF: .rdata:10915B14↓o
;   cleanup() // owned by 109090BD
;   cleanup() // owned by 1090917D
                lea     ecx, [ebp+var_34]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; } // starts at 10910D90
; END OF FUNCTION CHUNK FOR sub_10909010

; =============== S U B R O U T I N E =======================================


SEH_10909010    proc near               ; DATA XREF: sub_10909010+5↑o
                                        ; .rdata:10914F24↓o
                mov     eax, offset stru_10915B1C
                jmp     __CxxFrameHandler3
SEH_10909010    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_109091E0

loc_10910DB0:                           ; DATA XREF: .rdata:stru_10915B40↓o
; __unwind { // SEH_109091E0
;   cleanup() // owned by 10909210
;   cleanup() // owned by 109092DA
;   cleanup() // owned by 109092FC
;   cleanup() // owned by 1090932E
                lea     ecx, [ebp+var_18]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_10910DB9:                           ; DATA XREF: .rdata:10915B48↓o
                lea     ecx, [ebp+var_24]
                jmp     ds:??1?$dnArray@E@@QAE@XZ ; dnArray<uchar>::~dnArray<uchar>(void)
; ---------------------------------------------------------------------------

loc_10910DC2:                           ; DATA XREF: .rdata:10915B50↓o
                lea     ecx, [ebp+var_34]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_10910DCB:                           ; DATA XREF: .rdata:10915B58↓o
;   cleanup() // owned by 10909236
;   cleanup() // owned by 109092B5
;   cleanup() // owned by 109092CD
;   cleanup() // owned by 10909316
                lea     ecx, [ebp+var_44]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; } // starts at 10910DB0
; END OF FUNCTION CHUNK FOR sub_109091E0

; =============== S U B R O U T I N E =======================================


SEH_109091E0    proc near               ; DATA XREF: sub_109091E0+5↑o
                                        ; .rdata:10914F28↓o
                mov     eax, offset stru_10915B60
                jmp     __CxxFrameHandler3
SEH_109091E0    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_109094A0

loc_10910DE0:                           ; DATA XREF: .rdata:stru_10915B84↓o
; __unwind { // SEH_109094A0
;   cleanup() // owned by 109094D0
;   cleanup() // owned by 10909501
                mov     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_1C]
                push    ecx
                call    nullsub_3
                add     esp, 8
                retn
; ---------------------------------------------------------------------------

loc_10910DF1:                           ; DATA XREF: .rdata:10915B8C↓o
;   cleanup() // owned by 109094ED
                mov     ecx, [ebp+var_1C]
                add     ecx, 4
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; } // starts at 10910DE0
; END OF FUNCTION CHUNK FOR sub_109094A0

; =============== S U B R O U T I N E =======================================


SEH_109094A0    proc near               ; DATA XREF: sub_109094A0+5↑o
                                        ; .rdata:10914F2C↓o
                mov     eax, offset stru_10915B94
                jmp     __CxxFrameHandler3
SEH_109094A0    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_109095C0

loc_10910E10:                           ; DATA XREF: .rdata:stru_10915BB8↓o
; __unwind { // SEH_109095C0
;   cleanup() // owned by 109095FB
                mov     ecx, [ebp+var_14]
                add     ecx, 4
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; } // starts at 10910E10
; END OF FUNCTION CHUNK FOR sub_109095C0

; =============== S U B R O U T I N E =======================================


SEH_109095C0    proc near               ; DATA XREF: sub_109095C0+B↑o
                                        ; .rdata:10914F30↓o
                mov     eax, offset stru_10915BC0
                jmp     __CxxFrameHandler3
SEH_109095C0    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_10909650

loc_10910E30:                           ; DATA XREF: .rdata:10915C10↓o
; __unwind { // SEH_10909650
;   cleanup() // owned by 10909683
;   cleanup() // owned by 10909837
                lea     ecx, [ebp+var_18]
                jmp     sub_10905860
; ---------------------------------------------------------------------------

loc_10910E38:                           ; DATA XREF: .rdata:10915C18↓o
;   cleanup() // owned by 10909697
;   cleanup() // owned by 109097A9
;   cleanup() // owned by 10909816
                lea     ecx, [ebp+var_24]
                jmp     ds:??1FFilename@@QAE@XZ ; FFilename::~FFilename(void)
; ---------------------------------------------------------------------------

loc_10910E41:                           ; DATA XREF: .rdata:10915C20↓o
                lea     ecx, [ebp+var_38]
                jmp     ds:??1FFilename@@QAE@XZ ; FFilename::~FFilename(void)
; ---------------------------------------------------------------------------

loc_10910E4A:                           ; DATA XREF: .rdata:10915C28↓o
                lea     ecx, [ebp+var_54]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_10910E53:                           ; DATA XREF: .rdata:10915C30↓o
                lea     ecx, [ebp+var_48]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_10910E5C:                           ; DATA XREF: .rdata:10915C38↓o
;   cleanup() // owned by 10909719
;   cleanup() // owned by 1090973E
;   cleanup() // owned by 10909763
;   cleanup() // owned by 1090977D
;   cleanup() // owned by 1090978A
;   cleanup() // owned by 10909803
                lea     ecx, [ebp+var_60]
                jmp     sub_10905860
; ---------------------------------------------------------------------------

loc_10910E64:                           ; DATA XREF: .rdata:stru_10915C08↓o
;   cleanup() // owned by 10909844
                mov     eax, [ebp+var_64]
                and     eax, 1
                jz      locret_10910E7C
                and     [ebp+var_64], 0FFFFFFFEh
                mov     ecx, [ebp+arg_0]
                jmp     sub_10905860
; ---------------------------------------------------------------------------

locret_10910E7C:                        ; CODE XREF: sub_10909650+781A↑j
                retn
; } // starts at 10910E30
; END OF FUNCTION CHUNK FOR sub_10909650

; =============== S U B R O U T I N E =======================================


SEH_10909650    proc near               ; DATA XREF: sub_10909650+5↑o
                                        ; .rdata:10914F34↓o
                mov     eax, offset stru_10915BE4
                jmp     __CxxFrameHandler3
SEH_10909650    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_109098C0

loc_10910E90:                           ; DATA XREF: .rdata:stru_10915C40↓o
; __unwind { // SEH_109098C0
;   cleanup() // owned by 109098EA
                mov     ecx, [ebp+var_64]
                jmp     sub_109058D0
; } // starts at 10910E90
; END OF FUNCTION CHUNK FOR sub_109098C0

; =============== S U B R O U T I N E =======================================


SEH_109098C0    proc near               ; DATA XREF: sub_109098C0+5↑o
                                        ; .rdata:10914F38↓o
                mov     eax, offset stru_10915C48
                jmp     __CxxFrameHandler3
SEH_109098C0    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_10909930

loc_10910EB0:                           ; DATA XREF: .rdata:stru_10915C6C↓o
; __unwind { // SEH_10909930
;   cleanup() // owned by 10909A1A
;   cleanup() // owned by 10909A43
                mov     eax, [ebp+arg_4]
                push    eax
                mov     ecx, [ebp+var_20]
                push    ecx
                call    nullsub_3
                add     esp, 8
                retn
; ---------------------------------------------------------------------------

loc_10910EC1:                           ; DATA XREF: .rdata:10915C74↓o
;   cleanup() // owned by 10909A33
                mov     ecx, [ebp+var_20]
                add     ecx, 4
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; } // starts at 10910EB0
; END OF FUNCTION CHUNK FOR sub_10909930

; =============== S U B R O U T I N E =======================================


SEH_10909930    proc near               ; DATA XREF: sub_10909930+5↑o
                                        ; .rdata:10914F3C↓o
                mov     eax, offset stru_10915C7C
                jmp     __CxxFrameHandler3
SEH_10909930    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_10909B10

loc_10910EE0:                           ; DATA XREF: .rdata:stru_10915CA0↓o
; __unwind { // SEH_10909B10
;   cleanup() // owned by 10909B39
                mov     ecx, [ebp+var_10]
                jmp     sub_109058D0
; } // starts at 10910EE0
; END OF FUNCTION CHUNK FOR sub_10909B10

; =============== S U B R O U T I N E =======================================


SEH_10909B10    proc near               ; DATA XREF: sub_10909B10+5↑o
                                        ; .rdata:10914F40↓o
                mov     eax, offset stru_10915CA8
                jmp     __CxxFrameHandler3
SEH_10909B10    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_10909B60

loc_10910F00:                           ; DATA XREF: .rdata:stru_10915CCC↓o
; __unwind { // SEH_10909B60
;   cleanup() // owned by 10909BBD
                mov     eax, [ebp+var_10]
                push    eax
                mov     ecx, [ebp+var_14]
                push    ecx
                call    nullsub_3
                add     esp, 8
                retn
; } // starts at 10910F00
; END OF FUNCTION CHUNK FOR sub_10909B60

; =============== S U B R O U T I N E =======================================


SEH_10909B60    proc near               ; DATA XREF: sub_10909B60+5↑o
                                        ; .rdata:10914F44↓o
                mov     eax, offset stru_10915CD4
                jmp     __CxxFrameHandler3
SEH_10909B60    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


sub_10910F20    proc near               ; DATA XREF: .rdata:stru_10915CF8↓o
                mov     ecx, [ebp-64h]
                jmp     sub_109058D0
sub_10910F20    endp


; =============== S U B R O U T I N E =======================================


sub_10910F28    proc near               ; DATA XREF: .text:10909C35↑o
                                        ; .rdata:10914F48↓o
                mov     eax, offset stru_10915D00
                jmp     __CxxFrameHandler3
sub_10910F28    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


sub_10910F40    proc near               ; DATA XREF: .rdata:stru_10915D24↓o
                mov     ecx, [ebp-64h]
                jmp     sub_109058D0
sub_10910F40    endp


; =============== S U B R O U T I N E =======================================


sub_10910F48    proc near               ; DATA XREF: .text:10909D45↑o
                                        ; .rdata:10914F4C↓o
                mov     eax, offset stru_10915D2C
                jmp     __CxxFrameHandler3
sub_10910F48    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


sub_10910F60    proc near               ; DATA XREF: .rdata:stru_10915D50↓o
                mov     ecx, [ebp-68h]
                add     ecx, 4
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
sub_10910F60    endp


; =============== S U B R O U T I N E =======================================


sub_10910F6C    proc near               ; DATA XREF: .rdata:10915D58↓o
                mov     ecx, [ebp-64h]
                jmp     sub_109058D0
sub_10910F6C    endp


; =============== S U B R O U T I N E =======================================


sub_10910F74    proc near               ; DATA XREF: .text:10909DF5↑o
                                        ; .rdata:10914F50↓o
                mov     eax, offset stru_10915D60
                jmp     __CxxFrameHandler3
sub_10910F74    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


sub_10910F80    proc near               ; DATA XREF: .rdata:stru_10915D84↓o
                mov     ecx, [ebp-40h]
                add     ecx, 4
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
sub_10910F80    endp


; =============== S U B R O U T I N E =======================================


sub_10910F8C    proc near               ; DATA XREF: .text:10909E85↑o
                                        ; .rdata:10914F54↓o
                mov     eax, offset stru_10915D8C
                jmp     __CxxFrameHandler3
sub_10910F8C    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_10909F80

loc_10910FA0:                           ; DATA XREF: .rdata:stru_10915DB0↓o
; __unwind { // SEH_10909F80
;   cleanup() // owned by 10909FBB
;   cleanup() // owned by 1090A002
                mov     ecx, [ebp+var_6C]
                add     ecx, 4
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_10910FAC:                           ; DATA XREF: .rdata:10915DB8↓o
;   cleanup() // owned by 10909FE0
                mov     ecx, [ebp+var_64]
                jmp     sub_109058D0
; } // starts at 10910FA0
; END OF FUNCTION CHUNK FOR sub_10909F80

; =============== S U B R O U T I N E =======================================


SEH_10909F80    proc near               ; DATA XREF: sub_10909F80+5↑o
                                        ; .rdata:10914F58↓o
                mov     eax, offset stru_10915DC0
                jmp     __CxxFrameHandler3
SEH_10909F80    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_1090A020

loc_10910FC0:                           ; DATA XREF: .rdata:stru_10915DE4↓o
; __unwind { // SEH_1090A020
;   cleanup() // owned by 1090A05D
;   cleanup() // owned by 1090A093
                mov     eax, [ebp+var_60]
                push    eax
                mov     ecx, [ebp+var_1C]
                push    ecx
                call    sub_10908090
                add     esp, 8
                retn
; ---------------------------------------------------------------------------

loc_10910FD1:                           ; DATA XREF: .rdata:10915DEC↓o
;   cleanup() // owned by 1090A07A
                mov     ecx, [ebp+var_1C]
                add     ecx, 4
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; } // starts at 10910FC0
; END OF FUNCTION CHUNK FOR sub_1090A020

; =============== S U B R O U T I N E =======================================


SEH_1090A020    proc near               ; DATA XREF: sub_1090A020+5↑o
                                        ; .rdata:10914F5C↓o
                mov     eax, offset stru_10915DF4
                jmp     __CxxFrameHandler3
SEH_1090A020    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_1090A290

loc_10910FF0:                           ; DATA XREF: .rdata:stru_10915E18↓o
; __unwind { // SEH_1090A290
;   cleanup() // owned by 1090A2E2
                mov     ecx, [ebp+var_20]
                add     ecx, 4
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; } // starts at 10910FF0
; END OF FUNCTION CHUNK FOR sub_1090A290

; =============== S U B R O U T I N E =======================================


SEH_1090A290    proc near               ; DATA XREF: sub_1090A290+5↑o
                                        ; .rdata:10914F60↓o
                mov     eax, offset stru_10915E20
                jmp     __CxxFrameHandler3
SEH_1090A290    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_1090A350

loc_10911010:                           ; DATA XREF: .rdata:stru_10915E44↓o
; __unwind { // SEH_1090A350
;   cleanup() // owned by 1090A383
;   cleanup() // owned by 1090A44A
                mov     ecx, [ebp+var_44]
                jmp     ds:??1dnArrayBase@@QAE@XZ ; dnArrayBase::~dnArrayBase(void)
; ---------------------------------------------------------------------------

loc_10911019:                           ; DATA XREF: .rdata:10915E4C↓o
;   cleanup() // owned by 1090A3E0
;   cleanup() // owned by 1090A431
                mov     eax, [ebp+var_44]
                push    eax
                mov     ecx, [ebp+var_1C]
                push    ecx
                call    sub_10908090
                add     esp, 8
                retn
; ---------------------------------------------------------------------------

loc_1091102A:                           ; DATA XREF: .rdata:10915E54↓o
;   cleanup() // owned by 1090A415
                mov     ecx, [ebp+var_1C]
                add     ecx, 4
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; } // starts at 10911010
; END OF FUNCTION CHUNK FOR sub_1090A350

; =============== S U B R O U T I N E =======================================


SEH_1090A350    proc near               ; DATA XREF: sub_1090A350+5↑o
                                        ; .rdata:10914F64↓o
                mov     eax, offset stru_10915E5C
                jmp     __CxxFrameHandler3
SEH_1090A350    endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR sub_1090A510

loc_10911040:                           ; DATA XREF: .rdata:stru_10915E80↓o
; __unwind { // SEH_1090A510
;   cleanup() // owned by 1090A60D
;   cleanup() // owned by 1090A63B
                mov     eax, [ebp+arg_4]
                push    eax
                mov     ecx, [ebp+var_20]
                push    ecx
                call    sub_10908090
                add     esp, 8
                retn
; ---------------------------------------------------------------------------

loc_10911051:                           ; DATA XREF: .rdata:10915E88↓o
;   cleanup() // owned by 1090A626
                mov     ecx, [ebp+var_20]
                add     ecx, 4
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; } // starts at 10911040
; END OF FUNCTION CHUNK FOR sub_1090A510

; =============== S U B R O U T I N E =======================================


SEH_1090A510    proc near               ; DATA XREF: sub_1090A510+5↑o
                                        ; .rdata:10914F68↓o
                mov     eax, offset stru_10915E90
                jmp     __CxxFrameHandler3
SEH_1090A510    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_1090A6E0

loc_10911070:                           ; DATA XREF: .rdata:stru_10915EB4↓o
; __unwind { // SEH_1090A6E0
;   cleanup() // owned by 1090A707
                mov     ecx, [ebp+var_3C]
                jmp     sub_10907370
; } // starts at 10911070
; END OF FUNCTION CHUNK FOR sub_1090A6E0

; =============== S U B R O U T I N E =======================================


SEH_1090A6E0    proc near               ; DATA XREF: sub_1090A6E0+5↑o
                                        ; .rdata:10914F6C↓o
                mov     eax, offset stru_10915EBC
                jmp     __CxxFrameHandler3
SEH_1090A6E0    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_1090A780

loc_10911090:                           ; DATA XREF: .rdata:stru_10915EE0↓o
; __unwind { // SEH_1090A780
;   cleanup() // owned by 1090A7F4
                mov     eax, [ebp+var_78]
                push    eax
                mov     ecx, [ebp+var_18]
                push    ecx
                call    sub_10908090
                add     esp, 8
                retn
; } // starts at 10911090
; END OF FUNCTION CHUNK FOR sub_1090A780

; =============== S U B R O U T I N E =======================================


SEH_1090A780    proc near               ; DATA XREF: sub_1090A780+5↑o
                                        ; .rdata:10914F70↓o
                mov     eax, offset stru_10915EE8
                jmp     __CxxFrameHandler3
SEH_1090A780    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_1090A890

loc_109110B0:                           ; DATA XREF: .rdata:stru_10915F0C↓o
; __unwind { // SEH_1090A890
;   cleanup() // owned by 1090A8BA
                mov     ecx, [ebp+var_6C]
                jmp     sub_10907370
; } // starts at 109110B0
; END OF FUNCTION CHUNK FOR sub_1090A890

; =============== S U B R O U T I N E =======================================


SEH_1090A890    proc near               ; DATA XREF: sub_1090A890+5↑o
                                        ; .rdata:10914F74↓o
                mov     eax, offset stru_10915F14
                jmp     __CxxFrameHandler3
SEH_1090A890    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_1090A940

loc_109110D0:                           ; DATA XREF: .rdata:stru_10915F38↓o
; __unwind { // SEH_1090A940
;   cleanup() // owned by 1090A998
;   cleanup() // owned by 1090AD4C
                lea     ecx, [ebp+var_24]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_109110D9:                           ; DATA XREF: .rdata:10915F40↓o
;   cleanup() // owned by 1090A9DB
;   cleanup() // owned by 1090ABCB
;   cleanup() // owned by 1090AC0C
                lea     ecx, [ebp+var_18]
                jmp     ds:??1?$dnArray@E@@QAE@XZ ; dnArray<uchar>::~dnArray<uchar>(void)
; ---------------------------------------------------------------------------

loc_109110E2:                           ; DATA XREF: .rdata:10915F48↓o
                lea     ecx, [ebp+var_44]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_109110EB:                           ; DATA XREF: .rdata:10915F50↓o
;   cleanup() // owned by 1090ABB5
;   cleanup() // owned by 1090ABEF
                lea     ecx, [ebp+var_58]
                jmp     sub_109071C0
; } // starts at 109110D0
; END OF FUNCTION CHUNK FOR sub_1090A940

; =============== S U B R O U T I N E =======================================


SEH_1090A940    proc near               ; DATA XREF: sub_1090A940+5↑o
                                        ; .rdata:10914F78↓o
                mov     eax, offset stru_10915F58
                jmp     __CxxFrameHandler3
SEH_1090A940    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


sub_10911100    proc near               ; DATA XREF: .rdata:stru_10915F7C↓o
                mov     ecx, [ebp-3Ch]
                jmp     sub_10907370
sub_10911100    endp


; =============== S U B R O U T I N E =======================================


sub_10911108    proc near               ; DATA XREF: .text:1090AD85↑o
                                        ; .rdata:10914F7C↓o
                mov     eax, offset stru_10915F84
                jmp     __CxxFrameHandler3
sub_10911108    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


sub_10911120    proc near               ; DATA XREF: .rdata:stru_10915FA8↓o
                mov     ecx, [ebp-68h]
                jmp     sub_10907370
sub_10911120    endp


; =============== S U B R O U T I N E =======================================


sub_10911128    proc near               ; DATA XREF: .text:1090AE95↑o
                                        ; .rdata:10914F80↓o
                mov     eax, offset stru_10915FB0
                jmp     __CxxFrameHandler3
sub_10911128    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_1090AF00

loc_10911140:                           ; DATA XREF: .rdata:stru_10915FD4↓o
; __unwind { // SEH_1090AF00
;   cleanup() // owned by 1090AF27
                mov     ecx, [ebp+var_3C]
                jmp     sub_10907370
; } // starts at 10911140
; END OF FUNCTION CHUNK FOR sub_1090AF00

; =============== S U B R O U T I N E =======================================


SEH_1090AF00    proc near               ; DATA XREF: sub_1090AF00+5↑o
                                        ; .rdata:10914F84↓o
                mov     eax, offset stru_10915FDC
                jmp     __CxxFrameHandler3
SEH_1090AF00    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


sub_10911160    proc near               ; DATA XREF: .rdata:stru_10916000↓o
                mov     ecx, [ebp-3Ch]
                add     ecx, 4
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
sub_10911160    endp


; =============== S U B R O U T I N E =======================================


sub_1091116C    proc near               ; DATA XREF: .text:1090B025↑o
                                        ; .rdata:10914F88↓o
                mov     eax, offset stru_10916008
                jmp     __CxxFrameHandler3
sub_1091116C    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_1090B080

loc_10911180:                           ; DATA XREF: .rdata:stru_1091602C↓o
; __unwind { // SEH_1090B080
;   cleanup() // owned by 1090B0AA
                mov     ecx, [ebp+var_68]
                jmp     sub_10907370
; } // starts at 10911180
; END OF FUNCTION CHUNK FOR sub_1090B080

; =============== S U B R O U T I N E =======================================


SEH_1090B080    proc near               ; DATA XREF: sub_1090B080+5↑o
                                        ; .rdata:10914F8C↓o
                mov     eax, offset stru_10916034
                jmp     __CxxFrameHandler3
SEH_1090B080    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_1090B1C0

loc_109111A0:                           ; DATA XREF: .rdata:stru_10916058↓o
; __unwind { // SEH_1090B1C0
;   cleanup() // owned by 1090B212
                mov     ecx, [ebp+var_28]
                add     ecx, 4
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; } // starts at 109111A0
; END OF FUNCTION CHUNK FOR sub_1090B1C0

; =============== S U B R O U T I N E =======================================


SEH_1090B1C0    proc near               ; DATA XREF: sub_1090B1C0+5↑o
                                        ; .rdata:10914F90↓o
                mov     eax, offset stru_10916060
                jmp     __CxxFrameHandler3
SEH_1090B1C0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


sub_109111C0    proc near               ; DATA XREF: .rdata:stru_10916084↓o
                mov     ecx, [ebp-68h]
                add     ecx, 4
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
sub_109111C0    endp


; =============== S U B R O U T I N E =======================================


sub_109111CC    proc near               ; DATA XREF: .text:1090B285↑o
                                        ; .rdata:10914F94↓o
                mov     eax, offset stru_1091608C
                jmp     __CxxFrameHandler3
sub_109111CC    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_1090B3A0

loc_109111E0:                           ; DATA XREF: .rdata:stru_109160B0↓o
; __unwind { // SEH_1090B3A0
;   cleanup() // owned by 1090B3DD
;   cleanup() // owned by 1090B42B
                mov     eax, [ebp+var_60]
                push    eax
                mov     ecx, [ebp+var_1C]
                push    ecx
                call    sub_109080D0
                add     esp, 8
                retn
; ---------------------------------------------------------------------------

loc_109111F1:                           ; DATA XREF: .rdata:109160B8↓o
;   cleanup() // owned by 1090B3FA
                mov     ecx, [ebp+var_1C]
                add     ecx, 4
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; } // starts at 109111E0
; END OF FUNCTION CHUNK FOR sub_1090B3A0

; =============== S U B R O U T I N E =======================================


SEH_1090B3A0    proc near               ; DATA XREF: sub_1090B3A0+5↑o
                                        ; .rdata:10914F98↓o
                mov     eax, offset stru_109160C0
                jmp     __CxxFrameHandler3
SEH_1090B3A0    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_1090B4E0

loc_10911210:                           ; DATA XREF: .rdata:stru_109160E4↓o
; __unwind { // SEH_1090B4E0
;   cleanup() // owned by 1090B5E0
;   cleanup() // owned by 1090B608
                mov     eax, [ebp+arg_4]
                push    eax
                mov     ecx, [ebp+var_20]
                push    ecx
                call    sub_109080D0
                add     esp, 8
                retn
; ---------------------------------------------------------------------------

loc_10911221:                           ; DATA XREF: .rdata:109160EC↓o
;   cleanup() // owned by 1090B5F9
                mov     ecx, [ebp+var_20]
                add     ecx, 4
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; } // starts at 10911210
; END OF FUNCTION CHUNK FOR sub_1090B4E0

; =============== S U B R O U T I N E =======================================


SEH_1090B4E0    proc near               ; DATA XREF: sub_1090B4E0+5↑o
                                        ; .rdata:10914F9C↓o
                mov     eax, offset stru_109160F4
                jmp     __CxxFrameHandler3
SEH_1090B4E0    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_1090B840

loc_10911240:                           ; DATA XREF: .rdata:stru_1091613C↓o
; __unwind { // SEH_1090B840
;   cleanup() // owned by 1090BC1C
;   cleanup() // owned by 1090BC94
;   cleanup() // owned by 1090BD48
;   cleanup() // owned by 1090BDDE
                lea     ecx, [ebp+var_21C]
                jmp     ds:??1FFilename@@QAE@XZ ; FFilename::~FFilename(void)
; ---------------------------------------------------------------------------

loc_1091124C:                           ; DATA XREF: .rdata:10916144↓o
                lea     ecx, [ebp+var_23C]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_10911258:                           ; DATA XREF: .rdata:1091614C↓o
                lea     ecx, [ebp+var_230]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_10911264:                           ; DATA XREF: .rdata:10916154↓o
                lea     ecx, [ebp+var_248]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_10911270:                           ; DATA XREF: .rdata:1091615C↓o
;   cleanup() // owned by 1090BC48
;   cleanup() // owned by 1090BC65
;   cleanup() // owned by 1090BC84
;   cleanup() // owned by 1090BD19
;   cleanup() // owned by 1090BD79
;   cleanup() // owned by 1090BDCE
                lea     ecx, [ebp+var_264]
                jmp     sub_10907480
; ---------------------------------------------------------------------------

loc_1091127B:                           ; DATA XREF: .rdata:10916164↓o
;   cleanup() // owned by 1090BDA2
                lea     ecx, [ebp+var_270]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; } // starts at 10911240
; END OF FUNCTION CHUNK FOR sub_1090B840

; =============== S U B R O U T I N E =======================================


SEH_1090B840    proc near               ; DATA XREF: sub_1090B840+5↑o
                                        ; .rdata:10914FA0↓o
                mov     eax, offset stru_10916118
                jmp     __CxxFrameHandler3
SEH_1090B840    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_1090BE40

loc_109112A0:                           ; DATA XREF: .rdata:stru_10916190↓o
; __unwind { // SEH_1090BE40
;   cleanup() // owned by 1090BE7B
;   cleanup() // owned by 1090BEF8
;   cleanup() // owned by 1090C349
                lea     ecx, [ebp+var_1C]
                jmp     ds:??1FFilename@@QAE@XZ ; FFilename::~FFilename(void)
; ---------------------------------------------------------------------------

loc_109112A9:                           ; DATA XREF: .rdata:10916198↓o
                lea     ecx, [ebp+var_64]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_109112B2:                           ; DATA XREF: .rdata:109161A0↓o
                lea     ecx, [ebp+var_58]
                jmp     ds:??1FFilename@@QAE@XZ ; FFilename::~FFilename(void)
; ---------------------------------------------------------------------------

loc_109112BB:                           ; DATA XREF: .rdata:109161A8↓o
;   cleanup() // owned by 1090BEC6
;   cleanup() // owned by 1090BEDA
;   cleanup() // owned by 1090BEEB
;   cleanup() // owned by 1090BF26
;   cleanup() // owned by 1090BF66
;   cleanup() // owned by 1090C08A
;   cleanup() // owned by 1090C0DE
;   cleanup() // owned by 1090C20E
;   cleanup() // owned by 1090C262
                lea     ecx, [ebp+var_2C]
                jmp     ds:??1FFilename@@QAE@XZ ; FFilename::~FFilename(void)
; ---------------------------------------------------------------------------

loc_109112C4:                           ; DATA XREF: .rdata:109161B0↓o
                lea     ecx, [ebp+var_74]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_109112CD:                           ; DATA XREF: .rdata:109161B8↓o
                lea     ecx, [ebp+var_38]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_109112D6:                           ; DATA XREF: .rdata:109161C0↓o
                mov     eax, [ebp+var_B8]
                and     eax, 1
                jz      locret_109112F8
                and     [ebp+var_B8], 0FFFFFFFEh
                lea     ecx, [ebp+var_84]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

locret_109112F8:                        ; CODE XREF: sub_1090BE40+549F↑j
                retn
; ---------------------------------------------------------------------------

loc_109112F9:                           ; DATA XREF: .rdata:109161C8↓o
                lea     ecx, [ebp+var_94]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_10911305:                           ; DATA XREF: .rdata:109161D0↓o
                lea     ecx, [ebp+var_44]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_1091130E:                           ; DATA XREF: .rdata:109161D8↓o
                mov     eax, [ebp+var_B8]
                and     eax, 2
                jz      locret_10911330
                and     [ebp+var_B8], 0FFFFFFFDh
                lea     ecx, [ebp+var_A4]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

locret_10911330:                        ; CODE XREF: sub_1090BE40+54D7↑j
                retn
; ---------------------------------------------------------------------------

loc_10911331:                           ; DATA XREF: .rdata:109161E0↓o
;   cleanup() // owned by 1090BF4F
;   cleanup() // owned by 1090BFDF
;   cleanup() // owned by 1090C009
;   cleanup() // owned by 1090C053
;   cleanup() // owned by 1090C0C4
;   cleanup() // owned by 1090C15D
;   cleanup() // owned by 1090C187
;   cleanup() // owned by 1090C1D4
;   cleanup() // owned by 1090C248
                lea     ecx, [ebp+var_B4]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; } // starts at 109112A0
; END OF FUNCTION CHUNK FOR sub_1090BE40

; =============== S U B R O U T I N E =======================================


SEH_1090BE40    proc near               ; DATA XREF: sub_1090BE40+5↑o
                                        ; .rdata:10914FA4↓o
                mov     eax, offset stru_1091616C
                jmp     __CxxFrameHandler3
SEH_1090BE40    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR FConfigCache__GetString2

loc_10911350:                           ; DATA XREF: .rdata:stru_109161E8↓o
; __unwind { // SEH_1090C4B0
                lea     ecx, [ebp+var_24]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_10911359:                           ; DATA XREF: .rdata:109161F0↓o
;   cleanup() // owned by 1090C50E
;   cleanup() // owned by 1090C54B
                lea     ecx, [ebp+var_30]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; } // starts at 10911350
; END OF FUNCTION CHUNK FOR FConfigCache__GetString2

; =============== S U B R O U T I N E =======================================


SEH_1090C4B0    proc near               ; DATA XREF: FConfigCache__GetString2+5↑o
                                        ; .rdata:10914FA8↓o
                mov     eax, offset stru_109161F8
                jmp     __CxxFrameHandler3
SEH_1090C4B0    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR FConfigCache__GetSection

loc_10911370:                           ; DATA XREF: .rdata:stru_1091621C↓o
; __unwind { // SEH_1090C5D0
;   cleanup() // owned by 1090C62E
                lea     ecx, [ebp+var_2C]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; } // starts at 10911370
; END OF FUNCTION CHUNK FOR FConfigCache__GetSection

; =============== S U B R O U T I N E =======================================


SEH_1090C5D0    proc near               ; DATA XREF: FConfigCache__GetSection+5↑o
                                        ; .rdata:10914FAC↓o
                mov     eax, offset stru_10916224
                jmp     __CxxFrameHandler3
SEH_1090C5D0    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_1090C7B0

loc_10911390:                           ; DATA XREF: .rdata:stru_10916248↓o
; __unwind { // SEH_1090C7B0
                lea     ecx, [ebp+var_20]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_10911399:                           ; DATA XREF: .rdata:10916250↓o
;   cleanup() // owned by 1090C808
;   cleanup() // owned by 1090C84B
                lea     ecx, [ebp+var_34]
                jmp     sub_109071C0
; } // starts at 10911390
; END OF FUNCTION CHUNK FOR sub_1090C7B0

; =============== S U B R O U T I N E =======================================


SEH_1090C7B0    proc near               ; DATA XREF: sub_1090C7B0+5↑o
                                        ; .rdata:10914FB0↓o
                mov     eax, offset stru_10916258
                jmp     __CxxFrameHandler3
SEH_1090C7B0    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR FConfigCache__SetString

loc_109113B0:                           ; DATA XREF: .rdata:stru_1091627C↓o
; __unwind { // SEH_1090C8B0
                lea     ecx, [ebp+var_24]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_109113B9:                           ; DATA XREF: .rdata:10916284↓o
                lea     ecx, [ebp+var_38]
                jmp     sub_109071C0
; ---------------------------------------------------------------------------

loc_109113C1:                           ; DATA XREF: .rdata:1091628C↓o
;   cleanup() // owned by 1090C8F9
;   cleanup() // owned by 1090C936
;   cleanup() // owned by 1090C96F
                lea     ecx, [ebp+var_44]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; } // starts at 109113B0
; END OF FUNCTION CHUNK FOR FConfigCache__SetString

; =============== S U B R O U T I N E =======================================


SEH_1090C8B0    proc near               ; DATA XREF: FConfigCache__SetString+5↑o
                                        ; .rdata:10914FB4↓o
                mov     eax, offset stru_10916294
                jmp     __CxxFrameHandler3
SEH_1090C8B0    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR FConfigCache__GetSectionPrivate

loc_109113E0:                           ; DATA XREF: .rdata:stru_109162B8↓o
; __unwind { // SEH_1090CAC0
;   cleanup() // owned by 1090CB13
                lea     ecx, [ebp+var_20]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; } // starts at 109113E0
; END OF FUNCTION CHUNK FOR FConfigCache__GetSectionPrivate

; =============== S U B R O U T I N E =======================================


SEH_1090CAC0    proc near               ; DATA XREF: FConfigCache__GetSectionPrivate+5↑o
                                        ; .rdata:10914FB8↓o
                mov     eax, offset stru_109162C0
                jmp     __CxxFrameHandler3
SEH_1090CAC0    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_1090CBA0

loc_10911400:                           ; DATA XREF: .rdata:stru_10916308↓o
; __unwind { // SEH_1090CBA0
;   cleanup() // owned by 1090CBD1
;   cleanup() // owned by 1090CD86
                lea     ecx, [ebp+var_24]
                jmp     ds:??1FFilename@@QAE@XZ ; FFilename::~FFilename(void)
; ---------------------------------------------------------------------------

loc_10911409:                           ; DATA XREF: .rdata:10916310↓o
;   cleanup() // owned by 1090CBE5
;   cleanup() // owned by 1090CC9B
;   cleanup() // owned by 1090CD24
                lea     ecx, [ebp+var_18]
                jmp     ds:??1FFilename@@QAE@XZ ; FFilename::~FFilename(void)
; ---------------------------------------------------------------------------

loc_10911412:                           ; DATA XREF: .rdata:10916318↓o
                lea     ecx, [ebp+var_44]
                jmp     sub_10907480
; ---------------------------------------------------------------------------

loc_1091141A:                           ; DATA XREF: .rdata:10916320↓o
                lea     ecx, [ebp+var_50]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_10911423:                           ; DATA XREF: .rdata:10916328↓o
;   cleanup() // owned by 1090CC42
;   cleanup() // owned by 1090CC65
;   cleanup() // owned by 1090CC8E
;   cleanup() // owned by 1090CCCB
;   cleanup() // owned by 1090CD17
                lea     ecx, [ebp+var_6C]
                jmp     sub_10907480
; ---------------------------------------------------------------------------

loc_1091142B:                           ; DATA XREF: .rdata:10916330↓o
;   cleanup() // owned by 1090CCEE
                lea     ecx, [ebp+var_78]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; } // starts at 10911400
; END OF FUNCTION CHUNK FOR sub_1090CBA0

; =============== S U B R O U T I N E =======================================


SEH_1090CBA0    proc near               ; DATA XREF: sub_1090CBA0+5↑o
                                        ; .rdata:10914FBC↓o
                mov     eax, offset stru_109162E4
                jmp     __CxxFrameHandler3
SEH_1090CBA0    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_1090CDC0

loc_10911440:                           ; DATA XREF: .rdata:stru_1091635C↓o
; __unwind { // SEH_1090CDC0
;   cleanup() // owned by 1090CE95
                mov     ecx, [ebp+var_D4]
                jmp     sub_10902430
; ---------------------------------------------------------------------------

loc_1091144B:                           ; DATA XREF: .rdata:10916364↓o
;   cleanup() // owned by 1090CE82
                mov     ecx, [ebp+var_D4]
                add     ecx, 4
                jmp     sub_10907890
; ---------------------------------------------------------------------------

loc_10911459:                           ; DATA XREF: .rdata:1091636C↓o
;   cleanup() // owned by 1090CE6F
                mov     ecx, [ebp+var_D4]
                add     ecx, 20h
                jmp     ds:??1FFilename@@QAE@XZ ; FFilename::~FFilename(void)
; ---------------------------------------------------------------------------

loc_10911468:                           ; DATA XREF: .rdata:10916374↓o
;   cleanup() // owned by 1090CE5C
                mov     ecx, [ebp+var_D4]
                add     ecx, 2Ch
                jmp     ds:??1FFilename@@QAE@XZ ; FFilename::~FFilename(void)
; ---------------------------------------------------------------------------

loc_10911477:                           ; DATA XREF: .rdata:1091637C↓o
;   cleanup() // owned by 1090CDFA
                mov     ecx, [ebp+var_D4]
                add     ecx, 38h
                jmp     ds:??1FFilename@@QAE@XZ ; FFilename::~FFilename(void)
; } // starts at 10911440
; END OF FUNCTION CHUNK FOR sub_1090CDC0

; =============== S U B R O U T I N E =======================================


SEH_1090CDC0    proc near               ; DATA XREF: sub_1090CDC0+5↑o
                                        ; .rdata:10914FC0↓o
                mov     eax, offset stru_10916338
                jmp     __CxxFrameHandler3
SEH_1090CDC0    endp

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR sub_1090CEE0

loc_10911490:                           ; DATA XREF: .rdata:stru_10916384↓o
; __unwind { // SEH_1090CEE0
;   cleanup() // owned by 1090CF17
                push    3B2h
                push    offset aRBuckeyePcstab_0 ; "r:\\BUCKEYE-PCSTABLE\\Core\\Inc\\FConfi"...
                push    offset aFconfigcachein_0 ; "FConfigCacheIni"
                mov     eax, [ebp+var_14]
                push    eax
                call    sub_10901070
                add     esp, 10h
                retn
; } // starts at 10911490
; END OF FUNCTION CHUNK FOR sub_1090CEE0

; =============== S U B R O U T I N E =======================================


SEH_1090CEE0    proc near               ; DATA XREF: sub_1090CEE0+5↑o
                                        ; .rdata:10914FC4↓o
                mov     eax, offset stru_1091638C
                jmp     __CxxFrameHandler3
SEH_1090CEE0    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_1090CF60

loc_109114C0:                           ; DATA XREF: .rdata:stru_109163D4↓o
; __unwind { // SEH_1090CF60
;   cleanup() // owned by 1090CF94
;   cleanup() // owned by 1090D178
;   cleanup() // owned by 1090D3FC
                lea     ecx, [ebp+var_18]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_109114C9:                           ; DATA XREF: .rdata:109163DC↓o
;   cleanup() // owned by 1090CFCD
;   cleanup() // owned by 1090D16B
;   cleanup() // owned by 1090D3EF
                lea     ecx, [ebp+var_38]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_109114D2:                           ; DATA XREF: .rdata:109163E4↓o
;   cleanup() // owned by 1090CFE8
;   cleanup() // owned by 1090D03B
;   cleanup() // owned by 1090D12D
;   cleanup() // owned by 1090D242
;   cleanup() // owned by 1090D2F9
                lea     ecx, [ebp+var_28]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_109114DB:                           ; DATA XREF: .rdata:109163EC↓o
                lea     ecx, [ebp+var_11C]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_109114E7:                           ; DATA XREF: .rdata:109163F4↓o
                lea     ecx, [ebp+var_44]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_109114F0:                           ; DATA XREF: .rdata:109163FC↓o
                lea     ecx, [ebp+var_128]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_109114FC:                           ; DATA XREF: .rdata:10916404↓o
                lea     ecx, [ebp+var_8C]
                jmp     sub_1090CDC0
; ---------------------------------------------------------------------------

loc_10911507:                           ; DATA XREF: .rdata:1091640C↓o
                lea     ecx, [ebp+var_A8]
                jmp     ds:??1FNameAsStringProxyArchive@@UAE@XZ ; FNameAsStringProxyArchive::~FNameAsStringProxyArchive(void)
; ---------------------------------------------------------------------------

loc_10911513:                           ; DATA XREF: .rdata:10916414↓o
;   cleanup() // owned by 1090D027
;   cleanup() // owned by 1090D09F
;   cleanup() // owned by 1090D0D9
;   cleanup() // owned by 1090D0ED
;   cleanup() // owned by 1090D1AF
;   cleanup() // owned by 1090D1C3
;   cleanup() // owned by 1090D232
;   cleanup() // owned by 1090D266
;   cleanup() // owned by 1090D2E9
                lea     ecx, [ebp+var_F4]
                jmp     sub_1090CDC0
; ---------------------------------------------------------------------------

loc_1091151E:                           ; DATA XREF: .rdata:1091641C↓o
;   cleanup() // owned by 1090D27A
                lea     ecx, [ebp+var_110]
                jmp     ds:??1FNameAsStringProxyArchive@@UAE@XZ ; FNameAsStringProxyArchive::~FNameAsStringProxyArchive(void)
; } // starts at 109114C0
; END OF FUNCTION CHUNK FOR sub_1090CF60

; =============== S U B R O U T I N E =======================================


SEH_1090CF60    proc near               ; DATA XREF: sub_1090CF60+5↑o
                                        ; .rdata:10914FC8↓o
                mov     eax, offset stru_109163B0
                jmp     __CxxFrameHandler3
SEH_1090CF60    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_1090D430

loc_10911540:                           ; DATA XREF: .rdata:stru_10916448↓o
; __unwind { // SEH_1090D430
;   cleanup() // owned by 1090D460
;   cleanup() // owned by 1090D957
;   cleanup() // owned by 1090DAD4
                lea     ecx, [ebp+var_54]
                jmp     sub_1090CDC0
; ---------------------------------------------------------------------------

loc_10911548:                           ; DATA XREF: .rdata:10916450↓o
                lea     ecx, [ebp+var_74]
                jmp     ds:??1FFilename@@QAE@XZ ; FFilename::~FFilename(void)
; ---------------------------------------------------------------------------

loc_10911551:                           ; DATA XREF: .rdata:10916458↓o
                mov     eax, [ebp+var_108]
                and     eax, 1
                jz      locret_10911573
                and     [ebp+var_108], 0FFFFFFFEh
                lea     ecx, [ebp+var_A0]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

locret_10911573:                        ; CODE XREF: sub_1090D430+412A↑j
                retn
; ---------------------------------------------------------------------------

loc_10911574:                           ; DATA XREF: .rdata:10916460↓o
                mov     eax, [ebp+var_108]
                and     eax, 2
                jz      locret_10911596
                and     [ebp+var_108], 0FFFFFFFDh
                lea     ecx, [ebp+var_AC]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

locret_10911596:                        ; CODE XREF: sub_1090D430+414D↑j
                retn
; ---------------------------------------------------------------------------

loc_10911597:                           ; DATA XREF: .rdata:10916468↓o
                mov     eax, [ebp+var_108]
                and     eax, 4
                jz      locret_109115B9
                and     [ebp+var_108], 0FFFFFFFBh
                lea     ecx, [ebp+var_B8]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

locret_109115B9:                        ; CODE XREF: sub_1090D430+4170↑j
                retn
; ---------------------------------------------------------------------------

loc_109115BA:                           ; DATA XREF: .rdata:10916470↓o
                mov     eax, [ebp+var_108]
                and     eax, 8
                jz      locret_109115DC
                and     [ebp+var_108], 0FFFFFFF7h
                lea     ecx, [ebp+var_C4]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

locret_109115DC:                        ; CODE XREF: sub_1090D430+4193↑j
                retn
; ---------------------------------------------------------------------------

loc_109115DD:                           ; DATA XREF: .rdata:10916478↓o
                mov     eax, [ebp+var_108]
                and     eax, 10h
                jz      locret_109115FF
                and     [ebp+var_108], 0FFFFFFEFh
                lea     ecx, [ebp+var_D4]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

locret_109115FF:                        ; CODE XREF: sub_1090D430+41B6↑j
                retn
; ---------------------------------------------------------------------------

loc_10911600:                           ; DATA XREF: .rdata:10916480↓o
                mov     eax, [ebp+var_108]
                and     eax, 20h
                jz      locret_10911622
                and     [ebp+var_108], 0FFFFFFDFh
                lea     ecx, [ebp+var_E0]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

locret_10911622:                        ; CODE XREF: sub_1090D430+41D9↑j
                retn
; ---------------------------------------------------------------------------

loc_10911623:                           ; DATA XREF: .rdata:10916488↓o
                mov     eax, [ebp+var_108]
                and     eax, 40h
                jz      locret_10911645
                and     [ebp+var_108], 0FFFFFFBFh
                lea     ecx, [ebp+var_F0]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

locret_10911645:                        ; CODE XREF: sub_1090D430+41FC↑j
                retn
; ---------------------------------------------------------------------------

loc_10911646:                           ; DATA XREF: .rdata:10916490↓o
                mov     eax, [ebp+var_108]
                and     eax, 80h
                jz      locret_1091166D
                and     [ebp+var_108], 0FFFFFF7Fh
                lea     ecx, [ebp+var_FC]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

locret_1091166D:                        ; CODE XREF: sub_1090D430+4221↑j
                retn
; ---------------------------------------------------------------------------

loc_1091166E:                           ; DATA XREF: .rdata:10916498↓o
;   cleanup() // owned by 1090D4BC
;   cleanup() // owned by 1090D4E4
;   cleanup() // owned by 1090D533
;   cleanup() // owned by 1090D582
;   cleanup() // owned by 1090D5D1
;   cleanup() // owned by 1090D61E
;   cleanup() // owned by 1090D643
;   cleanup() // owned by 1090D668
;   cleanup() // owned by 1090D68D
;   cleanup() // owned by 1090D705
;   cleanup() // owned by 1090D751
;   cleanup() // owned by 1090D79E
;   cleanup() // owned by 1090D7C3
;   cleanup() // owned by 1090D833
;   cleanup() // owned by 1090D87F
;   cleanup() // owned by 1090D8CF
;   cleanup() // owned by 1090D8FA
;   cleanup() // owned by 1090D976
;   cleanup() // owned by 1090DAA1
                lea     ecx, [ebp+var_60]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_10911677:                           ; DATA XREF: .rdata:109164A0↓o
;   cleanup() // owned by 1090D9E9
                lea     ecx, [ebp+var_90]
                jmp     ds:??1FNameAsStringProxyArchive@@UAE@XZ ; FNameAsStringProxyArchive::~FNameAsStringProxyArchive(void)
; } // starts at 10911540
; END OF FUNCTION CHUNK FOR sub_1090D430

; =============== S U B R O U T I N E =======================================


SEH_1090D430    proc near               ; DATA XREF: sub_1090D430+5↑o
                                        ; .rdata:10914FCC↓o
                mov     eax, offset stru_10916424
                jmp     __CxxFrameHandler3
SEH_1090D430    endp

; ---------------------------------------------------------------------------
                align 10h
; START OF FUNCTION CHUNK FOR sub_1090ECE0

loc_10911690:                           ; DATA XREF: .rdata:stru_109164CC↓o
; __unwind { // SEH_1090ECE0
;   cleanup() // owned by 1090ED0C
;   cleanup() // owned by 1090F09F
                lea     ecx, [ebp+var_24]
                jmp     sub_10905860
; ---------------------------------------------------------------------------

loc_10911698:                           ; DATA XREF: .rdata:109164D4↓o
;   cleanup() // owned by 1090ED23
;   cleanup() // owned by 1090F093
                lea     ecx, [ebp+var_18]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_109116A1:                           ; DATA XREF: .rdata:109164DC↓o
;   cleanup() // owned by 1090ED4E
;   cleanup() // owned by 1090EDD2
;   cleanup() // owned by 1090EDFD
;   cleanup() // owned by 1090EE3E
;   cleanup() // owned by 1090EE69
;   cleanup() // owned by 1090EEAF
;   cleanup() // owned by 1090EEE0
;   cleanup() // owned by 1090EF16
;   cleanup() // owned by 1090EF4A
;   cleanup() // owned by 1090EF7E
;   cleanup() // owned by 1090F029
;   cleanup() // owned by 1090F081
                lea     ecx, [ebp+var_30]
                jmp     sub_10905860
; ---------------------------------------------------------------------------

loc_109116A9:                           ; DATA XREF: .rdata:109164E4↓o
                lea     ecx, [ebp+var_50]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_109116B2:                           ; DATA XREF: .rdata:109164EC↓o
                lea     ecx, [ebp+var_5C]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_109116BB:                           ; DATA XREF: .rdata:109164F4↓o
                lea     ecx, [ebp+var_68]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_109116C4:                           ; DATA XREF: .rdata:109164FC↓o
                lea     ecx, [ebp+var_74]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_109116CD:                           ; DATA XREF: .rdata:10916504↓o
                lea     ecx, [ebp+var_80]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_109116D6:                           ; DATA XREF: .rdata:1091650C↓o
                lea     ecx, [ebp+var_8C]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_109116E2:                           ; DATA XREF: .rdata:10916514↓o
                lea     ecx, [ebp+var_98]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_109116EE:                           ; DATA XREF: .rdata:1091651C↓o
                lea     ecx, [ebp+var_A4]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_109116FA:                           ; DATA XREF: .rdata:10916524↓o
                lea     ecx, [ebp+var_B0]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_10911706:                           ; DATA XREF: .rdata:1091652C↓o
                lea     ecx, [ebp+var_BC]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; ---------------------------------------------------------------------------

loc_10911712:                           ; DATA XREF: .rdata:10916534↓o
                lea     ecx, [ebp+var_C8]
                jmp     sub_10905860
; ---------------------------------------------------------------------------

loc_1091171D:                           ; DATA XREF: .rdata:1091653C↓o
;   cleanup() // owned by 1090EDC2
;   cleanup() // owned by 1090EDED
;   cleanup() // owned by 1090EE2E
;   cleanup() // owned by 1090EE59
;   cleanup() // owned by 1090EE9F
;   cleanup() // owned by 1090EECD
;   cleanup() // owned by 1090EF03
;   cleanup() // owned by 1090EF37
;   cleanup() // owned by 1090EF6B
;   cleanup() // owned by 1090EFBF
;   cleanup() // owned by 1090F007
;   cleanup() // owned by 1090F01A
;   cleanup() // owned by 1090F059
                lea     ecx, [ebp+var_44]
                jmp     ds:??1dnString@@QAE@XZ ; dnString::~dnString(void)
; } // starts at 10911690
; END OF FUNCTION CHUNK FOR sub_1090ECE0

; =============== S U B R O U T I N E =======================================


SEH_1090ECE0    proc near               ; DATA XREF: sub_1090ECE0+5↑o
                                        ; .rdata:10914FD0↓o
                mov     eax, offset stru_109164A8
                jmp     __CxxFrameHandler3
SEH_1090ECE0    endp

; ---------------------------------------------------------------------------
                mov     ecx, offset unk_109227B8
                jmp     ds:??0Support@RBConvexPolyhedronGeometry@meq@@QAE@XZ ; meq::RBConvexPolyhedronGeometry::Support::Support(void)
; ---------------------------------------------------------------------------
                align 10h
                mov     ecx, offset unk_109228F0
                jmp     ds:??0Support@RBConvexPolyhedronGeometry@meq@@QAE@XZ ; meq::RBConvexPolyhedronGeometry::Support::Support(void)
; ---------------------------------------------------------------------------
                align 10h
                mov     ecx, offset unk_10922774
                jmp     ds:??0Frame@meq@@QAE@XZ ; meq::Frame::Frame(void)
; ---------------------------------------------------------------------------
                align 10h
                mov     ecx, offset unk_109226B4
                jmp     ds:??0Frame@meq@@QAE@XZ ; meq::Frame::Frame(void)
; ---------------------------------------------------------------------------
                align 10h
                mov     ecx, offset unk_10922878
                jmp     ds:??0Frame@meq@@QAE@XZ ; meq::Frame::Frame(void)
; ---------------------------------------------------------------------------
                align 10h
                mov     ecx, offset unk_10922770
                jmp     ds:??0Support@RBConvexPolyhedronGeometry@meq@@QAE@XZ ; meq::RBConvexPolyhedronGeometry::Support::Support(void)
; ---------------------------------------------------------------------------
                align 10h
                mov     ecx, offset unk_1092271C
                jmp     ds:??0Point@meq@@QAE@XZ ; meq::Point::Point(void)
; ---------------------------------------------------------------------------
                align 10h
                mov     ecx, offset unk_10922800
                jmp     ds:??0Frame@meq@@QAE@XZ ; meq::Frame::Frame(void)
; ---------------------------------------------------------------------------
                align 10h
                mov     ecx, offset unk_109227CC
                jmp     ds:??0Frame@meq@@QAE@XZ ; meq::Frame::Frame(void)
; ---------------------------------------------------------------------------
                align 10h
                mov     ecx, offset unk_109226E8
                jmp     ds:??0Frame@meq@@QAE@XZ ; meq::Frame::Frame(void)
; ---------------------------------------------------------------------------
                align 10h
                push    esi
                push    edi
                mov     esi, offset unk_109227A8
                mov     edi, 3
                lea     esp, [esp+0]

loc_109117E0:                           ; CODE XREF: .text:109117EE↓j
                mov     ecx, esi
                call    ds:??0Support@RBConvexPolyhedronGeometry@meq@@QAE@XZ ; meq::RBConvexPolyhedronGeometry::Support::Support(void)
                add     esi, 4
                sub     edi, 1
                jns     short loc_109117E0
                pop     edi
                pop     esi
                retn
; ---------------------------------------------------------------------------
                align 10h
                push    esi
                push    edi
                mov     esi, offset unk_109226A4
                mov     edi, 3
                lea     esp, [esp+0]

loc_10911810:                           ; CODE XREF: .text:1091181E↓j
                mov     ecx, esi
                call    ds:??0Support@RBConvexPolyhedronGeometry@meq@@QAE@XZ ; meq::RBConvexPolyhedronGeometry::Support::Support(void)
                add     esi, 4
                sub     edi, 1
                jns     short loc_10911810
                pop     edi
                pop     esi
                retn
; ---------------------------------------------------------------------------
                align 10h
                fldz
                sub     esp, 0Ch
                fst     dword ptr [esp+8]
                mov     ecx, offset unk_109228B0
                fst     dword ptr [esp+4]
                fstp    dword ptr [esp]
                call    ds:??0Vector@meq@@QAE@MMM@Z ; meq::Vector::Vector(float,float,float)
                fldz
                sub     esp, 0Ch
                fst     dword ptr [esp+8]
                fst     dword ptr [esp+4]
                mov     ecx, offset unk_109228C0
                fstp    dword ptr [esp]
                call    ds:??0Vector@meq@@QAE@MMM@Z ; meq::Vector::Vector(float,float,float)
                fldz
                sub     esp, 0Ch
                fst     dword ptr [esp+8]
                fst     dword ptr [esp+4]
                mov     ecx, offset unk_109228D0
                fstp    dword ptr [esp]
                call    ds:??0Vector@meq@@QAE@MMM@Z ; meq::Vector::Vector(float,float,float)
                fldz
                sub     esp, 0Ch
                fst     dword ptr [esp+8]
                fst     dword ptr [esp+4]
                mov     ecx, offset unk_109228E0
                fstp    dword ptr [esp]
                call    ds:??0Vector@meq@@QAE@MMM@Z ; meq::Vector::Vector(float,float,float)
                retn
; ---------------------------------------------------------------------------
                align 10h
                push    esi
                push    edi
                mov     esi, offset unk_109227BC
                mov     edi, 3
                lea     esp, [esp+0]

loc_109118B0:                           ; CODE XREF: .text:109118BE↓j
                mov     ecx, esi
                call    ds:??0Support@RBConvexPolyhedronGeometry@meq@@QAE@XZ ; meq::RBConvexPolyhedronGeometry::Support::Support(void)
                add     esi, 4
                sub     edi, 1
                jns     short loc_109118B0
                pop     edi
                pop     esi
                retn
; ---------------------------------------------------------------------------
                align 10h
                push    esi
                push    edi
                mov     esi, offset unk_10922730
                mov     edi, 3
                lea     esp, [esp+0]

loc_109118E0:                           ; CODE XREF: .text:109118EE↓j
                mov     ecx, esi
                call    ds:??0Point@meq@@QAE@XZ ; meq::Point::Point(void)
                add     esi, 10h
                sub     edi, 1
                jns     short loc_109118E0
                pop     edi
                pop     esi
                retn
; ---------------------------------------------------------------------------
                align 10h
                fldz
                sub     esp, 0Ch
                fst     dword ptr [esp+8]
                mov     ecx, offset unk_10922838
                fst     dword ptr [esp+4]
                fstp    dword ptr [esp]
                call    ds:??0Vector@meq@@QAE@MMM@Z ; meq::Vector::Vector(float,float,float)
                fldz
                sub     esp, 0Ch
                fst     dword ptr [esp+8]
                fst     dword ptr [esp+4]
                mov     ecx, offset unk_10922848
                fstp    dword ptr [esp]
                call    ds:??0Vector@meq@@QAE@MMM@Z ; meq::Vector::Vector(float,float,float)
                fldz
                sub     esp, 0Ch
                fst     dword ptr [esp+8]
                fst     dword ptr [esp+4]
                mov     ecx, offset unk_10922858
                fstp    dword ptr [esp]
                call    ds:??0Vector@meq@@QAE@MMM@Z ; meq::Vector::Vector(float,float,float)
                fldz
                sub     esp, 0Ch
                fst     dword ptr [esp+8]
                fst     dword ptr [esp+4]
                mov     ecx, offset unk_10922868
                fstp    dword ptr [esp]
                call    ds:??0Vector@meq@@QAE@MMM@Z ; meq::Vector::Vector(float,float,float)
                retn
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                mov     ecx, offset unk_10921E40
                call    sub_10901090
                push    offset sub_109119D0
                call    _atexit
                add     esp, 4
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                mov     ecx, offset unk_10921E34
                call    ds:??0FOutputDeviceWindowsError@@QAE@XZ ; FOutputDeviceWindowsError::FOutputDeviceWindowsError(void)
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                push    ebp
                mov     ebp, esp
                mov     ecx, offset unk_10921E10
                call    sub_10901220
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h
                push    ebp
                mov     ebp, esp
                mov     ecx, offset unk_10922654
                call    sub_10906100
                push    offset sub_109119F0
                call    _atexit
                add     esp, 4
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_109119D0    proc near               ; DATA XREF: .text:1091197D↑o
                push    ebp
                mov     ebp, esp
                sub     esp, 8
                mov     ecx, offset unk_10921E40
                call    sub_10901170
                mov     esp, ebp
                pop     ebp
                retn
sub_109119D0    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_109119F0    proc near               ; DATA XREF: .text:109119BD↑o
                push    ebp
                mov     ebp, esp
                push    ecx
                mov     ecx, offset unk_10922654
                call    sub_10906670
                mov     esp, ebp
                pop     ebp
                retn
sub_109119F0    endp

; ---------------------------------------------------------------------------
                align 200h
                dd 100h dup(?)
_text           ends

; Section 2. (virtual address 00012000)
; Virtual size                  : 0000802F (  32815.)
; Section size in file          : 00008200 (  33280.)
; Offset to raw data for section: 00011000
; Flags 40000040: Data Readable
; Alignment     : default
;
; Imports from 3DRDebugLib.dll
;
; ===========================================================================

; Segment type: Externs
; _idata
                extrn __imp__SetAssertionFailedHandler:dword
                                        ; DATA XREF: _SetAssertionFailedHandler↑r
                                        ; .rdata:10916638↓o
                extrn __imp__SetAssertionFailedExHandler:dword
                                        ; DATA XREF: _SetAssertionFailedExHandler↑r
                extrn __imp__SetEnterSafeModeHandler:dword
                                        ; DATA XREF: _SetEnterSafeModeHandler↑r

;
; Imports from BugHandler.dll
;
; __stdcall SetCrashHandlerFilter(x)
                extrn _SetCrashHandlerFilter@4:dword
                                        ; CODE XREF: WinMain(x,x,x,x)+44↑p
                                        ; WinMain(x,x,x,x)+1146↑p
                                        ; DATA XREF: ...

;
; Imports from COMCTL32.dll
;
; void __stdcall InitCommonControls()
                extrn InitCommonControls:dword
                                        ; CODE XREF: WinMain(x,x,x,x)+22↑p
                                        ; DATA XREF: WinMain(x,x,x,x)+22↑r ...

;
; Imports from Engine.dll
;
; __declspec(dllimport) public: virtual void __thiscall WWindow::OnRightButtonUp(void)
                extrn __imp_?OnRightButtonUp@WWindow@@UAEXXZ:dword
                                        ; DATA XREF: WWindow::OnRightButtonUp(void)↑r
                                        ; .rdata:10916674↓o
; __declspec(dllimport) public: virtual void __thiscall WWindow::OnLeftButtonUp(void)
                extrn __imp_?OnLeftButtonUp@WWindow@@UAEXXZ:dword
                                        ; DATA XREF: WWindow::OnLeftButtonUp(void)↑r
; __declspec(dllimport) public: virtual void __thiscall WWindow::OnRightButtonDown(void)
                extrn __imp_?OnRightButtonDown@WWindow@@UAEXXZ:dword
                                        ; DATA XREF: WWindow::OnRightButtonDown(void)↑r
; __declspec(dllimport) public: virtual void __thiscall WWindow::OnLeftButtonDown(void)
                extrn __imp_?OnLeftButtonDown@WWindow@@UAEXXZ:dword
                                        ; DATA XREF: WWindow::OnLeftButtonDown(void)↑r
; __declspec(dllimport) public: virtual void __thiscall WWindow::OnMouseMove(unsigned long, struct FPoint)
                extrn __imp_?OnMouseMove@WWindow@@UAEXKUFPoint@@@Z:dword
                                        ; DATA XREF: WWindow::OnMouseMove(ulong,FPoint)↑r
; __declspec(dllimport) public: virtual void __thiscall WWindow::OnMdiActivate(int)
                extrn __imp_?OnMdiActivate@WWindow@@UAEXH@Z:dword
                                        ; DATA XREF: WWindow::OnMdiActivate(int)↑r
; __declspec(dllimport) public: virtual void __thiscall WWindow::OnReleaseCapture(void)
                extrn __imp_?OnReleaseCapture@WWindow@@UAEXXZ:dword
                                        ; DATA XREF: WWindow::OnReleaseCapture(void)↑r
; __declspec(dllimport) public: virtual void __thiscall WWindow::OnTimer(void)
                extrn __imp_?OnTimer@WWindow@@UAEXXZ:dword
                                        ; DATA XREF: WWindow::OnTimer(void)↑r
; __declspec(dllimport) public: virtual void __thiscall WWindow::OnMouseHover(void)
                extrn __imp_?OnMouseHover@WWindow@@UAEXXZ:dword
                                        ; DATA XREF: WWindow::OnMouseHover(void)↑r
; __declspec(dllimport) public: virtual void __thiscall WWindow::OnMouseLeave(void)
                extrn __imp_?OnMouseLeave@WWindow@@UAEXXZ:dword
                                        ; DATA XREF: WWindow::OnMouseLeave(void)↑r
; __declspec(dllimport) public: virtual void __thiscall WWindow::OnMouseEnter(void)
                extrn __imp_?OnMouseEnter@WWindow@@UAEXXZ:dword
                                        ; DATA XREF: WWindow::OnMouseEnter(void)↑r
; __declspec(dllimport) public: virtual void __thiscall WWindow::OnEnterIdle(void)
                extrn __imp_?OnEnterIdle@WWindow@@UAEXXZ:dword
                                        ; DATA XREF: WWindow::OnEnterIdle(void)↑r
; __declspec(dllimport) public: virtual void __thiscall WWindow::OnInitDialog(void)
                extrn __imp_?OnInitDialog@WWindow@@UAEXXZ:dword
                                        ; DATA XREF: WWindow::OnInitDialog(void)↑r
; __declspec(dllimport) public: virtual void __thiscall WWindow::OnMeasureItem(struct tagMEASUREITEMSTRUCT *)
                extrn __imp_?OnMeasureItem@WWindow@@UAEXPAUtagMEASUREITEMSTRUCT@@@Z:dword
                                        ; DATA XREF: WWindow::OnMeasureItem(tagMEASUREITEMSTRUCT *)↑r
; __declspec(dllimport) public: virtual void __thiscall WWindow::OnDrawItem(struct tagDRAWITEMSTRUCT *)
                extrn __imp_?OnDrawItem@WWindow@@UAEXPAUtagDRAWITEMSTRUCT@@@Z:dword
                                        ; DATA XREF: WWindow::OnDrawItem(tagDRAWITEMSTRUCT *)↑r
; __declspec(dllimport) public: virtual void __thiscall WLog::OnCreate(void)
                extrn __imp_?OnCreate@WLog@@UAEXXZ:dword
                                        ; DATA XREF: WLog::OnCreate(void)↑r
; __declspec(dllimport) public: virtual void __thiscall WWindow::OnPaint(void)
                extrn __imp_?OnPaint@WWindow@@UAEXXZ:dword
                                        ; DATA XREF: WWindow::OnPaint(void)↑r
; __declspec(dllimport) public: virtual void __thiscall WWindow::OnKeyUp(unsigned int, long)
                extrn __imp_?OnKeyUp@WWindow@@UAEXIJ@Z:dword
                                        ; DATA XREF: WWindow::OnKeyUp(uint,long)↑r
; __declspec(dllimport) public: virtual void __thiscall WWindow::OnHScroll(unsigned int, long)
                extrn __imp_?OnHScroll@WWindow@@UAEXIJ@Z:dword
                                        ; DATA XREF: WWindow::OnHScroll(uint,long)↑r
; __declspec(dllimport) public: virtual void __thiscall WWindow::OnVScroll(unsigned int, long)
                extrn __imp_?OnVScroll@WWindow@@UAEXIJ@Z:dword
                                        ; DATA XREF: WWindow::OnVScroll(uint,long)↑r
; __declspec(dllimport) public: virtual void __thiscall WWindow::OnUndo(void)
                extrn __imp_?OnUndo@WWindow@@UAEXXZ:dword
                                        ; DATA XREF: WWindow::OnUndo(void)↑r
; __declspec(dllimport) public: virtual void __thiscall WWindow::OnFinishSplitterDrag(class WDragInterceptor *, int)
                extrn __imp_?OnFinishSplitterDrag@WWindow@@UAEXPAVWDragInterceptor@@H@Z:dword
                                        ; DATA XREF: WWindow::OnFinishSplitterDrag(WDragInterceptor *,int)↑r
; __declspec(dllimport) public: virtual void __thiscall WWindow::OnPaste(void)
                extrn __imp_?OnPaste@WWindow@@UAEXXZ:dword
                                        ; DATA XREF: WWindow::OnPaste(void)↑r
; __declspec(dllimport) public: virtual void __thiscall WWindow::OnCopy(void)
                extrn __imp_?OnCopy@WWindow@@UAEXXZ:dword
                                        ; DATA XREF: WWindow::OnCopy(void)↑r
; __declspec(dllimport) public: virtual int __thiscall WWindow::ShouldClose(void)
                extrn __imp_?ShouldClose@WWindow@@UAEHXZ:dword
                                        ; DATA XREF: WWindow::ShouldClose(void)↑r
; __declspec(dllimport) public: virtual void __thiscall WWindow::OnKeyDown(wchar_t)
                extrn __imp_?OnKeyDown@WWindow@@UAEX_W@Z:dword
                                        ; DATA XREF: WWindow::OnKeyDown(wchar_t)↑r
; __declspec(dllimport) public: virtual void __thiscall WWindow::RecoverLostWindow(void)
                extrn __imp_?RecoverLostWindow@WWindow@@UAEXXZ:dword
                                        ; DATA XREF: WWindow::RecoverLostWindow(void)↑r
; __declspec(dllimport) public: virtual void __thiscall WWindow::OnChar(wchar_t)
                extrn __imp_?OnChar@WWindow@@UAEX_W@Z:dword
                                        ; DATA XREF: WWindow::OnChar(wchar_t)↑r
; __declspec(dllimport) public: virtual void __thiscall WWindow::OnActivate(int)
                extrn __imp_?OnActivate@WWindow@@UAEXH@Z:dword
                                        ; DATA XREF: WWindow::OnActivate(int)↑r
; __declspec(dllimport) public: virtual int __thiscall WWindow::OnSysCommand(int)
                extrn __imp_?OnSysCommand@WWindow@@UAEHH@Z:dword
                                        ; DATA XREF: WWindow::OnSysCommand(int)↑r
; __declspec(dllimport) public: virtual void __thiscall WLog::OnCommand(int)
                extrn __imp_?OnCommand@WLog@@UAEXH@Z:dword
                                        ; DATA XREF: WLog::OnCommand(int)↑r
; __declspec(dllimport) public: virtual void __thiscall WTerminal::OnSize(unsigned long, int, int)
                extrn __imp_?OnSize@WTerminal@@UAEXKHH@Z:dword
                                        ; DATA XREF: WTerminal::OnSize(ulong,int,int)↑r
; __declspec(dllimport) public: virtual void __thiscall WWindow::OnKillFocus(struct HWND__ *)
                extrn __imp_?OnKillFocus@WWindow@@UAEXPAUHWND__@@@Z:dword
                                        ; DATA XREF: WWindow::OnKillFocus(HWND__ *)↑r
; __declspec(dllimport) public: virtual void __thiscall WTerminal::OnSetFocus(struct HWND__ *)
                extrn __imp_?OnSetFocus@WTerminal@@UAEXPAUHWND__@@@Z:dword
                                        ; DATA XREF: WTerminal::OnSetFocus(HWND__ *)↑r
; __declspec(dllimport) public: virtual void __thiscall WLog::OnCopyData(struct HWND__ *, struct tagCOPYDATASTRUCT *)
                extrn __imp_?OnCopyData@WLog@@UAEXPAUHWND__@@PAUtagCOPYDATASTRUCT@@@Z:dword
                                        ; DATA XREF: WLog::OnCopyData(HWND__ *,tagCOPYDATASTRUCT *)↑r
; __declspec(dllimport) public: virtual int __thiscall WWindow::GetLength(void)
                extrn __imp_?GetLength@WWindow@@UAEHXZ:dword
                                        ; DATA XREF: WWindow::GetLength(void)↑r
; __declspec(dllimport) public: virtual void __thiscall WLog::SetText(wchar_t const *)
                extrn __imp_?SetText@WLog@@UAEXPB_W@Z:dword
                                        ; DATA XREF: WLog::SetText(wchar_t const *)↑r
; __declspec(dllimport) public: virtual void __thiscall WWindow::SetText(class dnString const &)
                extrn __imp_?SetText@WWindow@@UAEXABVdnString@@@Z:dword
                                        ; DATA XREF: WWindow::SetText(dnString const &)↑r
; __declspec(dllimport) public: virtual class dnString __thiscall WWindow::GetText(void)
                extrn __imp_?GetText@WWindow@@UAE?AVdnString@@XZ:dword
                                        ; DATA XREF: WWindow::GetText(void)↑r
; __declspec(dllimport) public: virtual int __thiscall WWindow::InterceptControlCommand(unsigned int, unsigned int, long)
                extrn __imp_?InterceptControlCommand@WWindow@@UAEHIIJ@Z:dword
                                        ; DATA XREF: WWindow::InterceptControlCommand(uint,uint,long)↑r
; __declspec(dllimport) public: virtual int __thiscall WWindow::CallDefaultProc(unsigned int, unsigned int, long)
                extrn __imp_?CallDefaultProc@WWindow@@UAEHIIJ@Z:dword
                                        ; DATA XREF: WWindow::CallDefaultProc(uint,uint,long)↑r
; __declspec(dllimport) public: virtual long __thiscall WLog::WndProc(unsigned int, unsigned int, long)
                extrn __imp_?WndProc@WLog@@UAEJIIJ@Z:dword
                                        ; DATA XREF: WLog::WndProc(uint,uint,long)↑r
; __declspec(dllimport) public: virtual void __thiscall WLog::GetWindowClassName(wchar_t *)
                extrn __imp_?GetWindowClassName@WLog@@UAEXPA_W@Z:dword
                                        ; DATA XREF: WLog::GetWindowClassName(wchar_t *)↑r
; __declspec(dllimport) public: virtual void __thiscall WWindow::DoDestroy(void)
                extrn __imp_?DoDestroy@WWindow@@UAEXXZ:dword
                                        ; DATA XREF: WWindow::DoDestroy(void)↑r
; __declspec(dllimport) public: virtual void __thiscall WLog::OnShowWindow(int)
                extrn __imp_?OnShowWindow@WLog@@UAEXH@Z:dword
                                        ; DATA XREF: WLog::OnShowWindow(int)↑r
; __declspec(dllimport) public: virtual int __thiscall WWindow::OnSetCursor(void)
                extrn __imp_?OnSetCursor@WWindow@@UAEHXZ:dword
                                        ; DATA XREF: WWindow::OnSetCursor(void)↑r
; __declspec(dllimport) public: virtual void __thiscall WLog::OnClose(void)
                extrn __imp_?OnClose@WLog@@UAEXXZ:dword
                                        ; DATA XREF: WLog::OnClose(void)↑r
; __declspec(dllimport) public: virtual void __thiscall WLog::OnDestroy(void)
                extrn __imp_?OnDestroy@WLog@@UAEXXZ:dword
                                        ; DATA XREF: WLog::OnDestroy(void)↑r
; __declspec(dllimport) public: virtual void __thiscall WWindow::ClipOrCenterWindowToMonitor(struct HWND__ *, unsigned int)
                extrn __imp_?ClipOrCenterWindowToMonitor@WWindow@@UAEXPAUHWND__@@I@Z:dword
                                        ; DATA XREF: WWindow::ClipOrCenterWindowToMonitor(HWND__ *,uint)↑r
; __declspec(dllimport) public: virtual void __thiscall WWindow::MyDrawEdge(struct HDC__ *, struct tagRECT *, int)
                extrn __imp_?MyDrawEdge@WWindow@@UAEXPAUHDC__@@PAUtagRECT@@H@Z:dword
                                        ; DATA XREF: WWindow::MyDrawEdge(HDC__ *,tagRECT *,int)↑r
; __declspec(dllimport) public: virtual wchar_t const * __thiscall WLog::GetPackageName(void)
                extrn __imp_?GetPackageName@WLog@@UAEPB_WXZ:dword
                                        ; DATA XREF: WLog::GetPackageName(void)↑r
; public: __thiscall FOutputDeviceWindowsError::FOutputDeviceWindowsError(void)
                extrn ??0FOutputDeviceWindowsError@@QAE@XZ:dword
                                        ; CODE XREF: .text:10911998↑p
                                        ; DATA XREF: .text:1090F4AA↑r ...
; public: virtual __thiscall WLog::~WLog(void)
                extrn ??1WLog@@UAE@XZ:dword
                                        ; CODE XREF: sub_1090ECA0+6↑p
                                        ; DATA XREF: sub_1090ECA0+6↑r ...
; __declspec(dllimport) public: virtual void __thiscall WTerminal::Paste(void)
                extrn __imp_?Paste@WTerminal@@UAEXXZ:dword
                                        ; DATA XREF: WTerminal::Paste(void)↑r
; __declspec(dllimport) public: virtual void __thiscall WWindow::OnCut(void)
                extrn __imp_?OnCut@WWindow@@UAEXXZ:dword
                                        ; DATA XREF: WWindow::OnCut(void)↑r
; void __cdecl appExit(void)
                extrn ?appExit@@YAXXZ:dword
                                        ; CODE XREF: WinMain(x,x,x,x)+1120↑p
                                        ; DATA XREF: WinMain(x,x,x,x)+1120↑r ...
; public: unsigned char & __thiscall dnArray<unsigned char>::operator[](int)
                extrn ??A?$dnArray@E@@QAEAAEH@Z:dword
                                        ; CODE XREF: sub_10901AF0+53↑p
                                        ; sub_10901AF0+95↑p ...
; public: void __thiscall dnArray<unsigned char>::Remove(int, int)
                extrn ?Remove@?$dnArray@E@@QAEXHH@Z:dword
                                        ; CODE XREF: sub_10901AF0+35↑p
                                        ; sub_10901AF0+68↑p
                                        ; DATA XREF: ...
; public: unsigned char * __thiscall dnArray<unsigned char>::GetTypedData(void)
                extrn ?GetTypedData@?$dnArray@E@@QAEPAEXZ:dword
                                        ; CODE XREF: sub_10901AF0+B↑p
                                        ; sub_10904980+BD↑p
                                        ; DATA XREF: ...
; public: static void __cdecl UObject::StaticEnterSafeMode(wchar_t const *)
                extrn ?StaticEnterSafeMode@UObject@@SAXPB_W@Z:dword
                                        ; DATA XREF: sub_10901CE0+24↑r
                                        ; WinMain(x,x,x,x)+74↑r ...
; void __cdecl appFailAssertEx(char const *, char const *, int, wchar_t const *)
                extrn ?appFailAssertEx@@YAXPBD0HPB_W@Z:dword
                                        ; DATA XREF: sub_10901CE0+15↑r
                                        ; .text:1090F240↑r
; void __cdecl appFailAssert(char const *, char const *, int)
                extrn ?appFailAssert@@YAXPBD0H@Z:dword
                                        ; DATA XREF: sub_10901CE0+7↑r
                                        ; .text:1090F246↑r
; private: static class dnArray<class UObject *> UObject::GObjObjects
                extrn ?GObjObjects@UObject@@0V?$dnArray@PAVUObject@@@@A:dword
                                        ; DATA XREF: sub_109028E0+3↑r
                                        ; sub_10904EB0+13↑r ...
; wchar_t * __cdecl winToUNICODE(wchar_t *, char const *, int)
                extrn ?winToUNICODE@@YAPA_WPA_WPBDH@Z:dword
                                        ; CODE XREF: .text:10902C04↑p
                                        ; .text:10902CBD↑p ...
; int __cdecl winGetSizeUNICODE(char const *)
                extrn ?winGetSizeUNICODE@@YAHPBD@Z:dword
                                        ; CODE XREF: .text:10902BCB↑p
                                        ; .text:10902BEC↑p ...
; __declspec(dllimport) class dnArchive * __cdecl dnPackageMgr_FindPackageLoader(wchar_t const *)
                extrn __imp_?dnPackageMgr_FindPackageLoader@@YAPAVdnArchive@@PB_W@Z:dword
                                        ; DATA XREF: dnPackageMgr_FindPackageLoader(wchar_t const *)↑r
; public: int __thiscall dnArray<unsigned char>::Add(int, int)
                extrn ?Add@?$dnArray@E@@QAEHHH@Z:dword
                                        ; CODE XREF: sub_10904980+B4↑p
                                        ; DATA XREF: sub_10904980+B4↑r ...
; public: void __thiscall dnArray<unsigned char>::Insert(int, int)
                extrn ?Insert@?$dnArray@E@@QAEXHH@Z:dword
                                        ; CODE XREF: sub_10904980+95↑p
                                        ; DATA XREF: sub_10904980+95↑r ...
; public: class dnName const & __thiscall UObject::GetFName(void)const
                extrn ?GetFName@UObject@@QBEABVdnName@@XZ:dword
                                        ; CODE XREF: sub_10904EB0+3E↑p
                                        ; sub_10904EB0+53↑p
                                        ; DATA XREF: ...
; public: static class UClass * __cdecl UClass::StaticClass(void)
                extrn ?StaticClass@UClass@@SAPAV1@XZ:dword
                                        ; CODE XREF: sub_109058B0+3↑p
                                        ; DATA XREF: sub_109058B0+3↑r ...
; int __cdecl appSaveStringToFile(class dnString const &, wchar_t const *, class dnFileMgr *)
                extrn ?appSaveStringToFile@@YAHABVdnString@@PB_WPAVdnFileMgr@@@Z:dword
                                        ; CODE XREF: sub_10908D00+2D0↑p
                                        ; DATA XREF: sub_10908D00+2D0↑r ...
; public: __thiscall dnArray<unsigned char>::~dnArray<unsigned char>(void)
                extrn ??1?$dnArray@E@@QAE@XZ:dword
                                        ; CODE XREF: sub_10908D00+298↑p
                                        ; sub_10908D00+2BA↑p ...
; int __cdecl appSaveArrayToFile(class dnArray<unsigned char> const &, wchar_t const *, class dnFileMgr *)
                extrn ?appSaveArrayToFile@@YAHABV?$dnArray@E@@PB_WPAVdnFileMgr@@@Z:dword
                                        ; CODE XREF: sub_10908D00+285↑p
                                        ; DATA XREF: sub_10908D00+285↑r ...
; public: int __thiscall dnArray<unsigned char>::AddZeroed(int)
                extrn ?AddZeroed@?$dnArray@E@@QAEHH@Z:dword
                                        ; CODE XREF: sub_10908D00+221↑p
                                        ; sub_109091E0+69↑p
                                        ; DATA XREF: ...
; public: __thiscall dnArray<unsigned char>::dnArray<unsigned char>(void)
                extrn ??0?$dnArray@E@@QAE@XZ:dword
                                        ; CODE XREF: sub_10908D00+208↑p
                                        ; sub_109091E0+50↑p ...
; int __cdecl s_WriteStringToFile(class dnString const &, class dnString const &)
                extrn ?s_WriteStringToFile@@YAHABVdnString@@0@Z:dword
                                        ; CODE XREF: sub_109091E0+142↑p
                                        ; sub_1090BE40+1E7↑p ...
; int __cdecl s_WriteToFile(class dnString const &, class dnArray<unsigned char> &)
                extrn ?s_WriteToFile@@YAHABVdnString@@AAV?$dnArray@E@@@Z:dword
                                        ; CODE XREF: sub_109091E0+E1↑p
                                        ; DATA XREF: sub_109091E0+E1↑r ...
; int __cdecl appLoadFileToArray(class dnArray<unsigned char> &, wchar_t const *, class dnFileMgr *)
                extrn ?appLoadFileToArray@@YAHAAV?$dnArray@E@@PB_WPAVdnFileMgr@@@Z:dword
                                        ; CODE XREF: sub_1090A940+B6↑p
                                        ; DATA XREF: sub_1090A940+B6↑r ...
; int __cdecl appLoadFileToString(class dnString &, wchar_t const *, class dnFileMgr *)
                extrn ?appLoadFileToString@@YAHAAVdnString@@PB_WPAVdnFileMgr@@@Z:dword
                                        ; CODE XREF: sub_1090A940+70↑p
                                        ; DATA XREF: sub_1090A940+70↑r ...
; public: static wchar_t const * __cdecl UObject::GetLanguage(void)
                extrn ?GetLanguage@UObject@@SAPB_WXZ:dword
                                        ; CODE XREF: sub_1090CF60+24↑p
                                        ; sub_1090ECE0+33↑p
                                        ; DATA XREF: ...
; __declspec(dllimport) public: virtual void __thiscall WTerminal::TypeChar(wchar_t)
                extrn __imp_?TypeChar@WTerminal@@UAEX_W@Z:dword
                                        ; DATA XREF: WTerminal::TypeChar(wchar_t)↑r
; void __cdecl appPreExit(void)
                extrn ?appPreExit@@YAXXZ:dword
                                        ; CODE XREF: WinMain(x,x,x,x):loc_1090EC3E↑p
                                        ; DATA XREF: WinMain(x,x,x,x):loc_1090EC3E↑r ...
; bool __cdecl DRM::Shutdown(void)
                extrn ?Shutdown@DRM@@YA_NXZ:dword
                                        ; CODE XREF: WinMain(x,x,x,x):loc_1090EB03↑p
                                        ; DATA XREF: WinMain(x,x,x,x):loc_1090EB03↑r ...
; void __cdecl MainLoop(class UEngine *, unsigned long)
                extrn ?MainLoop@@YAXPAVUEngine@@K@Z:dword
                                        ; CODE XREF: WinMain(x,x,x,x)+FC1↑p
                                        ; DATA XREF: WinMain(x,x,x,x)+FC1↑r ...
; __declspec(dllimport) void __cdecl UpdateControllerSettingsViaPrefab(int)
                extrn __imp_?UpdateControllerSettingsViaPrefab@@YAXH@Z:dword
                                        ; DATA XREF: UpdateControllerSettingsViaPrefab(int)↑r
; public: class UStruct * __thiscall UStruct::GetSuperStruct(void)const
                extrn ?GetSuperStruct@UStruct@@QBEPAV1@XZ:dword
                                        ; CODE XREF: WinMain(x,x,x,x)+B0A↑p
                                        ; DATA XREF: WinMain(x,x,x,x)+B0A↑r ...
; public: void __thiscall UObject::LoadConfig(int, class UClass *, wchar_t const *, int, int)
                extrn ?LoadConfig@UObject@@QAEXHPAVUClass@@PB_WHH@Z:dword
                                        ; CODE XREF: WinMain(x,x,x,x)+A83↑p
                                        ; WinMain(x,x,x,x)+A96↑p ...
; public: class UObject * __thiscall UClass::GetDefaultObject(void)
                extrn ?GetDefaultObject@UClass@@QAEPAVUObject@@XZ:dword
                                        ; CODE XREF: WinMain(x,x,x,x)+A7B↑p
                                        ; WinMain(x,x,x,x)+B62↑p
                                        ; DATA XREF: ...
; public: class UClass * __thiscall UObject::GetClass(void)const
                extrn ?GetClass@UObject@@QBEPAVUClass@@XZ:dword
                                        ; CODE XREF: WinMain(x,x,x,x)+A73↑p
                                        ; WinMain(x,x,x,x)+ACB↑p ...
; public: class APlayerPawn * __thiscall ALevelInfo::GetLocalPlayerPawn(void)
                extrn ?GetLocalPlayerPawn@ALevelInfo@@QAEPAVAPlayerPawn@@XZ:dword
                                        ; CODE XREF: WinMain(x,x,x,x)+9AC↑p
                                        ; WinMain(x,x,x,x)+A53↑p
                                        ; DATA XREF: ...
; class dnThread_Semaphore g_ActorSemaphore
                extrn ?g_ActorSemaphore@@3VdnThread_Semaphore@@A:dword
                                        ; DATA XREF: WinMain(x,x,x,x)+976↑r
                                        ; WinMain(x,x,x,x)+99A↑r ...
; void __cdecl ExitSplash(void)
                extrn ?ExitSplash@@YAXXZ:dword
                                        ; CODE XREF: WinMain(x,x,x,x)+80B↑p
                                        ; DATA XREF: WinMain(x,x,x,x)+80B↑r ...
; class UEngine * __cdecl InitEngine(unsigned long)
                extrn ?InitEngine@@YAPAVUEngine@@K@Z:dword
                                        ; CODE XREF: WinMain(x,x,x,x)+7A6↑p
                                        ; DATA XREF: WinMain(x,x,x,x)+7A6↑r ...
; char * __cdecl winToANSI(char *, wchar_t const *, int)
                extrn ?winToANSI@@YAPADPADPB_WH@Z:dword
                                        ; CODE XREF: WinMain(x,x,x,x)+777↑p
                                        ; WinMain(x,x,x,x)+1061↑p
                                        ; DATA XREF: ...
; int __cdecl winGetSizeANSI(wchar_t const *)
                extrn ?winGetSizeANSI@@YAHPB_W@Z:dword
                                        ; CODE XREF: WinMain(x,x,x,x)+740↑p
                                        ; WinMain(x,x,x,x)+761↑p ...
; public: __thiscall WWindow::operator struct HWND__ *(void)const
                extrn ??BWWindow@@QBEPAUHWND__@@XZ:dword
                                        ; CODE XREF: WinMain(x,x,x,x)+726↑p
                                        ; WinMain(x,x,x,x)+789↑p ...
; class dnString const __cdecl LocalizeGeneral(char const *, wchar_t const *, wchar_t const *)
                extrn ?LocalizeGeneral@@YA?BVdnString@@PBDPB_W1@Z:dword
                                        ; CODE XREF: WinMain(x,x,x,x)+6D3↑p
                                        ; WinMain(x,x,x,x)+7DF↑p ...
; public: void __thiscall WLog::OpenWindow(int, int)
                extrn ?OpenWindow@WLog@@QAEXHH@Z:dword
                                        ; CODE XREF: WinMain(x,x,x,x)+6BA↑p
                                        ; DATA XREF: WinMain(x,x,x,x)+6BA↑r ...
; class WLog * GLogWindow
                extrn ?GLogWindow@@3PAVWLog@@A:dword
                                        ; DATA XREF: WinMain(x,x,x,x)+69E↑r
                                        ; WinMain(x,x,x,x)+6B2↑r ...
; public: __thiscall WLog::WLog(wchar_t const *, class dnArchive * &, class dnName, class WWindow *)
                extrn ??0WLog@@QAE@PB_WAAPAVdnArchive@@VdnName@@PAVWWindow@@@Z:dword
                                        ; CODE XREF: WinMain(x,x,x,x)+668↑p
                                        ; DATA XREF: WinMain(x,x,x,x)+668↑r ...
; class FExec * GExec
                extrn ?GExec@@3PAVFExec@@A:dword
                                        ; DATA XREF: WinMain(x,x,x,x)+5FA↑r
                                        ; WinMain(x,x,x,x)+602↑r
; void __cdecl SetGlobalExecHook(void)
                extrn ?SetGlobalExecHook@@YAXXZ:dword
                                        ; CODE XREF: WinMain(x,x,x,x)+5BC↑p
                                        ; DATA XREF: WinMain(x,x,x,x)+5BC↑r ...
; void __cdecl InitWindowing(void)
                extrn ?InitWindowing@@YAXXZ:dword
                                        ; CODE XREF: WinMain(x,x,x,x):loc_1090E0E6↑p
                                        ; DATA XREF: WinMain(x,x,x,x):loc_1090E0E6↑r ...
; void __cdecl InitBinkSplash(wchar_t const *, unsigned long, int)
                extrn ?InitBinkSplash@@YAXPB_WKH@Z:dword
                                        ; CODE XREF: WinMain(x,x,x,x)+5AD↑p
                                        ; DATA XREF: WinMain(x,x,x,x)+5AD↑r ...
; int GIsScriptable
                extrn ?GIsScriptable@@3HA:dword
                                        ; DATA XREF: WinMain(x,x,x,x)+41C↑r
; void __cdecl appInit(wchar_t const *, wchar_t const *, class FMalloc *, class dnOutputDevice *, class dnOutputDeviceError *, class dnFeedbackContext *, class dnFileMgr *, class dnConfigCache * (__cdecl *)(void))
                extrn ?appInit@@YAXPB_W0PAVFMalloc@@PAVdnOutputDevice@@PAVdnOutputDeviceError@@PAVdnFeedbackContext@@PAVdnFileMgr@@P6APAVdnConfigCache@@XZ@Z:dword
                                        ; CODE XREF: WinMain(x,x,x,x)+2F1↑p
                                        ; DATA XREF: WinMain(x,x,x,x)+2F1↑r ...
; int GIsGuarded
                extrn ?GIsGuarded@@3HA:dword
                                        ; DATA XREF: WinMain(x,x,x,x):loc_1090DDE6↑r
                                        ; WinMain(x,x,x,x)+1114↑r
; int __cdecl EngineIsDemoVersion(void)
                extrn ?EngineIsDemoVersion@@YAHXZ:dword
                                        ; CODE XREF: WinMain(x,x,x,x):loc_1090DDB7↑p
                                        ; DATA XREF: WinMain(x,x,x,x):loc_1090DDB7↑r ...
; struct HINSTANCE__ * GLaunchMutex
                extrn ?GLaunchMutex@@3PAUHINSTANCE__@@A:dword
                                        ; DATA XREF: WinMain(x,x,x,x)+207↑r
                                        ; WinMain(x,x,x,x):loc_1090DD57↑r ...
; struct HINSTANCE__ * GDedicatedServerMutex
                extrn ?GDedicatedServerMutex@@3PAUHINSTANCE__@@A:dword
                                        ; DATA XREF: WinMain(x,x,x,x)+170↑r
                                        ; WinMain(x,x,x,x)+178↑r ...
; void __cdecl CrashHandler_AssertHandler(void *, char const *, char const *, int, wchar_t const *)
                extrn ?CrashHandler_AssertHandler@@YAXPAXPBD1HPB_W@Z:dword
                                        ; DATA XREF: WinMain(x,x,x,x):loc_1090DB9E↑r
                                        ; .text:1090F33C↑r
; long __stdcall CrashHandler_WindowedExceptionHandler(struct _EXCEPTION_POINTERS *)
                extrn ?CrashHandler_WindowedExceptionHandler@@YGJPAU_EXCEPTION_POINTERS@@@Z:dword
                                        ; DATA XREF: WinMain(x,x,x,x)+3E↑r
                                        ; .text:1090F342↑r
; __declspec(dllimport) public: virtual void __thiscall FCommandTarget::Unused(void)
                extrn __imp_?Unused@FCommandTarget@@UAEXXZ:dword
                                        ; DATA XREF: FCommandTarget::Unused(void)↑r
; __declspec(dllimport) public: virtual void __thiscall WWindow::SetMinWidth(int &)
                extrn __imp_?SetMinWidth@WWindow@@UAEXAAH@Z:dword
                                        ; DATA XREF: WWindow::SetMinWidth(int &)↑r
; __declspec(dllimport) public: virtual void __thiscall WWindow::SetMinHeight(int &)
                extrn __imp_?SetMinHeight@WWindow@@UAEXAAH@Z:dword
                                        ; DATA XREF: WWindow::SetMinHeight(int &)↑r
; __declspec(dllimport) public: virtual void __thiscall WWindow::Serialize(class dnArchive &)
                extrn __imp_?Serialize@WWindow@@UAEXAAVdnArchive@@@Z:dword
                                        ; DATA XREF: WWindow::Serialize(dnArchive &)↑r

;
; Imports from KERNEL32.dll
;
; BOOL __stdcall IsDebuggerPresent()
                extrn IsDebuggerPresent:dword
                                        ; CODE XREF: ___report_gsfailure+BB↑p
                                        ; DATA XREF: ___report_gsfailure+BB↑r ...
; LONG __stdcall InterlockedExchange(volatile LONG *Target, LONG Value)
                extrn InterlockedExchange:dword
                                        ; CODE XREF: ___tmainCRTStartup+CF↑p
                                        ; DATA XREF: ___tmainCRTStartup+CF↑r ...
; void __stdcall Sleep(DWORD dwMilliseconds)
                extrn Sleep:dword       ; CODE XREF: ___tmainCRTStartup+58↑p
                                        ; DATA XREF: ___tmainCRTStartup+58↑r ...
; LONG __stdcall InterlockedCompareExchange(volatile LONG *Destination, LONG Exchange, LONG Comperand)
                extrn InterlockedCompareExchange:dword
                                        ; CODE XREF: ___tmainCRTStartup+3E↑p
                                        ; DATA XREF: ___tmainCRTStartup+3E↑r ...
; void __stdcall GetStartupInfoA(LPSTARTUPINFOA lpStartupInfo)
                extrn GetStartupInfoA:dword
                                        ; CODE XREF: ___tmainCRTStartup+18↑p
                                        ; DATA XREF: ___tmainCRTStartup+18↑r ...
; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
                extrn SetUnhandledExceptionFilter:dword
                                        ; CODE XREF: .text:1090FF59↑p
                                        ; ___report_gsfailure+D0↑p
                                        ; DATA XREF: ...
; BOOL __stdcall QueryPerformanceCounter(LARGE_INTEGER *lpPerformanceCount)
                extrn QueryPerformanceCounter:dword
                                        ; CODE XREF: ___security_init_cookie+5F↑p
                                        ; DATA XREF: ___security_init_cookie+5F↑r ...
; DWORD __stdcall GetTickCount()
                extrn GetTickCount:dword
                                        ; CODE XREF: ___security_init_cookie+53↑p
                                        ; DATA XREF: ___security_init_cookie+53↑r ...
; DWORD __stdcall GetCurrentThreadId()
                extrn GetCurrentThreadId:dword
                                        ; CODE XREF: ___security_init_cookie+4B↑p
                                        ; DATA XREF: ___security_init_cookie+4B↑r ...
; DWORD __stdcall GetCurrentProcessId()
                extrn GetCurrentProcessId:dword
                                        ; CODE XREF: ___security_init_cookie+43↑p
                                        ; DATA XREF: ___security_init_cookie+43↑r ...
; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
                extrn GetSystemTimeAsFileTime:dword
                                        ; CODE XREF: ___security_init_cookie+37↑p
                                        ; DATA XREF: ___security_init_cookie+37↑r ...
; BOOL __stdcall TerminateProcess(HANDLE hProcess, UINT uExitCode)
                extrn TerminateProcess:dword
                                        ; CODE XREF: ___report_gsfailure+FE↑p
                                        ; DATA XREF: ___report_gsfailure+FE↑r ...
; HANDLE __stdcall GetCurrentProcess()
                extrn GetCurrentProcess:dword
                                        ; CODE XREF: ___report_gsfailure+F7↑p
                                        ; DATA XREF: ___report_gsfailure+F7↑r ...
; LONG __stdcall UnhandledExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
                extrn UnhandledExceptionFilter:dword
                                        ; CODE XREF: ___report_gsfailure+DB↑p
                                        ; DATA XREF: ___report_gsfailure+DB↑r ...
; HMODULE __stdcall LoadLibraryW(LPCWSTR lpLibFileName)
                extrn LoadLibraryW:dword
                                        ; CODE XREF: WinMain(x,x,x,x)+2D↑p
                                        ; WinMain(x,x,x,x)+38↑p
                                        ; DATA XREF: ...
; LPWSTR __stdcall GetCommandLineW()
                extrn GetCommandLineW:dword
                                        ; CODE XREF: WinMain(x,x,x,x)+A6↑p
                                        ; WinMain(x,x,x,x)+1A0↑p ...
; HANDLE __stdcall CreateMutexW(LPSECURITY_ATTRIBUTES lpMutexAttributes, BOOL bInitialOwner, LPCWSTR lpName)
                extrn CreateMutexW:dword
                                        ; CODE XREF: WinMain(x,x,x,x)+16A↑p
                                        ; WinMain(x,x,x,x)+201↑p
                                        ; DATA XREF: ...
; BOOL __stdcall ReleaseMutex(HANDLE hMutex)
                extrn ReleaseMutex:dword
                                        ; CODE XREF: WinMain(x,x,x,x)+1BF↑p
                                        ; DATA XREF: WinMain(x,x,x,x)+1BF↑r ...
; BOOL __stdcall RemoveDirectoryW(LPCWSTR lpPathName)
                extrn RemoveDirectoryW:dword
                                        ; CODE XREF: sub_10906F00+3F↑p
                                        ; DATA XREF: sub_10906F00+3F↑r ...
; BOOL __stdcall RemoveDirectoryA(LPCSTR lpPathName)
                extrn RemoveDirectoryA:dword
                                        ; CODE XREF: sub_10906F00+9A↑p
                                        ; DATA XREF: sub_10906F00+9A↑r ...
; HANDLE __stdcall FindFirstFileW(LPCWSTR lpFileName, LPWIN32_FIND_DATAW lpFindFileData)
                extrn FindFirstFileW:dword
                                        ; CODE XREF: sub_10905580+3B↑p
                                        ; sub_10905920+F1↑p ...
; BOOL __stdcall FindNextFileW(HANDLE hFindFile, LPWIN32_FIND_DATAW lpFindFileData)
                extrn FindNextFileW:dword
                                        ; CODE XREF: sub_10905580+1E8↑p
                                        ; sub_10905920+4AB↑p ...
; BOOL __stdcall FindClose(HANDLE hFindFile)
                extrn FindClose:dword   ; CODE XREF: sub_10905580+200↑p
                                        ; sub_10905920+4C3↑p ...
; BOOL __stdcall CreateDirectoryW(LPCWSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
                extrn CreateDirectoryW:dword
                                        ; CODE XREF: sub_10905490+3E↑p
                                        ; DATA XREF: sub_10905490+3E↑r ...
; BOOL __stdcall CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
                extrn CreateDirectoryA:dword
                                        ; CODE XREF: sub_10905490+9B↑p
                                        ; DATA XREF: sub_10905490+9B↑r ...
; BOOL __stdcall CopyFileW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, BOOL bFailIfExists)
                extrn CopyFileW:dword   ; CODE XREF: sub_10905240+DC↑p
                                        ; DATA XREF: sub_10905240+DC↑r ...
; BOOL __stdcall CopyFileA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, BOOL bFailIfExists)
                extrn CopyFileA:dword   ; CODE XREF: sub_10905240+191↑p
                                        ; DATA XREF: sub_10905240+191↑r ...
; DWORD __stdcall GetCurrentDirectoryW(DWORD nBufferLength, LPWSTR lpBuffer)
                extrn GetCurrentDirectoryW:dword
                                        ; CODE XREF: sub_10903FD0+6C↑p
                                        ; DATA XREF: sub_10903FD0+6C↑r ...
; DWORD __stdcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
                extrn GetCurrentDirectoryA:dword
                                        ; CODE XREF: sub_10903FD0+F3↑p
                                        ; DATA XREF: sub_10903FD0+F3↑r ...
; BOOL __stdcall SetCurrentDirectoryW(LPCWSTR lpPathName)
                extrn SetCurrentDirectoryW:dword
                                        ; CODE XREF: sub_10903F50+17↑p
                                        ; DATA XREF: sub_10903F50+17↑r ...
; BOOL __stdcall SetCurrentDirectoryA(LPCSTR lpPathName)
                extrn SetCurrentDirectoryA:dword
                                        ; CODE XREF: sub_10903F50+63↑p
                                        ; DATA XREF: sub_10903F50+63↑r ...
; BOOL __stdcall MoveFileW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName)
                extrn MoveFileW:dword   ; CODE XREF: sub_10903E10+31↑p
                                        ; DATA XREF: sub_10903E10+31↑r ...
; BOOL __stdcall MoveFileA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName)
                extrn MoveFileA:dword   ; CODE XREF: sub_10903E10+C1↑p
                                        ; DATA XREF: sub_10903E10+C1↑r ...
; BOOL __stdcall SetFileAttributesW(LPCWSTR lpFileName, DWORD dwFileAttributes)
                extrn SetFileAttributesW:dword
                                        ; CODE XREF: sub_10903CF0+22↑p
                                        ; sub_109045D0+37↑p ...
; BOOL __stdcall SetFileAttributesA(LPCSTR lpFileName, DWORD dwFileAttributes)
                extrn SetFileAttributesA:dword
                                        ; CODE XREF: sub_10903CF0+73↑p
                                        ; sub_109045D0+85↑p ...
; BOOL __stdcall DeleteFileW(LPCWSTR lpFileName)
                extrn DeleteFileW:dword ; CODE XREF: sub_10903CF0+8A↑p
                                        ; DATA XREF: sub_10903CF0+8A↑r ...
; BOOL __stdcall DeleteFileA(LPCSTR lpFileName)
                extrn DeleteFileA:dword ; CODE XREF: sub_10903CF0+D6↑p
                                        ; DATA XREF: sub_10903CF0+D6↑r ...
; DWORD __stdcall GetLastError()
                extrn GetLastError:dword ; CODE XREF: sub_10903CF0+EB↑p
                                        ; sub_10905490+B0↑p ...
; HANDLE __stdcall CreateFileW(LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
                extrn CreateFileW:dword ; CODE XREF: sub_10903C20+29↑p
                                        ; sub_10904310+74↑p ...
; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
                extrn CreateFileA:dword ; CODE XREF: sub_10903C20+87↑p
                                        ; sub_10904310+D5↑p ...
; DWORD __stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh)
                extrn GetFileSize:dword ; CODE XREF: sub_10903C20+A7↑p
                                        ; sub_10904310+199↑p ...
; BOOL __stdcall WriteFile(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped)
                extrn WriteFile:dword   ; CODE XREF: sub_10903B20+4D↑p
                                        ; DATA XREF: sub_10903B20+4D↑r ...
; BOOL __stdcall CloseHandle(HANDLE hObject)
                extrn CloseHandle:dword ; CODE XREF: sub_10903980+3B↑p
                                        ; sub_10903C20+B4↑p ...
; DWORD __stdcall SetFilePointer(HANDLE hFile, LONG lDistanceToMove, PLONG lpDistanceToMoveHigh, DWORD dwMoveMethod)
                extrn SetFilePointer:dword
                                        ; CODE XREF: sub_109038A0+3A↑p
                                        ; sub_109045D0+1BF↑p
                                        ; DATA XREF: ...
; UINT __stdcall GetSystemDirectoryA(LPSTR lpBuffer, UINT uSize)
                extrn GetSystemDirectoryA:dword
                                        ; CODE XREF: .text:10902B98↑p
                                        ; DATA XREF: .text:10902B98↑r ...
; UINT __stdcall GetWindowsDirectoryA(LPSTR lpBuffer, UINT uSize)
                extrn GetWindowsDirectoryA:dword
                                        ; CODE XREF: .text:10902BAA↑p
                                        ; DATA XREF: .text:10902BAA↑r ...
; DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
                extrn GetModuleFileNameA:dword
                                        ; CODE XREF: .text:10902BBE↑p
                                        ; DATA XREF: .text:10902BBE↑r ...
; UINT __stdcall GetSystemDirectoryW(LPWSTR lpBuffer, UINT uSize)
                extrn GetSystemDirectoryW:dword
                                        ; CODE XREF: .text:10902DFB↑p
                                        ; DATA XREF: .text:10902DFB↑r ...
; UINT __stdcall GetWindowsDirectoryW(LPWSTR lpBuffer, UINT uSize)
                extrn GetWindowsDirectoryW:dword
                                        ; CODE XREF: .text:10902E0B↑p
                                        ; DATA XREF: .text:10902E0B↑r ...
; DWORD __stdcall GetModuleFileNameW(HMODULE hModule, LPWSTR lpFilename, DWORD nSize)
                extrn GetModuleFileNameW:dword
                                        ; CODE XREF: .text:10902E1D↑p
                                        ; DATA XREF: .text:10902E1D↑r ...
; int __stdcall lstrlenW(LPCWSTR lpString)
                extrn lstrlenW:dword    ; CODE XREF: sub_10901C80+E↑p
                                        ; DATA XREF: sub_10901C80+E↑r ...
; int __stdcall WideCharToMultiByte(UINT CodePage, DWORD dwFlags, LPCWSTR lpWideCharStr, int cchWideChar, LPSTR lpMultiByteStr, int cbMultiByte, LPCSTR lpDefaultChar, LPBOOL lpUsedDefaultChar)
                extrn WideCharToMultiByte:dword
                                        ; CODE XREF: sub_10901C80+4B↑p
                                        ; DATA XREF: sub_10901C80+4B↑r ...

;
; Imports from MSVCR90.dll
;
; void __cdecl __noreturn exit(int Code)
                extrn exit:dword        ; CODE XREF: ___tmainCRTStartup+14F↑p
                                        ; DATA XREF: ___tmainCRTStartup+14F↑r ...
                extrn __imp___CxxFrameHandler3:dword
                                        ; DATA XREF: __CxxFrameHandler3↑r
; int __cdecl vsnwprintf(wchar_t *Dest, size_t Count, const wchar_t *Format, va_list Args)
                extrn _vsnwprintf:dword ; CODE XREF: sub_109013B0+3C↑p
                                        ; sub_10901860+27↑p ...
                extrn __imp__purecall:dword ; DATA XREF: _purecall↑r
; wchar_t *__cdecl wcsncpy(wchar_t *Dest, const wchar_t *Source, size_t Count)
                extrn wcsncpy:dword     ; CODE XREF: .text:10901F31↑p
                                        ; sub_10902270+47↑p ...
; wchar_t *__cdecl wcschr(const wchar_t *Str, wchar_t Ch)
                extrn wcschr:dword      ; CODE XREF: sub_10902270+57↑p
                                        ; sub_10902270+88↑p ...
; int __cdecl wcsicmp(const wchar_t *Str1, const wchar_t *Str2)
                extrn _wcsicmp:dword    ; CODE XREF: sub_10902510+14↑p
                                        ; sub_10902510+E0↑p ...
; int __cdecl wcsnicmp(const wchar_t *Str1, const wchar_t *Str2, size_t MaxCount)
                extrn _wcsnicmp:dword   ; CODE XREF: sub_10902180+82↑p
                                        ; DATA XREF: __wcsnicmp↑r ...
; void *__cdecl memset(void *Dst, int Val, size_t Size)
                extrn __imp_memset:dword ; DATA XREF: memset↑r
; wchar_t *__cdecl wcsstr(const wchar_t *Str, const wchar_t *SubStr)
                extrn wcsstr:dword      ; CODE XREF: sub_10904310+15D↑p
                                        ; sub_109045D0+1D1↑p ...
; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
                extrn __imp_memcpy:dword ; DATA XREF: memcpy↑r
                extrn __imp__crt_debugger_hook:dword
                                        ; DATA XREF: _crt_debugger_hook↑r
; errno_t __cdecl _controlfp_s(unsigned int *CurrentState, unsigned int NewValue, unsigned int Mask)
                extrn __imp__controlfp_s:dword
                                        ; DATA XREF: _controlfp_s↑r
                extrn __imp__invoke_watson:dword
                                        ; DATA XREF: _invoke_watson↑r
                extrn __imp__except_handler4_common:dword
                                        ; DATA XREF: _except_handler4_common↑r
; __declspec(dllimport) public: void __thiscall type_info::_type_info_dtor_internal_method(void)
                extrn __imp_?_type_info_dtor_internal_method@type_info@@QAEXXZ:dword
                                        ; DATA XREF: type_info::_type_info_dtor_internal_method(void)↑r
; __declspec(dllimport) void __cdecl terminate(void)
                extrn __imp_?terminate@@YAXXZ:dword
                                        ; DATA XREF: terminate(void)↑r
                extrn __set_app_type:dword ; CODE XREF: .text:1090FD1E↑p
                                        ; DATA XREF: .text:1090FD1E↑r ...
                extrn __p__fmode:dword  ; CODE XREF: .text:1090FD38↑p
                                        ; DATA XREF: .text:1090FD38↑r ...
                extrn __p__commode:dword ; CODE XREF: .text:1090FD46↑p
                                        ; DATA XREF: .text:1090FD46↑r ...
                extrn _adjust_fdiv:dword ; DATA XREF: .text:1090FD54↑r
                extrn __setusermatherr:dword
                                        ; CODE XREF: .text:1090FD78↑p
                                        ; DATA XREF: .text:1090FD78↑r ...
                extrn _configthreadlocale:dword
                                        ; CODE XREF: .text:1090FD8F↑p
                                        ; DATA XREF: .text:1090FD8F↑r ...
                extrn __imp__initterm_e:dword ; DATA XREF: _initterm_e↑r
                extrn __imp__initterm:dword ; DATA XREF: _initterm↑r
                extrn _acmdln:dword     ; DATA XREF: ___tmainCRTStartup:loc_1090FB73↑r
; int __cdecl rand()
                extrn __imp_rand:dword  ; DATA XREF: .text:10901000↑r
                                        ; rand↑r ...
; int __cdecl ismbblead(unsigned int)
                extrn _ismbblead:dword  ; CODE XREF: ___tmainCRTStartup+168↑p
                                        ; DATA XREF: ___tmainCRTStartup+168↑r ...
                extrn __imp__XcptFilter:dword ; DATA XREF: _XcptFilter↑r
; void __cdecl __noreturn exit(int Code)
                extrn _exit:dword       ; CODE XREF: ___tmainCRTStartup+1A3↑p
                                        ; DATA XREF: ___tmainCRTStartup+1A3↑r ...
; int __cdecl wcsncmp(const wchar_t *Str1, const wchar_t *Str2, size_t MaxCount)
                extrn wcsncmp:dword     ; CODE XREF: sub_109063D0+86↑p
                                        ; DATA XREF: _wcsncmp↑r ...
; void __cdecl cexit()
                extrn _cexit:dword      ; CODE XREF: ___tmainCRTStartup+1B2↑p
                                        ; DATA XREF: ___tmainCRTStartup+1B2↑r ...
                extrn __getmainargs:dword ; CODE XREF: .text:1090FA5F↑p
                                        ; DATA XREF: .text:1090FA5F↑r ...
                extrn __imp__amsg_exit:dword ; DATA XREF: _amsg_exit↑r
                extrn _decode_pointer:dword ; CODE XREF: __onexit+18↑p
                                        ; __onexit+41↑p ...
; _onexit_t __cdecl onexit(_onexit_t Func)
                extrn _onexit:dword     ; CODE XREF: __onexit+26↑p
                                        ; DATA XREF: __onexit+26↑r
                extrn __imp__lock:dword ; DATA XREF: _lock↑r
                extrn _encode_pointer:dword ; CODE XREF: __onexit+64↑p
                                        ; __onexit+73↑p ...
                extrn __imp___dllonexit:dword ; DATA XREF: __dllonexit↑r
                extrn __imp__unlock:dword ; DATA XREF: _unlock↑r
; double __cdecl atof(const char *String)
                extrn atof:dword        ; CODE XREF: .text:1090864A↑p
                                        ; FConfigCache__GetFloat+5F↑p
                                        ; DATA XREF: ...
; int __cdecl wtoi(const wchar_t *Str)
                extrn _wtoi:dword       ; CODE XREF: FConfigCacheIni__GetInt+42↑p
                                        ; FConfigCacheIni__GetBool+66↑p ...

;
; Imports from USER32.dll
;
; LRESULT __stdcall DispatchMessageW(const MSG *lpMsg)
                extrn DispatchMessageW:dword
                                        ; CODE XREF: sub_10901690+141↑p
                                        ; sub_10901860+1E4↑p
                                        ; DATA XREF: ...
; BOOL __stdcall SetPropW(HWND hWnd, LPCWSTR lpString, HANDLE hData)
                extrn SetPropW:dword    ; CODE XREF: WinMain(x,x,x,x)+72D↑p
                                        ; DATA XREF: WinMain(x,x,x,x)+72D↑r ...
; BOOL __stdcall SetPropA(HWND hWnd, LPCSTR lpString, HANDLE hData)
                extrn SetPropA:dword    ; CODE XREF: WinMain(x,x,x,x)+790↑p
                                        ; DATA XREF: WinMain(x,x,x,x)+790↑r ...
; HANDLE __stdcall RemovePropW(HWND hWnd, LPCWSTR lpString)
                extrn RemovePropW:dword ; CODE XREF: WinMain(x,x,x,x)+1019↑p
                                        ; DATA XREF: WinMain(x,x,x,x)+1019↑r ...
; HANDLE __stdcall RemovePropA(HWND hWnd, LPCSTR lpString)
                extrn RemovePropA:dword ; CODE XREF: WinMain(x,x,x,x)+107A↑p
                                        ; DATA XREF: WinMain(x,x,x,x)+107A↑r ...
; BOOL __stdcall ShowWindow(HWND hWnd, int nCmdShow)
                extrn ShowWindow:dword  ; CODE XREF: sub_10901690+12↑p
                                        ; sub_10901810+3D↑p
                                        ; DATA XREF: ...
; BOOL __stdcall UpdateWindow(HWND hWnd)
                extrn UpdateWindow:dword ; CODE XREF: sub_10901690+F8↑p
                                        ; sub_10901690+105↑p ...
; LRESULT __stdcall SendMessageW(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
                extrn SendMessageW:dword ; CODE XREF: sub_109014B0+26↑p
                                        ; sub_10901510+26↑p ...
; LRESULT __stdcall SendMessageA(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
                extrn SendMessageA:dword ; CODE XREF: sub_109014B0+44↑p
                                        ; sub_10901510+44↑p ...
; int __stdcall MessageBoxW(HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType)
                extrn MessageBoxW:dword ; CODE XREF: sub_109012A0+7A↑p
                                        ; sub_109013B0+B6↑p ...
; BOOL __stdcall TranslateMessage(const MSG *lpMsg)
                extrn TranslateMessage:dword
                                        ; CODE XREF: sub_10901690+137↑p
                                        ; sub_10901860+1D7↑p
                                        ; DATA XREF: ...
; BOOL __stdcall PeekMessageW(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax, UINT wRemoveMsg)
                extrn PeekMessageW:dword ; CODE XREF: sub_10901690+129↑p
                                        ; sub_10901860+1C6↑p
                                        ; DATA XREF: ...

;
; Imports from dnAnimation.dll
;
                extrn g_CompiledAnims:dword
                                        ; DATA XREF: WinMain(x,x,x,x)+151↑r
                                        ; .rdata:10916624↓o

;
; Imports from dnCommon.dll
;
; __declspec(dllimport) public: virtual int __thiscall dnArchive::SerializeMaterial(class UMaterialEx * &, class dnName *)
                extrn __imp_?SerializeMaterial@dnArchive@@UAEHAAPAVUMaterialEx@@PAVdnName@@@Z:dword
                                        ; DATA XREF: dnArchive::SerializeMaterial(UMaterialEx * &,dnName *)↑r
                                        ; .rdata:10916688↓o
; __declspec(dllimport) public: virtual int __thiscall dnArchive::MapName(class dnName *)
                extrn __imp_?MapName@dnArchive@@UAEHPAVdnName@@@Z:dword
                                        ; DATA XREF: dnArchive::MapName(dnName *)↑r
; __declspec(dllimport) public: virtual int __thiscall dnArchive::MapObject(class UObject *)
                extrn __imp_?MapObject@dnArchive@@UAEHPAVUObject@@@Z:dword
                                        ; DATA XREF: dnArchive::MapObject(UObject *)↑r
; __declspec(dllimport) public: virtual __int64 __thiscall dnArchive::Tell64(void)
                extrn __imp_?Tell64@dnArchive@@UAE_JXZ:dword
                                        ; DATA XREF: dnArchive::Tell64(void)↑r
; __declspec(dllimport) public: virtual int __thiscall dnArchive::TotalSize(void)
                extrn __imp_?TotalSize@dnArchive@@UAEHXZ:dword
                                        ; DATA XREF: dnArchive::TotalSize(void)↑r
; __declspec(dllimport) public: virtual unsigned long __thiscall dnArchive::LinearTell(void)
                extrn __imp_?LinearTell@dnArchive@@UAEKXZ:dword
                                        ; DATA XREF: dnArchive::LinearTell(void)↑r
; __declspec(dllimport) public: virtual unsigned long __thiscall dnArchive::LinearTotalSize(void)
                extrn __imp_?LinearTotalSize@dnArchive@@UAEKXZ:dword
                                        ; DATA XREF: dnArchive::LinearTotalSize(void)↑r
; __declspec(dllimport) public: virtual int __thiscall dnArchive::AtEnd(void)
                extrn __imp_?AtEnd@dnArchive@@UAEHXZ:dword
                                        ; DATA XREF: dnArchive::AtEnd(void)↑r
; __declspec(dllimport) public: virtual void __thiscall dnArchive::Seek64(__int64)
                extrn __imp_?Seek64@dnArchive@@UAEX_J@Z:dword
                                        ; DATA XREF: dnArchive::Seek64(__int64)↑r
; __declspec(dllimport) public: virtual void __thiscall dnArchive::AttachLazyLoader(class dnLazyLoader *)
                extrn __imp_?AttachLazyLoader@dnArchive@@UAEXPAVdnLazyLoader@@@Z:dword
                                        ; DATA XREF: dnArchive::AttachLazyLoader(dnLazyLoader *)↑r
; __declspec(dllimport) public: virtual void __thiscall dnArchive::DetachLazyLoader(class dnLazyLoader *)
                extrn __imp_?DetachLazyLoader@dnArchive@@UAEXPAVdnLazyLoader@@@Z:dword
                                        ; DATA XREF: dnArchive::DetachLazyLoader(dnLazyLoader *)↑r
; __declspec(dllimport) public: virtual void __thiscall dnArchive::AttachLazyDataWorker(class dnLazyDataWorker *)
                extrn __imp_?AttachLazyDataWorker@dnArchive@@UAEXPAVdnLazyDataWorker@@@Z:dword
                                        ; DATA XREF: dnArchive::AttachLazyDataWorker(dnLazyDataWorker *)↑r
; __declspec(dllimport) public: virtual void __thiscall dnArchive::DetachLazyDataWorker(class dnLazyDataWorker *)
                extrn __imp_?DetachLazyDataWorker@dnArchive@@UAEXPAVdnLazyDataWorker@@@Z:dword
                                        ; DATA XREF: dnArchive::DetachLazyDataWorker(dnLazyDataWorker *)↑r
; __declspec(dllimport) public: virtual void __thiscall dnArchive::Precache(int)
                extrn __imp_?Precache@dnArchive@@UAEXH@Z:dword
                                        ; DATA XREF: dnArchive::Precache(int)↑r
; __declspec(dllimport) public: virtual int __thiscall dnArchive::GetError(void)
                extrn __imp_?GetError@dnArchive@@UAEHXZ:dword
                                        ; DATA XREF: dnArchive::GetError(void)↑r
; __declspec(dllimport) public: virtual void __thiscall dnArchive::InitTOC(class dnArchive *)
                extrn __imp_?InitTOC@dnArchive@@UAEXPAV1@@Z:dword
                                        ; DATA XREF: dnArchive::InitTOC(dnArchive *)↑r
; __declspec(dllimport) public: virtual int __thiscall dnArchive::HasTOC(void)const
                extrn __imp_?HasTOC@dnArchive@@UBEHXZ:dword
                                        ; DATA XREF: dnArchive::HasTOC(void)↑r
; __declspec(dllimport) public: virtual unsigned char * __thiscall dnArchive::GetCurrentPtr(void)
                extrn __imp_?GetCurrentPtr@dnArchive@@UAEPAEXZ:dword
                                        ; DATA XREF: dnArchive::GetCurrentPtr(void)↑r
; __declspec(dllimport) public: virtual int __thiscall dnArchive::Compress(unsigned char * *, unsigned long &)
                extrn __imp_?Compress@dnArchive@@UAEHPAPAEAAK@Z:dword
                                        ; DATA XREF: dnArchive::Compress(uchar * *,ulong &)↑r
; __declspec(dllimport) public: virtual void __thiscall dnArchive::Lock(void)
                extrn __imp_?Lock@dnArchive@@UAEXXZ:dword
                                        ; DATA XREF: dnArchive::Lock(void)↑r
; __declspec(dllimport) public: virtual void __thiscall dnArchive::UnLock(void)
                extrn __imp_?UnLock@dnArchive@@UAEXXZ:dword
                                        ; DATA XREF: dnArchive::UnLock(void)↑r
; __declspec(dllimport) public: virtual enum  dnLazyDataMode __thiscall dnArchive::GetLazyDataMode(void)
                extrn __imp_?GetLazyDataMode@dnArchive@@UAE?AW4dnLazyDataMode@@XZ:dword
                                        ; DATA XREF: dnArchive::GetLazyDataMode(void)↑r
; __declspec(dllimport) public: virtual void __thiscall dnArchive::SetLazyDataMode(enum  dnLazyDataMode)
                extrn __imp_?SetLazyDataMode@dnArchive@@UAEXW4dnLazyDataMode@@@Z:dword
                                        ; DATA XREF: dnArchive::SetLazyDataMode(dnLazyDataMode)↑r
; __declspec(dllimport) public: virtual void __thiscall dnArchive::AddDeferredLazyItem(class dnLazyDataWorker *, int)
                extrn __imp_?AddDeferredLazyItem@dnArchive@@UAEXPAVdnLazyDataWorker@@H@Z:dword
                                        ; DATA XREF: dnArchive::AddDeferredLazyItem(dnLazyDataWorker *,int)↑r
; __declspec(dllimport) public: virtual void __thiscall dnArchive::FlushDeferredLazyItems(void)
                extrn __imp_?FlushDeferredLazyItems@dnArchive@@UAEXXZ:dword
                                        ; DATA XREF: dnArchive::FlushDeferredLazyItems(void)↑r
; __declspec(dllimport) public: virtual void __thiscall dnArchive::VerifyLinear(wchar_t const *)
                extrn __imp_?VerifyLinear@dnArchive@@UAEXPB_W@Z:dword
                                        ; DATA XREF: dnArchive::VerifyLinear(wchar_t const *)↑r
; public: void __cdecl dnOutputDevice::Logf(class dnString const &, ...)
                extrn ?Logf@dnOutputDevice@@QAAXABVdnString@@ZZ:dword
                                        ; CODE XREF: sub_109038A0+8B↑p
                                        ; sub_10903980+8B↑p ...
; class dnOutputDeviceError * GError
                extrn ?GError@@3PAVdnOutputDeviceError@@A:dword
                                        ; DATA XREF: sub_10903BF0+7↑r
; public: __thiscall dnString::dnString(char const *)
                extrn ??0dnString@@QAE@PBD@Z:dword
                                        ; CODE XREF: sub_10903FD0+128↑p
                                        ; DATA XREF: sub_10903FD0+128↑r ...
; public: virtual __thiscall dnArchive::~dnArchive(void)
                extrn ??1dnArchive@@UAE@XZ:dword
                                        ; CODE XREF: .text:10904279↑p
                                        ; sub_10904290+49↑p
                                        ; DATA XREF: ...
; public: __thiscall dnArchiveFileReader::dnArchiveFileReader(void *, class dnOutputDevice *, int)
                extrn ??0dnArchiveFileReader@@QAE@PAXPAVdnOutputDevice@@H@Z:dword
                                        ; CODE XREF: sub_10904310+215↑p
                                        ; DATA XREF: sub_10904310+215↑r ...
; public: __thiscall dnArchiveFileReaderCompressedWin32::dnArchiveFileReaderCompressedWin32(void *, class dnOutputDevice *, int)
                extrn ??0dnArchiveFileReaderCompressedWin32@@QAE@PAXPAVdnOutputDevice@@H@Z:dword
                                        ; CODE XREF: sub_10904310+1AB↑p
                                        ; DATA XREF: sub_10904310+1AB↑r ...
; public: void __cdecl dnOutputDevice::Logf(wchar_t const *, ...)
                extrn ?Logf@dnOutputDevice@@QAAXPB_WZZ:dword
                                        ; CODE XREF: sub_10904310+104↑p
                                        ; sub_109045D0+199↑p ...
; __declspec(dllimport) public: virtual void __thiscall dnArchiveFileReaderCompressedWin32::Serialize(void *, int)
                extrn __imp_?Serialize@dnArchiveFileReaderCompressedWin32@@UAEXPAXH@Z:dword
                                        ; DATA XREF: dnArchiveFileReaderCompressedWin32::Serialize(void *,int)↑r
; __declspec(dllimport) public: virtual int __thiscall dnArchiveFileReaderCompressedWin32::Tell(void)
                extrn __imp_?Tell@dnArchiveFileReaderCompressedWin32@@UAEHXZ:dword
                                        ; DATA XREF: dnArchiveFileReaderCompressedWin32::Tell(void)↑r
; __declspec(dllimport) public: virtual __int64 __thiscall dnArchiveFileReaderCompressedWin32::Tell64(void)
                extrn __imp_?Tell64@dnArchiveFileReaderCompressedWin32@@UAE_JXZ:dword
                                        ; DATA XREF: dnArchiveFileReaderCompressedWin32::Tell64(void)↑r
; __declspec(dllimport) public: virtual int __thiscall dnArchiveFileReaderCompressedWin32::TotalSize(void)
                extrn __imp_?TotalSize@dnArchiveFileReaderCompressedWin32@@UAEHXZ:dword
                                        ; DATA XREF: dnArchiveFileReaderCompressedWin32::TotalSize(void)↑r
; __declspec(dllimport) public: virtual void __thiscall dnArchiveFileReaderCompressedWin32::Seek(int)
                extrn __imp_?Seek@dnArchiveFileReaderCompressedWin32@@UAEXH@Z:dword
                                        ; DATA XREF: dnArchiveFileReaderCompressedWin32::Seek(int)↑r
; __declspec(dllimport) public: virtual void __thiscall dnArchiveFileReaderCompressedWin32::Seek64(__int64)
                extrn __imp_?Seek64@dnArchiveFileReaderCompressedWin32@@UAEX_J@Z:dword
                                        ; DATA XREF: dnArchiveFileReaderCompressedWin32::Seek64(__int64)↑r
; __declspec(dllimport) public: virtual void __thiscall dnArchive::Flush(void)
                extrn __imp_?Flush@dnArchive@@UAEXXZ:dword
                                        ; DATA XREF: dnArchive::Flush(void)↑r
; __declspec(dllimport) public: virtual int __thiscall dnArchiveFileReaderCompressedWin32::Close(void)
                extrn __imp_?Close@dnArchiveFileReaderCompressedWin32@@UAEHXZ:dword
                                        ; DATA XREF: dnArchiveFileReaderCompressedWin32::Close(void)↑r
; __declspec(dllimport) public: virtual void __thiscall dnArchiveFileReaderCompressedWin32::InitTOC(class dnArchive *)
                extrn __imp_?InitTOC@dnArchiveFileReaderCompressedWin32@@UAEXPAVdnArchive@@@Z:dword
                                        ; DATA XREF: dnArchiveFileReaderCompressedWin32::InitTOC(dnArchive *)↑r
; __declspec(dllimport) public: virtual int __thiscall dnArchiveFileReaderCompressedWin32::HasTOC(void)const
                extrn __imp_?HasTOC@dnArchiveFileReaderCompressedWin32@@UBEHXZ:dword
                                        ; DATA XREF: dnArchiveFileReaderCompressedWin32::HasTOC(void)↑r
; __declspec(dllimport) public: virtual void __thiscall dnArchiveFileReader::Serialize(void *, int)
                extrn __imp_?Serialize@dnArchiveFileReader@@UAEXPAXH@Z:dword
                                        ; DATA XREF: dnArchiveFileReader::Serialize(void *,int)↑r
; __declspec(dllimport) public: virtual int __thiscall dnArchiveFileReader::Tell(void)
                extrn __imp_?Tell@dnArchiveFileReader@@UAEHXZ:dword
                                        ; DATA XREF: dnArchiveFileReader::Tell(void)↑r
; __declspec(dllimport) public: virtual int __thiscall dnArchiveFileReader::TotalSize(void)
                extrn __imp_?TotalSize@dnArchiveFileReader@@UAEHXZ:dword
                                        ; DATA XREF: dnArchiveFileReader::TotalSize(void)↑r
; __declspec(dllimport) public: virtual void __thiscall dnArchiveFileReader::Seek(int)
                extrn __imp_?Seek@dnArchiveFileReader@@UAEXH@Z:dword
                                        ; DATA XREF: dnArchiveFileReader::Seek(int)↑r
; __declspec(dllimport) public: virtual void __thiscall dnArchiveFileReader::Precache(int)
                extrn __imp_?Precache@dnArchiveFileReader@@UAEXH@Z:dword
                                        ; DATA XREF: dnArchiveFileReader::Precache(int)↑r
; __declspec(dllimport) public: virtual int __thiscall dnArchiveFileReader::Close(void)
                extrn __imp_?Close@dnArchiveFileReader@@UAEHXZ:dword
                                        ; DATA XREF: dnArchiveFileReader::Close(void)↑r
; __declspec(dllimport) public: virtual void __thiscall dnArchiveFileReader::Lock(void)
                extrn __imp_?Lock@dnArchiveFileReader@@UAEXXZ:dword
                                        ; DATA XREF: dnArchiveFileReader::Lock(void)↑r
; __declspec(dllimport) public: virtual void __thiscall dnArchiveFileReader::UnLock(void)
                extrn __imp_?UnLock@dnArchiveFileReader@@UAEXXZ:dword
                                        ; DATA XREF: dnArchiveFileReader::UnLock(void)↑r
; public: virtual __thiscall dnArchiveFileReader::~dnArchiveFileReader(void)
                extrn ??1dnArchiveFileReader@@UAE@XZ:dword
                                        ; CODE XREF: sub_10904570+A↑p
                                        ; DATA XREF: sub_10904570+A↑r ...
; public: virtual __thiscall dnArchiveFileReaderCompressedWin32::~dnArchiveFileReaderCompressedWin32(void)
                extrn ??1dnArchiveFileReaderCompressedWin32@@UAE@XZ:dword
                                        ; CODE XREF: sub_109045A0+A↑p
                                        ; DATA XREF: sub_109045A0+A↑r ...
; public: __thiscall dnArchiveFileWriterCompressedWin32::dnArchiveFileWriterCompressedWin32(void *, class dnOutputDevice *, int, int)
                extrn ??0dnArchiveFileWriterCompressedWin32@@QAE@PAXPAVdnOutputDevice@@HH@Z:dword
                                        ; CODE XREF: sub_109045D0+218↑p
                                        ; DATA XREF: sub_109045D0+218↑r ...
; __declspec(dllimport) public: virtual void __thiscall dnArchiveFileWriterCompressedWin32::Serialize(void *, int)
                extrn __imp_?Serialize@dnArchiveFileWriterCompressedWin32@@UAEXPAXH@Z:dword
                                        ; DATA XREF: dnArchiveFileWriterCompressedWin32::Serialize(void *,int)↑r
; __declspec(dllimport) public: virtual int __thiscall dnArchiveFileWriterCompressedWin32::Tell(void)
                extrn __imp_?Tell@dnArchiveFileWriterCompressedWin32@@UAEHXZ:dword
                                        ; DATA XREF: dnArchiveFileWriterCompressedWin32::Tell(void)↑r
; __declspec(dllimport) public: virtual void __thiscall dnArchiveFileWriterCompressedWin32::Seek(int)
                extrn __imp_?Seek@dnArchiveFileWriterCompressedWin32@@UAEXH@Z:dword
                                        ; DATA XREF: dnArchiveFileWriterCompressedWin32::Seek(int)↑r
; __declspec(dllimport) public: virtual void __thiscall dnArchiveFileWriterCompressedWin32::Flush(void)
                extrn __imp_?Flush@dnArchiveFileWriterCompressedWin32@@UAEXXZ:dword
                                        ; DATA XREF: dnArchiveFileWriterCompressedWin32::Flush(void)↑r
; __declspec(dllimport) public: virtual int __thiscall dnArchiveFileWriterCompressedWin32::Close(void)
                extrn __imp_?Close@dnArchiveFileWriterCompressedWin32@@UAEHXZ:dword
                                        ; DATA XREF: dnArchiveFileWriterCompressedWin32::Close(void)↑r
; __declspec(dllimport) public: virtual void __thiscall dnArchive::SetMode(int)
                extrn __imp_?SetMode@dnArchive@@UAEXH@Z:dword
                                        ; DATA XREF: dnArchive::SetMode(int)↑r
; __declspec(dllimport) public: virtual int __thiscall dnArchiveFileWriterCompressedWin32::HasTOC(void)const
                extrn __imp_?HasTOC@dnArchiveFileWriterCompressedWin32@@UBEHXZ:dword
                                        ; DATA XREF: dnArchiveFileWriterCompressedWin32::HasTOC(void)↑r
; __declspec(dllimport) public: virtual class dnArchive & __thiscall dnArchive::operator<<(class dnName &)
                extrn __imp_??6dnArchive@@UAEAAV0@AAVdnName@@@Z:dword
                                        ; DATA XREF: dnArchive::operator<<(dnName &)↑r
; public: int __thiscall dnArrayBase::Num(void)const
                extrn ?Num@dnArrayBase@@QBEHXZ:dword
                                        ; CODE XREF: sub_10901AF0+16↑p
                                        ; sub_10901AF0+28↑p ...
; public: int __thiscall dnArchive::IsError(void)
                extrn ?IsError@dnArchive@@QAEHXZ:dword
                                        ; CODE XREF: sub_10904BD0+D3↑p
                                        ; sub_10904BD0+F0↑p
                                        ; DATA XREF: ...
; public: void __thiscall dnArrayBase::Remove(int, int, int)
                extrn ?Remove@dnArrayBase@@QAEXHHH@Z:dword
                                        ; CODE XREF: .text:10904E98↑p
                                        ; sub_10905110+47↑p ...
; public: __thiscall dnName::dnName(enum  EName)
                extrn ??0dnName@@QAE@W4EName@@@Z:dword
                                        ; CODE XREF: sub_10904EB0+71↑p
                                        ; DATA XREF: sub_10904EB0+71↑r ...
; public: int __thiscall dnName::operator==(class dnName const &)const
                extrn ??8dnName@@QBEHABV0@@Z:dword
                                        ; CODE XREF: sub_10904EB0+5B↑p
                                        ; sub_10904EB0+7D↑p
                                        ; DATA XREF: ...
; public: void __thiscall dnArrayBase::Empty(int, int)
                extrn ?Empty@dnArrayBase@@QAEXHH@Z:dword
                                        ; CODE XREF: sub_10904F70+2D↑p
                                        ; sub_109095C0+6B↑p ...
; public: __thiscall dnString::dnString(class dnString const &)
                extrn ??0dnString@@QAE@ABV0@@Z:dword
                                        ; CODE XREF: sub_10904FB0+68↑p
                                        ; sub_10905080+67↑p ...
; public: __thiscall dnArrayBase::~dnArrayBase(void)
                extrn ??1dnArrayBase@@QAE@XZ:dword
                                        ; CODE XREF: sub_109057B0+79↑p
                                        ; sub_10905860+3A↑p ...
; protected: __thiscall dnArrayBase::dnArrayBase(int, int)
                extrn ??0dnArrayBase@@IAE@HH@Z:dword
                                        ; CODE XREF: sub_10905080+2C↑p
                                        ; sub_10908AA0+2D↑p ...
; public: class dnString & __thiscall dnString::operator+=(wchar_t const *)
                extrn ??YdnString@@QAEAAV0@PB_W@Z:dword
                                        ; CODE XREF: sub_10905580+E4↑p
                                        ; sub_10905580+F5↑p ...
; public: class dnString & __thiscall dnString::operator=(class dnString const &)
                extrn ??4dnString@@QAEAAV0@ABV0@@Z:dword
                                        ; CODE XREF: sub_10905920+667↑p
                                        ; sub_109061B0+9C↑p ...
; public: class dnString __thiscall dnString::Left(int)const
                extrn ?Left@dnString@@QBE?AV1@H@Z:dword
                                        ; CODE XREF: sub_10905920+63E↑p
                                        ; DATA XREF: sub_10905920+63E↑r ...
; public: int __thiscall dnString::InStr(wchar_t const *, int)const
                extrn ?InStr@dnString@@QBEHPB_WH@Z:dword
                                        ; CODE XREF: sub_10905920+5AB↑p
                                        ; DATA XREF: sub_10905920+5AB↑r ...
; class dnString const __cdecl dnBaseContentDir(void)
                extrn ?dnBaseContentDir@@YA?BVdnString@@XZ:dword
                                        ; CODE XREF: sub_109061B0+3A↑p
                                        ; DATA XREF: sub_109061B0+3A↑r ...
                extrn g_UCCAllowDLCFiles:dword
                                        ; DATA XREF: sub_109066F0+3C↑r
                                        ; sub_10906960+2E↑r
                extrn GIsUCC:dword      ; DATA XREF: sub_109066F0+32↑r
                                        ; sub_10906960+24↑r ...
; public: class dnString __thiscall dnString::operator*(class dnString const &)const
                extrn ??DdnString@@QBE?AV0@ABV0@@Z:dword
                                        ; CODE XREF: sub_10906B60+D3↑p
                                        ; sub_10906B60+1C0↑p
                                        ; DATA XREF: ...
; public: class dnString __thiscall dnString::operator*(wchar_t const *)const
                extrn ??DdnString@@QBE?AV0@PB_W@Z:dword
                                        ; CODE XREF: sub_10906B60+67↑p
                                        ; DATA XREF: sub_10906B60+67↑r ...
; public: __thiscall FFilename::~FFilename(void)
                extrn ??1FFilename@@QAE@XZ:dword
                                        ; CODE XREF: sub_10907980+4C↑p
                                        ; sub_10907980+80↑p ...
; public: __thiscall FFilename::FFilename(void)
                extrn ??0FFilename@@QAE@XZ:dword
                                        ; CODE XREF: sub_109078B0+8B↑p
                                        ; sub_109078B0+9B↑p ...
; public: class FFilename & __thiscall FFilename::operator=(class FFilename const &)
                extrn ??4FFilename@@QAEAAV0@ABV0@@Z:dword
                                        ; CODE XREF: sub_10907980+3C↑p
                                        ; sub_10907980+70↑p ...
; public: __thiscall FFilename::FFilename(wchar_t const *)
                extrn ??0FFilename@@QAE@PB_W@Z:dword
                                        ; CODE XREF: sub_10907980+25↑p
                                        ; sub_10907980+59↑p ...
; public: void __thiscall dnArrayBase::Shrink(int)
                extrn ?Shrink@dnArrayBase@@QAEXH@Z:dword
                                        ; CODE XREF: .text:10907D9C↑p
                                        ; sub_1090CF60+3CC↑p
                                        ; DATA XREF: ...
; public: int __thiscall dnArrayBase::AddZeroed(int, int)
                extrn ?AddZeroed@dnArrayBase@@QAEHHH@Z:dword
                                        ; CODE XREF: .text:10907E40↑p
                                        ; .text:10907EC0↑p ...
; public: void __thiscall dnArrayBase::CountBytes(class dnArchive &, int)
                extrn ?CountBytes@dnArrayBase@@QAEXAAVdnArchive@@H@Z:dword
                                        ; CODE XREF: .text:10907F40↑p
                                        ; .text:10907FA0↑p ...
; class dnArchive & __cdecl operator<<(class dnArchive &, class dnString &)
                extrn ??6@YAAAVdnArchive@@AAV0@AAVdnString@@@Z:dword
                                        ; CODE XREF: .text:10908045↑p
                                        ; .text:1090804F↑p ...
; public: int __thiscall dnString::operator==(class dnString const &)const
                extrn ??8dnString@@QBEHABV0@@Z:dword
                                        ; CODE XREF: sub_10908590+5A↑p
                                        ; sub_10908790+5D↑p ...
; public: class dnString & __thiscall dnString::operator+=(class dnString const &)
                extrn ??YdnString@@QAEAAV0@ABV0@@Z:dword
                                        ; CODE XREF: sub_10908D00+D9↑p
                                        ; sub_10908D00+199↑p ...
; public: static class dnString __cdecl dnString::Printf(wchar_t const *, ...)
                extrn ?Printf@dnString@@SA?AV1@PB_WZZ:dword
                                        ; CODE XREF: sub_10908D00+B0↑p
                                        ; sub_10908D00+170↑p ...
; public: void __thiscall dnString::Empty(int)
                extrn ?Empty@dnString@@QAEXH@Z:dword
                                        ; CODE XREF: sub_10909010+3F↑p
                                        ; DATA XREF: sub_10909010+3F↑r ...
; public: void __thiscall dnOutputDevice::Log(wchar_t const *)
                extrn ?Log@dnOutputDevice@@QAEXPB_W@Z:dword
                                        ; CODE XREF: sub_10909370+11↑p
                                        ; DATA XREF: sub_10909370+11↑r ...
; public: class dnString __thiscall FFilename::GetExtension(int)const
                extrn ?GetExtension@FFilename@@QBE?AVdnString@@H@Z:dword
                                        ; CODE XREF: sub_10909650+D6↑p
                                        ; sub_10909650+FB↑p ...
; public: __thiscall FFilename::FFilename(class dnString const &)
                extrn ??0FFilename@@QAE@ABVdnString@@@Z:dword
                                        ; CODE XREF: sub_10909650+C3↑p
                                        ; sub_1090BE40+94↑p ...
; protected: void __thiscall dnArrayBase::Realloc(int)
                extrn ?Realloc@dnArrayBase@@IAEXH@Z:dword
                                        ; CODE XREF: sub_10909930+60↑p
                                        ; sub_1090A510+60↑p ...
; public: int __thiscall dnArchive::IsLoading(void)
                extrn ?IsLoading@dnArchive@@QAEHXZ:dword
                                        ; CODE XREF: sub_10909930+45↑p
                                        ; sub_10909930+90↑p ...
; class dnArchive & __cdecl operator<<(class dnArchive &, class dnCompactIndex &)
                extrn ??6@YAAAVdnArchive@@AAV0@AAVdnCompactIndex@@@Z:dword
                                        ; CODE XREF: sub_10909930+39↑p
                                        ; sub_10909930+A6↑p ...
; public: int __thiscall dnString::operator==(wchar_t const *)const
                extrn ??8dnString@@QBEHPB_W@Z:dword
                                        ; CODE XREF: sub_1090A1C0+61↑p
                                        ; sub_1090B310+48↑p ...
; public: wchar_t const * __thiscall dnString::ToLower(void)
                extrn ?ToLower@dnString@@QAEPB_WXZ:dword
                                        ; CODE XREF: sub_1090B840+412↑p
                                        ; sub_1090B840+4EA↑p ...
; public: class dnString __thiscall FFilename::GetCleanFilename(void)const
                extrn ?GetCleanFilename@FFilename@@QBE?AVdnString@@XZ:dword
                                        ; CODE XREF: sub_1090B840+3F0↑p
                                        ; sub_1090B840+4C1↑p ...
; public: virtual __thiscall FNameAsStringProxyArchive::~FNameAsStringProxyArchive(void)
                extrn ??1FNameAsStringProxyArchive@@UAE@XZ:dword
                                        ; CODE XREF: sub_1090CF60+2DC↑p
                                        ; sub_1090CF60+393↑p ...
; public: __thiscall FNameAsStringProxyArchive::FNameAsStringProxyArchive(class dnArchive &)
                extrn ??0FNameAsStringProxyArchive@@QAE@AAVdnArchive@@@Z:dword
                                        ; CODE XREF: sub_1090CF60+25D↑p
                                        ; sub_1090CF60+314↑p ...
; public: int __thiscall dnString::operator!=(wchar_t const *)const
                extrn ??9dnString@@QBEHPB_W@Z:dword
                                        ; CODE XREF: sub_1090CF60+128↑p
                                        ; sub_1090D430+1C2↑p
                                        ; DATA XREF: ...
; public: class dnString __thiscall FFilename::GetBaseFilename(int)const
                extrn ?GetBaseFilename@FFilename@@QBE?AVdnString@@H@Z:dword
                                        ; CODE XREF: sub_1090D430+189↑p
                                        ; sub_1090D430+2BD↑p ...
; class dnFeedbackContext * GWarn
                extrn ?GWarn@@3PAVdnFeedbackContext@@A:dword
                                        ; DATA XREF: sub_1090D430+40↑r
                                        ; sub_1090D430+2A0↑r ...
                extrn GIsRequestingExit:dword
                                        ; DATA XREF: WinMain(x,x,x,x):loc_1090EAE0↑r
; public: wchar_t const * __thiscall dnString::GetPtr(void)
                extrn ?GetPtr@dnString@@QAEPB_WXZ:dword
                                        ; CODE XREF: WinMain(x,x,x,x)+BEE↑p
                                        ; WinMain(x,x,x,x)+C8A↑p ...
; public: void __thiscall dnThread_Semaphore::UnLock(void)
                extrn ?UnLock@dnThread_Semaphore@@QAEXXZ:dword
                                        ; CODE XREF: WinMain(x,x,x,x)+9A0↑p
                                        ; WinMain(x,x,x,x)+A47↑p
                                        ; DATA XREF: ...
; public: void __thiscall dnThread_Semaphore::Lock(void)
                extrn ?Lock@dnThread_Semaphore@@QAEXXZ:dword
                                        ; CODE XREF: WinMain(x,x,x,x)+97C↑p
                                        ; WinMain(x,x,x,x)+A23↑p
                                        ; DATA XREF: ...
                extrn GEngine:dword     ; DATA XREF: WinMain(x,x,x,x)+935↑r
                                        ; WinMain(x,x,x,x)+946↑r ...
; public: class dnString __thiscall dnString::operator+(class dnString const &)const
                extrn ??HdnString@@QBE?AV0@ABV0@@Z:dword
                                        ; CODE XREF: WinMain(x,x,x,x)+855↑p
                                        ; DATA XREF: WinMain(x,x,x,x)+855↑r ...
; public: void __thiscall dnOutputDevice::Log(enum  EName, class dnString const &)
                extrn ?Log@dnOutputDevice@@QAEXW4EName@@ABVdnString@@@Z:dword
                                        ; CODE XREF: WinMain(x,x,x,x)+6EC↑p
                                        ; WinMain(x,x,x,x)+7F9↑p ...
; public: __thiscall dnName::dnName(wchar_t const *, enum  EFindName)
                extrn ??0dnName@@QAE@PB_WW4EFindName@@@Z:dword
                                        ; CODE XREF: WinMain(x,x,x,x)+652↑p
                                        ; DATA XREF: WinMain(x,x,x,x)+652↑r ...
                extrn GLazyLoad:dword   ; DATA XREF: WinMain(x,x,x,x):loc_1090DFA8↑r
                extrn GIsServer:dword   ; DATA XREF: WinMain(x,x,x,x):loc_1090DEF4↑r
                                        ; WinMain(x,x,x,x)+5C2↑r
; class dnConfigCache * GConfig
                extrn ?GConfig@@3PAVdnConfigCache@@A:dword
                                        ; DATA XREF: WinMain(x,x,x,x)+398↑r
                                        ; WinMain(x,x,x,x)+39F↑r ...
                extrn GIsStarted:dword  ; DATA XREF: WinMain(x,x,x,x)+8B↑r
                                        ; WinMain(x,x,x,x)+114C↑r
                extrn dnInitAssertMgr:dword
                                        ; CODE XREF: WinMain(x,x,x,x)+7B↑p
                                        ; DATA XREF: WinMain(x,x,x,x)+7B↑r ...
; public: void __thiscall dnArrayBase::Clear(void)
                extrn ?Clear@dnArrayBase@@QAEXXZ:dword
                                        ; CODE XREF: sub_1090ECE0+CE↑p
                                        ; DATA XREF: sub_1090ECE0+CE↑r ...
; public: int __thiscall dnString::operator!=(class dnString const &)const
                extrn ??9dnString@@QBEHABV0@@Z:dword
                                        ; CODE XREF: sub_1090ECE0+BF↑p
                                        ; DATA XREF: sub_1090ECE0+BF↑r ...
; public: int __thiscall dnString::Len(void)const
                extrn ?Len@dnString@@QBEHXZ:dword
                                        ; CODE XREF: sub_1090ECE0+AE↑p
                                        ; DATA XREF: sub_1090ECE0+AE↑r ...
; public: virtual __thiscall dnArchiveFileWriterCompressedWin32::~dnArchiveFileWriterCompressedWin32(void)
                extrn ??1dnArchiveFileWriterCompressedWin32@@UAE@XZ:dword
                                        ; CODE XREF: sub_109048C0+A↑p
                                        ; DATA XREF: sub_109048C0+A↑r ...
; __declspec(dllimport) public: virtual class dnArchive & __thiscall dnArchive::operator<<(class UObject * &)
                extrn __imp_??6dnArchive@@UAEAAV0@AAPAVUObject@@@Z:dword
                                        ; DATA XREF: dnArchive::operator<<(UObject * &)↑r
; __declspec(dllimport) public: virtual void __thiscall dnArchive::CountBytes(unsigned long, unsigned long)
                extrn __imp_?CountBytes@dnArchive@@UAEXKK@Z:dword
                                        ; DATA XREF: dnArchive::CountBytes(ulong,ulong)↑r
; __declspec(dllimport) public: virtual void __thiscall dnArchive::Preload(class UObject *)
                extrn __imp_?Preload@dnArchive@@UAEXPAVUObject@@@Z:dword
                                        ; DATA XREF: dnArchive::Preload(UObject *)↑r
; __declspec(dllimport) public: virtual void __thiscall dnArchive::SerializeInt(unsigned long &, unsigned long)
                extrn __imp_?SerializeInt@dnArchive@@UAEXAAKK@Z:dword
                                        ; DATA XREF: dnArchive::SerializeInt(ulong &,ulong)↑r
; __declspec(dllimport) public: virtual void __thiscall dnArchive::SerializeBits(void *, int)
                extrn __imp_?SerializeBits@dnArchive@@UAEXPAXH@Z:dword
                                        ; DATA XREF: dnArchive::SerializeBits(void *,int)↑r
; public: __thiscall dnArchive::dnArchive(void)
                extrn ??0dnArchive@@QAE@XZ:dword
                                        ; CODE XREF: .text:1090384A↑p
                                        ; sub_109045D0+270↑p
                                        ; DATA XREF: ...
                extrn GIsCriticalError:dword
                                        ; DATA XREF: sub_10902E30+35↑r
; public: static int __cdecl dnName::SafeSuppressed(enum  EName)
                extrn ?SafeSuppressed@dnName@@SAHW4EName@@@Z:dword
                                        ; CODE XREF: sub_10902E30+50↑p
                                        ; DATA XREF: sub_10902E30+50↑r ...
; class dnFileMgr * GFileManager
                extrn ?GFileManager@@3PAVdnFileMgr@@A:dword
                                        ; DATA XREF: sub_10902E30+56D↑r
                                        ; sub_10902E30+575↑r ...
; public: static wchar_t const * __cdecl dnName::SafeString(enum  EName)
                extrn ?SafeString@dnName@@SAPB_WW4EName@@@Z:dword
                                        ; CODE XREF: sub_10902E30+685↑p
                                        ; DATA XREF: sub_10902E30+685↑r ...
; class dnOutputDevice * GLogHook
                extrn ?GLogHook@@3PAVdnOutputDevice@@A:dword
                                        ; DATA XREF: sub_10902E30:loc_1090358C↑r
                                        ; sub_10902E30+76F↑r ...
; public: int __thiscall dnArrayBase::Add(int, int)
                extrn ?Add@dnArrayBase@@QAEHHH@Z:dword
                                        ; CODE XREF: sub_10902AC0+D↑p
                                        ; sub_109041B0+15↑p ...
; class dnString const __cdecl dnPackage(void)
                extrn ?dnPackage@@YA?BVdnString@@XZ:dword
                                        ; CODE XREF: sub_10902810+10↑p
                                        ; DATA XREF: sub_10902810+10↑r ...
; class dnString const __cdecl dnBaseDir(void)
                extrn ?dnBaseDir@@YA?BVdnString@@XZ:dword
                                        ; CODE XREF: sub_109027F0+10↑p
                                        ; sub_109061B0+B3↑p
                                        ; DATA XREF: ...
; public: __thiscall dnString::dnString(wchar_t const *)
                extrn ??0dnString@@QAE@PB_W@Z:dword
                                        ; CODE XREF: sub_109027C0+17↑p
                                        ; sub_10903FD0+9C↑p ...
; public: __thiscall dnArrayBase::dnArrayBase(void)
                extrn ??0dnArrayBase@@QAE@XZ:dword
                                        ; CODE XREF: .text:1090278A↑p
                                        ; sub_10902990+3↑p ...
; class dnOutputDevice * GNull
                extrn ?GNull@@3PAVdnOutputDevice@@A:dword
                                        ; DATA XREF: sub_10902470+3↑r
                                        ; sub_10902E30+543↑r ...
; public: class dnString & __thiscall dnString::operator=(wchar_t const *)
                extrn ??4dnString@@QAEAAV0@PB_W@Z:dword
                                        ; CODE XREF: sub_109023C0+52↑p
                                        ; sub_10903620+41↑p ...
                extrn InitCRCTable:dword ; CODE XREF: sub_10902040+16↑p
                                        ; DATA XREF: sub_10902040+16↑r ...
; _DWORD GCRCTable[]
                extrn GCRCTable:dword   ; DATA XREF: sub_10902040+34↑r
                extrn GTimestamp:dword  ; DATA XREF: sub_10901C10+3↑r
                extrn GSecondsPerCycle:dword
                                        ; DATA XREF: sub_10901C10:loc_10901C4E↑r
; double __cdecl dnSecondsSlow(void)
                extrn ?dnSecondsSlow@@YANXZ:dword
                                        ; CODE XREF: sub_10901C10:loc_10901C5B↑p
                                        ; DATA XREF: sub_10901C10:loc_10901C5B↑r ...
                extrn GCmdLine:dword    ; DATA XREF: .text:10901C00↑r
                                        ; sub_109027C0+4↑r
; public: int __thiscall dnArrayBase::IsValidIndex(int)const
                extrn ?IsValidIndex@dnArrayBase@@QBEHH@Z:dword
                                        ; CODE XREF: sub_10901AF0+42↑p
                                        ; DATA XREF: sub_10901AF0+42↑r ...
; __declspec(dllimport) public: virtual int __thiscall dnFileMgr::FindPackageFile(wchar_t const *, wchar_t *)
                extrn __imp_?FindPackageFile@dnFileMgr@@UAEHPB_WPA_W@Z:dword
                                        ; DATA XREF: dnFileMgr::FindPackageFile(wchar_t const *,wchar_t *)↑r
; __declspec(dllimport) public: virtual class dnArchive * __thiscall dnFileMgr::CreateLinearReader(wchar_t const *)
                extrn __imp_?CreateLinearReader@dnFileMgr@@UAEPAVdnArchive@@PB_W@Z:dword
                                        ; DATA XREF: dnFileMgr::CreateLinearReader(wchar_t const *)↑r
; __declspec(dllimport) public: virtual int __thiscall dnFileMgr::IsLinearFileOpen(void)
                extrn __imp_?IsLinearFileOpen@dnFileMgr@@UAEHXZ:dword
                                        ; DATA XREF: dnFileMgr::IsLinearFileOpen(void)↑r
; __declspec(dllimport) public: virtual void __thiscall dnFileMgr::CloseLinearFile(void)
                extrn __imp_?CloseLinearFile@dnFileMgr@@UAEXXZ:dword
                                        ; DATA XREF: dnFileMgr::CloseLinearFile(void)↑r
; __declspec(dllimport) public: virtual void __thiscall dnFileMgr::OpenLinearFile(wchar_t const *, int, int)
                extrn __imp_?OpenLinearFile@dnFileMgr@@UAEXPB_WHH@Z:dword
                                        ; DATA XREF: dnFileMgr::OpenLinearFile(wchar_t const *,int,int)↑r
; __declspec(dllimport) public: virtual void __thiscall dnFileMgr::PreInit(void)
                extrn __imp_?PreInit@dnFileMgr@@UAEXXZ:dword
                                        ; DATA XREF: dnFileMgr::PreInit(void)↑r
; public: __thiscall dnFileMgr::dnFileMgr(void)
                extrn ??0dnFileMgr@@QAE@XZ:dword
                                        ; CODE XREF: .text:10901ABA↑p
                                        ; .text:1090378A↑p ...
; public: __thiscall dnString::dnString(void)
                extrn ??0dnString@@QAE@XZ:dword
                                        ; CODE XREF: .text:10901A7D↑p
                                        ; sub_10903620+21↑p ...
; int __cdecl dnWinGetSizeANSI(wchar_t const *)
                extrn ?dnWinGetSizeANSI@@YAHPB_W@Z:dword
                                        ; CODE XREF: sub_10901690+5B↑p
                                        ; sub_10901690+7C↑p ...
; char * __cdecl dnWinToANSI(char *, wchar_t const *, int)
                extrn ?dnWinToANSI@@YAPADPADPB_WH@Z:dword
                                        ; CODE XREF: sub_10901690+8E↑p
                                        ; sub_10901860+D7↑p ...
                extrn GIsSlowTask:dword ; DATA XREF: sub_10901690+164↑r
                                        ; sub_10901810+22↑r ...
                extrn GUnicodeOS:dword  ; DATA XREF: sub_109014B0+9↑r
                                        ; sub_10901510+9↑r ...
                extrn GIsClient:dword   ; DATA XREF: sub_109012A0+27↑r
                                        ; sub_109013B0+4C↑r ...
                extrn GIsEditor:dword   ; DATA XREF: sub_109012A0+31↑r
                                        ; sub_109013B0+57↑r ...
; class dnString const __cdecl dnLocalizeError(char const *, wchar_t const *, wchar_t const *)
                extrn ?dnLocalizeError@@YA?BVdnString@@PBDPB_W1@Z:dword
                                        ; CODE XREF: sub_109012A0+4C↑p
                                        ; sub_109013B0+79↑p ...
; public: wchar_t const * __thiscall dnString::operator*(void)const
                extrn ??DdnString@@QBEPB_WXZ:dword
                                        ; CODE XREF: sub_109012A0+6D↑p
                                        ; sub_109013B0+A6↑p ...
; public: __thiscall dnString::~dnString(void)
                extrn ??1dnString@@QAE@XZ:dword
                                        ; CODE XREF: sub_109012A0+8A↑p
                                        ; sub_109013B0+D7↑p ...
; class dnOutputDevice * GLog
                extrn ?GLog@@3PAVdnOutputDevice@@A:dword
                                        ; DATA XREF: sub_109012A0+9F↑r
                                        ; sub_10903E10+E8↑r ...
; __declspec(dllimport) public: virtual void __thiscall dnOutputDevice::Flush(void)
                extrn __imp_?Flush@dnOutputDevice@@UAEXXZ:dword
                                        ; DATA XREF: dnOutputDevice::Flush(void)↑r
; public: __thiscall dnFeedbackContext::dnFeedbackContext(void)
                extrn ??0dnFeedbackContext@@QAE@XZ:dword
                                        ; CODE XREF: sub_10901220+A↑p
                                        ; DATA XREF: sub_10901220+A↑r ...
; wchar_t const * __cdecl dnTimeStamp(void)
                extrn ?dnTimeStamp@@YAPB_WXZ:dword
                                        ; CODE XREF: sub_10901170+1B↑p
                                        ; sub_10902E30+5F5↑p
                                        ; DATA XREF: ...
; public: void __cdecl dnOutputDevice::Logf(enum  EName, wchar_t const *, ...)
                extrn ?Logf@dnOutputDevice@@QAAXW4EName@@PB_WZZ:dword
                                        ; CODE XREF: sub_10901170+30↑p
                                        ; sub_109012A0+A8↑p ...
; __declspec(dllimport) public: virtual void __thiscall dnOutputDevice::PrintfArgList(wchar_t *, unsigned int, wchar_t const *, char *)
                extrn __imp_?PrintfArgList@dnOutputDevice@@UAEXPA_WIPB_WPAD@Z:dword
                                        ; DATA XREF: dnOutputDevice::PrintfArgList(wchar_t *,uint,wchar_t const *,char *)↑r
; __declspec(dllimport) public: virtual void __thiscall dnOutputDevice::FlushRealtime(void)
                extrn __imp_?FlushRealtime@dnOutputDevice@@UAEXXZ:dword
                                        ; DATA XREF: dnOutputDevice::FlushRealtime(void)↑r
; public: __thiscall dnOutputDevice::dnOutputDevice(void)
                extrn ??0dnOutputDevice@@QAE@XZ:dword
                                        ; CODE XREF: sub_10901090+A↑p
                                        ; DATA XREF: sub_10901090+A↑r ...
; class FMalloc * __cdecl GetMalloc(void)
                extrn ?GetMalloc@@YAPAVFMalloc@@XZ:dword
                                        ; CODE XREF: .text:10901013↑p
                                        ; sub_10901030+3↑p ...
; __declspec(dllimport) public: virtual void __thiscall dnArchiveFileWriterCompressedWin32::InitTOC(class dnArchive *)
                extrn __imp_?InitTOC@dnArchiveFileWriterCompressedWin32@@UAEXPAVdnArchive@@@Z:dword
                                        ; DATA XREF: dnArchiveFileWriterCompressedWin32::InitTOC(dnArchive *)↑r
; public: void * __thiscall dnArrayBase::GetData(void)
                extrn ?GetData@dnArrayBase@@QAEPAXXZ:dword
                                        ; CODE XREF: sub_10904980+35↑p
                                        ; sub_10908D00+238↑p ...

;
; Imports from meqon.dll
;
; public: __thiscall meq::Frame::Frame(void)
                extrn ??0Frame@meq@@QAE@XZ:dword
                                        ; DATA XREF: .text:1090F210↑r
                                        ; .text:10911755↑r ...
; public: __thiscall meq::Point::Point(void)
                extrn ??0Point@meq@@QAE@XZ:dword
                                        ; CODE XREF: .text:109118E2↑p
                                        ; DATA XREF: .text:1090F216↑r ...
; public: __thiscall meq::Vector::Vector(float, float, float)
                extrn ??0Vector@meq@@QAE@MMM@Z:dword
                                        ; CODE XREF: .text:10911845↑p
                                        ; .text:10911860↑p ...
; public: __thiscall meq::RBConvexPolyhedronGeometry::Support::Support(void)
                extrn ??0Support@RBConvexPolyhedronGeometry@meq@@QAE@XZ:dword
                                        ; CODE XREF: .text:109117E2↑p
                                        ; .text:10911812↑p ...


; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read
_rdata          segment para public 'DATA' use32
                assume cs:_rdata
                ;org 10912688h
unk_10912688    db    0                 ; DATA XREF: ___tmainCRTStartup+B3↑o
                db    0
                db    0
                db    0
                db  2Fh ; /
                db 0FAh ; ú
                db  90h
                db  10h
                db  30h ; 0
                db  17h
                db  91h ; ‘
                db  10h
                db  40h ; @
                db  17h
                db  91h ; ‘
                db  10h
                db  50h ; P
                db  17h
                db  91h ; ‘
                db  10h
                db  60h ; `
                db  17h
                db  91h ; ‘
                db  10h
                db  70h ; p
                db  17h
                db  91h ; ‘
                db  10h
                db  80h ; €
                db  17h
                db  91h ; ‘
                db  10h
                db  90h
                db  17h
                db  91h ; ‘
                db  10h
                db 0A0h ;  
                db  17h
                db  91h ; ‘
                db  10h
                db 0B0h ; °
                db  17h
                db  91h ; ‘
                db  10h
                db 0C0h ; À
                db  17h
                db  91h ; ‘
                db  10h
                db 0D0h ; Ð
                db  17h
                db  91h ; ‘
                db  10h
                db    0
                db  18h
                db  91h ; ‘
                db  10h
                db  30h ; 0
                db  18h
                db  91h ; ‘
                db  10h
                db 0A0h ;  
                db  18h
                db  91h ; ‘
                db  10h
                db 0D0h ; Ð
                db  18h
                db  91h ; ‘
                db  10h
                db    0
                db  19h
                db  91h ; ‘
                db  10h
                db  70h ; p
                db  19h
                db  91h ; ‘
                db  10h
                db  90h
                db  19h
                db  91h ; ‘
                db  10h
                db 0A0h ;  
                db  19h
                db  91h ; ‘
                db  10h
                db 0B0h ; °
                db  19h
                db  91h ; ‘
                db  10h
unk_109126E0    db    0                 ; DATA XREF: ___tmainCRTStartup+AE↑o
                db    0
                db    0
                db    0
unk_109126E4    db    0                 ; DATA XREF: ___tmainCRTStartup+8A↑o
                db    0
                db    0
                db    0
                db 0B8h ; ¸
                db 0FCh ; ü
                db  90h
                db  10h
                db  54h ; T
                db 0FFh ; ÿ
                db  90h
                db  10h
unk_109126F0    db    0                 ; DATA XREF: ___tmainCRTStartup+85↑o
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
; Debug Directory entries
                dd 0                    ; Characteristics
                dd 4ED80D2Eh            ; TimeDateStamp: Thu Dec 01 23:26:38 2011
                dw 0                    ; MajorVersion
                dw 0                    ; MinorVersion
                dd 2                    ; Type: IMAGE_DEBUG_TYPE_CODEVIEW
                dd 44h                  ; SizeOfData
                dd rva asc_10914730     ; AddressOfRawData
                dd 13730h               ; PointerToRawData
aAchDeprecated2 db 'ACH_Deprecated2',0
aAchChauvinist  db 'ACH_Chauvinist',0
                align 4
aAchMaxegoachie db 'ACH_MaxEgoAchievedDLC03',0
aAchExpertcompl db 'ACH_ExpertCompletedDLC03',0
                align 10h
aAchHardcomplet db 'ACH_HardCompletedDLC03',0
                align 4
aAchNormalcompl db 'ACH_NormalCompletedDLC03',0
                align 4
aAchEasycomplet db 'ACH_EasyCompletedDLC03',0
                align 4
aAchDefeatdrpro db 'ACH_DefeatDrProton',0
                align 10h
aAchSingkaraoke db 'ACH_SingKaraoke',0
aAchSciencepinb db 'ACH_SciencePinballScore',0
aAchMoonbuggyki db 'ACH_MoonBuggyKills',0
                align 4
aAchPassiveaggr db 'ACH_PassiveAggressive',0
                align 4
aAchThreesome   db 'ACH_Threesome',0
                align 4
aAchBubblebuste db 'ACH_BubbleBuster',0
                align 4
aAchLeechdefeat db 'ACH_LeechDefeated',0
                align 4
aAchOctakingdef db 'ACH_OctakingDefeated',0
                align 4
aAchBattlelordd db 'ACH_BattlelordDefeated1',0
aAchAlienqueend db 'ACH_AlienQueenDefeated',0
                align 4
aAchBattlelordd_0 db 'ACH_BattlelordDefeated0',0
aAchCycloiddefe db 'ACH_CycloidDefeated0',0
                align 4
aAchCompanionba db 'ACH_CompanionBarrel',0
aAchAliensabort db 'ACH_AliensAborted',0
                align 4
aAchTalentknock db 'ACH_TalentKnockedOut',0
                align 4
aAchBlimpdestro db 'ACH_BlimpDestroyed',0
                align 4
aAchCatfishkill db 'ACH_CatfishKilled',0
                align 4
aAchDrankallbee db 'ACH_DrankAllBeer',0
                align 10h
aAchPhonemessag db 'ACH_PhoneMessages',0
                align 4
aAchHelmetsdisc db 'ACH_HelmetsDiscovered',0
                align 4
aAchCreditsview db 'ACH_CreditsViewed',0
                align 10h
aAchExpertcompl_0 db 'ACH_ExpertCompleted',0
aAchHardcomplet_0 db 'ACH_HardCompleted',0
                align 4
aAchNormalcompl_0 db 'ACH_NormalCompleted',0
aAchEasycomplet_0 db 'ACH_EasyCompleted',0
                align 10h
aAchGoldpistolc db 'ACH_GoldPistolCompletion',0
                align 4
aAchMaxegoachie_0 db 'ACH_MaxEgoAchieved',0
                align 10h
aAchWhiteboardd db 'ACH_WhiteboardDrawing',0
                align 4
aAchHolodukeact db 'ACH_HolodukeActivated',0
                align 10h
aAchSteroidseat db 'ACH_SteroidsEaten',0
                align 4
aAchBeerimbibed db 'ACH_BeerImbibed',0
aAchPinballscor db 'ACH_PinballScore',0
                align 4
aAchAirhockeywo db 'ACH_AirHockeyWon',0
                align 4
aAchGunskipkill db 'ACH_GunskipKill',0
aAchTripminestu db 'ACH_TripmineStuck',0
                align 10h
aAchCalendarful db 'ACH_CalendarFullyViewed',0
aAchAlienfighte db 'ACH_AlienFighterKills',0
                align 10h
aAchJizzedon    db 'ACH_JizzedOn',0
                align 10h
aAchPoograbbed  db 'ACH_PooGrabbed',0
                align 10h
aAchKnockeddown db 'ACH_KnockedDown',0
aAchTriplekill  db 'ACH_TripleKill',0
                align 10h
aAchSubstanceab db 'ACH_SubstanceAbuse',0
                align 4
aAchHeadshotkil db 'ACH_HeadShotKills',0
                align 4
aAchFoodeaten   db 'ACH_FoodEaten',0
                align 4
aAchSteroidkill db 'ACH_SteroidKills',0
                align 4
aAchPhysicsimpa db 'ACH_PhysicsImpactKills',0
                align 4
aAchExplosiveki db 'ACH_ExplosiveKills',0
                align 4
aAchForkliftkil db 'ACH_ForkliftKills',0
                align 4
aAchMonstertruc db 'ACH_MonsterTruckKills',0
                align 4
aAchFrozenkills db 'ACH_FrozenKills',0
aAchTripminekil db 'ACH_TripMineKills',0
                align 4
aAchExecutions  db 'ACH_Executions',0
                align 4
aAchStompkills  db 'ACH_StompKills',0
                align 4
aAchManykills   db 'ACH_ManyKills',0
                align 4
aAchMorekills   db 'ACH_MoreKills',0
                align 4
aAchSomekills   db 'ACH_SomeKills',0
                align 4
aBadAllocation  db 'bad allocation',0   ; DATA XREF: .data:1091B000↓o
                db    1
                db    0
                db    1
                db    0
                db    0
                db 0ACh ; ¬
                db 0C5h ; Å
                db  27h ; '
                db  37h ; 7
                db 0DBh ; Û
                db  0Fh
                db  49h ; I
                db  40h ; @
                db 0FFh ; ÿ
                db 0FFh ; ÿ
                db  7Fh ; 
                db  7Fh ; 
                db    0
                db    0
                db    0
                db  34h ; 4
                db  20h
                db    0
                db    0
                db    0
                db  20h
                db    0
                db    0
                db    0
                db  40h ; @
                db    0
                db    0
                db    0
                db  40h ; @
                db    0
                db    0
                db    0
                db  80h ; €
                db    0
                db    0
                db    0
                db  80h ; €
                db    0
                db    0
                db    0
                db    0
                db    1
                db    0
                db    0
                db    0
                db    1
                db    0
                db    0
                db    0
                db    2
                db    0
                db    0
                db    0
                db    2
                db    0
                db    0
                db    0
                db    4
                db    0
                db    0
                db    0
                db    4
                db    0
                db    0
                db    0
                db    8
                db    0
                db    0
                db    0
                db    8
                db    0
                db    0
                db    0
                db  10h
                db    0
                db    0
                db    0
                db  10h
                db    0
                db    0
                db    0
                db  20h
                db    0
                db    0
                db    0
                db  20h
                db    0
                db    0
                db    0
                db    4
                db    0
                db    0
                db    1
                db    0
                db    0
                db    0
                db    2
                db    0
                db    0
                db    0
                db    4
                db    0
                db    0
                db    0
                db    8
                db    0
                db    0
                db    0
                db  10h
                db    0
                db    0
                db    0
                db  20h
                db    0
                db    0
                db    0
                db  3Fh ; ?
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    1
                db    0
                db    0
                db    0
                db    2
                db    0
                db    0
                db    0
                db    4
                db    0
                db    0
                db    0
                db    8
                db    0
                db    0
                db    0
                db  10h
                db    0
                db    0
                db    0
                db  20h
                db    0
                db    0
                db    0
                db  40h ; @
                db    0
                db    0
                db    0
                db  80h ; €
                db    0
                db    0
                db    0
                db    0
                db    1
                db    0
                db    0
                db    0
                db    2
                db    0
                db    0
                db    0
                db    4
                db    0
                db    0
                db    0
                db    8
                db    0
                db    0
                db    0
                db  10h
                db    0
                db    0
                db    0
                db  20h
                db    0
                db    0
                db    0
                db  30h ; 0
                db    0
                db    0
                db    0
                db  40h ; @
                db    0
                db    0
                db    0
                db  80h ; €
                db    0
                db    0
                db 0C0h ; À
                db    1
                db    0
                db    0
                db    0
                db  0Eh
                db    0
                db    0
                db    0
                db  30h ; 0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    1
                db    0
                db    0
                db    0
                db    2
                db    0
                db    0
                db    0
                db    4
                db    0
                db    0
                db    0
                db  10h
                db    0
                db    0
                db    0
                db    1
                db    0
                db    0
                db    0
                db    2
                db    0
                db    0
                db    0
                db    4
                db    0
                db    0
                db    0
                db    8
                db    0
                db    0
                db    0
                db  10h
                db    0
                db    0
                db    0
                db  40h ; @
                db    0
                db    0
                db    0
                db  80h ; €
                db    0
                db    0
                db    0
                db  20h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    1
                db    0
                db    0
                db    0
                db    2
                db    0
                db    0
                db    0
                db  74h ; t
                db  47h ; G
                db  91h ; ‘
                db  10h
off_10912D5C    dd offset sub_10902E30  ; DATA XREF: sub_10901090+13↑o
                                        ; sub_10901170+C↑o
                dd offset sub_109011F0
                dd offset ?FlushRealtime@dnOutputDevice@@UAEXXZ ; dnOutputDevice::FlushRealtime(void)
                dd offset ?PrintfArgList@dnOutputDevice@@UAEXPA_WIPB_WPAD@Z ; dnOutputDevice::PrintfArgList(wchar_t *,uint,wchar_t const *,char *)
aLogFileClosedS:                        ; DATA XREF: sub_10901170+22↑o
                text "UTF-16LE", 'Log file closed, %s',0
                align 8
                dd offset ??_R4dnFeedbackContextWin32@@6B@ ; const dnFeedbackContextWin32::`RTTI Complete Object Locator'
; const dnFeedbackContextWin32::`vftable'
??_7dnFeedbackContextWin32@@6B@ dd offset sub_109012A0
                                        ; DATA XREF: sub_10901220+13↑o
                dd offset ?Flush@dnOutputDevice@@UAEXXZ ; dnOutputDevice::Flush(void)
                dd offset ?FlushRealtime@dnOutputDevice@@UAEXXZ ; dnOutputDevice::FlushRealtime(void)
                dd offset ?PrintfArgList@dnOutputDevice@@UAEXPA_WIPB_WPAD@Z ; dnOutputDevice::PrintfArgList(wchar_t *,uint,wchar_t const *,char *)
                dd offset sub_109013B0
                dd offset sub_10901690
                dd offset sub_10901810
                dd offset sub_10901860
                dd offset unknown_libname_1 ; Microsoft VisualC 2-14/net runtime
                dd offset sub_109014B0
                dd offset sub_10901510
                dd offset sub_10901570
                dd offset sub_10903620
                dd offset sub_109015D0
                dd offset sub_10901630
                dd offset sub_109036D0
; wchar_t Format
Format:                                 ; DATA XREF: sub_109012A0+96↑o
                                        ; sub_10902E30+662↑o
                text "UTF-16LE", '%s',0
                align 4
aWarning        db 'Warning',0          ; DATA XREF: sub_109012A0+43↑o
aCore:                                  ; DATA XREF: sub_109012A0+3E↑o
                                        ; sub_109013B0+68↑o ...
                text "UTF-16LE", 'Core',0
                align 4
aQuestion       db 'Question',0         ; DATA XREF: sub_109013B0+6D↑o
                align 8
                dd offset ??_R4dnFileMgrGeneric@@6B@ ; const dnFileMgrGeneric::`RTTI Complete Object Locator'
; const dnFileMgrGeneric::`vftable'
??_7dnFileMgrGeneric@@6B@ dd offset ?PreInit@dnFileMgr@@UAEXXZ
                                        ; DATA XREF: .text:10901AC3↑o
                                        ; .text:10903793↑o ...
                                        ; dnFileMgr::PreInit(void)
                dd offset ?OpenLinearFile@dnFileMgr@@UAEXPB_WHH@Z ; dnFileMgr::OpenLinearFile(wchar_t const *,int,int)
                dd offset ?CloseLinearFile@dnFileMgr@@UAEXXZ ; dnFileMgr::CloseLinearFile(void)
                dd offset ?IsLinearFileOpen@dnFileMgr@@UAEHXZ ; dnFileMgr::IsLinearFileOpen(void)
                dd offset ?CreateLinearReader@dnFileMgr@@UAEPAVdnArchive@@PB_W@Z ; dnFileMgr::CreateLinearReader(wchar_t const *)
                dd offset ?FindPackageFile@dnFileMgr@@UAEHPB_WPA_W@Z ; dnFileMgr::FindPackageFile(wchar_t const *,wchar_t *)
                dd offset _purecall
                dd offset _purecall
                dd offset sub_10902470
                dd offset _purecall
                dd offset sub_10904BD0
                dd offset sub_109024C0
                dd offset _purecall
                dd offset _purecall
                dd offset sub_10904D90
                dd offset sub_10906B60
                dd offset _purecall
                dd offset _purecall
                dd offset _purecall
                dd offset _purecall
                align 10h
                dd offset ??_R4dnConfigCache@@6B@ ; const dnConfigCache::`RTTI Complete Object Locator'
; const dnConfigCache::`vftable'
??_7dnConfigCache@@6B@ dd offset _purecall ; DATA XREF: .text:10901BDA↑o
                                        ; sub_10902430↑o ...
                dd offset _purecall
                dd offset _purecall
                dd offset _purecall
                dd offset _purecall
                dd offset _purecall
                dd offset _purecall
                dd offset _purecall
                dd offset _purecall
                dd offset _purecall
                dd offset _purecall
                dd offset _purecall
                dd offset _purecall
                dd offset _purecall
                dd offset _purecall
                dd offset _purecall
                dd offset _purecall
                dd offset _purecall
                dd offset _purecall
                dd offset _purecall
                dd offset _purecall
                dd offset _purecall
                dd offset _purecall
                dd offset sub_10902440
                align 8
dbl_10912EC8    dq 4.294967296e9        ; DATA XREF: sub_10901C10+22↑r
                                        ; sub_10901C10+2B↑r ...
; wchar_t asc_10912ED0
asc_10912ED0:                           ; DATA XREF: sub_10902510+E9↑o
                text "UTF-16LE", '\\',0
                align 4
; wchar_t asc_10912ED8
asc_10912ED8:                           ; DATA XREF: sub_10902510:loc_109025EA↑o
                                        ; sub_10905580+EA↑o ...
                text "UTF-16LE", '\',0
; wchar_t Str2
Str2            dw 0                    ; DATA XREF: sub_10902510+E↑o
                                        ; sub_10903FD0+3C↑r ...
byte_10912EDE   db 0                    ; DATA XREF: .text:10902B27↑r
                                        ; .text:10902B49↑r ...
                align 10h
; wchar_t aSSS
aSSS:                                   ; DATA XREF: sub_10902E30+68F↑o
                text "UTF-16LE", '%s: %s%s',0
                align 4
asc_10912EF4:                           ; DATA XREF: sub_10902E30:loc_109034A8↑o
                                        ; sub_10908D00:loc_10908EB1↑o ...
                text "UTF-16LE", 0Dh,0Ah,0
                align 4
aLogFileOpenS:                          ; DATA XREF: sub_10902E30+5FC↑o
                text "UTF-16LE", 'Log file open, %s',0
aBuflog:                                ; DATA XREF: sub_10902E30+507↑o
                text "UTF-16LE", 'buflog=',0
dword_10912F30  dd 6C002Eh              ; DATA XREF: sub_10902E30+4BE↑r
dword_10912F34  dd 67006Fh              ; DATA XREF: sub_10902E30+4C6↑r
word_10912F38   dw 0                    ; DATA XREF: sub_10902E30+4CE↑r
                align 4
aAbslog:                                ; DATA XREF: sub_10902E30+2C3↑o
                text "UTF-16LE", 'ABSLOG=',0
aLog:                                   ; DATA XREF: sub_10902E30+25F↑o
                text "UTF-16LE", 'LOG=',0
                align 4
                dd offset ??_R4dnFileMgrWin32@@6B@ ; const dnFileMgrWin32::`RTTI Complete Object Locator'
; const dnFileMgrWin32::`vftable'
??_7dnFileMgrWin32@@6B@ dd offset ?PreInit@dnFileMgr@@UAEXXZ
                                        ; DATA XREF: .text:1090379C↑o
                                        ; sub_10906100+31↑o
                                        ; dnFileMgr::PreInit(void)
                dd offset ?OpenLinearFile@dnFileMgr@@UAEXPB_WHH@Z ; dnFileMgr::OpenLinearFile(wchar_t const *,int,int)
                dd offset ?CloseLinearFile@dnFileMgr@@UAEXXZ ; dnFileMgr::CloseLinearFile(void)
                dd offset ?IsLinearFileOpen@dnFileMgr@@UAEHXZ ; dnFileMgr::IsLinearFileOpen(void)
                dd offset sub_10903BF0
                dd offset ?FindPackageFile@dnFileMgr@@UAEHPB_WPA_W@Z ; dnFileMgr::FindPackageFile(wchar_t const *,wchar_t *)
                dd offset sub_10904310
                dd offset sub_109045D0
                dd offset sub_10903C20
                dd offset sub_10903CF0
                dd offset sub_10905240
                dd offset sub_10903E10
                dd offset sub_10903F20
                dd offset ?_Get_deleter@_Ref_count_base@std@@UBEPAXABVtype_info@@@Z ; std::_Ref_count_base::_Get_deleter(type_info const &)
                dd offset sub_10905490
                dd offset sub_10906F00
                dd offset sub_10905920
                dd offset sub_10903F50
                dd offset sub_10903FD0
                dd offset sub_10905580
                align 10h
                dd offset ??_R4dnArchiveFileWriter@@6B@ ; const dnArchiveFileWriter::`RTTI Complete Object Locator'
; const dnArchiveFileWriter::`vftable'
??_7dnArchiveFileWriter@@6B@ dd offset sub_10904290
                                        ; DATA XREF: .text:10903853↑o
                                        ; .text:10904251↑o ...
                dd offset sub_10903A50
                dd offset ?SerializeBits@dnArchive@@UAEXPAXH@Z ; dnArchive::SerializeBits(void *,int)
                dd offset ?SerializeInt@dnArchive@@UAEXAAKK@Z ; dnArchive::SerializeInt(ulong &,ulong)
                dd offset ?Preload@dnArchive@@UAEXPAVUObject@@@Z ; dnArchive::Preload(UObject *)
                dd offset ?CountBytes@dnArchive@@UAEXKK@Z ; dnArchive::CountBytes(ulong,ulong)
                dd offset ?SetMode@dnArchive@@UAEXH@Z ; dnArchive::SetMode(int)
                dd offset ??6dnArchive@@UAEAAV0@AAPAVUObject@@@Z ; dnArchive::operator<<(UObject * &)
                dd offset ??6dnArchive@@UAEAAV0@AAVdnName@@@Z ; dnArchive::operator<<(dnName &)
                dd offset ?SerializeMaterial@dnArchive@@UAEHAAPAVUMaterialEx@@PAVdnName@@@Z ; dnArchive::SerializeMaterial(UMaterialEx * &,dnName *)
                dd offset ?MapName@dnArchive@@UAEHPAVdnName@@@Z ; dnArchive::MapName(dnName *)
                dd offset ?MapObject@dnArchive@@UAEHPAVUObject@@@Z ; dnArchive::MapObject(UObject *)
                dd offset unknown_libname_4 ; Microsoft VisualC 2-14/net runtime
                dd offset ?Tell64@dnArchive@@UAE_JXZ ; dnArchive::Tell64(void)
                dd offset ?TotalSize@dnArchive@@UAEHXZ ; dnArchive::TotalSize(void)
                dd offset ?LinearTell@dnArchive@@UAEKXZ ; dnArchive::LinearTell(void)
                dd offset ?LinearTotalSize@dnArchive@@UAEKXZ ; dnArchive::LinearTotalSize(void)
                dd offset ?AtEnd@dnArchive@@UAEHXZ ; dnArchive::AtEnd(void)
                dd offset sub_109038A0
                dd offset ?Seek64@dnArchive@@UAEX_J@Z ; dnArchive::Seek64(__int64)
                dd offset ?AttachLazyLoader@dnArchive@@UAEXPAVdnLazyLoader@@@Z ; dnArchive::AttachLazyLoader(dnLazyLoader *)
                dd offset ?DetachLazyLoader@dnArchive@@UAEXPAVdnLazyLoader@@@Z ; dnArchive::DetachLazyLoader(dnLazyLoader *)
                dd offset ?AttachLazyDataWorker@dnArchive@@UAEXPAVdnLazyDataWorker@@@Z ; dnArchive::AttachLazyDataWorker(dnLazyDataWorker *)
                dd offset ?DetachLazyDataWorker@dnArchive@@UAEXPAVdnLazyDataWorker@@@Z ; dnArchive::DetachLazyDataWorker(dnLazyDataWorker *)
                dd offset ?Precache@dnArchive@@UAEXH@Z ; dnArchive::Precache(int)
                dd offset sub_10903B20
                dd offset sub_10903980
                dd offset ?GetError@dnArchive@@UAEHXZ ; dnArchive::GetError(void)
                dd offset ?InitTOC@dnArchive@@UAEXPAV1@@Z ; dnArchive::InitTOC(dnArchive *)
                dd offset ?HasTOC@dnArchive@@UBEHXZ ; dnArchive::HasTOC(void)
                dd offset ?GetCurrentPtr@dnArchive@@UAEPAEXZ ; dnArchive::GetCurrentPtr(void)
                dd offset ?Compress@dnArchive@@UAEHPAPAEAAK@Z ; dnArchive::Compress(uchar * *,ulong &)
                dd offset ?Lock@dnArchive@@UAEXXZ ; dnArchive::Lock(void)
                dd offset ?UnLock@dnArchive@@UAEXXZ ; dnArchive::UnLock(void)
                dd offset ?GetLazyDataMode@dnArchive@@UAE?AW4dnLazyDataMode@@XZ ; dnArchive::GetLazyDataMode(void)
                dd offset ?SetLazyDataMode@dnArchive@@UAEXW4dnLazyDataMode@@@Z ; dnArchive::SetLazyDataMode(dnLazyDataMode)
                dd offset ?AddDeferredLazyItem@dnArchive@@UAEXPAVdnLazyDataWorker@@H@Z ; dnArchive::AddDeferredLazyItem(dnLazyDataWorker *,int)
                dd offset ?FlushDeferredLazyItems@dnArchive@@UAEXXZ ; dnArchive::FlushDeferredLazyItems(void)
                dd offset ?VerifyLinear@dnArchive@@UAEXPB_W@Z ; dnArchive::VerifyLinear(wchar_t const *)
aSeekfailed     db 'SeekFailed',0       ; DATA XREF: sub_109038A0+5E↑o
                align 4
aWritefailed    db 'WriteFailed',0      ; DATA XREF: sub_10903980+5E↑o
                                        ; sub_10903B20+70↑o
aErrorMovingFil:                        ; DATA XREF: sub_10903E10+DE↑o
                text "UTF-16LE", 'Error moving file ',27h,'%s',27h,' to ',27h,'%s',27h
                text "UTF-16LE", 0
                align 4
                dd offset ??_R4dnArchiveFileReader@@6B@ ; const dnArchiveFileReader::`RTTI Complete Object Locator'
; const dnArchiveFileReader::`vftable'
??_7dnArchiveFileReader@@6B@ dd offset sub_10904570
                                        ; DATA XREF: sub_10904310+21E↑o
                dd offset ?Serialize@dnArchiveFileReader@@UAEXPAXH@Z ; dnArchiveFileReader::Serialize(void *,int)
                dd offset ?SerializeBits@dnArchive@@UAEXPAXH@Z ; dnArchive::SerializeBits(void *,int)
                dd offset ?SerializeInt@dnArchive@@UAEXAAKK@Z ; dnArchive::SerializeInt(ulong &,ulong)
                dd offset ?Preload@dnArchive@@UAEXPAVUObject@@@Z ; dnArchive::Preload(UObject *)
                dd offset ?CountBytes@dnArchive@@UAEXKK@Z ; dnArchive::CountBytes(ulong,ulong)
                dd offset ?SetMode@dnArchive@@UAEXH@Z ; dnArchive::SetMode(int)
                dd offset ??6dnArchive@@UAEAAV0@AAPAVUObject@@@Z ; dnArchive::operator<<(UObject * &)
                dd offset ??6dnArchive@@UAEAAV0@AAVdnName@@@Z ; dnArchive::operator<<(dnName &)
                dd offset ?SerializeMaterial@dnArchive@@UAEHAAPAVUMaterialEx@@PAVdnName@@@Z ; dnArchive::SerializeMaterial(UMaterialEx * &,dnName *)
                dd offset ?MapName@dnArchive@@UAEHPAVdnName@@@Z ; dnArchive::MapName(dnName *)
                dd offset ?MapObject@dnArchive@@UAEHPAVUObject@@@Z ; dnArchive::MapObject(UObject *)
                dd offset ?Tell@dnArchiveFileReader@@UAEHXZ ; dnArchiveFileReader::Tell(void)
                dd offset ?Tell64@dnArchive@@UAE_JXZ ; dnArchive::Tell64(void)
                dd offset ?TotalSize@dnArchiveFileReader@@UAEHXZ ; dnArchiveFileReader::TotalSize(void)
                dd offset ?LinearTell@dnArchive@@UAEKXZ ; dnArchive::LinearTell(void)
                dd offset ?LinearTotalSize@dnArchive@@UAEKXZ ; dnArchive::LinearTotalSize(void)
                dd offset ?AtEnd@dnArchive@@UAEHXZ ; dnArchive::AtEnd(void)
                dd offset ?Seek@dnArchiveFileReader@@UAEXH@Z ; dnArchiveFileReader::Seek(int)
                dd offset ?Seek64@dnArchive@@UAEX_J@Z ; dnArchive::Seek64(__int64)
                dd offset ?AttachLazyLoader@dnArchive@@UAEXPAVdnLazyLoader@@@Z ; dnArchive::AttachLazyLoader(dnLazyLoader *)
                dd offset ?DetachLazyLoader@dnArchive@@UAEXPAVdnLazyLoader@@@Z ; dnArchive::DetachLazyLoader(dnLazyLoader *)
                dd offset ?AttachLazyDataWorker@dnArchive@@UAEXPAVdnLazyDataWorker@@@Z ; dnArchive::AttachLazyDataWorker(dnLazyDataWorker *)
                dd offset ?DetachLazyDataWorker@dnArchive@@UAEXPAVdnLazyDataWorker@@@Z ; dnArchive::DetachLazyDataWorker(dnLazyDataWorker *)
                dd offset ?Precache@dnArchiveFileReader@@UAEXH@Z ; dnArchiveFileReader::Precache(int)
                dd offset ?Flush@dnArchive@@UAEXXZ ; dnArchive::Flush(void)
                dd offset ?Close@dnArchiveFileReader@@UAEHXZ ; dnArchiveFileReader::Close(void)
                dd offset ?GetError@dnArchive@@UAEHXZ ; dnArchive::GetError(void)
                dd offset ?InitTOC@dnArchive@@UAEXPAV1@@Z ; dnArchive::InitTOC(dnArchive *)
                dd offset ?HasTOC@dnArchive@@UBEHXZ ; dnArchive::HasTOC(void)
                dd offset ?GetCurrentPtr@dnArchive@@UAEPAEXZ ; dnArchive::GetCurrentPtr(void)
                dd offset ?Compress@dnArchive@@UAEHPAPAEAAK@Z ; dnArchive::Compress(uchar * *,ulong &)
                dd offset ?Lock@dnArchiveFileReader@@UAEXXZ ; dnArchiveFileReader::Lock(void)
                dd offset ?UnLock@dnArchiveFileReader@@UAEXXZ ; dnArchiveFileReader::UnLock(void)
                dd offset ?GetLazyDataMode@dnArchive@@UAE?AW4dnLazyDataMode@@XZ ; dnArchive::GetLazyDataMode(void)
                dd offset ?SetLazyDataMode@dnArchive@@UAEXW4dnLazyDataMode@@@Z ; dnArchive::SetLazyDataMode(dnLazyDataMode)
                dd offset ?AddDeferredLazyItem@dnArchive@@UAEXPAVdnLazyDataWorker@@H@Z ; dnArchive::AddDeferredLazyItem(dnLazyDataWorker *,int)
                dd offset ?FlushDeferredLazyItems@dnArchive@@UAEXXZ ; dnArchive::FlushDeferredLazyItems(void)
                dd offset ?VerifyLinear@dnArchive@@UAEXPB_W@Z ; dnArchive::VerifyLinear(wchar_t const *)
aWindowsfilerea:                        ; DATA XREF: sub_10904310:loc_109044EB↑o
                                        ; sub_10904310:loc_109105F2↑o
                text "UTF-16LE", 'WindowsFileReader',0
                align 10h
                dd offset ??_R4dnArchiveFileReaderCompressedWin32@@6B@ ; const dnArchiveFileReaderCompressedWin32::`RTTI Complete Object Locator'
; const dnArchiveFileReaderCompressedWin32::`vftable'
??_7dnArchiveFileReaderCompressedWin32@@6B@ dd offset sub_109045A0
                                        ; DATA XREF: sub_10904310+1B4↑o
                dd offset ?Serialize@dnArchiveFileReaderCompressedWin32@@UAEXPAXH@Z ; dnArchiveFileReaderCompressedWin32::Serialize(void *,int)
                dd offset ?SerializeBits@dnArchive@@UAEXPAXH@Z ; dnArchive::SerializeBits(void *,int)
                dd offset ?SerializeInt@dnArchive@@UAEXAAKK@Z ; dnArchive::SerializeInt(ulong &,ulong)
                dd offset ?Preload@dnArchive@@UAEXPAVUObject@@@Z ; dnArchive::Preload(UObject *)
                dd offset ?CountBytes@dnArchive@@UAEXKK@Z ; dnArchive::CountBytes(ulong,ulong)
                dd offset ?SetMode@dnArchive@@UAEXH@Z ; dnArchive::SetMode(int)
                dd offset ??6dnArchive@@UAEAAV0@AAPAVUObject@@@Z ; dnArchive::operator<<(UObject * &)
                dd offset ??6dnArchive@@UAEAAV0@AAVdnName@@@Z ; dnArchive::operator<<(dnName &)
                dd offset ?SerializeMaterial@dnArchive@@UAEHAAPAVUMaterialEx@@PAVdnName@@@Z ; dnArchive::SerializeMaterial(UMaterialEx * &,dnName *)
                dd offset ?MapName@dnArchive@@UAEHPAVdnName@@@Z ; dnArchive::MapName(dnName *)
                dd offset ?MapObject@dnArchive@@UAEHPAVUObject@@@Z ; dnArchive::MapObject(UObject *)
                dd offset ?Tell@dnArchiveFileReaderCompressedWin32@@UAEHXZ ; dnArchiveFileReaderCompressedWin32::Tell(void)
                dd offset ?Tell64@dnArchiveFileReaderCompressedWin32@@UAE_JXZ ; dnArchiveFileReaderCompressedWin32::Tell64(void)
                dd offset ?TotalSize@dnArchiveFileReaderCompressedWin32@@UAEHXZ ; dnArchiveFileReaderCompressedWin32::TotalSize(void)
                dd offset ?LinearTell@dnArchive@@UAEKXZ ; dnArchive::LinearTell(void)
                dd offset ?LinearTotalSize@dnArchive@@UAEKXZ ; dnArchive::LinearTotalSize(void)
                dd offset ?AtEnd@dnArchive@@UAEHXZ ; dnArchive::AtEnd(void)
                dd offset ?Seek@dnArchiveFileReaderCompressedWin32@@UAEXH@Z ; dnArchiveFileReaderCompressedWin32::Seek(int)
                dd offset ?Seek64@dnArchiveFileReaderCompressedWin32@@UAEX_J@Z ; dnArchiveFileReaderCompressedWin32::Seek64(__int64)
                dd offset ?AttachLazyLoader@dnArchive@@UAEXPAVdnLazyLoader@@@Z ; dnArchive::AttachLazyLoader(dnLazyLoader *)
                dd offset ?DetachLazyLoader@dnArchive@@UAEXPAVdnLazyLoader@@@Z ; dnArchive::DetachLazyLoader(dnLazyLoader *)
                dd offset ?AttachLazyDataWorker@dnArchive@@UAEXPAVdnLazyDataWorker@@@Z ; dnArchive::AttachLazyDataWorker(dnLazyDataWorker *)
                dd offset ?DetachLazyDataWorker@dnArchive@@UAEXPAVdnLazyDataWorker@@@Z ; dnArchive::DetachLazyDataWorker(dnLazyDataWorker *)
                dd offset ?Precache@dnArchive@@UAEXH@Z ; dnArchive::Precache(int)
                dd offset ?Flush@dnArchive@@UAEXXZ ; dnArchive::Flush(void)
                dd offset ?Close@dnArchiveFileReaderCompressedWin32@@UAEHXZ ; dnArchiveFileReaderCompressedWin32::Close(void)
                dd offset ?GetError@dnArchive@@UAEHXZ ; dnArchive::GetError(void)
                dd offset ?InitTOC@dnArchiveFileReaderCompressedWin32@@UAEXPAVdnArchive@@@Z ; dnArchiveFileReaderCompressedWin32::InitTOC(dnArchive *)
                dd offset ?HasTOC@dnArchiveFileReaderCompressedWin32@@UBEHXZ ; dnArchiveFileReaderCompressedWin32::HasTOC(void)
                dd offset ?GetCurrentPtr@dnArchive@@UAEPAEXZ ; dnArchive::GetCurrentPtr(void)
                dd offset ?Compress@dnArchive@@UAEHPAPAEAAK@Z ; dnArchive::Compress(uchar * *,ulong &)
                dd offset ?Lock@dnArchive@@UAEXXZ ; dnArchive::Lock(void)
                dd offset ?UnLock@dnArchive@@UAEXXZ ; dnArchive::UnLock(void)
                dd offset ?GetLazyDataMode@dnArchive@@UAE?AW4dnLazyDataMode@@XZ ; dnArchive::GetLazyDataMode(void)
                dd offset ?SetLazyDataMode@dnArchive@@UAEXW4dnLazyDataMode@@@Z ; dnArchive::SetLazyDataMode(dnLazyDataMode)
                dd offset ?AddDeferredLazyItem@dnArchive@@UAEXPAVdnLazyDataWorker@@H@Z ; dnArchive::AddDeferredLazyItem(dnLazyDataWorker *,int)
                dd offset ?FlushDeferredLazyItems@dnArchive@@UAEXXZ ; dnArchive::FlushDeferredLazyItems(void)
                dd offset ?VerifyLinear@dnArchive@@UAEXPB_W@Z ; dnArchive::VerifyLinear(wchar_t const *)
aCompressedfile:                        ; DATA XREF: sub_10904310+171↑o
                                        ; sub_10904310:loc_109105E0↑o
                text "UTF-16LE", 'CompressedFileReader',0
                align 4
; wchar_t SubStr
SubStr:                                 ; DATA XREF: sub_10904310+154↑o
                                        ; sub_109045D0:loc_10904798↑o
                text "UTF-16LE", '.lin',0
                align 4
aOpenedFileSI:                          ; DATA XREF: sub_10904310+138↑o
                text "UTF-16LE", 'Opened file: %s (%i)',0
                align 4
aFailedToReadFi:                        ; DATA XREF: sub_10904310+F6↑o
                text "UTF-16LE", 'Failed to read file: %s',0
                align 8
                dd offset ??_R4dnArchiveFileWriterCompressedWin32@@6B@ ; const dnArchiveFileWriterCompressedWin32::`RTTI Complete Object Locator'
; const dnArchiveFileWriterCompressedWin32::`vftable'
??_7dnArchiveFileWriterCompressedWin32@@6B@ dd offset sub_109048C0
                                        ; DATA XREF: sub_109045D0+221↑o
                dd offset ?Serialize@dnArchiveFileWriterCompressedWin32@@UAEXPAXH@Z ; dnArchiveFileWriterCompressedWin32::Serialize(void *,int)
                dd offset ?SerializeBits@dnArchive@@UAEXPAXH@Z ; dnArchive::SerializeBits(void *,int)
                dd offset ?SerializeInt@dnArchive@@UAEXAAKK@Z ; dnArchive::SerializeInt(ulong &,ulong)
                dd offset ?Preload@dnArchive@@UAEXPAVUObject@@@Z ; dnArchive::Preload(UObject *)
                dd offset ?CountBytes@dnArchive@@UAEXKK@Z ; dnArchive::CountBytes(ulong,ulong)
                dd offset ?SetMode@dnArchive@@UAEXH@Z ; dnArchive::SetMode(int)
                dd offset ??6dnArchive@@UAEAAV0@AAPAVUObject@@@Z ; dnArchive::operator<<(UObject * &)
                dd offset ??6dnArchive@@UAEAAV0@AAVdnName@@@Z ; dnArchive::operator<<(dnName &)
                dd offset ?SerializeMaterial@dnArchive@@UAEHAAPAVUMaterialEx@@PAVdnName@@@Z ; dnArchive::SerializeMaterial(UMaterialEx * &,dnName *)
                dd offset ?MapName@dnArchive@@UAEHPAVdnName@@@Z ; dnArchive::MapName(dnName *)
                dd offset ?MapObject@dnArchive@@UAEHPAVUObject@@@Z ; dnArchive::MapObject(UObject *)
                dd offset ?Tell@dnArchiveFileWriterCompressedWin32@@UAEHXZ ; dnArchiveFileWriterCompressedWin32::Tell(void)
                dd offset ?Tell64@dnArchive@@UAE_JXZ ; dnArchive::Tell64(void)
                dd offset ?TotalSize@dnArchive@@UAEHXZ ; dnArchive::TotalSize(void)
                dd offset ?LinearTell@dnArchive@@UAEKXZ ; dnArchive::LinearTell(void)
                dd offset ?LinearTotalSize@dnArchive@@UAEKXZ ; dnArchive::LinearTotalSize(void)
                dd offset ?AtEnd@dnArchive@@UAEHXZ ; dnArchive::AtEnd(void)
                dd offset ?Seek@dnArchiveFileWriterCompressedWin32@@UAEXH@Z ; dnArchiveFileWriterCompressedWin32::Seek(int)
                dd offset ?Seek64@dnArchive@@UAEX_J@Z ; dnArchive::Seek64(__int64)
                dd offset ?AttachLazyLoader@dnArchive@@UAEXPAVdnLazyLoader@@@Z ; dnArchive::AttachLazyLoader(dnLazyLoader *)
                dd offset ?DetachLazyLoader@dnArchive@@UAEXPAVdnLazyLoader@@@Z ; dnArchive::DetachLazyLoader(dnLazyLoader *)
                dd offset ?AttachLazyDataWorker@dnArchive@@UAEXPAVdnLazyDataWorker@@@Z ; dnArchive::AttachLazyDataWorker(dnLazyDataWorker *)
                dd offset ?DetachLazyDataWorker@dnArchive@@UAEXPAVdnLazyDataWorker@@@Z ; dnArchive::DetachLazyDataWorker(dnLazyDataWorker *)
                dd offset ?Precache@dnArchive@@UAEXH@Z ; dnArchive::Precache(int)
                dd offset ?Flush@dnArchiveFileWriterCompressedWin32@@UAEXXZ ; dnArchiveFileWriterCompressedWin32::Flush(void)
                dd offset ?Close@dnArchiveFileWriterCompressedWin32@@UAEHXZ ; dnArchiveFileWriterCompressedWin32::Close(void)
                dd offset ?GetError@dnArchive@@UAEHXZ ; dnArchive::GetError(void)
                dd offset ?InitTOC@dnArchiveFileWriterCompressedWin32@@UAEXPAVdnArchive@@@Z ; dnArchiveFileWriterCompressedWin32::InitTOC(dnArchive *)
                dd offset ?HasTOC@dnArchiveFileWriterCompressedWin32@@UBEHXZ ; dnArchiveFileWriterCompressedWin32::HasTOC(void)
                dd offset ?GetCurrentPtr@dnArchive@@UAEPAEXZ ; dnArchive::GetCurrentPtr(void)
                dd offset ?Compress@dnArchive@@UAEHPAPAEAAK@Z ; dnArchive::Compress(uchar * *,ulong &)
                dd offset ?Lock@dnArchive@@UAEXXZ ; dnArchive::Lock(void)
                dd offset ?UnLock@dnArchive@@UAEXXZ ; dnArchive::UnLock(void)
                dd offset ?GetLazyDataMode@dnArchive@@UAE?AW4dnLazyDataMode@@XZ ; dnArchive::GetLazyDataMode(void)
                dd offset ?SetLazyDataMode@dnArchive@@UAEXW4dnLazyDataMode@@@Z ; dnArchive::SetLazyDataMode(dnLazyDataMode)
                dd offset ?AddDeferredLazyItem@dnArchive@@UAEXPAVdnLazyDataWorker@@H@Z ; dnArchive::AddDeferredLazyItem(dnLazyDataWorker *,int)
                dd offset ?FlushDeferredLazyItems@dnArchive@@UAEXXZ ; dnArchive::FlushDeferredLazyItems(void)
                dd offset ?VerifyLinear@dnArchive@@UAEXPB_W@Z ; dnArchive::VerifyLinear(wchar_t const *)
aWindowsfilewri:                        ; DATA XREF: sub_109045D0+1E5↑o
                                        ; sub_109045D0:loc_1090481B↑o ...
                text "UTF-16LE", 'WindowsFileWriter',0
aFailedToCreate:                        ; DATA XREF: sub_109045D0+18B↑o
                text "UTF-16LE", 'Failed to create file: %s',0
aDnmapbaseRehas:                        ; DATA XREF: sub_10904AD0+10↑o
                                        ; sub_10908690+10↑o
                text "UTF-16LE", 'dnMapBase::Rehash',0
                align 8
aRBuckeyePcstab:                        ; DATA XREF: sub_10904AD0+B↑o
                                        ; sub_10908690+B↑o
                text "UTF-16LE", 'r:\buckeye-pcstable\dncommon\inc\dnMapBase.h',0
                db    0
                db    0
                db    0
                db    0
                db  80h ; €
                db  3Fh ; ?
dword_10913428  dd 0                    ; DATA XREF: WinMain(x,x,x,x):loc_1090E6A5↑r
; wchar_t asc_1091342C
asc_1091342C:                           ; DATA XREF: sub_10905580+76↑o
                                        ; sub_10905580:loc_10905786↑o ...
                text "UTF-16LE", '..',0
                align 4
; wchar_t asc_10913434
asc_10913434:                           ; DATA XREF: sub_10905580+5D↑o
                                        ; sub_10905580:loc_1090560F↑o ...
                text "UTF-16LE", '.',0
; const WCHAR FileName
FileName:                               ; DATA XREF: sub_10905580+36↑o
                text "UTF-16LE", '*.*',0
                dd offset ??_R4dnFileMgrDLC@@6B@ ; const dnFileMgrDLC::`RTTI Complete Object Locator'
; const dnFileMgrDLC::`vftable'
??_7dnFileMgrDLC@@6B@ dd offset sub_109065C0
                                        ; DATA XREF: sub_10906100+44↑o
                                        ; sub_10906670+21↑o
                dd offset ?OpenLinearFile@dnFileMgr@@UAEXPB_WHH@Z ; dnFileMgr::OpenLinearFile(wchar_t const *,int,int)
                dd offset ?CloseLinearFile@dnFileMgr@@UAEXXZ ; dnFileMgr::CloseLinearFile(void)
                dd offset ?IsLinearFileOpen@dnFileMgr@@UAEHXZ ; dnFileMgr::IsLinearFileOpen(void)
                dd offset sub_10903BF0
                dd offset ?FindPackageFile@dnFileMgr@@UAEHPB_WPA_W@Z ; dnFileMgr::FindPackageFile(wchar_t const *,wchar_t *)
                dd offset sub_10906FF0
                dd offset sub_109045D0
                dd offset sub_109070D0
                dd offset sub_10903CF0
                dd offset sub_10905240
                dd offset sub_10903E10
                dd offset sub_10903F20
                dd offset ?_Get_deleter@_Ref_count_base@std@@UBEPAXABVtype_info@@@Z ; std::_Ref_count_base::_Get_deleter(type_info const &)
                dd offset sub_10905490
                dd offset sub_10906F00
                dd offset sub_109066F0
                dd offset sub_10903F50
                dd offset sub_10903FD0
                dd offset sub_10905580
                dd offset sub_10906B30
; wchar_t aSdlc
aSdlc:                                  ; DATA XREF: sub_109065C0+2A↑o
                text "UTF-16LE", '%sDLC\',0
                align 4
; wchar_t aSS
aSS:                                    ; DATA XREF: sub_109066F0+154↑o
                text "UTF-16LE", '%s%s',0
                align 4
; wchar_t aSSS_0
aSSS_0:                                 ; DATA XREF: sub_10906960+DF↑o
                text "UTF-16LE", '%s%s\%s',0
; wchar_t asc_109134C4
asc_109134C4:                           ; DATA XREF: sub_10906960+57↑o
                text "UTF-16LE", '../',0
; wchar_t asc_109134CC
asc_109134CC:                           ; DATA XREF: sub_10906960:loc_109069A0↑o
                text "UTF-16LE", '..\',0
asc_109134D4:                           ; DATA XREF: sub_10906B60+57↑o
                text "UTF-16LE", '*',0
                dd offset ??_R4FConfigCacheIni@@6B@ ; const FConfigCacheIni::`RTTI Complete Object Locator'
; const FConfigCacheIni::`vftable'
??_7FConfigCacheIni@@6B@ dd offset sub_109082A0
                                        ; DATA XREF: sub_109078B0+6B↑o
                                        ; sub_1090CDC0+34↑o
                dd offset FConfigCacheIni__GetBool
                dd offset FConfigCacheIni__GetInt
                dd offset FConfigCache__GetFloat
                dd offset FConfigCache__GetString
                dd offset FConfigCache__GetString2
                dd offset FConfigCache__GetStr
                dd offset FConfigCache__GetSection
                dd offset FConfigCache__GetSectionPrivate
                dd offset FConfigCache__EmptySection
                dd offset FConfigCache__SetBool
                dd offset FConfigCache__SetInt
                dd offset FConfigCache__SetFloat
                dd offset FConfigCache__SetString
                dd offset sub_1090C7B0
                dd offset sub_1090BE40
                dd offset sub_1090C470
                dd offset sub_10907980
                dd offset sub_1090B6F0
                dd offset sub_10909370
                dd offset sub_1090ECE0
                dd offset sub_1090CF60
                dd offset sub_10909650
                dd offset sub_1090DB00
aFalse:                                 ; DATA XREF: FConfigCache__SetBool:loc_10907C38↑o
                text "UTF-16LE", 'False',0
; wchar_t aTrue
aTrue:                                  ; DATA XREF: FConfigCache__SetBool+F↑o
                                        ; FConfigCacheIni__GetBool+3B↑o
                text "UTF-16LE", 'True',0
                align 4
; wchar_t aI
aI:                                     ; DATA XREF: FConfigCache__SetInt+D↑o
                text "UTF-16LE", '%i',0
                align 4
; wchar_t asc_1091355C
asc_1091355C:                           ; DATA XREF: FConfigCache__SetFloat+12↑o
                text "UTF-16LE", '%f',0
                align 4
; wchar_t aDDDD
aDDDD:                                  ; DATA XREF: FConfigCache__EmptySection+23↑o
                text "UTF-16LE", '%d %d %d %d',0
aHashII:                                ; DATA XREF: sub_10908950+8B↑o
                text "UTF-16LE", '   Hash[%i] = %i',0
                align 10h
aDnmapbaseIItem:                        ; DATA XREF: sub_10908950+1A↑o
                text "UTF-16LE", 'dnMapBase: %i items, %i hash slots',0
                align 4
aSS_0:                                  ; DATA XREF: sub_10908D00+167↑o
                                        ; sub_10909010+152↑o
                text "UTF-16LE", '%s=%s',0Dh,0Ah,0
aS_0:                                   ; DATA XREF: sub_10908D00+A7↑o
                                        ; sub_10909010+92↑o
                text "UTF-16LE", '[%s]',0Dh,0Ah,0
                align 4
aFilesMap:                              ; DATA XREF: sub_10909370+9↑o
                text "UTF-16LE", 'Files map:',0
                align 10h
aFconfigfileFin:                        ; DATA XREF: sub_1090B840+4F1↑o
                text "UTF-16LE", 'FConfigFile::Find: Couldn',27h,'t find file [%s] in'
                text "UTF-16LE", ' coalesce file, hitting the disk for [%s]',0
                align 10h
; wchar_t aProgressIni
aProgressIni:                           ; DATA XREF: sub_1090B840:loc_1090BB57↑o
                text "UTF-16LE", 'Progress.ini',0
                align 4
; wchar_t aSystemIni
aSystemIni:                             ; DATA XREF: sub_1090B840:loc_1090BAAA↑o
                text "UTF-16LE", 'System.ini',0
                align 4
; wchar_t aUserIni
aUserIni:                               ; DATA XREF: sub_1090B840:loc_1090B9FD↑o
                                        ; WinMain(x,x,x,x)+DE0↑o ...
                text "UTF-16LE", 'User.ini',0
                align 4
dword_10913718  dd 69002Eh              ; DATA XREF: sub_1090B840+1A2↑r
dword_1091371C  dd 69006Eh              ; DATA XREF: sub_1090B840+1AA↑r
word_10913720   dw 0                    ; DATA XREF: sub_1090B840+1B3↑r
                align 4
aProgressIni_0:                         ; DATA XREF: sub_1090BE40+49E↑o
                text "UTF-16LE", 'progress.ini',0
                align 10h
aUserIni_0:                             ; DATA XREF: sub_1090BE40+336↑o
                text "UTF-16LE", 'user.ini',0
                align 4
aSystemIni_0:                           ; DATA XREF: sub_1090BE40+42↑o
                                        ; sub_1090BE40+1B8↑o
                text "UTF-16LE", 'system.ini',0
                align 4
; wchar_t aSS_1
aSS_1:                                  ; DATA XREF: FConfigCache__GetSection+19A↑o
                text "UTF-16LE", '%s=%s',0
aFconfigcachein:                        ; DATA XREF: sub_1090CBA0+1CB↑o
                text "UTF-16LE", 'FConfigCacheIni::LoadFile failed loading file as it'
                text "UTF-16LE", ' was 0 size.  Filename was:  %s',0
                align 10h
aGconfigLoadfil:                        ; DATA XREF: sub_1090CBA0+1AA↑o
                text "UTF-16LE", 'GConfig::LoadFile has loaded file:  %s',0
                align 10h
aFconfigcachein_0:                      ; DATA XREF: sub_1090CEE0+25↑o
                                        ; sub_1090CEE0+45BA↑o
                text "UTF-16LE", 'FConfigCacheIni',0
aRBuckeyePcstab_0:                      ; DATA XREF: sub_1090CEE0+20↑o
                                        ; sub_1090CEE0+45B5↑o
                text "UTF-16LE", 'r:\BUCKEYE-PCSTABLE\Core\Inc\FConfigCacheIni.h',0
                align 10h
aCanTFindAndLoa:                        ; DATA XREF: sub_1090CF60+1F0↑o
                text "UTF-16LE", 'Can',27h,'t find and load Coalesced file %s or INT '
                text "UTF-16LE", 'fallback',0
aInt:                                   ; DATA XREF: sub_1090CF60+120↑o
                                        ; sub_1090CF60+143↑o ...
                text "UTF-16LE", 'int',0
                align 8
aSystemLocaliza:                        ; DATA XREF: sub_1090CF60+A0↑o
                                        ; sub_1090CF60+152↑o
                text "UTF-16LE", '..\System\Localization\%s_Coalesced_%s.bin',0
                align 10h
aPc:                                    ; DATA XREF: sub_1090CF60+71↑o
                text "UTF-16LE", 'PC',0
                align 4
aLanguageExtens:                        ; DATA XREF: sub_1090CF60+45↑o
                text "UTF-16LE", 'Language extension: %s',0
                align 4
aCouldNotCreate:                        ; DATA XREF: sub_1090D430+68D↑o
                text "UTF-16LE", 'Could not Create file:%s',0Ah
                text "UTF-16LE", 0Ah,0
                align 10h
aSavingS:                               ; DATA XREF: sub_1090D430+65B↑o
                text "UTF-16LE", 'Saving: %s',0Ah
                text "UTF-16LE", 0Ah,0
                align 4
aDefaultIni:                            ; DATA XREF: sub_1090D430+4FA↑o
                text "UTF-16LE", 'default.ini',0
aDefaultps3:                            ; DATA XREF: sub_1090D430+468↑o
                text "UTF-16LE", 'defaultps3',0
                align 4
aDefaultxbox:                           ; DATA XREF: sub_1090D430+416↑o
                text "UTF-16LE", 'defaultxbox',0
aDefuserIni:                            ; DATA XREF: sub_1090D430+3C3↑o
                text "UTF-16LE", 'defuser.ini',0
aDefuserps3:                            ; DATA XREF: sub_1090D430+337↑o
                text "UTF-16LE", 'defuserps3',0
                align 4
aDefuserxbox:                           ; DATA XREF: sub_1090D430+2E8↑o
                text "UTF-16LE", 'defuserxbox',0
aAddingFileS:                           ; DATA XREF: sub_1090D430+29B↑o
                text "UTF-16LE", 9,'...Adding file:%s',0
                align 4
aCoalesced:                             ; DATA XREF: sub_1090D430+1B7↑o
                text "UTF-16LE", 'Coalesced',0
aIni:                                   ; DATA XREF: sub_1090D430+168↑o
                text "UTF-16LE", 'ini',0
aCoalescingLoca:                        ; DATA XREF: sub_1090D430+3B↑o
                text "UTF-16LE", 'Coalescing Locale:%s',0
                align 4
aExit           db 'Exit',0             ; DATA XREF: WinMain(x,x,x,x)+108D↑o
                align 4
aRunningIni:                            ; DATA XREF: WinMain(x,x,x,x)+FDD↑o
                text "UTF-16LE", 'Running.ini',0
aSetnosaveInput_0:                      ; DATA XREF: WinMain(x,x,x,x)+F22↑o
                text "UTF-16LE", 'setnosave Input joy8 %s',0
aSetnosaveInput:                        ; DATA XREF: WinMain(x,x,x,x)+EC1↑o
                text "UTF-16LE", 'setnosave Input joy7 %s',0
aJoy8:                                  ; DATA XREF: WinMain(x,x,x,x)+E96↑o
                text "UTF-16LE", 'joy8',0
                align 4
aEngineInput:                           ; DATA XREF: WinMain(x,x,x,x)+E71↑o
                                        ; WinMain(x,x,x,x)+E9B↑o
                text "UTF-16LE", 'Engine.Input',0
                align 4
aJoy7:                                  ; DATA XREF: WinMain(x,x,x,x)+E6C↑o
                text "UTF-16LE", 'joy7',0
                align 10h
aBswapjoysticks:                        ; DATA XREF: WinMain(x,x,x,x)+E25↑o
                text "UTF-16LE", 'bSwapJoysticks',0
                align 10h
aEnginePlayerpa:                        ; DATA XREF: WinMain(x,x,x,x)+DEE↑o
                                        ; WinMain(x,x,x,x)+E2A↑o
                text "UTF-16LE", 'Engine.PlayerPawn',0
aPrefabconfigin:                        ; DATA XREF: WinMain(x,x,x,x)+DE9↑o
                text "UTF-16LE", 'PrefabConfigIndex',0
aSetIniEngineEn_2:                      ; DATA XREF: WinMain(x,x,x,x)+D6F↑o
                text "UTF-16LE", 'set ini:Engine.Engine.ViewportManager Brightness %f'
                text "UTF-16LE", 0
aEngineWindowsc:                        ; DATA XREF: WinMain(x,x,x,x)+D4B↑o
                text "UTF-16LE", 'Engine.WindowsClient',0
                align 4
aBrightness:                            ; DATA XREF: WinMain(x,x,x,x)+D46↑o
                text "UTF-16LE", 'Brightness',0
                align 8
aSetIniEngineEn_1:                      ; DATA XREF: WinMain(x,x,x,x)+CD3↑o
                text "UTF-16LE", 'set ini:Engine.Engine.AudioDevice MusicVolume %f',0
                align 4
aMusicvolume:                           ; DATA XREF: WinMain(x,x,x,x)+CAA↑o
                text "UTF-16LE", 'MusicVolume',0
                align 8
aSetIniEngineEn_0:                      ; DATA XREF: WinMain(x,x,x,x)+C37↑o
                text "UTF-16LE", 'set ini:Engine.Engine.AudioDevice SoundVolume %f',0
                align 4
aSoundvolume:                           ; DATA XREF: WinMain(x,x,x,x)+C0E↑o
                text "UTF-16LE", 'SoundVolume',0
                align 8
aSetIniEngineEn:                        ; DATA XREF: WinMain(x,x,x,x)+BB4↑o
                text "UTF-16LE", 'set ini:Engine.Engine.AudioDevice DialogVolume %f',0
aMilesaudioMile:                        ; DATA XREF: WinMain(x,x,x,x)+B90↑o
                                        ; WinMain(x,x,x,x)+C13↑o ...
                text "UTF-16LE", 'MilesAudio.MilesAudioSubsystem',0
                align 4
aDialogvolume:                          ; DATA XREF: WinMain(x,x,x,x)+B8B↑o
                text "UTF-16LE", 'DialogVolume',0
                align 4
aSystem:                                ; DATA XREF: WinMain(x,x,x,x)+B82↑o
                                        ; WinMain(x,x,x,x)+C05↑o ...
                text "UTF-16LE", 'system',0
                align 4
aExec_0:                                ; DATA XREF: WinMain(x,x,x,x)+842↑o
                text "UTF-16LE", 'exec ',0
aExec:                                  ; DATA XREF: WinMain(x,x,x,x)+81E↑o
                text "UTF-16LE", 'EXEC=',0
aRun            db 'Run',0              ; DATA XREF: WinMain(x,x,x,x)+7D3↑o
; const WCHAR String
String:                                 ; DATA XREF: WinMain(x,x,x,x)+71A↑o
                                        ; WinMain(x,x,x,x):loc_1090E26B↑o ...
                text "UTF-16LE", 'IsBrowser',0
aStart          db 'Start',0            ; DATA XREF: WinMain(x,x,x,x)+6C7↑o
                align 10h
                dd offset ??_R4WLog@@6B@ ; const WLog::`RTTI Complete Object Locator'
; const WLog::`vftable'
??_7WLog@@6B@   dd offset ?Unused@FCommandTarget@@UAEXXZ
                                        ; DATA XREF: WinMain(x,x,x,x)+674↑o
                                        ; FCommandTarget::Unused(void)
                dd offset sub_1090ECA0
                dd offset ?SetMinWidth@WWindow@@UAEXAAH@Z ; WWindow::SetMinWidth(int &)
                dd offset ?SetMinHeight@WWindow@@UAEXAAH@Z ; WWindow::SetMinHeight(int &)
                dd offset ?Serialize@WWindow@@UAEXAAVdnArchive@@@Z ; WWindow::Serialize(dnArchive &)
                dd offset ?GetPackageName@WLog@@UAEPB_WXZ ; WLog::GetPackageName(void)
                dd offset ?DoDestroy@WWindow@@UAEXXZ ; WWindow::DoDestroy(void)
                dd offset ?GetWindowClassName@WLog@@UAEXPA_W@Z ; WLog::GetWindowClassName(wchar_t *)
                dd offset ?WndProc@WLog@@UAEJIIJ@Z ; WLog::WndProc(uint,uint,long)
                dd offset ?CallDefaultProc@WWindow@@UAEHIIJ@Z ; WWindow::CallDefaultProc(uint,uint,long)
                dd offset ?InterceptControlCommand@WWindow@@UAEHIIJ@Z ; WWindow::InterceptControlCommand(uint,uint,long)
                dd offset ?GetText@WWindow@@UAE?AVdnString@@XZ ; WWindow::GetText(void)
                dd offset ?SetText@WWindow@@UAEXABVdnString@@@Z ; WWindow::SetText(dnString const &)
                dd offset ?SetText@WLog@@UAEXPB_W@Z ; WLog::SetText(wchar_t const *)
                dd offset ?GetLength@WWindow@@UAEHXZ ; WWindow::GetLength(void)
                dd offset ?OnCopyData@WLog@@UAEXPAUHWND__@@PAUtagCOPYDATASTRUCT@@@Z ; WLog::OnCopyData(HWND__ *,tagCOPYDATASTRUCT *)
                dd offset ?OnSetFocus@WTerminal@@UAEXPAUHWND__@@@Z ; WTerminal::OnSetFocus(HWND__ *)
                dd offset ?OnKillFocus@WWindow@@UAEXPAUHWND__@@@Z ; WWindow::OnKillFocus(HWND__ *)
                dd offset ?OnSize@WTerminal@@UAEXKHH@Z ; WTerminal::OnSize(ulong,int,int)
                dd offset ?OnCommand@WLog@@UAEXH@Z ; WLog::OnCommand(int)
                dd offset ?OnSysCommand@WWindow@@UAEHH@Z ; WWindow::OnSysCommand(int)
                dd offset ?OnActivate@WWindow@@UAEXH@Z ; WWindow::OnActivate(int)
                dd offset ?OnChar@WWindow@@UAEX_W@Z ; WWindow::OnChar(wchar_t)
                dd offset ?RecoverLostWindow@WWindow@@UAEXXZ ; WWindow::RecoverLostWindow(void)
                dd offset ?OnKeyDown@WWindow@@UAEX_W@Z ; WWindow::OnKeyDown(wchar_t)
                dd offset ?OnCut@WWindow@@UAEXXZ ; WWindow::OnCut(void)
                dd offset ?OnCopy@WWindow@@UAEXXZ ; WWindow::OnCopy(void)
                dd offset ?OnPaste@WWindow@@UAEXXZ ; WWindow::OnPaste(void)
                dd offset ?OnShowWindow@WLog@@UAEXH@Z ; WLog::OnShowWindow(int)
                dd offset ?OnUndo@WWindow@@UAEXXZ ; WWindow::OnUndo(void)
                dd offset ?OnVScroll@WWindow@@UAEXIJ@Z ; WWindow::OnVScroll(uint,long)
                dd offset ?OnHScroll@WWindow@@UAEXIJ@Z ; WWindow::OnHScroll(uint,long)
                dd offset ?OnKeyUp@WWindow@@UAEXIJ@Z ; WWindow::OnKeyUp(uint,long)
                dd offset ?OnPaint@WWindow@@UAEXXZ ; WWindow::OnPaint(void)
                dd offset ?OnCreate@WLog@@UAEXXZ ; WLog::OnCreate(void)
                dd offset ?OnDrawItem@WWindow@@UAEXPAUtagDRAWITEMSTRUCT@@@Z ; WWindow::OnDrawItem(tagDRAWITEMSTRUCT *)
                dd offset ?OnMeasureItem@WWindow@@UAEXPAUtagMEASUREITEMSTRUCT@@@Z ; WWindow::OnMeasureItem(tagMEASUREITEMSTRUCT *)
                dd offset ?OnInitDialog@WWindow@@UAEXXZ ; WWindow::OnInitDialog(void)
                dd offset ?OnEnterIdle@WWindow@@UAEXXZ ; WWindow::OnEnterIdle(void)
                dd offset ?OnMouseEnter@WWindow@@UAEXXZ ; WWindow::OnMouseEnter(void)
                dd offset ?OnMouseLeave@WWindow@@UAEXXZ ; WWindow::OnMouseLeave(void)
                dd offset ?OnMouseHover@WWindow@@UAEXXZ ; WWindow::OnMouseHover(void)
                dd offset ?OnTimer@WWindow@@UAEXXZ ; WWindow::OnTimer(void)
                dd offset ?OnReleaseCapture@WWindow@@UAEXXZ ; WWindow::OnReleaseCapture(void)
                dd offset ?OnMdiActivate@WWindow@@UAEXH@Z ; WWindow::OnMdiActivate(int)
                dd offset ?OnMouseMove@WWindow@@UAEXKUFPoint@@@Z ; WWindow::OnMouseMove(ulong,FPoint)
                dd offset ?OnLeftButtonDown@WWindow@@UAEXXZ ; WWindow::OnLeftButtonDown(void)
                dd offset ?OnRightButtonDown@WWindow@@UAEXXZ ; WWindow::OnRightButtonDown(void)
                dd offset ?OnLeftButtonUp@WWindow@@UAEXXZ ; WWindow::OnLeftButtonUp(void)
                dd offset ?OnRightButtonUp@WWindow@@UAEXXZ ; WWindow::OnRightButtonUp(void)
                dd offset ?OnFinishSplitterDrag@WWindow@@UAEXPAVWDragInterceptor@@H@Z ; WWindow::OnFinishSplitterDrag(WDragInterceptor *,int)
                dd offset ?OnSetCursor@WWindow@@UAEHXZ ; WWindow::OnSetCursor(void)
                dd offset ?ShouldClose@WWindow@@UAEHXZ ; WWindow::ShouldClose(void)
                dd offset ?OnClose@WLog@@UAEXXZ ; WLog::OnClose(void)
                dd offset ?OnDestroy@WLog@@UAEXXZ ; WLog::OnDestroy(void)
                dd offset ?ClipOrCenterWindowToMonitor@WWindow@@UAEXPAUHWND__@@I@Z ; WWindow::ClipOrCenterWindowToMonitor(HWND__ *,uint)
                dd offset ?MyDrawEdge@WWindow@@UAEXPAUHDC__@@PAUtagRECT@@H@Z ; WWindow::MyDrawEdge(HDC__ *,tagRECT *,int)
                dd offset ?TypeChar@WTerminal@@UAEX_W@Z ; WTerminal::TypeChar(wchar_t)
                dd offset ?Paste@WTerminal@@UAEXXZ ; WTerminal::Paste(void)
aGamelog:                               ; DATA XREF: WinMain(x,x,x,x)+64D↑o
                text "UTF-16LE", 'GameLog',0
aGlogwindow:                            ; DATA XREF: WinMain(x,x,x,x)+61F↑o
                text "UTF-16LE", 'GLogWindow',0
                align 4
aLaunchCpp:                             ; DATA XREF: WinMain(x,x,x,x)+61A↑o
                text "UTF-16LE", '.\Launch.cpp',0
                align 4
aConfigserver:                          ; DATA XREF: WinMain(x,x,x,x)+5F5↑o
                text "UTF-16LE", 'CONFIGSERVER',0
                align 10h
aLogoBik:                               ; DATA XREF: WinMain(x,x,x,x)+5A8↑o
                text "UTF-16LE", 'Logo.bik',0
                align 4
; wchar_t aTestrendev
aTestrendev:                            ; DATA XREF: WinMain(x,x,x,x)+58F↑o
                text "UTF-16LE", 'TestRenDev',0
                align 4
aLog_0:                                 ; DATA XREF: WinMain(x,x,x,x)+4AD↑o
                text "UTF-16LE", 'LOG',0
aLazy:                                  ; DATA XREF: WinMain(x,x,x,x)+439↑o
                text "UTF-16LE", 'LAZY',0
                align 10h
aServer_0:                              ; DATA XREF: WinMain(x,x,x,x)+3D0↑o
                text "UTF-16LE", 'SERVER',0
                align 10h
aEngineEngine:                          ; DATA XREF: WinMain(x,x,x,x)+393↑o
                text "UTF-16LE", 'Engine.Engine',0
aDisablefilelog:                        ; DATA XREF: WinMain(x,x,x,x)+38E↑o
                text "UTF-16LE", 'DisableFileLogging',0
                align 4
aNofilelogging:                         ; DATA XREF: WinMain(x,x,x,x):loc_1090DEA3↑o
                text "UTF-16LE", 'nofilelogging',0
aEnablefilelogg:                        ; DATA XREF: WinMain(x,x,x,x):loc_1090DE84↑o
                text "UTF-16LE", 'EnableFileLogging',0
                align 8
aUccMakeIsObsol:                        ; DATA XREF: WinMain(x,x,x,x):loc_1090DE6A↑o
                text "UTF-16LE", 27h,'ucc -make',27h,' is obsolete, use ',27h,'ucc ma'
                text "UTF-16LE", 'ke',27h,' now',0
aMake:                                  ; DATA XREF: WinMain(x,x,x,x)+2FA↑o
                text "UTF-16LE", 'MAKE',0
                align 4
aDukeforever:                           ; DATA XREF: WinMain(x,x,x,x)+2EC↑o
                text "UTF-16LE", 'DukeForever',0
                align 8
aMismatchedSyst:                        ; DATA XREF: WinMain(x,x,x,x):loc_1090DDC1↑o
                text "UTF-16LE", 'Mismatched system files.  Application cannot run.',0
                align 10h
; const WCHAR aOnlyOneInstanc
aOnlyOneInstanc:                        ; DATA XREF: WinMain(x,x,x,x)+270↑o
                text "UTF-16LE", 'Only one instance of Duke Nukem Forever can be run '
                text "UTF-16LE", 'at a time.',0
                align 10h
; const WCHAR Text
Text:                                   ; DATA XREF: WinMain(x,x,x,x)+25A↑o
                text "UTF-16LE", 'A dedicated server is currently running. Only one i'
                text "UTF-16LE", 'nstance of Duke Nukem Forever can be run at a time.'
                text "UTF-16LE", 0
                align 10h
; const WCHAR Caption
Caption:                                ; DATA XREF: WinMain(x,x,x,x)+255↑o
                                        ; WinMain(x,x,x,x)+26B↑o
                text "UTF-16LE", 'ERROR',0
; const WCHAR aDukeforevermut
aDukeforevermut:                        ; DATA XREF: WinMain(x,x,x,x):loc_1090DD28↑o
                text "UTF-16LE", 'DukeForeverMutex',0
                align 10h
aServer:                                ; DATA XREF: WinMain(x,x,x,x):loc_1090DCCB↑o
                                        ; WinMain(x,x,x,x):loc_1090DCF5↑o ...
                text "UTF-16LE", 'server',0
                align 10h
; const WCHAR Name
Name:                                   ; DATA XREF: WinMain(x,x,x,x)+161↑o
                text "UTF-16LE", 'DNFDedicatedServerMutex',0
aNocompiledanim:                        ; DATA XREF: WinMain(x,x,x,x)+13C↑o
                text "UTF-16LE", 'nocompiledanims',0
; const WCHAR aDbghelpDll
aDbghelpDll:                            ; DATA XREF: WinMain(x,x,x,x)+33↑o
                text "UTF-16LE", 'DBGHELP.DLL',0
; const WCHAR LibFileName
LibFileName:                            ; DATA XREF: WinMain(x,x,x,x)+28↑o
                text "UTF-16LE", 'RICHED32.DLL',0
                align 8
aSystemLocaliza_1:                      ; DATA XREF: sub_1090ECE0+367↑o
                text "UTF-16LE", '../System/Localization/%s_Coalesced_%s.bin',0
                align 10h
aSystemS:                               ; DATA XREF: sub_1090ECE0+2B8↑o
                text "UTF-16LE", '../System/*.%s',0
                align 10h
aSystemDefprogr:                        ; DATA XREF: sub_1090ECE0:loc_1090EF5A↑o
                text "UTF-16LE", '../System/defprogress.ini',0
aSystemDefaultI:                        ; DATA XREF: sub_1090ECE0+246↑o
                text "UTF-16LE", '../System/default.ini',0
aSystemDefuserI:                        ; DATA XREF: sub_1090ECE0:loc_1090EEF2↑o
                text "UTF-16LE", '../System/defuser.ini',0
aSystemDefaultp:                        ; DATA XREF: sub_1090ECE0+1DC↑o
                text "UTF-16LE", '../System/defaultps3.ini',0
                align 10h
aSystemDefuserp:                        ; DATA XREF: sub_1090ECE0+1B1↑o
                text "UTF-16LE", '../System/defuserps3.ini',0
                align 4
; wchar_t aPs3
aPs3:                                   ; DATA XREF: sub_1090ECE0:loc_1090EE7B↑o
                text "UTF-16LE", 'ps3',0
aSystemDefaultx:                        ; DATA XREF: sub_1090ECE0+16B↑o
                text "UTF-16LE", '../System/defaultxbox.ini',0
aSystemDefuserx:                        ; DATA XREF: sub_1090ECE0+140↑o
                text "UTF-16LE", '../System/defuserxbox.ini',0
; wchar_t aXbox
aXbox:                                  ; DATA XREF: sub_1090ECE0+12A↑o
                text "UTF-16LE", 'xbox',0
                align 10h
aSystemChalleng:                        ; DATA XREF: sub_1090ECE0+FF↑o
                text "UTF-16LE", '../System/ChallengeInfo.ini',0
aSystemMapsIni:                         ; DATA XREF: sub_1090ECE0+D4↑o
                text "UTF-16LE", '../System/Maps.ini',0
                align 10h
aSystemLocaliza_0:                      ; DATA XREF: sub_1090ECE0+4F↑o
                text "UTF-16LE", '../System/Localization/*',0
                align 4
                dd offset ??_R4type_info@@6B@ ; const type_info::`RTTI Complete Object Locator'
; const type_info::`vftable'
??_7type_info@@6B@ dd offset ??_Etype_info@@UAEPAXI@Z
                                        ; DATA XREF: .text:1090F854↑o
                                        ; .data:FOutputDeviceFile `RTTI Type Descriptor'↓o ...
                                        ; type_info::`vector deleting destructor'(uint)
                align 10h
                db    1
                db    0
                db    0
                db    0
                db    2
                db    0
                db    0
                db    0
                db    3
                db    0
                db    0
                db    0
                db    4
                db    0
                db    0
                db    0
; struct _EXCEPTION_POINTERS ExceptionInfo
ExceptionInfo   _EXCEPTION_POINTERS <offset dword_10922928, offset dword_10922980>
                                        ; DATA XREF: ___report_gsfailure+D6↑o
__load_config_used dd 48h               ; Size
                dd 0                    ; Time stamp
                dw 2 dup(0)             ; Version: 0.0
                dd 0                    ; GlobalFlagsClear
                dd 0                    ; GlobalFlagsSet
                dd 0                    ; CriticalSectionDefaultTimeout
                dd 0                    ; DeCommitFreeBlockThreshold
                dd 0                    ; DeCommitTotalFreeThreshold
                dd 0                    ; LockPrefixTable
                dd 0                    ; MaximumAllocationSize
                dd 0                    ; VirtualMemoryThreshold
                dd 0                    ; ProcessAffinityMask
                dd 0                    ; ProcessHeapFlags
                dw 0                    ; CSDVersion
                dw 0                    ; Reserved1
                dd 0                    ; EditList
                dd offset ___security_cookie ; SecurityCookie
                dd offset ___safe_se_handler_table ; SEHandlerTable
                dd 61h                  ; SEHandlerCount
; Debug information (IMAGE_DEBUG_TYPE_CODEVIEW)
asc_10914730    db 'RSDS'               ; DATA XREF: .rdata:10912714↑o
                                        ; CV signature
                dd 6091DACAh            ; Data1 ; GUID
                dw 0B3CAh               ; Data2
                dw 4829h                ; Data3
                db 0A1h, 46h, 67h, 9Ch, 0A7h, 0Ah, 23h, 0E0h; Data4
                dd 1                    ; Age
                db 'r:\BUCKEYE-PCSTABLE\System\DukeForeverf.pdb',0 ; PdbFileName
; const FOutputDeviceFile::`RTTI Complete Object Locator'
??_R4FOutputDeviceFile@@6B@ dd 0        ; signature
                dd 0                    ; offset of this vtable in complete class (from top)
                dd 0                    ; offset of constructor displacement
                dd offset ??_R0?AVFOutputDeviceFile@@@8 ; reference to type description
                dd offset ??_R3FOutputDeviceFile@@8 ; reference to hierarchy description
; FOutputDeviceFile::`RTTI Class Hierarchy Descriptor'
??_R3FOutputDeviceFile@@8 dd 0          ; DATA XREF: .rdata:10914784↑o
                                        ; .rdata:109147BC↓o
                                        ; signature
                dd 0                    ; attributes
                dd 2                    ; # of items in the array of base classes
                dd offset ??_R2FOutputDeviceFile@@8 ; reference to the array of base classes
; FOutputDeviceFile::`RTTI Base Class Array'
??_R2FOutputDeviceFile@@8 dd offset ??_R1A@?0A@EA@FOutputDeviceFile@@8
                                        ; DATA XREF: .rdata:10914794↑o
                                        ; reference to base class decription 1
                dd offset ??_R1A@?0A@EA@dnOutputDevice@@8 ; reference to base class decription 2
                db    0
                db    0
                db    0
                db    0
; FOutputDeviceFile::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@FOutputDeviceFile@@8 dd offset ??_R0?AVFOutputDeviceFile@@@8
                                        ; DATA XREF: .rdata:FOutputDeviceFile::`RTTI Base Class Array'↑o
                                        ; reference to type description
                dd 1                    ; # of sub elements within base class array
                dd 0                    ; member displacement
                dd -1                   ; vftable displacement
                dd 0                    ; displacement within vftable
                dd 40h                  ; base class attributes
                dd offset ??_R3FOutputDeviceFile@@8 ; reference to class hierarchy descriptor
; dnOutputDevice::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@dnOutputDevice@@8 dd offset ??_R0?AVdnOutputDevice@@@8
                                        ; DATA XREF: .rdata:1091479C↑o
                                        ; .rdata:dnOutputDevice::`RTTI Base Class Array'↓o ...
                                        ; reference to type description
                dd 0                    ; # of sub elements within base class array
                dd 0                    ; member displacement
                dd -1                   ; vftable displacement
                dd 0                    ; displacement within vftable
                dd 40h                  ; base class attributes
                dd offset ??_R3dnOutputDevice@@8 ; reference to class hierarchy descriptor
; dnOutputDevice::`RTTI Class Hierarchy Descriptor'
??_R3dnOutputDevice@@8 dd 0             ; DATA XREF: .rdata:109147D8↑o
                                        ; .rdata:10914E00↓o
                                        ; signature
                dd 0                    ; attributes
                dd 1                    ; # of items in the array of base classes
                dd offset ??_R2dnOutputDevice@@8 ; reference to the array of base classes
; dnOutputDevice::`RTTI Base Class Array'
??_R2dnOutputDevice@@8 dd offset ??_R1A@?0A@EA@dnOutputDevice@@8
                                        ; DATA XREF: .rdata:109147E8↑o
                                        ; reference to base class decription 1
                db    0
                db    0
                db    0
                db    0
; const dnFeedbackContextWin32::`RTTI Complete Object Locator'
??_R4dnFeedbackContextWin32@@6B@ dd 0   ; DATA XREF: .rdata:10912D98↑o
                                        ; signature
                dd 0                    ; offset of this vtable in complete class (from top)
                dd 0                    ; offset of constructor displacement
                dd offset ??_R0?AVdnFeedbackContextWin32@@@8 ; reference to type description
                dd offset ??_R3dnFeedbackContextWin32@@8 ; reference to hierarchy description
; dnFeedbackContextWin32::`RTTI Class Hierarchy Descriptor'
??_R3dnFeedbackContextWin32@@8 dd 0     ; DATA XREF: .rdata:10914804↑o
                                        ; .rdata:10914840↓o
                                        ; signature
                dd 0                    ; attributes
                dd 3                    ; # of items in the array of base classes
                dd offset ??_R2dnFeedbackContextWin32@@8 ; reference to the array of base classes
; dnFeedbackContextWin32::`RTTI Base Class Array'
??_R2dnFeedbackContextWin32@@8 dd offset ??_R1A@?0A@EA@dnFeedbackContextWin32@@8
                                        ; DATA XREF: .rdata:10914814↑o
                                        ; reference to base class decription 1
                dd offset ??_R1A@?0A@EA@dnFeedbackContext@@8 ; reference to base class decription 2
                dd offset ??_R1A@?0A@EA@dnOutputDevice@@8 ; reference to base class decription 3
                align 8
; dnFeedbackContextWin32::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@dnFeedbackContextWin32@@8 dd offset ??_R0?AVdnFeedbackContextWin32@@@8
                                        ; DATA XREF: .rdata:dnFeedbackContextWin32::`RTTI Base Class Array'↑o
                                        ; reference to type description
                dd 2                    ; # of sub elements within base class array
                dd 0                    ; member displacement
                dd -1                   ; vftable displacement
                dd 0                    ; displacement within vftable
                dd 40h                  ; base class attributes
                dd offset ??_R3dnFeedbackContextWin32@@8 ; reference to class hierarchy descriptor
; dnFeedbackContext::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@dnFeedbackContext@@8 dd offset ??_R0?AVdnFeedbackContext@@@8
                                        ; DATA XREF: .rdata:1091481C↑o
                                        ; .rdata:dnFeedbackContext::`RTTI Base Class Array'↓o
                                        ; reference to type description
                dd 1                    ; # of sub elements within base class array
                dd 0                    ; member displacement
                dd -1                   ; vftable displacement
                dd 0                    ; displacement within vftable
                dd 40h                  ; base class attributes
                dd offset ??_R3dnFeedbackContext@@8 ; reference to class hierarchy descriptor
; dnFeedbackContext::`RTTI Class Hierarchy Descriptor'
??_R3dnFeedbackContext@@8 dd 0          ; DATA XREF: .rdata:1091485C↑o
                                        ; signature
                dd 0                    ; attributes
                dd 2                    ; # of items in the array of base classes
                dd offset ??_R2dnFeedbackContext@@8 ; reference to the array of base classes
; dnFeedbackContext::`RTTI Base Class Array'
??_R2dnFeedbackContext@@8 dd offset ??_R1A@?0A@EA@dnFeedbackContext@@8
                                        ; DATA XREF: .rdata:1091486C↑o
                                        ; reference to base class decription 1
                dd offset ??_R1A@?0A@EA@dnOutputDevice@@8 ; reference to base class decription 2
                db    0
                db    0
                db    0
                db    0
; const dnFileMgrGeneric::`RTTI Complete Object Locator'
??_R4dnFileMgrGeneric@@6B@ dd 0         ; DATA XREF: .rdata:10912E08↑o
                                        ; signature
                dd 0                    ; offset of this vtable in complete class (from top)
                dd 0                    ; offset of constructor displacement
                dd offset ??_R0?AVdnFileMgrGeneric@@@8 ; reference to type description
                dd offset ??_R3dnFileMgrGeneric@@8 ; reference to hierarchy description
; dnFileMgrGeneric::`RTTI Class Hierarchy Descriptor'
??_R3dnFileMgrGeneric@@8 dd 0           ; DATA XREF: .rdata:1091488C↑o
                                        ; .rdata:109148C4↓o
                                        ; signature
                dd 0                    ; attributes
                dd 2                    ; # of items in the array of base classes
                dd offset ??_R2dnFileMgrGeneric@@8 ; reference to the array of base classes
; dnFileMgrGeneric::`RTTI Base Class Array'
??_R2dnFileMgrGeneric@@8 dd offset ??_R1A@?0A@EA@dnFileMgrGeneric@@8
                                        ; DATA XREF: .rdata:1091489C↑o
                                        ; reference to base class decription 1
                dd offset ??_R1A@?0A@EA@dnFileMgr@@8 ; reference to base class decription 2
                db    0
                db    0
                db    0
                db    0
; dnFileMgrGeneric::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@dnFileMgrGeneric@@8 dd offset ??_R0?AVdnFileMgrGeneric@@@8
                                        ; DATA XREF: .rdata:dnFileMgrGeneric::`RTTI Base Class Array'↑o
                                        ; .rdata:1091496C↓o ...
                                        ; reference to type description
                dd 1                    ; # of sub elements within base class array
                dd 0                    ; member displacement
                dd -1                   ; vftable displacement
                dd 0                    ; displacement within vftable
                dd 40h                  ; base class attributes
                dd offset ??_R3dnFileMgrGeneric@@8 ; reference to class hierarchy descriptor
; dnFileMgr::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@dnFileMgr@@8 dd offset ??_R0?AVdnFileMgr@@@8
                                        ; DATA XREF: .rdata:109148A4↑o
                                        ; .rdata:dnFileMgr::`RTTI Base Class Array'↓o ...
                                        ; reference to type description
                dd 0                    ; # of sub elements within base class array
                dd 0                    ; member displacement
                dd -1                   ; vftable displacement
                dd 0                    ; displacement within vftable
                dd 40h                  ; base class attributes
                dd offset ??_R3dnFileMgr@@8 ; reference to class hierarchy descriptor
; dnFileMgr::`RTTI Class Hierarchy Descriptor'
??_R3dnFileMgr@@8 dd 0                  ; DATA XREF: .rdata:109148E0↑o
                                        ; signature
                dd 0                    ; attributes
                dd 1                    ; # of items in the array of base classes
                dd offset ??_R2dnFileMgr@@8 ; reference to the array of base classes
; dnFileMgr::`RTTI Base Class Array'
??_R2dnFileMgr@@8 dd offset ??_R1A@?0A@EA@dnFileMgr@@8
                                        ; DATA XREF: .rdata:109148F0↑o
                                        ; reference to base class decription 1
                db    0
                db    0
                db    0
                db    0
; const dnConfigCache::`RTTI Complete Object Locator'
??_R4dnConfigCache@@6B@ dd 0            ; DATA XREF: .rdata:10912E60↑o
                                        ; signature
                dd 0                    ; offset of this vtable in complete class (from top)
                dd 0                    ; offset of constructor displacement
                dd offset ??_R0?AVdnConfigCache@@@8 ; reference to type description
                dd offset ??_R3dnConfigCache@@8 ; reference to hierarchy description
; dnConfigCache::`RTTI Class Hierarchy Descriptor'
??_R3dnConfigCache@@8 dd 0              ; DATA XREF: .rdata:1091490C↑o
                                        ; .rdata:10914940↓o
                                        ; signature
                dd 0                    ; attributes
                dd 1                    ; # of items in the array of base classes
                dd offset ??_R2dnConfigCache@@8 ; reference to the array of base classes
; dnConfigCache::`RTTI Base Class Array'
??_R2dnConfigCache@@8 dd offset ??_R1A@?0A@EA@dnConfigCache@@8
                                        ; DATA XREF: .rdata:1091491C↑o
                                        ; reference to base class decription 1
                align 8
; dnConfigCache::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@dnConfigCache@@8 dd offset ??_R0?AVdnConfigCache@@@8
                                        ; DATA XREF: .rdata:dnConfigCache::`RTTI Base Class Array'↑o
                                        ; .rdata:10914B74↓o
                                        ; reference to type description
                dd 0                    ; # of sub elements within base class array
                dd 0                    ; member displacement
                dd -1                   ; vftable displacement
                dd 0                    ; displacement within vftable
                dd 40h                  ; base class attributes
                dd offset ??_R3dnConfigCache@@8 ; reference to class hierarchy descriptor
; const dnFileMgrWin32::`RTTI Complete Object Locator'
??_R4dnFileMgrWin32@@6B@ dd 0           ; DATA XREF: .rdata:10912F58↑o
                                        ; signature
                dd 0                    ; offset of this vtable in complete class (from top)
                dd 0                    ; offset of constructor displacement
                dd offset ??_R0?AVdnFileMgrWin32@@@8 ; reference to type description
                dd offset ??_R3dnFileMgrWin32@@8 ; reference to hierarchy description
; dnFileMgrWin32::`RTTI Class Hierarchy Descriptor'
??_R3dnFileMgrWin32@@8 dd 0             ; DATA XREF: .rdata:10914954↑o
                                        ; .rdata:10914990↓o
                                        ; signature
                dd 0                    ; attributes
                dd 3                    ; # of items in the array of base classes
                dd offset ??_R2dnFileMgrWin32@@8 ; reference to the array of base classes
; dnFileMgrWin32::`RTTI Base Class Array'
??_R2dnFileMgrWin32@@8 dd offset ??_R1A@?0A@EA@dnFileMgrWin32@@8
                                        ; DATA XREF: .rdata:10914964↑o
                                        ; reference to base class decription 1
                dd offset ??_R1A@?0A@EA@dnFileMgrGeneric@@8 ; reference to base class decription 2
                dd offset ??_R1A@?0A@EA@dnFileMgr@@8 ; reference to base class decription 3
                align 8
; dnFileMgrWin32::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@dnFileMgrWin32@@8 dd offset ??_R0?AVdnFileMgrWin32@@@8
                                        ; DATA XREF: .rdata:dnFileMgrWin32::`RTTI Base Class Array'↑o
                                        ; .rdata:10914B20↓o
                                        ; reference to type description
                dd 2                    ; # of sub elements within base class array
                dd 0                    ; member displacement
                dd -1                   ; vftable displacement
                dd 0                    ; displacement within vftable
                dd 40h                  ; base class attributes
                dd offset ??_R3dnFileMgrWin32@@8 ; reference to class hierarchy descriptor
; const dnArchiveFileWriter::`RTTI Complete Object Locator'
??_R4dnArchiveFileWriter@@6B@ dd 0      ; DATA XREF: .rdata:10912FB0↑o
                                        ; signature
                dd 0                    ; offset of this vtable in complete class (from top)
                dd 0                    ; offset of constructor displacement
                dd offset ??_R0?AVdnArchiveFileWriter@@@8 ; reference to type description
                dd offset ??_R3dnArchiveFileWriter@@8 ; reference to hierarchy description
; dnArchiveFileWriter::`RTTI Class Hierarchy Descriptor'
??_R3dnArchiveFileWriter@@8 dd 0        ; DATA XREF: .rdata:109149A4↑o
                                        ; .rdata:109149DC↓o
                                        ; signature
                dd 0                    ; attributes
                dd 2                    ; # of items in the array of base classes
                dd offset ??_R2dnArchiveFileWriter@@8 ; reference to the array of base classes
; dnArchiveFileWriter::`RTTI Base Class Array'
??_R2dnArchiveFileWriter@@8 dd offset ??_R1A@?0A@EA@dnArchiveFileWriter@@8
                                        ; DATA XREF: .rdata:109149B4↑o
                                        ; reference to base class decription 1
                dd offset ??_R1A@?0A@EA@dnArchive@@8 ; reference to base class decription 2
                db    0
                db    0
                db    0
                db    0
; dnArchiveFileWriter::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@dnArchiveFileWriter@@8 dd offset ??_R0?AVdnArchiveFileWriter@@@8
                                        ; DATA XREF: .rdata:dnArchiveFileWriter::`RTTI Base Class Array'↑o
                                        ; reference to type description
                dd 1                    ; # of sub elements within base class array
                dd 0                    ; member displacement
                dd -1                   ; vftable displacement
                dd 0                    ; displacement within vftable
                dd 40h                  ; base class attributes
                dd offset ??_R3dnArchiveFileWriter@@8 ; reference to class hierarchy descriptor
; dnArchive::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@dnArchive@@8 dd offset ??_R0?AVdnArchive@@@8
                                        ; DATA XREF: .rdata:109149BC↑o
                                        ; .rdata:dnArchive::`RTTI Base Class Array'↓o ...
                                        ; reference to type description
                dd 0                    ; # of sub elements within base class array
                dd 0                    ; member displacement
                dd -1                   ; vftable displacement
                dd 0                    ; displacement within vftable
                dd 40h                  ; base class attributes
                dd offset ??_R3dnArchive@@8 ; reference to class hierarchy descriptor
; dnArchive::`RTTI Class Hierarchy Descriptor'
??_R3dnArchive@@8 dd 0                  ; DATA XREF: .rdata:109149F8↑o
                                        ; signature
                dd 0                    ; attributes
                dd 1                    ; # of items in the array of base classes
                dd offset ??_R2dnArchive@@8 ; reference to the array of base classes
; dnArchive::`RTTI Base Class Array'
??_R2dnArchive@@8 dd offset ??_R1A@?0A@EA@dnArchive@@8
                                        ; DATA XREF: .rdata:10914A08↑o
                                        ; reference to base class decription 1
                db    0
                db    0
                db    0
                db    0
; const dnArchiveFileReaderCompressedWin32::`RTTI Complete Object Locator'
??_R4dnArchiveFileReaderCompressedWin32@@6B@ dd 0
                                        ; DATA XREF: .rdata:10913170↑o
                                        ; signature
                dd 0                    ; offset of this vtable in complete class (from top)
                dd 0                    ; offset of constructor displacement
                dd offset ??_R0?AVdnArchiveFileReaderCompressedWin32@@@8 ; reference to type description
                dd offset ??_R3dnArchiveFileReaderCompressedWin32@@8 ; reference to hierarchy description
; dnArchiveFileReaderCompressedWin32::`RTTI Class Hierarchy Descriptor'
??_R3dnArchiveFileReaderCompressedWin32@@8 dd 0
                                        ; DATA XREF: .rdata:10914A24↑o
                                        ; .rdata:10914A5C↓o
                                        ; signature
                dd 0                    ; attributes
                dd 2                    ; # of items in the array of base classes
                dd offset ??_R2dnArchiveFileReaderCompressedWin32@@8 ; reference to the array of base classes
; dnArchiveFileReaderCompressedWin32::`RTTI Base Class Array'
??_R2dnArchiveFileReaderCompressedWin32@@8 dd offset ??_R1A@?0A@EA@dnArchiveFileReaderCompressedWin32@@8
                                        ; DATA XREF: .rdata:10914A34↑o
                                        ; reference to base class decription 1
                dd offset ??_R1A@?0A@EA@dnArchive@@8 ; reference to base class decription 2
                db    0
                db    0
                db    0
                db    0
; dnArchiveFileReaderCompressedWin32::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@dnArchiveFileReaderCompressedWin32@@8 dd offset ??_R0?AVdnArchiveFileReaderCompressedWin32@@@8
                                        ; DATA XREF: .rdata:dnArchiveFileReaderCompressedWin32::`RTTI Base Class Array'↑o
                                        ; reference to type description
                dd 1                    ; # of sub elements within base class array
                dd 0                    ; member displacement
                dd -1                   ; vftable displacement
                dd 0                    ; displacement within vftable
                dd 40h                  ; base class attributes
                dd offset ??_R3dnArchiveFileReaderCompressedWin32@@8 ; reference to class hierarchy descriptor
; const dnArchiveFileReader::`RTTI Complete Object Locator'
??_R4dnArchiveFileReader@@6B@ dd 0      ; DATA XREF: .rdata:109130A8↑o
                                        ; signature
                dd 0                    ; offset of this vtable in complete class (from top)
                dd 0                    ; offset of constructor displacement
                dd offset ??_R0?AVdnArchiveFileReader@@@8 ; reference to type description
                dd offset ??_R3dnArchiveFileReader@@8 ; reference to hierarchy description
; dnArchiveFileReader::`RTTI Class Hierarchy Descriptor'
??_R3dnArchiveFileReader@@8 dd 0        ; DATA XREF: .rdata:10914A70↑o
                                        ; .rdata:10914AA8↓o
                                        ; signature
                dd 0                    ; attributes
                dd 2                    ; # of items in the array of base classes
                dd offset ??_R2dnArchiveFileReader@@8 ; reference to the array of base classes
; dnArchiveFileReader::`RTTI Base Class Array'
??_R2dnArchiveFileReader@@8 dd offset ??_R1A@?0A@EA@dnArchiveFileReader@@8
                                        ; DATA XREF: .rdata:10914A80↑o
                                        ; reference to base class decription 1
                dd offset ??_R1A@?0A@EA@dnArchive@@8 ; reference to base class decription 2
                align 10h
; dnArchiveFileReader::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@dnArchiveFileReader@@8 dd offset ??_R0?AVdnArchiveFileReader@@@8
                                        ; DATA XREF: .rdata:dnArchiveFileReader::`RTTI Base Class Array'↑o
                                        ; reference to type description
                dd 1                    ; # of sub elements within base class array
                dd 0                    ; member displacement
                dd -1                   ; vftable displacement
                dd 0                    ; displacement within vftable
                dd 40h                  ; base class attributes
                dd offset ??_R3dnArchiveFileReader@@8 ; reference to class hierarchy descriptor
; const dnArchiveFileWriterCompressedWin32::`RTTI Complete Object Locator'
??_R4dnArchiveFileWriterCompressedWin32@@6B@ dd 0
                                        ; DATA XREF: .rdata:109132A8↑o
                                        ; signature
                dd 0                    ; offset of this vtable in complete class (from top)
                dd 0                    ; offset of constructor displacement
                dd offset ??_R0?AVdnArchiveFileWriterCompressedWin32@@@8 ; reference to type description
                dd offset ??_R3dnArchiveFileWriterCompressedWin32@@8 ; reference to hierarchy description
; dnArchiveFileWriterCompressedWin32::`RTTI Class Hierarchy Descriptor'
??_R3dnArchiveFileWriterCompressedWin32@@8 dd 0
                                        ; DATA XREF: .rdata:10914ABC↑o
                                        ; .rdata:10914AF4↓o
                                        ; signature
                dd 0                    ; attributes
                dd 2                    ; # of items in the array of base classes
                dd offset ??_R2dnArchiveFileWriterCompressedWin32@@8 ; reference to the array of base classes
; dnArchiveFileWriterCompressedWin32::`RTTI Base Class Array'
??_R2dnArchiveFileWriterCompressedWin32@@8 dd offset ??_R1A@?0A@EA@dnArchiveFileWriterCompressedWin32@@8
                                        ; DATA XREF: .rdata:10914ACC↑o
                                        ; reference to base class decription 1
                dd offset ??_R1A@?0A@EA@dnArchive@@8 ; reference to base class decription 2
                db    0
                db    0
                db    0
                db    0
; dnArchiveFileWriterCompressedWin32::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@dnArchiveFileWriterCompressedWin32@@8 dd offset ??_R0?AVdnArchiveFileWriterCompressedWin32@@@8
                                        ; DATA XREF: .rdata:dnArchiveFileWriterCompressedWin32::`RTTI Base Class Array'↑o
                                        ; reference to type description
                dd 1                    ; # of sub elements within base class array
                dd 0                    ; member displacement
                dd -1                   ; vftable displacement
                dd 0                    ; displacement within vftable
                dd 40h                  ; base class attributes
                dd offset ??_R3dnArchiveFileWriterCompressedWin32@@8 ; reference to class hierarchy descriptor
; const dnFileMgrDLC::`RTTI Complete Object Locator'
??_R4dnFileMgrDLC@@6B@ dd 0             ; DATA XREF: .rdata:10913440↑o
                                        ; signature
                dd 0                    ; offset of this vtable in complete class (from top)
                dd 0                    ; offset of constructor displacement
                dd offset ??_R0?AVdnFileMgrDLC@@@8 ; reference to type description
                dd offset ??_R3dnFileMgrDLC@@8 ; reference to hierarchy description
; dnFileMgrDLC::`RTTI Class Hierarchy Descriptor'
??_R3dnFileMgrDLC@@8 dd 0               ; DATA XREF: .rdata:10914B08↑o
                                        ; .rdata:10914B48↓o
                                        ; signature
                dd 0                    ; attributes
                dd 4                    ; # of items in the array of base classes
                dd offset ??_R2dnFileMgrDLC@@8 ; reference to the array of base classes
; dnFileMgrDLC::`RTTI Base Class Array'
??_R2dnFileMgrDLC@@8 dd offset ??_R1A@?0A@EA@dnFileMgrDLC@@8
                                        ; DATA XREF: .rdata:10914B18↑o
                                        ; reference to base class decription 1
                dd offset ??_R1A@?0A@EA@dnFileMgrWin32@@8 ; reference to base class decription 2
                dd offset ??_R1A@?0A@EA@dnFileMgrGeneric@@8 ; reference to base class decription 3
                dd offset ??_R1A@?0A@EA@dnFileMgr@@8 ; reference to base class decription 4
                align 10h
; dnFileMgrDLC::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@dnFileMgrDLC@@8 dd offset ??_R0?AVdnFileMgrDLC@@@8
                                        ; DATA XREF: .rdata:dnFileMgrDLC::`RTTI Base Class Array'↑o
                                        ; reference to type description
                dd 3                    ; # of sub elements within base class array
                dd 0                    ; member displacement
                dd -1                   ; vftable displacement
                dd 0                    ; displacement within vftable
                dd 40h                  ; base class attributes
                dd offset ??_R3dnFileMgrDLC@@8 ; reference to class hierarchy descriptor
; const FConfigCacheIni::`RTTI Complete Object Locator'
??_R4FConfigCacheIni@@6B@ dd 0          ; DATA XREF: .rdata:109134D8↑o
                                        ; signature
                dd 0                    ; offset of this vtable in complete class (from top)
                dd 0                    ; offset of constructor displacement
                dd offset ??_R0?AVFConfigCacheIni@@@8 ; reference to type description
                dd offset ??_R3FConfigCacheIni@@8 ; reference to hierarchy description
; FConfigCacheIni::`RTTI Class Hierarchy Descriptor'
??_R3FConfigCacheIni@@8 dd 0            ; DATA XREF: .rdata:10914B5C↑o
                                        ; .rdata:10914BA0↓o
                                        ; signature
                dd 1                    ; attributes
                dd 5                    ; # of items in the array of base classes
                dd offset ??_R2FConfigCacheIni@@8 ; reference to the array of base classes
; FConfigCacheIni::`RTTI Base Class Array'
??_R2FConfigCacheIni@@8 dd offset ??_R1A@?0A@EA@FConfigCacheIni@@8
                                        ; DATA XREF: .rdata:10914B6C↑o
                                        ; reference to base class decription 1
                dd offset ??_R1A@?0A@EA@dnConfigCache@@8 ; reference to base class decription 2
                dd offset ??_R13?0A@EA@?$TMap@VdnString@@VFConfigFile@@@@8 ; reference to base class decription 3
                dd offset ??_R13?0A@EA@?$dnMap@VdnString@@VFConfigFile@@@@8 ; reference to base class decription 4
                dd offset ??_R13?0A@EA@?$dnMapBase@VdnString@@VFConfigFile@@@@8 ; reference to base class decription 5
                align 8
; FConfigCacheIni::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@FConfigCacheIni@@8 dd offset ??_R0?AVFConfigCacheIni@@@8
                                        ; DATA XREF: .rdata:FConfigCacheIni::`RTTI Base Class Array'↑o
                                        ; reference to type description
                dd 4                    ; # of sub elements within base class array
                dd 0                    ; member displacement
                dd -1                   ; vftable displacement
                dd 0                    ; displacement within vftable
                dd 40h                  ; base class attributes
                dd offset ??_R3FConfigCacheIni@@8 ; reference to class hierarchy descriptor
; TMap<class dnString, class FConfigFile>::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
??_R13?0A@EA@?$TMap@VdnString@@VFConfigFile@@@@8 dd offset ??_R0?AV?$TMap@VdnString@@VFConfigFile@@@@@8
                                        ; DATA XREF: .rdata:10914B78↑o
                                        ; reference to type description
                dd 2                    ; # of sub elements within base class array
                dd 4                    ; member displacement
                dd -1                   ; vftable displacement
                dd 0                    ; displacement within vftable
                dd 40h                  ; base class attributes
                dd offset ??_R3?$TMap@VdnString@@VFConfigFile@@@@8 ; reference to class hierarchy descriptor
; TMap<class dnString, class FConfigFile>::`RTTI Class Hierarchy Descriptor'
??_R3?$TMap@VdnString@@VFConfigFile@@@@8 dd 0
                                        ; DATA XREF: .rdata:10914BBC↑o
                                        ; .rdata:10914BF8↓o
                                        ; signature
                dd 0                    ; attributes
                dd 3                    ; # of items in the array of base classes
                dd offset ??_R2?$TMap@VdnString@@VFConfigFile@@@@8 ; reference to the array of base classes
; TMap<class dnString, class FConfigFile>::`RTTI Base Class Array'
??_R2?$TMap@VdnString@@VFConfigFile@@@@8 dd offset ??_R1A@?0A@EA@?$TMap@VdnString@@VFConfigFile@@@@8
                                        ; DATA XREF: .rdata:10914BCC↑o
                                        ; reference to base class decription 1
                dd offset ??_R1A@?0A@EA@?$dnMap@VdnString@@VFConfigFile@@@@8 ; reference to base class decription 2
                dd offset ??_R1A@?0A@EA@?$dnMapBase@VdnString@@VFConfigFile@@@@8 ; reference to base class decription 3
                align 10h
; TMap<class dnString, class FConfigFile>::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@?$TMap@VdnString@@VFConfigFile@@@@8 dd offset ??_R0?AV?$TMap@VdnString@@VFConfigFile@@@@@8
                                        ; DATA XREF: .rdata:TMap<dnString,FConfigFile>::`RTTI Base Class Array'↑o
                                        ; reference to type description
                dd 2                    ; # of sub elements within base class array
                dd 0                    ; member displacement
                dd -1                   ; vftable displacement
                dd 0                    ; displacement within vftable
                dd 40h                  ; base class attributes
                dd offset ??_R3?$TMap@VdnString@@VFConfigFile@@@@8 ; reference to class hierarchy descriptor
; dnMap<class dnString, class FConfigFile>::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@?$dnMap@VdnString@@VFConfigFile@@@@8 dd offset ??_R0?AV?$dnMap@VdnString@@VFConfigFile@@@@@8
                                        ; DATA XREF: .rdata:10914BD4↑o
                                        ; .rdata:dnMap<dnString,FConfigFile>::`RTTI Base Class Array'↓o
                                        ; reference to type description
                dd 1                    ; # of sub elements within base class array
                dd 0                    ; member displacement
                dd -1                   ; vftable displacement
                dd 0                    ; displacement within vftable
                dd 40h                  ; base class attributes
                dd offset ??_R3?$dnMap@VdnString@@VFConfigFile@@@@8 ; reference to class hierarchy descriptor
; dnMap<class dnString, class FConfigFile>::`RTTI Class Hierarchy Descriptor'
??_R3?$dnMap@VdnString@@VFConfigFile@@@@8 dd 0
                                        ; DATA XREF: .rdata:10914C14↑o
                                        ; .rdata:10914C80↓o
                                        ; signature
                dd 0                    ; attributes
                dd 2                    ; # of items in the array of base classes
                dd offset ??_R2?$dnMap@VdnString@@VFConfigFile@@@@8 ; reference to the array of base classes
; dnMap<class dnString, class FConfigFile>::`RTTI Base Class Array'
??_R2?$dnMap@VdnString@@VFConfigFile@@@@8 dd offset ??_R1A@?0A@EA@?$dnMap@VdnString@@VFConfigFile@@@@8
                                        ; DATA XREF: .rdata:10914C24↑o
                                        ; reference to base class decription 1
                dd offset ??_R1A@?0A@EA@?$dnMapBase@VdnString@@VFConfigFile@@@@8 ; reference to base class decription 2
                db    0
                db    0
                db    0
                db    0
; dnMapBase<class dnString, class FConfigFile>::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@?$dnMapBase@VdnString@@VFConfigFile@@@@8 dd offset ??_R0?AV?$dnMapBase@VdnString@@VFConfigFile@@@@@8
                                        ; DATA XREF: .rdata:10914BD8↑o
                                        ; .rdata:10914C2C↑o ...
                                        ; reference to type description
                dd 0                    ; # of sub elements within base class array
                dd 0                    ; member displacement
                dd -1                   ; vftable displacement
                dd 0                    ; displacement within vftable
                dd 40h                  ; base class attributes
                dd offset ??_R3?$dnMapBase@VdnString@@VFConfigFile@@@@8 ; reference to class hierarchy descriptor
; dnMapBase<class dnString, class FConfigFile>::`RTTI Class Hierarchy Descriptor'
??_R3?$dnMapBase@VdnString@@VFConfigFile@@@@8 dd 0
                                        ; DATA XREF: .rdata:10914C4C↑o
                                        ; .rdata:10914C9C↓o
                                        ; signature
                dd 0                    ; attributes
                dd 1                    ; # of items in the array of base classes
                dd offset ??_R2?$dnMapBase@VdnString@@VFConfigFile@@@@8 ; reference to the array of base classes
; dnMapBase<class dnString, class FConfigFile>::`RTTI Base Class Array'
??_R2?$dnMapBase@VdnString@@VFConfigFile@@@@8 dd offset ??_R1A@?0A@EA@?$dnMapBase@VdnString@@VFConfigFile@@@@8
                                        ; DATA XREF: .rdata:10914C5C↑o
                                        ; reference to base class decription 1
                align 8
; dnMap<class dnString, class FConfigFile>::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
??_R13?0A@EA@?$dnMap@VdnString@@VFConfigFile@@@@8 dd offset ??_R0?AV?$dnMap@VdnString@@VFConfigFile@@@@@8
                                        ; DATA XREF: .rdata:10914B7C↑o
                                        ; reference to type description
                dd 1                    ; # of sub elements within base class array
                dd 4                    ; member displacement
                dd -1                   ; vftable displacement
                dd 0                    ; displacement within vftable
                dd 40h                  ; base class attributes
                dd offset ??_R3?$dnMap@VdnString@@VFConfigFile@@@@8 ; reference to class hierarchy descriptor
; dnMapBase<class dnString, class FConfigFile>::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
??_R13?0A@EA@?$dnMapBase@VdnString@@VFConfigFile@@@@8 dd offset ??_R0?AV?$dnMapBase@VdnString@@VFConfigFile@@@@@8
                                        ; DATA XREF: .rdata:10914B80↑o
                                        ; reference to type description
                dd 0                    ; # of sub elements within base class array
                dd 4                    ; member displacement
                dd -1                   ; vftable displacement
                dd 0                    ; displacement within vftable
                dd 40h                  ; base class attributes
                dd offset ??_R3?$dnMapBase@VdnString@@VFConfigFile@@@@8 ; reference to class hierarchy descriptor
; const WLog::`RTTI Complete Object Locator'
??_R4WLog@@6B@  dd 0                    ; DATA XREF: .rdata:10913F20↑o
                                        ; signature
                dd 0                    ; offset of this vtable in complete class (from top)
                dd 0                    ; offset of constructor displacement
                dd offset ??_R0?AVWLog@@@8 ; reference to type description
                dd offset ??_R3WLog@@8  ; reference to hierarchy description
; WLog::`RTTI Class Hierarchy Descriptor'
??_R3WLog@@8    dd 0                    ; DATA XREF: .rdata:10914CB0↑o
                                        ; .rdata:10914CF8↓o
                                        ; signature
                dd 1                    ; attributes
                dd 6                    ; # of items in the array of base classes
                dd offset ??_R2WLog@@8  ; reference to the array of base classes
; WLog::`RTTI Base Class Array'
??_R2WLog@@8    dd offset ??_R1A@?0A@EA@WLog@@8
                                        ; DATA XREF: .rdata:10914CC0↑o
                                        ; reference to base class decription 1
                dd offset ??_R1A@?0A@EA@WTerminal@@8 ; reference to base class decription 2
                dd offset ??_R1A@?0A@EA@WTerminalBase@@8 ; reference to base class decription 3
                dd offset ??_R1A@?0A@EA@WWindow@@8 ; reference to base class decription 4
                dd offset ??_R1A@?0A@EA@FCommandTarget@@8 ; reference to base class decription 5
                dd offset ??_R1EE@?0A@EA@dnOutputDevice@@8 ; reference to base class decription 6
                align 10h
; WLog::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@WLog@@8 dd offset ??_R0?AVWLog@@@8
                                        ; DATA XREF: .rdata:WLog::`RTTI Base Class Array'↑o
                                        ; reference to type description
                dd 5                    ; # of sub elements within base class array
                dd 0                    ; member displacement
                dd -1                   ; vftable displacement
                dd 0                    ; displacement within vftable
                dd 40h                  ; base class attributes
                dd offset ??_R3WLog@@8  ; reference to class hierarchy descriptor
; WTerminal::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@WTerminal@@8 dd offset ??_R0?AVWTerminal@@@8
                                        ; DATA XREF: .rdata:10914CC8↑o
                                        ; .rdata:WTerminal::`RTTI Base Class Array'↓o
                                        ; reference to type description
                dd 4                    ; # of sub elements within base class array
                dd 0                    ; member displacement
                dd -1                   ; vftable displacement
                dd 0                    ; displacement within vftable
                dd 40h                  ; base class attributes
                dd offset ??_R3WTerminal@@8 ; reference to class hierarchy descriptor
; WTerminal::`RTTI Class Hierarchy Descriptor'
??_R3WTerminal@@8 dd 0                  ; DATA XREF: .rdata:10914D14↑o
                                        ; signature
                dd 1                    ; attributes
                dd 5                    ; # of items in the array of base classes
                dd offset ??_R2WTerminal@@8 ; reference to the array of base classes
; WTerminal::`RTTI Base Class Array'
??_R2WTerminal@@8 dd offset ??_R1A@?0A@EA@WTerminal@@8
                                        ; DATA XREF: .rdata:10914D24↑o
                                        ; reference to base class decription 1
                dd offset ??_R1A@?0A@EA@WTerminalBase@@8 ; reference to base class decription 2
                dd offset ??_R1A@?0A@EA@WWindow@@8 ; reference to base class decription 3
                dd offset ??_R1A@?0A@EA@FCommandTarget@@8 ; reference to base class decription 4
                dd offset ??_R1EE@?0A@EA@dnOutputDevice@@8 ; reference to base class decription 5
                align 10h
; WTerminalBase::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@WTerminalBase@@8 dd offset ??_R0?AVWTerminalBase@@@8
                                        ; DATA XREF: .rdata:10914CCC↑o
                                        ; .rdata:10914D2C↑o ...
                                        ; reference to type description
                dd 2                    ; # of sub elements within base class array
                dd 0                    ; member displacement
                dd -1                   ; vftable displacement
                dd 0                    ; displacement within vftable
                dd 40h                  ; base class attributes
                dd offset ??_R3WTerminalBase@@8 ; reference to class hierarchy descriptor
; WTerminalBase::`RTTI Class Hierarchy Descriptor'
??_R3WTerminalBase@@8 dd 0              ; DATA XREF: .rdata:10914D58↑o
                                        ; signature
                dd 0                    ; attributes
                dd 3                    ; # of items in the array of base classes
                dd offset ??_R2WTerminalBase@@8 ; reference to the array of base classes
; WTerminalBase::`RTTI Base Class Array'
??_R2WTerminalBase@@8 dd offset ??_R1A@?0A@EA@WTerminalBase@@8
                                        ; DATA XREF: .rdata:10914D68↑o
                                        ; reference to base class decription 1
                dd offset ??_R1A@?0A@EA@WWindow@@8 ; reference to base class decription 2
                dd offset ??_R1A@?0A@EA@FCommandTarget@@8 ; reference to base class decription 3
                db    0
                db    0
                db    0
                db    0
; WWindow::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@WWindow@@8 dd offset ??_R0?AVWWindow@@@8
                                        ; DATA XREF: .rdata:10914CD0↑o
                                        ; .rdata:10914D30↑o ...
                                        ; reference to type description
                dd 1                    ; # of sub elements within base class array
                dd 0                    ; member displacement
                dd -1                   ; vftable displacement
                dd 0                    ; displacement within vftable
                dd 40h                  ; base class attributes
                dd offset ??_R3WWindow@@8 ; reference to class hierarchy descriptor
; WWindow::`RTTI Class Hierarchy Descriptor'
??_R3WWindow@@8 dd 0                    ; DATA XREF: .rdata:10914D94↑o
                                        ; signature
                dd 0                    ; attributes
                dd 2                    ; # of items in the array of base classes
                dd offset ??_R2WWindow@@8 ; reference to the array of base classes
; WWindow::`RTTI Base Class Array'
??_R2WWindow@@8 dd offset ??_R1A@?0A@EA@WWindow@@8
                                        ; DATA XREF: .rdata:10914DA4↑o
                                        ; reference to base class decription 1
                dd offset ??_R1A@?0A@EA@FCommandTarget@@8 ; reference to base class decription 2
                db    0
                db    0
                db    0
                db    0
; FCommandTarget::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@FCommandTarget@@8 dd offset ??_R0?AVFCommandTarget@@@8
                                        ; DATA XREF: .rdata:10914CD4↑o
                                        ; .rdata:10914D34↑o ...
                                        ; reference to type description
                dd 0                    ; # of sub elements within base class array
                dd 0                    ; member displacement
                dd -1                   ; vftable displacement
                dd 0                    ; displacement within vftable
                dd 40h                  ; base class attributes
                dd offset ??_R3FCommandTarget@@8 ; reference to class hierarchy descriptor
; FCommandTarget::`RTTI Class Hierarchy Descriptor'
??_R3FCommandTarget@@8 dd 0             ; DATA XREF: .rdata:10914DCC↑o
                                        ; signature
                dd 0                    ; attributes
                dd 1                    ; # of items in the array of base classes
                dd offset ??_R2FCommandTarget@@8 ; reference to the array of base classes
; FCommandTarget::`RTTI Base Class Array'
??_R2FCommandTarget@@8 dd offset ??_R1A@?0A@EA@FCommandTarget@@8
                                        ; DATA XREF: .rdata:10914DDC↑o
                                        ; reference to base class decription 1
                align 8
; dnOutputDevice::`RTTI Base Class Descriptor at (68, -1, 0, 64)'
??_R1EE@?0A@EA@dnOutputDevice@@8 dd offset ??_R0?AVdnOutputDevice@@@8
                                        ; DATA XREF: .rdata:10914CD8↑o
                                        ; .rdata:10914D38↑o
                                        ; reference to type description
                dd 0                    ; # of sub elements within base class array
                dd 68                   ; member displacement
                dd -1                   ; vftable displacement
                dd 0                    ; displacement within vftable
                dd 40h                  ; base class attributes
                dd offset ??_R3dnOutputDevice@@8 ; reference to class hierarchy descriptor
; const type_info::`RTTI Complete Object Locator'
??_R4type_info@@6B@ dd 0                ; DATA XREF: .rdata:109146C4↑o
                                        ; signature
                dd 0                    ; offset of this vtable in complete class (from top)
                dd 0                    ; offset of constructor displacement
                dd offset ??_R0?AVtype_info@@@8 ; reference to type description
                dd offset ??_R3type_info@@8 ; reference to hierarchy description
; type_info::`RTTI Class Hierarchy Descriptor'
??_R3type_info@@8 dd 0                  ; DATA XREF: .rdata:10914E14↑o
                                        ; .rdata:10914E48↓o
                                        ; signature
                dd 0                    ; attributes
                dd 1                    ; # of items in the array of base classes
                dd offset ??_R2type_info@@8 ; reference to the array of base classes
; type_info::`RTTI Base Class Array'
??_R2type_info@@8 dd offset ??_R1A@?0A@EA@type_info@@8
                                        ; DATA XREF: .rdata:10914E24↑o
                                        ; reference to base class decription 1
                align 10h
; type_info::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@type_info@@8 dd offset ??_R0?AVtype_info@@@8
                                        ; DATA XREF: .rdata:type_info::`RTTI Base Class Array'↑o
                                        ; reference to type description
                dd 0                    ; # of sub elements within base class array
                dd 0                    ; member displacement
                dd -1                   ; vftable displacement
                dd 0                    ; displacement within vftable
                dd 40h                  ; base class attributes
                dd offset ??_R3type_info@@8 ; reference to class hierarchy descriptor
                align 10h
___safe_se_handler_table dd rva SEH_10910070
                                        ; DATA XREF: .rdata:10914728↑o
                dd rva SEH_109012A0
                dd rva SEH_109013B0
                dd rva SEH_10902A30
                dd rva SEH_10902E30
                dd rva SEH_10903620
                dd rva SEH_109036D0
                dd rva SEH_109038A0
                dd rva SEH_10903980
                dd rva SEH_10903B20
                dd rva SEH_10903FD0
                dd rva sub_109105A9
                dd rva SEH_10904290
                dd rva SEH_10904310
                dd rva SEH_109045D0
                dd rva SEH_10904FB0
                dd rva SEH_10905080
                dd rva SEH_109051A0
                dd rva SEH_10905580
                dd rva SEH_109057B0
                dd rva SEH_10905860
                dd rva SEH_109058D0
                dd rva SEH_10905920
                dd rva SEH_10906100
                dd rva SEH_109061B0
                dd rva SEH_10906340
                dd rva SEH_109063D0
                dd rva SEH_10906670
                dd rva SEH_109066F0
                dd rva SEH_10906960
                dd rva SEH_10906B60
                dd rva SEH_10906FF0
                dd rva SEH_109070D0
                dd rva sub_10910ABC
                dd rva sub_10910ADC
                dd rva SEH_109072B0
                dd rva SEH_10907370
                dd rva SEH_109073D0
                dd rva sub_10910B5C
                dd rva sub_10910B7C
                dd rva SEH_10907570
                dd rva SEH_10907630
                dd rva sub_10910BD8
                dd rva SEH_10907700
                dd rva sub_10910C18
                dd rva sub_10910C38
                dd rva SEH_109078B0
                dd rva SEH_10907980
                dd rva sub_10910CCC
                dd rva sub_10910CEC
                dd rva SEH_109080E0
                dd rva SEH_10908AA0
                dd rva SEH_10908D00
                dd rva SEH_10909010
                dd rva SEH_109091E0
                dd rva SEH_109094A0
                dd rva SEH_109095C0
                dd rva SEH_10909650
                dd rva SEH_109098C0
                dd rva SEH_10909930
                dd rva SEH_10909B10
                dd rva SEH_10909B60
                dd rva sub_10910F28
                dd rva sub_10910F48
                dd rva sub_10910F74
                dd rva sub_10910F8C
                dd rva SEH_10909F80
                dd rva SEH_1090A020
                dd rva SEH_1090A290
                dd rva SEH_1090A350
                dd rva SEH_1090A510
                dd rva SEH_1090A6E0
                dd rva SEH_1090A780
                dd rva SEH_1090A890
                dd rva SEH_1090A940
                dd rva sub_10911108
                dd rva sub_10911128
                dd rva SEH_1090AF00
                dd rva sub_1091116C
                dd rva SEH_1090B080
                dd rva SEH_1090B1C0
                dd rva sub_109111CC
                dd rva SEH_1090B3A0
                dd rva SEH_1090B4E0
                dd rva SEH_1090B840
                dd rva SEH_1090BE40
                dd rva SEH_1090C4B0
                dd rva SEH_1090C5D0
                dd rva SEH_1090C7B0
                dd rva SEH_1090C8B0
                dd rva SEH_1090CAC0
                dd rva SEH_1090CBA0
                dd rva SEH_1090CDC0
                dd rva SEH_1090CEE0
                dd rva SEH_1090CF60
                dd rva SEH_1090D430
                dd rva SEH_1090ECE0
                align 8
unk_10914FD8    db    0                 ; DATA XREF: sub_1090FF6E+3↑o
                                        ; sub_1090FF6E+8↑o
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
unk_10914FE0    db    0                 ; DATA XREF: .text:1090FF97↑o
                                        ; .text:1090FF9C↑o
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
stru_10914FE8   UnwindMapEntry <-1, offset loc_109103E0>
                                        ; DATA XREF: .rdata:stru_10914FF0↓o
stru_10914FF0   FuncInfo <19930522h, 1, offset stru_10914FE8, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_109012A0↑o
stru_10915014   UnwindMapEntry <-1, offset loc_10910400>
                                        ; DATA XREF: .rdata:stru_1091501C↓o
stru_1091501C   FuncInfo <19930522h, 1, offset stru_10915014, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_109013B0↑o
stru_10915040   UnwindMapEntry <-1, offset loc_10910420>
                                        ; DATA XREF: .rdata:stru_10915048↓o
stru_10915048   FuncInfo <19930522h, 1, offset stru_10915040, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_10902A30↑o
stru_1091506C   HandlerType <40h, 0, 0, offset loc_109035E4>
                                        ; DATA XREF: .rdata:stru_1091507C↓o
stru_1091507C   TryBlockMapEntry <6, 6, 7, 1, offset stru_1091506C>
                                        ; DATA XREF: .rdata:stru_10915090↓o
stru_10915090   FuncInfo <19930522h, 8, offset stru_109150B4, 1, offset stru_1091507C,\
                                        ; DATA XREF: SEH_10902E30↑o
                          0, 0, 0, 1>
stru_109150B4   UnwindMapEntry <-1, offset loc_10910440>
                                        ; DATA XREF: .rdata:stru_10915090↑o
                UnwindMapEntry <-1, offset loc_1091044C>
                UnwindMapEntry <1, offset loc_1091046F>
                UnwindMapEntry <-1, offset loc_10910492>
                UnwindMapEntry <-1, offset loc_1091049E>
                UnwindMapEntry <-1, offset loc_109104AA>
                UnwindMapEntry <-1, 0>
                UnwindMapEntry <-1, 0>
stru_109150F4   UnwindMapEntry <-1, offset loc_109104C0>
                                        ; DATA XREF: .rdata:stru_109150FC↓o
stru_109150FC   FuncInfo <19930522h, 1, offset stru_109150F4, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_10903620↑o
stru_10915120   UnwindMapEntry <-1, offset loc_109104E0>
                                        ; DATA XREF: .rdata:stru_10915128↓o
stru_10915128   FuncInfo <19930522h, 1, offset stru_10915120, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_109036D0↑o
stru_1091514C   UnwindMapEntry <-1, offset loc_10910500>
                                        ; DATA XREF: .rdata:stru_10915154↓o
stru_10915154   FuncInfo <19930522h, 1, offset stru_1091514C, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_109038A0↑o
stru_10915178   UnwindMapEntry <-1, offset loc_10910520>
                                        ; DATA XREF: .rdata:stru_10915180↓o
stru_10915180   FuncInfo <19930522h, 1, offset stru_10915178, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_10903980↑o
stru_109151A4   UnwindMapEntry <-1, offset loc_10910540>
                                        ; DATA XREF: .rdata:stru_109151AC↓o
stru_109151AC   FuncInfo <19930522h, 1, offset stru_109151A4, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_10903B20↑o
stru_109151D0   UnwindMapEntry <-1, offset loc_10910560>
                                        ; DATA XREF: .rdata:stru_109151E0↓o
                UnwindMapEntry <0, offset loc_10910580>
stru_109151E0   FuncInfo <19930522h, 2, offset stru_109151D0, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_10903FD0↑o
stru_10915204   UnwindMapEntry <-1, offset sub_109105A0>
                                        ; DATA XREF: .rdata:stru_1091520C↓o
stru_1091520C   FuncInfo <19930522h, 1, offset stru_10915204, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: sub_109105A9↑o
stru_10915230   UnwindMapEntry <-1, offset loc_109105C0>
                                        ; DATA XREF: .rdata:stru_10915238↓o
stru_10915238   FuncInfo <19930522h, 1, offset stru_10915230, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_10904290↑o
stru_1091525C   UnwindMapEntry <-1, offset loc_109105E0>
                                        ; DATA XREF: .rdata:stru_1091526C↓o
                UnwindMapEntry <-1, offset loc_109105F2>
stru_1091526C   FuncInfo <19930522h, 2, offset stru_1091525C, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_10904310↑o
stru_10915290   UnwindMapEntry <-1, offset loc_10910610>
                                        ; DATA XREF: .rdata:stru_109152A0↓o
                UnwindMapEntry <-1, offset loc_10910622>
stru_109152A0   FuncInfo <19930522h, 2, offset stru_10915290, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_109045D0↑o
stru_109152C4   UnwindMapEntry <-1, offset loc_10910640>
                                        ; DATA XREF: .rdata:stru_109152CC↓o
stru_109152CC   FuncInfo <19930522h, 1, offset stru_109152C4, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_10904FB0↑o
stru_109152F0   UnwindMapEntry <-1, offset loc_10910660>
                                        ; DATA XREF: .rdata:stru_10915300↓o
                UnwindMapEntry <0, offset loc_10910669>
stru_10915300   FuncInfo <19930522h, 2, offset stru_109152F0, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_10905080↑o
stru_10915324   UnwindMapEntry <-1, offset loc_10910690>
                                        ; DATA XREF: .rdata:stru_1091532C↓o
stru_1091532C   FuncInfo <19930522h, 1, offset stru_10915324, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_109051A0↑o
stru_10915350   UnwindMapEntry <-1, offset loc_109106B0>
                                        ; DATA XREF: .rdata:stru_10915358↓o
stru_10915358   FuncInfo <19930522h, 1, offset stru_10915350, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_10905580↑o
stru_1091537C   UnwindMapEntry <-1, offset loc_109106D0>
                                        ; DATA XREF: .rdata:stru_10915384↓o
stru_10915384   FuncInfo <19930522h, 1, offset stru_1091537C, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_109057B0↑o
stru_109153A8   UnwindMapEntry <-1, offset loc_109106F0>
                                        ; DATA XREF: .rdata:stru_109153B0↓o
stru_109153B0   FuncInfo <19930522h, 1, offset stru_109153A8, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_10905860↑o
stru_109153D4   UnwindMapEntry <-1, offset loc_10910710>
                                        ; DATA XREF: .rdata:stru_109153DC↓o
stru_109153DC   FuncInfo <19930522h, 1, offset stru_109153D4, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_109058D0↑o
stru_10915400   FuncInfo <19930522h, 19, offset stru_10915424, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_10905920↑o
stru_10915424   UnwindMapEntry <-1, offset loc_10910855>
                                        ; DATA XREF: .rdata:stru_10915400↑o
                UnwindMapEntry <0, offset loc_10910730>
                UnwindMapEntry <1, offset loc_10910738>
                UnwindMapEntry <2, offset loc_10910741>
                UnwindMapEntry <3, offset loc_10910749>
                UnwindMapEntry <3, offset loc_1091075D>
                UnwindMapEntry <3, offset loc_10910771>
                UnwindMapEntry <6, offset loc_1091077D>
                UnwindMapEntry <3, offset loc_10910791>
                UnwindMapEntry <3, offset loc_109107A5>
                UnwindMapEntry <3, offset loc_109107B9>
                UnwindMapEntry <3, offset loc_109107CD>
                UnwindMapEntry <11, offset loc_109107D9>
                UnwindMapEntry <3, offset loc_109107ED>
                UnwindMapEntry <2, offset loc_10910801>
                UnwindMapEntry <14, offset loc_1091080D>
                UnwindMapEntry <14, offset loc_10910821>
                UnwindMapEntry <14, offset loc_1091082D>
                UnwindMapEntry <2, offset loc_10910841>
stru_109154BC   UnwindMapEntry <-1, offset loc_10910880>
                                        ; DATA XREF: .rdata:stru_109154D4↓o
                UnwindMapEntry <0, offset loc_1091088B>
                UnwindMapEntry <1, offset loc_10910897>
stru_109154D4   FuncInfo <19930522h, 3, offset stru_109154BC, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_10906100↑o
stru_109154F8   FuncInfo <19930522h, 5, offset stru_1091551C, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_109061B0↑o
stru_1091551C   UnwindMapEntry <-1, offset loc_109108B0>
                                        ; DATA XREF: .rdata:stru_109154F8↑o
                UnwindMapEntry <0, offset loc_109108B9>
                UnwindMapEntry <0, offset loc_109108C2>
                UnwindMapEntry <0, offset loc_109108CB>
                UnwindMapEntry <0, offset loc_109108D4>
stru_10915544   UnwindMapEntry <-1, offset loc_109108F0>
                                        ; DATA XREF: .rdata:stru_1091554C↓o
stru_1091554C   FuncInfo <19930522h, 1, offset stru_10915544, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_10906340↑o
stru_10915570   UnwindMapEntry <-1, offset loc_10910910>
                                        ; DATA XREF: .rdata:stru_10915580↓o
                UnwindMapEntry <-1, offset loc_1091091C>
stru_10915580   FuncInfo <19930522h, 2, offset stru_10915570, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_109063D0↑o
stru_109155A4   UnwindMapEntry <-1, offset loc_10910940>
                                        ; DATA XREF: .rdata:stru_109155BC↓o
                UnwindMapEntry <0, offset loc_1091094B>
                UnwindMapEntry <1, offset loc_10910957>
stru_109155BC   FuncInfo <19930522h, 3, offset stru_109155A4, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_10906670↑o
stru_109155E0   FuncInfo <19930522h, 6, offset stru_10915604, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_109066F0↑o
stru_10915604   UnwindMapEntry <-1, offset loc_10910970>
                                        ; DATA XREF: .rdata:stru_109155E0↑o
                UnwindMapEntry <0, offset loc_1091098F>
                UnwindMapEntry <1, offset loc_10910998>
                UnwindMapEntry <2, offset loc_109109A0>
                UnwindMapEntry <3, offset loc_109109A8>
                UnwindMapEntry <3, offset loc_109109B3>
stru_10915634   UnwindMapEntry <-1, offset loc_109109D0>
                                        ; DATA XREF: .rdata:stru_1091563C↓o
stru_1091563C   FuncInfo <19930522h, 1, offset stru_10915634, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_10906960↑o
stru_10915660   FuncInfo <19930522h, 13, offset stru_10915684, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_10906B60↑o
stru_10915684   UnwindMapEntry <-1, offset loc_109109F0>
                                        ; DATA XREF: .rdata:stru_10915660↑o
                UnwindMapEntry <0, offset loc_109109F9>
                UnwindMapEntry <-1, offset loc_109109F9>
                UnwindMapEntry <2, offset loc_10910A02>
                UnwindMapEntry <3, offset loc_10910A0A>
                UnwindMapEntry <4, offset loc_10910A13>
                UnwindMapEntry <2, offset loc_10910A48>
                UnwindMapEntry <3, offset loc_10910A1C>
                UnwindMapEntry <3, offset loc_10910A24>
                UnwindMapEntry <3, offset loc_10910A2D>
                UnwindMapEntry <9, offset loc_10910A36>
                UnwindMapEntry <2, offset loc_10910A51>
                UnwindMapEntry <2, offset loc_10910A3F>
stru_109156EC   UnwindMapEntry <-1, offset loc_10910A70>
                                        ; DATA XREF: .rdata:stru_109156F4↓o
stru_109156F4   FuncInfo <19930522h, 1, offset stru_109156EC, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_10906FF0↑o
stru_10915718   UnwindMapEntry <-1, offset loc_10910A90>
                                        ; DATA XREF: .rdata:stru_10915720↓o
stru_10915720   FuncInfo <19930522h, 1, offset stru_10915718, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_109070D0↑o
stru_10915744   UnwindMapEntry <-1, offset sub_10910AB0>
                                        ; DATA XREF: .rdata:stru_1091574C↓o
stru_1091574C   FuncInfo <19930522h, 1, offset stru_10915744, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: sub_10910ABC↑o
stru_10915770   UnwindMapEntry <-1, offset sub_10910AD0>
                                        ; DATA XREF: .rdata:stru_10915778↓o
stru_10915778   FuncInfo <19930522h, 1, offset stru_10915770, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: sub_10910ADC↑o
stru_1091579C   UnwindMapEntry <-1, offset loc_10910AF0>
                                        ; DATA XREF: .rdata:stru_109157A4↓o
stru_109157A4   FuncInfo <19930522h, 1, offset stru_1091579C, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_109072B0↑o
stru_109157C8   UnwindMapEntry <-1, offset loc_10910B10>
                                        ; DATA XREF: .rdata:stru_109157D0↓o
stru_109157D0   FuncInfo <19930522h, 1, offset stru_109157C8, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_10907370↑o
stru_109157F4   UnwindMapEntry <-1, offset loc_10910B30>
                                        ; DATA XREF: .rdata:stru_109157FC↓o
stru_109157FC   FuncInfo <19930522h, 1, offset stru_109157F4, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_109073D0↑o
stru_10915820   UnwindMapEntry <-1, offset sub_10910B50>
                                        ; DATA XREF: .rdata:stru_10915828↓o
stru_10915828   FuncInfo <19930522h, 1, offset stru_10915820, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: sub_10910B5C↑o
stru_1091584C   UnwindMapEntry <-1, offset sub_10910B70>
                                        ; DATA XREF: .rdata:stru_10915854↓o
stru_10915854   FuncInfo <19930522h, 1, offset stru_1091584C, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: sub_10910B7C↑o
stru_10915878   UnwindMapEntry <-1, offset loc_10910B90>
                                        ; DATA XREF: .rdata:stru_10915880↓o
stru_10915880   FuncInfo <19930522h, 1, offset stru_10915878, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_10907570↑o
stru_109158A4   UnwindMapEntry <-1, offset loc_10910BB0>
                                        ; DATA XREF: .rdata:stru_109158AC↓o
stru_109158AC   FuncInfo <19930522h, 1, offset stru_109158A4, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_10907630↑o
stru_109158D0   UnwindMapEntry <-1, offset sub_10910BD0>
                                        ; DATA XREF: .rdata:stru_109158D8↓o
stru_109158D8   FuncInfo <19930522h, 1, offset stru_109158D0, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: sub_10910BD8↑o
stru_109158FC   UnwindMapEntry <-1, offset loc_10910BF0>
                                        ; DATA XREF: .rdata:stru_10915904↓o
stru_10915904   FuncInfo <19930522h, 1, offset stru_109158FC, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_10907700↑o
stru_10915928   UnwindMapEntry <-1, offset sub_10910C10>
                                        ; DATA XREF: .rdata:stru_10915930↓o
stru_10915930   FuncInfo <19930522h, 1, offset stru_10915928, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: sub_10910C18↑o
stru_10915954   UnwindMapEntry <-1, offset sub_10910C30>
                                        ; DATA XREF: .rdata:stru_1091595C↓o
stru_1091595C   FuncInfo <19930522h, 1, offset stru_10915954, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: sub_10910C38↑o
stru_10915980   FuncInfo <19930522h, 5, offset stru_109159A4, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_109078B0↑o
stru_109159A4   UnwindMapEntry <-1, offset loc_10910C50>
                                        ; DATA XREF: .rdata:stru_10915980↑o
                UnwindMapEntry <0, offset loc_10910C58>
                UnwindMapEntry <0, offset loc_10910C60>
                UnwindMapEntry <2, offset loc_10910C6B>
                UnwindMapEntry <3, offset loc_10910C77>
stru_109159CC   UnwindMapEntry <-1, offset loc_10910C90>
                                        ; DATA XREF: .rdata:stru_109159E4↓o
                UnwindMapEntry <-1, offset loc_10910C99>
                UnwindMapEntry <-1, offset loc_10910CA2>
stru_109159E4   FuncInfo <19930522h, 3, offset stru_109159CC, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_10907980↑o
stru_10915A08   UnwindMapEntry <-1, offset sub_10910CC0>
                                        ; DATA XREF: .rdata:stru_10915A10↓o
stru_10915A10   FuncInfo <19930522h, 1, offset stru_10915A08, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: sub_10910CCC↑o
stru_10915A34   UnwindMapEntry <-1, offset sub_10910CE0>
                                        ; DATA XREF: .rdata:stru_10915A3C↓o
stru_10915A3C   FuncInfo <19930522h, 1, offset stru_10915A34, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: sub_10910CEC↑o
stru_10915A60   UnwindMapEntry <-1, offset loc_10910D00>
                                        ; DATA XREF: .rdata:stru_10915A68↓o
stru_10915A68   FuncInfo <19930522h, 1, offset stru_10915A60, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_109080E0↑o
stru_10915A8C   UnwindMapEntry <-1, offset loc_10910D20>
                                        ; DATA XREF: .rdata:stru_10915A9C↓o
                UnwindMapEntry <0, offset loc_10910D29>
stru_10915A9C   FuncInfo <19930522h, 2, offset stru_10915A8C, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_10908AA0↑o
stru_10915AC0   FuncInfo <19930522h, 5, offset stru_10915AE4, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_10908D00↑o
stru_10915AE4   UnwindMapEntry <-1, offset loc_10910D50>
                                        ; DATA XREF: .rdata:stru_10915AC0↑o
                UnwindMapEntry <0, offset loc_10910D59>
                UnwindMapEntry <0, offset loc_10910D62>
                UnwindMapEntry <0, offset loc_10910D6B>
                UnwindMapEntry <0, offset loc_10910D74>
stru_10915B0C   UnwindMapEntry <-1, offset loc_10910D90>
                                        ; DATA XREF: .rdata:stru_10915B1C↓o
                UnwindMapEntry <-1, offset loc_10910D99>
stru_10915B1C   FuncInfo <19930522h, 2, offset stru_10915B0C, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_10909010↑o
stru_10915B40   UnwindMapEntry <-1, offset loc_10910DB0>
                                        ; DATA XREF: .rdata:stru_10915B60↓o
                UnwindMapEntry <0, offset loc_10910DB9>
                UnwindMapEntry <1, offset loc_10910DC2>
                UnwindMapEntry <0, offset loc_10910DCB>
stru_10915B60   FuncInfo <19930522h, 4, offset stru_10915B40, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_109091E0↑o
stru_10915B84   UnwindMapEntry <-1, offset loc_10910DE0>
                                        ; DATA XREF: .rdata:stru_10915B94↓o
                UnwindMapEntry <0, offset loc_10910DF1>
stru_10915B94   FuncInfo <19930522h, 2, offset stru_10915B84, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_109094A0↑o
stru_10915BB8   UnwindMapEntry <-1, offset loc_10910E10>
                                        ; DATA XREF: .rdata:stru_10915BC0↓o
stru_10915BC0   FuncInfo <19930522h, 1, offset stru_10915BB8, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_109095C0↑o
stru_10915BE4   FuncInfo <19930522h, 7, offset stru_10915C08, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_10909650↑o
stru_10915C08   UnwindMapEntry <-1, offset loc_10910E64>
                                        ; DATA XREF: .rdata:stru_10915BE4↑o
                UnwindMapEntry <0, offset loc_10910E30>
                UnwindMapEntry <1, offset loc_10910E38>
                UnwindMapEntry <2, offset loc_10910E41>
                UnwindMapEntry <3, offset loc_10910E4A>
                UnwindMapEntry <4, offset loc_10910E53>
                UnwindMapEntry <2, offset loc_10910E5C>
stru_10915C40   UnwindMapEntry <-1, offset loc_10910E90>
                                        ; DATA XREF: .rdata:stru_10915C48↓o
stru_10915C48   FuncInfo <19930522h, 1, offset stru_10915C40, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_109098C0↑o
stru_10915C6C   UnwindMapEntry <-1, offset loc_10910EB0>
                                        ; DATA XREF: .rdata:stru_10915C7C↓o
                UnwindMapEntry <0, offset loc_10910EC1>
stru_10915C7C   FuncInfo <19930522h, 2, offset stru_10915C6C, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_10909930↑o
stru_10915CA0   UnwindMapEntry <-1, offset loc_10910EE0>
                                        ; DATA XREF: .rdata:stru_10915CA8↓o
stru_10915CA8   FuncInfo <19930522h, 1, offset stru_10915CA0, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_10909B10↑o
stru_10915CCC   UnwindMapEntry <-1, offset loc_10910F00>
                                        ; DATA XREF: .rdata:stru_10915CD4↓o
stru_10915CD4   FuncInfo <19930522h, 1, offset stru_10915CCC, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_10909B60↑o
stru_10915CF8   UnwindMapEntry <-1, offset sub_10910F20>
                                        ; DATA XREF: .rdata:stru_10915D00↓o
stru_10915D00   FuncInfo <19930522h, 1, offset stru_10915CF8, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: sub_10910F28↑o
stru_10915D24   UnwindMapEntry <-1, offset sub_10910F40>
                                        ; DATA XREF: .rdata:stru_10915D2C↓o
stru_10915D2C   FuncInfo <19930522h, 1, offset stru_10915D24, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: sub_10910F48↑o
stru_10915D50   UnwindMapEntry <-1, offset sub_10910F60>
                                        ; DATA XREF: .rdata:stru_10915D60↓o
                UnwindMapEntry <0, offset sub_10910F6C>
stru_10915D60   FuncInfo <19930522h, 2, offset stru_10915D50, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: sub_10910F74↑o
stru_10915D84   UnwindMapEntry <-1, offset sub_10910F80>
                                        ; DATA XREF: .rdata:stru_10915D8C↓o
stru_10915D8C   FuncInfo <19930522h, 1, offset stru_10915D84, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: sub_10910F8C↑o
stru_10915DB0   UnwindMapEntry <-1, offset loc_10910FA0>
                                        ; DATA XREF: .rdata:stru_10915DC0↓o
                UnwindMapEntry <0, offset loc_10910FAC>
stru_10915DC0   FuncInfo <19930522h, 2, offset stru_10915DB0, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_10909F80↑o
stru_10915DE4   UnwindMapEntry <-1, offset loc_10910FC0>
                                        ; DATA XREF: .rdata:stru_10915DF4↓o
                UnwindMapEntry <0, offset loc_10910FD1>
stru_10915DF4   FuncInfo <19930522h, 2, offset stru_10915DE4, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_1090A020↑o
stru_10915E18   UnwindMapEntry <-1, offset loc_10910FF0>
                                        ; DATA XREF: .rdata:stru_10915E20↓o
stru_10915E20   FuncInfo <19930522h, 1, offset stru_10915E18, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_1090A290↑o
stru_10915E44   UnwindMapEntry <-1, offset loc_10911010>
                                        ; DATA XREF: .rdata:stru_10915E5C↓o
                UnwindMapEntry <0, offset loc_10911019>
                UnwindMapEntry <1, offset loc_1091102A>
stru_10915E5C   FuncInfo <19930522h, 3, offset stru_10915E44, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_1090A350↑o
stru_10915E80   UnwindMapEntry <-1, offset loc_10911040>
                                        ; DATA XREF: .rdata:stru_10915E90↓o
                UnwindMapEntry <0, offset loc_10911051>
stru_10915E90   FuncInfo <19930522h, 2, offset stru_10915E80, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_1090A510↑o
stru_10915EB4   UnwindMapEntry <-1, offset loc_10911070>
                                        ; DATA XREF: .rdata:stru_10915EBC↓o
stru_10915EBC   FuncInfo <19930522h, 1, offset stru_10915EB4, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_1090A6E0↑o
stru_10915EE0   UnwindMapEntry <-1, offset loc_10911090>
                                        ; DATA XREF: .rdata:stru_10915EE8↓o
stru_10915EE8   FuncInfo <19930522h, 1, offset stru_10915EE0, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_1090A780↑o
stru_10915F0C   UnwindMapEntry <-1, offset loc_109110B0>
                                        ; DATA XREF: .rdata:stru_10915F14↓o
stru_10915F14   FuncInfo <19930522h, 1, offset stru_10915F0C, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_1090A890↑o
stru_10915F38   UnwindMapEntry <-1, offset loc_109110D0>
                                        ; DATA XREF: .rdata:stru_10915F58↓o
                UnwindMapEntry <0, offset loc_109110D9>
                UnwindMapEntry <1, offset loc_109110E2>
                UnwindMapEntry <1, offset loc_109110EB>
stru_10915F58   FuncInfo <19930522h, 4, offset stru_10915F38, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_1090A940↑o
stru_10915F7C   UnwindMapEntry <-1, offset sub_10911100>
                                        ; DATA XREF: .rdata:stru_10915F84↓o
stru_10915F84   FuncInfo <19930522h, 1, offset stru_10915F7C, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: sub_10911108↑o
stru_10915FA8   UnwindMapEntry <-1, offset sub_10911120>
                                        ; DATA XREF: .rdata:stru_10915FB0↓o
stru_10915FB0   FuncInfo <19930522h, 1, offset stru_10915FA8, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: sub_10911128↑o
stru_10915FD4   UnwindMapEntry <-1, offset loc_10911140>
                                        ; DATA XREF: .rdata:stru_10915FDC↓o
stru_10915FDC   FuncInfo <19930522h, 1, offset stru_10915FD4, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_1090AF00↑o
stru_10916000   UnwindMapEntry <-1, offset sub_10911160>
                                        ; DATA XREF: .rdata:stru_10916008↓o
stru_10916008   FuncInfo <19930522h, 1, offset stru_10916000, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: sub_1091116C↑o
stru_1091602C   UnwindMapEntry <-1, offset loc_10911180>
                                        ; DATA XREF: .rdata:stru_10916034↓o
stru_10916034   FuncInfo <19930522h, 1, offset stru_1091602C, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_1090B080↑o
stru_10916058   UnwindMapEntry <-1, offset loc_109111A0>
                                        ; DATA XREF: .rdata:stru_10916060↓o
stru_10916060   FuncInfo <19930522h, 1, offset stru_10916058, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_1090B1C0↑o
stru_10916084   UnwindMapEntry <-1, offset sub_109111C0>
                                        ; DATA XREF: .rdata:stru_1091608C↓o
stru_1091608C   FuncInfo <19930522h, 1, offset stru_10916084, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: sub_109111CC↑o
stru_109160B0   UnwindMapEntry <-1, offset loc_109111E0>
                                        ; DATA XREF: .rdata:stru_109160C0↓o
                UnwindMapEntry <0, offset loc_109111F1>
stru_109160C0   FuncInfo <19930522h, 2, offset stru_109160B0, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_1090B3A0↑o
stru_109160E4   UnwindMapEntry <-1, offset loc_10911210>
                                        ; DATA XREF: .rdata:stru_109160F4↓o
                UnwindMapEntry <0, offset loc_10911221>
stru_109160F4   FuncInfo <19930522h, 2, offset stru_109160E4, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_1090B4E0↑o
stru_10916118   FuncInfo <19930522h, 6, offset stru_1091613C, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_1090B840↑o
stru_1091613C   UnwindMapEntry <-1, offset loc_10911240>
                                        ; DATA XREF: .rdata:stru_10916118↑o
                UnwindMapEntry <0, offset loc_1091124C>
                UnwindMapEntry <1, offset loc_10911258>
                UnwindMapEntry <0, offset loc_10911264>
                UnwindMapEntry <0, offset loc_10911270>
                UnwindMapEntry <4, offset loc_1091127B>
stru_1091616C   FuncInfo <19930522h, 11, offset stru_10916190, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_1090BE40↑o
stru_10916190   UnwindMapEntry <-1, offset loc_109112A0>
                                        ; DATA XREF: .rdata:stru_1091616C↑o
                UnwindMapEntry <0, offset loc_109112A9>
                UnwindMapEntry <1, offset loc_109112B2>
                UnwindMapEntry <0, offset loc_109112BB>
                UnwindMapEntry <3, offset loc_109112C4>
                UnwindMapEntry <3, offset loc_109112CD>
                UnwindMapEntry <5, offset loc_109112D6>
                UnwindMapEntry <3, offset loc_109112F9>
                UnwindMapEntry <3, offset loc_10911305>
                UnwindMapEntry <8, offset loc_1091130E>
                UnwindMapEntry <3, offset loc_10911331>
stru_109161E8   UnwindMapEntry <-1, offset loc_10911350>
                                        ; DATA XREF: .rdata:stru_109161F8↓o
                UnwindMapEntry <-1, offset loc_10911359>
stru_109161F8   FuncInfo <19930522h, 2, offset stru_109161E8, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_1090C4B0↑o
stru_1091621C   UnwindMapEntry <-1, offset loc_10911370>
                                        ; DATA XREF: .rdata:stru_10916224↓o
stru_10916224   FuncInfo <19930522h, 1, offset stru_1091621C, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_1090C5D0↑o
stru_10916248   UnwindMapEntry <-1, offset loc_10911390>
                                        ; DATA XREF: .rdata:stru_10916258↓o
                UnwindMapEntry <-1, offset loc_10911399>
stru_10916258   FuncInfo <19930522h, 2, offset stru_10916248, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_1090C7B0↑o
stru_1091627C   UnwindMapEntry <-1, offset loc_109113B0>
                                        ; DATA XREF: .rdata:stru_10916294↓o
                UnwindMapEntry <-1, offset loc_109113B9>
                UnwindMapEntry <-1, offset loc_109113C1>
stru_10916294   FuncInfo <19930522h, 3, offset stru_1091627C, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_1090C8B0↑o
stru_109162B8   UnwindMapEntry <-1, offset loc_109113E0>
                                        ; DATA XREF: .rdata:stru_109162C0↓o
stru_109162C0   FuncInfo <19930522h, 1, offset stru_109162B8, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_1090CAC0↑o
stru_109162E4   FuncInfo <19930522h, 6, offset stru_10916308, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_1090CBA0↑o
stru_10916308   UnwindMapEntry <-1, offset loc_10911400>
                                        ; DATA XREF: .rdata:stru_109162E4↑o
                UnwindMapEntry <0, offset loc_10911409>
                UnwindMapEntry <1, offset loc_10911412>
                UnwindMapEntry <2, offset loc_1091141A>
                UnwindMapEntry <1, offset loc_10911423>
                UnwindMapEntry <4, offset loc_1091142B>
stru_10916338   FuncInfo <19930522h, 5, offset stru_1091635C, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_1090CDC0↑o
stru_1091635C   UnwindMapEntry <-1, offset loc_10911440>
                                        ; DATA XREF: .rdata:stru_10916338↑o
                UnwindMapEntry <0, offset loc_1091144B>
                UnwindMapEntry <1, offset loc_10911459>
                UnwindMapEntry <2, offset loc_10911468>
                UnwindMapEntry <3, offset loc_10911477>
stru_10916384   UnwindMapEntry <-1, offset loc_10911490>
                                        ; DATA XREF: .rdata:stru_1091638C↓o
stru_1091638C   FuncInfo <19930522h, 1, offset stru_10916384, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_1090CEE0↑o
stru_109163B0   FuncInfo <19930522h, 10, offset stru_109163D4, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_1090CF60↑o
stru_109163D4   UnwindMapEntry <-1, offset loc_109114C0>
                                        ; DATA XREF: .rdata:stru_109163B0↑o
                UnwindMapEntry <0, offset loc_109114C9>
                UnwindMapEntry <1, offset loc_109114D2>
                UnwindMapEntry <2, offset loc_109114DB>
                UnwindMapEntry <2, offset loc_109114E7>
                UnwindMapEntry <4, offset loc_109114F0>
                UnwindMapEntry <2, offset loc_109114FC>
                UnwindMapEntry <6, offset loc_10911507>
                UnwindMapEntry <2, offset loc_10911513>
                UnwindMapEntry <8, offset loc_1091151E>
stru_10916424   FuncInfo <19930522h, 12, offset stru_10916448, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_1090D430↑o
stru_10916448   UnwindMapEntry <-1, offset loc_10911540>
                                        ; DATA XREF: .rdata:stru_10916424↑o
                UnwindMapEntry <0, offset loc_10911548>
                UnwindMapEntry <1, offset loc_10911551>
                UnwindMapEntry <2, offset loc_10911574>
                UnwindMapEntry <3, offset loc_10911597>
                UnwindMapEntry <4, offset loc_109115BA>
                UnwindMapEntry <1, offset loc_109115DD>
                UnwindMapEntry <6, offset loc_10911600>
                UnwindMapEntry <1, offset loc_10911623>
                UnwindMapEntry <8, offset loc_10911646>
                UnwindMapEntry <0, offset loc_1091166E>
                UnwindMapEntry <10, offset loc_10911677>
stru_109164A8   FuncInfo <19930522h, 15, offset stru_109164CC, 0, 0, 0, 0, 0, 1>
                                        ; DATA XREF: SEH_1090ECE0↑o
stru_109164CC   UnwindMapEntry <-1, offset loc_10911690>
                                        ; DATA XREF: .rdata:stru_109164A8↑o
                UnwindMapEntry <0, offset loc_10911698>
                UnwindMapEntry <1, offset loc_109116A1>
                UnwindMapEntry <2, offset loc_109116A9>
                UnwindMapEntry <2, offset loc_109116B2>
                UnwindMapEntry <2, offset loc_109116BB>
                UnwindMapEntry <2, offset loc_109116C4>
                UnwindMapEntry <2, offset loc_109116CD>
                UnwindMapEntry <2, offset loc_109116D6>
                UnwindMapEntry <2, offset loc_109116E2>
                UnwindMapEntry <2, offset loc_109116EE>
                UnwindMapEntry <2, offset loc_109116FA>
                UnwindMapEntry <2, offset loc_10911706>
                UnwindMapEntry <12, offset loc_10911712>
                UnwindMapEntry <2, offset loc_1091171D>
                align 8
stru_10916548   dd 0FFFFFFFEh           ; GSCookieOffset
                                        ; DATA XREF: __onexit+2↑o
                dd 0                    ; GSCookieXOROffset ; SEH scope table for function 1090F96C
                dd 0FFFFFFCCh           ; EHCookieOffset
                dd 0                    ; EHCookieXOROffset
                dd 0FFFFFFFEh           ; ScopeRecord.EnclosingLevel
                dd 0                    ; ScopeRecord.FilterFunc
                dd offset loc_1090FA08  ; ScopeRecord.HandlerFunc
                align 8
stru_10916568   dd 0FFFFFFFEh           ; GSCookieOffset
                                        ; DATA XREF: ___tmainCRTStartup+2↑o
                dd 0                    ; GSCookieXOROffset ; SEH scope table for function 1090FA7A
                dd 0FFFFFF88h           ; EHCookieOffset
                dd 0                    ; EHCookieXOROffset
                dd 0FFFFFFFEh           ; ScopeRecord.EnclosingLevel
                dd offset $LN60         ; ScopeRecord.FilterFunc
                dd offset $LN32         ; ScopeRecord.HandlerFunc
                dd 0FFFFFFFEh           ; ScopeRecord.EnclosingLevel
                dd offset $LN59         ; ScopeRecord.FilterFunc
                dd offset $LN36         ; ScopeRecord.HandlerFunc
stru_10916590   dd 0FFFFFFFEh           ; GSCookieOffset
                                        ; DATA XREF: __ArrayUnwind(void *,uint,int,void (*)(void *))+2↑o
                dd 0                    ; GSCookieXOROffset ; SEH scope table for function 1090FDB5
                dd 0FFFFFFCCh           ; EHCookieOffset
                dd 0                    ; EHCookieXOROffset
                dd 0FFFFFFFEh           ; ScopeRecord.EnclosingLevel
                dd offset loc_1090FDD8  ; ScopeRecord.FilterFunc
                dd offset loc_1090FE01  ; ScopeRecord.HandlerFunc
                align 10h
stru_109165B0   dd 0FFFFFFFEh           ; GSCookieOffset
                                        ; DATA XREF: `eh vector destructor iterator'(void *,uint,int,void (*)(void *))+2↑o
                dd 0                    ; GSCookieXOROffset ; SEH scope table for function 1090FE13
                dd 0FFFFFFD4h           ; EHCookieOffset
                dd 0                    ; EHCookieXOROffset
                dd 0FFFFFFFEh           ; ScopeRecord.EnclosingLevel
                dd 0                    ; ScopeRecord.FilterFunc
                dd offset loc_1090FE5E  ; ScopeRecord.HandlerFunc
                align 10h
stru_109165D0   dd 0FFFFFFFEh           ; GSCookieOffset
                                        ; DATA XREF: __IsNonwritableInCurrentImage+7↑o
                dd 0                    ; GSCookieXOROffset ; SEH scope table for function 10910070
                dd 0FFFFFFD8h           ; EHCookieOffset
                dd 0                    ; EHCookieXOROffset
                dd 0FFFFFFFEh           ; ScopeRecord.EnclosingLevel
                dd offset loc_109100FB  ; ScopeRecord.FilterFunc
                dd offset loc_1091010F  ; ScopeRecord.HandlerFunc
__IMPORT_DESCRIPTOR_KERNEL32 dd rva off_109168BC ; Import Name Table
                dd 0                    ; Time stamp
                dd 0                    ; Forwarder Chain
                dd rva aKernel32Dll     ; DLL Name
                dd rva IsDebuggerPresent ; Import Address Table
__IMPORT_DESCRIPTOR_USER32 dd rva off_10916A3C ; Import Name Table
                dd 0                    ; Time stamp
                dd 0                    ; Forwarder Chain
                dd rva aUser32Dll       ; DLL Name
                dd rva DispatchMessageW ; Import Address Table
__IMPORT_DESCRIPTOR_dnAnimation dd rva off_10916A70 ; Import Name Table
                dd 0                    ; Time stamp
                dd 0                    ; Forwarder Chain
                dd rva aDnanimationDll  ; DLL Name
                dd rva g_CompiledAnims  ; Import Address Table
__IMPORT_DESCRIPTOR_3DRDebugLib dd rva off_109166C8 ; Import Name Table
                dd 0                    ; Time stamp
                dd 0                    ; Forwarder Chain
                dd rva a3drdebuglibDll  ; DLL Name
                dd rva __imp__SetAssertionFailedHandler ; Import Address Table
__IMPORT_DESCRIPTOR_meqon dd rva off_10916D3C ; Import Name Table
                dd 0                    ; Time stamp
                dd 0                    ; Forwarder Chain
                dd rva aMeqonDll        ; DLL Name
                dd rva ??0Frame@meq@@QAE@XZ ; Import Address Table
__IMPORT_DESCRIPTOR_BugHandler dd rva off_109166D8 ; Import Name Table
                dd 0                    ; Time stamp
                dd 0                    ; Forwarder Chain
                dd rva aBughandlerDll   ; DLL Name
                dd rva _SetCrashHandlerFilter@4 ; Import Address Table
__IMPORT_DESCRIPTOR_Engine dd rva off_109166E8 ; Import Name Table
                dd 0                    ; Time stamp
                dd 0                    ; Forwarder Chain
                dd rva aEngineDll       ; DLL Name
                dd rva __imp_?OnRightButtonUp@WWindow@@UAEXXZ ; Import Address Table
__IMPORT_DESCRIPTOR_dnCommon dd rva off_10916A78 ; Import Name Table
                dd 0                    ; Time stamp
                dd 0                    ; Forwarder Chain
                dd rva aDncommonDll     ; DLL Name
                dd rva __imp_?SerializeMaterial@dnArchive@@UAEHAAPAVUMaterialEx@@PAVdnName@@@Z ; Import Address Table
__IMPORT_DESCRIPTOR_COMCTL32 dd rva dword_109166E0 ; Import Name Table
                dd 0                    ; Time stamp
                dd 0                    ; Forwarder Chain
                dd rva aComctl32Dll     ; DLL Name
                dd rva InitCommonControls ; Import Address Table
__IMPORT_DESCRIPTOR_MSVCR90 dd rva off_10916990 ; Import Name Table
                dd 0                    ; Time stamp
                dd 0                    ; Forwarder Chain
                dd rva aMsvcr90Dll      ; DLL Name
                dd rva exit             ; Import Address Table
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
;
; Import names for 3DRDebugLib.dll
;
off_109166C8    dd rva word_10917128    ; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_3DRDebugLib↑o
                dd rva word_10917108
                dd rva word_109170EC
                dd 0
;
; Import names for BugHandler.dll
;
off_109166D8    dd rva word_109171E0    ; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_BugHandler↑o
                dd 0
;
; Import names for COMCTL32.dll
;
dword_109166E0  dd 80000011h            ; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_COMCTL32↑o
                dd 0
;
; Import names for Engine.dll
;
off_109166E8    dd rva word_10918150    ; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_Engine↑o
                dd rva word_1091812E
                dd rva word_10918108
                dd rva word_109180E4
                dd rva word_109180BA
                dd rva word_10918098
                dd rva word_10918074
                dd rva word_10918058
                dd rva word_10918038
                dd rva word_10918018
                dd rva word_10917FF8
                dd rva word_10917FD8
                dd rva word_10917FB8
                dd rva word_10917F7E
                dd rva word_10917F4A
                dd rva word_10917F30
                dd rva word_10917F14
                dd rva word_10917EF6
                dd rva word_10917ED6
                dd rva word_10917EB6
                dd rva word_10917E9C
                dd rva word_10918174
                dd rva word_10917E62
                dd rva word_10917E48
                dd rva word_109181D2
                dd rva word_10917E0E
                dd rva word_10917DE8
                dd rva word_10917DCC
                dd rva word_10917DAC
                dd rva word_10917D8A
                dd rva word_10917D6E
                dd rva word_10917D4E
                dd rva word_10917D24
                dd rva word_10917CF8
                dd rva word_10917CBC
                dd rva word_10917C9E
                dd rva word_10917C82
                dd rva word_10917C5A
                dd rva word_10917C32
                dd rva word_10917C04
                dd rva word_10917BDE
                dd rva word_10917BC2
                dd rva word_10917B9A
                dd rva word_10917B7C
                dd rva word_10917E7E
                dd rva word_109181B2
                dd rva word_109181F2
                dd rva word_1091820A
                dd rva word_10918224
                dd rva word_10918260
                dd rva word_10917B5A
                dd rva word_109182E4
                dd rva word_109182D2
                dd rva word_109182B6
                dd rva word_10917E2E
                dd rva word_109175E6
                dd rva word_1091720C
                dd rva word_10917228
                dd rva word_10917248
                dd rva word_1091726E
                dd rva word_10917298
                dd rva word_109172BC
                dd rva word_109172DA
                dd rva word_1091730E
                dd rva word_10917330
                dd rva word_10917350
                dd rva word_1091738A
                dd rva word_109173A8
                dd rva word_109173C8
                dd rva word_109173EE
                dd rva word_10917410
                dd rva word_1091744E
                dd rva word_10917468
                dd rva word_109174A8
                dd rva word_109174CA
                dd rva word_109174E4
                dd rva word_10917510
                dd rva word_10917546
                dd rva word_10917586
                dd rva word_109175C4
                dd rva word_10918296
                dd rva word_109175F8
                dd rva word_1091760E
                dd rva word_10917626
                dd rva word_10917646
                dd rva word_10917674
                dd rva word_1091769A
                dd rva word_109176CA
                dd rva word_109176F8
                dd rva word_1091771E
                dd rva word_10917756
                dd rva word_10917784
                dd rva word_1091779A
                dd rva word_109177BC
                dd rva word_109177DA
                dd rva word_109177F8
                dd rva word_10917818
                dd rva word_10917846
                dd rva word_10917864
                dd rva word_10917880
                dd rva word_109178BC
                dd rva word_109178D4
                dd rva word_109178F0
                dd rva word_10917908
                dd rva word_10917928
                dd rva word_1091793E
                dd rva word_109179C8
                dd rva word_109179DC
                dd rva word_109179FA
                dd rva word_10917A1E
                dd rva word_10917A4C
                dd rva word_10917A7E
                dd rva word_10917AC6
                dd rva word_10917AE8
                dd rva word_10917B0A
                dd rva word_10917B2E
                dd 0
;
; Import names for KERNEL32.dll
;
off_109168BC    dd rva word_10919FB4    ; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_KERNEL32↑o
                dd rva word_10919E94
                dd rva word_10919EAA
                dd rva word_10919EB2
                dd rva word_10919ED0
                dd rva word_10919EE2
                dd rva word_10919F00
                dd rva word_10919F1A
                dd rva word_10919F2A
                dd rva word_10919F40
                dd rva word_10919F56
                dd rva word_10919F70
                dd rva word_10919F84
                dd rva word_10919F98
                dd rva word_10916FE8
                dd rva word_10916FD6
                dd rva word_10916FC6
                dd rva word_10916FB6
                dd rva word_10916FA2
                dd rva word_10916F8E
                dd rva word_10916F7C
                dd rva word_10916F6C
                dd rva word_10916F60
                dd rva word_10916F4C
                dd rva word_10916F38
                dd rva word_10916F2C
                dd rva word_10916F20
                dd rva word_10916F08
                dd rva word_10916EF0
                dd rva word_10916ED8
                dd rva word_10916EC0
                dd rva word_10916EB4
                dd rva word_10916EA8
                dd rva word_10916E92
                dd rva word_10916E7C
                dd rva word_10916E6E
                dd rva word_10916E60
                dd rva word_10916E50
                dd rva word_10916E42
                dd rva word_10916E34
                dd rva word_10916E26
                dd rva word_10916E1A
                dd rva word_10916E0C
                dd rva word_10916DFA
                dd rva word_10916DE4
                dd rva word_10916DCC
                dd rva word_10916DB6
                dd rva word_10916DA0
                dd rva word_10916D88
                dd rva word_10916D72
                dd rva word_10916D66
                dd rva word_10916D50
                dd 0
;
; Import names for MSVCR90.dll
;
off_10916990    dd rva word_10919D62    ; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_MSVCR90↑o
                dd rva word_10919C28
                dd rva word_10919C3E
                dd rva word_10919C4C
                dd rva word_10919C58
                dd rva word_10919C62
                dd rva word_10919C6C
                dd rva word_10919C78
                dd rva word_10919C84
                dd rva word_10919C8E
                dd rva word_10919C98
                dd rva word_10919E7E
                dd rva word_10919E6E
                dd rva word_10919E5C
                dd rva word_10919E42
                dd rva word_10919E0C
                dd rva word_10919DF8
                dd rva word_10919DE6
                dd rva word_10919DD8
                dd rva word_10919DC8
                dd rva word_10919DB8
                dd rva word_10919DA4
                dd rva word_10919D8E
                dd rva word_10919D80
                dd rva word_10919D74
                dd rva word_10919D6A
                dd rva word_10919C20
                dd rva word_10919D54
                dd rva word_10919D46
                dd rva word_10919D3E
                dd rva word_10919CA2
                dd rva word_10919D34
                dd rva word_10919D24
                dd rva word_10919D16
                dd rva word_10919D04
                dd rva word_10919CFA
                dd rva word_10919CF2
                dd rva word_10919CE0
                dd rva word_10919CD2
                dd rva word_10919CC8
                dd rva word_10919CB4
                dd rva word_10919CAC
                dd 0
;
; Import names for USER32.dll
;
off_10916A3C    dd rva word_10917034    ; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_USER32↑o
                dd rva word_109170B2
                dd rva word_109170A6
                dd rva word_10917098
                dd rva word_1091708A
                dd rva word_1091707C
                dd rva word_1091706C
                dd rva word_10917024
                dd rva word_10917014
                dd rva word_10917006
                dd rva word_10917048
                dd rva word_1091705C
                dd 0
;
; Import names for dnAnimation.dll
;
off_10916A70    dd rva word_109170CA    ; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_dnAnimation↑o
                dd 0
;
; Import names for dnCommon.dll
;
off_10916A78    dd rva word_10918992    ; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_dnCommon↑o
                dd rva word_109189D6
                dd rva word_109189FE
                dd rva word_10918A2A
                dd rva word_10918A48
                dd rva word_10918A68
                dd rva word_10918A88
                dd rva word_10918AAE
                dd rva word_10918ACA
                dd rva word_10918AE8
                dd rva word_10918B20
                dd rva word_10918B58
                dd rva word_10918B98
                dd rva word_10918BD8
                dd rva word_10918BF8
                dd rva word_10918C16
                dd rva word_10918C38
                dd rva word_10918C54
                dd rva word_10918C7A
                dd rva word_10918CA0
                dd rva word_10918CBA
                dd rva word_10918CD6
                dd rva word_10918D0E
                dd rva word_10918D46
                dd rva word_10918D86
                dd rva word_10918DB2
                dd rva word_10918DD8
                dd rva word_10918E04
                dd rva word_10918E2A
                dd rva word_10918E44
                dd rva word_10918E5C
                dd rva word_10918E94
                dd rva word_10918EDC
                dd rva word_10918F00
                dd rva word_10918F3C
                dd rva word_10918F70
                dd rva word_10918FA6
                dd rva word_10918FDE
                dd rva word_10919012
                dd rva word_1091904A
                dd rva word_10919066
                dd rva word_1091909A
                dd rva word_109190DE
                dd rva word_10919114
                dd rva word_10919142
                dd rva word_10919166
                dd rva word_10919190
                dd rva word_109191B6
                dd rva word_109191E0
                dd rva word_10919206
                dd rva word_1091922A
                dd rva word_10919250
                dd rva word_10919272
                dd rva word_109192A2
                dd rva word_109192EA
                dd rva word_10919326
                dd rva word_1091935A
                dd rva word_1091938E
                dd rva word_109193C2
                dd rva word_10918924
                dd rva word_1091943A
                dd rva word_1091896C
                dd rva word_10918678
                dd rva word_109194C2
                dd rva word_109194E0
                dd rva word_10919502
                dd rva word_10919520
                dd rva word_1091953A
                dd rva word_1091955A
                dd rva word_10919576
                dd rva word_10919590
                dd rva word_109195AC
                dd rva word_109195CA
                dd rva word_109195EA
                dd rva word_10919608
                dd rva word_10919628
                dd rva word_10919650
                dd rva word_10919666
                dd rva word_10919670
                dd rva word_10919690
                dd rva word_109196AE
                dd rva word_109196C6
                dd rva word_109196DE
                dd rva word_109196FE
                dd rva word_1091971A
                dd rva word_1091973A
                dd rva word_1091975E
                dd rva word_10919790
                dd rva word_109197BC
                dd rva word_109197D8
                dd rva word_109197F8
                dd rva word_1091981A
                dd rva word_10919836
                dd rva word_10919858
                dd rva word_10919888
                dd rva word_109198AC
                dd rva word_109198CC
                dd rva word_109198EC
                dd rva word_1091991E
                dd rva word_10919938
                dd rva word_10919958
                dd rva word_1091998A
                dd rva word_109199B2
                dd rva word_109199E8
                dd rva word_10919A02
                dd rva word_10919A34
                dd rva word_10919A58
                dd rva word_10919A6C
                dd rva word_10919A8A
                dd rva word_10919AB0
                dd rva word_10919AD4
                dd rva word_10919ADE
                dd rva word_10919AFE
                dd rva word_10919B32
                dd rva word_10919B58
                dd rva word_10919B64
                dd rva word_10919B70
                dd rva word_10919B92
                dd rva word_10919BA0
                dd rva word_10919BB2
                dd rva word_10919BD0
                dd rva word_10919BEC
                dd rva word_10919470
                dd rva word_10918942
                dd rva word_10918902
                dd rva word_109188D8
                dd rva word_109188B2
                dd rva word_1091888A
                dd rva word_10918872
                dd rva word_1091885E
                dd rva word_10918834
                dd rva word_10918812
                dd rva word_109187EA
                dd rva word_109187C6
                dd rva word_109187A8
                dd rva word_10918788
                dd rva word_10918768
                dd rva word_1091874E
                dd rva word_10918734
                dd rva word_10918714
                dd rva word_109186F6
                dd rva word_109186E6
                dd rva word_109186DA
                dd rva word_109186CC
                dd rva word_109186B8
                dd rva word_109186A0
                dd rva word_10918694
                dd rva word_10918652
                dd rva word_10918624
                dd rva word_109185EA
                dd rva word_109185C4
                dd rva word_1091859E
                dd rva word_10918574
                dd rva word_10918556
                dd rva word_1091853E
                dd rva word_10918528
                dd rva word_10918508
                dd rva word_109184E8
                dd rva word_109184DA
                dd rva word_109184CC
                dd rva word_109184C0
                dd rva word_109184B4
                dd rva word_10918486
                dd rva word_1091846C
                dd rva word_10918456
                dd rva word_10918436
                dd rva word_10918416
                dd rva word_109183F6
                dd rva word_109183DC
                dd rva word_109183B0
                dd rva word_1091837C
                dd rva word_10918354
                dd rva word_10918338
                dd rva word_10918318
                dd rva word_109193F6
                dd rva word_109194A0
                dd 0
;
; Import names for meqon.dll
;
off_10916D3C    dd rva word_1091718A    ; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_meqon↑o
                dd rva word_109171A2
                dd rva word_109171BA
                dd rva word_10917156
                dd 0
word_10916D50   dw 47Ah                 ; DATA XREF: .rdata:10916988↑o
                db 'WideCharToMultiByte',0
word_10916D66   dw 4B6h                 ; DATA XREF: .rdata:10916984↑o
                db 'lstrlenW',0
                align 2
word_10916D72   dw 1F5h                 ; DATA XREF: .rdata:10916980↑o
                db 'GetModuleFileNameW',0
                align 4
word_10916D88   dw 281h                 ; DATA XREF: .rdata:1091697C↑o
                db 'GetWindowsDirectoryW',0
                align 10h
word_10916DA0   dw 246h                 ; DATA XREF: .rdata:10916978↑o
                db 'GetSystemDirectoryW',0
word_10916DB6   dw 1F4h                 ; DATA XREF: .rdata:10916974↑o
                db 'GetModuleFileNameA',0
                align 4
word_10916DCC   dw 280h                 ; DATA XREF: .rdata:10916970↑o
                db 'GetWindowsDirectoryA',0
                align 4
word_10916DE4   dw 245h                 ; DATA XREF: .rdata:1091696C↑o
                db 'GetSystemDirectoryA',0
word_10916DFA   dw 3DFh                 ; DATA XREF: .rdata:10916968↑o
                db 'SetFilePointer',0
                align 4
word_10916E0C   dw 43h                  ; DATA XREF: .rdata:10916964↑o
                db 'CloseHandle',0
word_10916E1A   dw 48Dh                 ; DATA XREF: .rdata:10916960↑o
                db 'WriteFile',0
word_10916E26   dw 1D4h                 ; DATA XREF: .rdata:1091695C↑o
                db 'GetFileSize',0
word_10916E34   dw 78h                  ; DATA XREF: .rdata:10916958↑o
                db 'CreateFileA',0
word_10916E42   dw 7Fh                  ; DATA XREF: .rdata:10916954↑o
                db 'CreateFileW',0
word_10916E50   dw 1E6h                 ; DATA XREF: .rdata:10916950↑o
                db 'GetLastError',0
                align 10h
word_10916E60   dw 0C0h                 ; DATA XREF: .rdata:1091694C↑o
                db 'DeleteFileA',0
word_10916E6E   dw 0C3h                 ; DATA XREF: .rdata:10916948↑o
                db 'DeleteFileW',0
word_10916E7C   dw 3D7h                 ; DATA XREF: .rdata:10916944↑o
                db 'SetFileAttributesA',0
                align 2
word_10916E92   dw 3DAh                 ; DATA XREF: .rdata:10916940↑o
                db 'SetFileAttributesW',0
                align 4
word_10916EA8   dw 311h                 ; DATA XREF: .rdata:1091693C↑o
                db 'MoveFileA',0
word_10916EB4   dw 316h                 ; DATA XREF: .rdata:10916938↑o
                db 'MoveFileW',0
word_10916EC0   dw 3C6h                 ; DATA XREF: .rdata:10916934↑o
                db 'SetCurrentDirectoryA',0
                align 4
word_10916ED8   dw 3C7h                 ; DATA XREF: .rdata:10916930↑o
                db 'SetCurrentDirectoryW',0
                align 10h
word_10916EF0   dw 1A7h                 ; DATA XREF: .rdata:1091692C↑o
                db 'GetCurrentDirectoryA',0
                align 4
word_10916F08   dw 1A8h                 ; DATA XREF: .rdata:10916928↑o
                db 'GetCurrentDirectoryW',0
                align 10h
word_10916F20   dw 60h                  ; DATA XREF: .rdata:10916924↑o
                db 'CopyFileA',0
word_10916F2C   dw 65h                  ; DATA XREF: .rdata:10916920↑o
                db 'CopyFileW',0
word_10916F38   dw 6Ch                  ; DATA XREF: .rdata:1091691C↑o
                db 'CreateDirectoryA',0
                align 4
word_10916F4C   dw 71h                  ; DATA XREF: .rdata:10916918↑o
                db 'CreateDirectoryW',0
                align 10h
word_10916F60   dw 119h                 ; DATA XREF: .rdata:10916914↑o
                db 'FindClose',0
word_10916F6C   dw 130h                 ; DATA XREF: .rdata:10916910↑o
                db 'FindNextFileW',0
word_10916F7C   dw 124h                 ; DATA XREF: .rdata:1091690C↑o
                db 'FindFirstFileW',0
                align 2
word_10916F8E   dw 37Dh                 ; DATA XREF: .rdata:10916908↑o
                db 'RemoveDirectoryA',0
                align 2
word_10916FA2   dw 380h                 ; DATA XREF: .rdata:10916904↑o
                db 'RemoveDirectoryW',0
                align 2
word_10916FB6   dw 377h                 ; DATA XREF: .rdata:10916900↑o
                db 'ReleaseMutex',0
                align 2
word_10916FC6   dw 8Eh                  ; DATA XREF: .rdata:109168FC↑o
                db 'CreateMutexW',0
                align 2
word_10916FD6   dw 170h                 ; DATA XREF: .rdata:109168F8↑o
                db 'GetCommandLineW',0
word_10916FE8   dw 2F4h                 ; DATA XREF: .rdata:109168F4↑o
                db 'LoadLibraryW',0
                align 4
aKernel32Dll    db 'KERNEL32.dll',0     ; DATA XREF: .rdata:109165F8↑o
                align 2
word_10917006   dw 1FFh                 ; DATA XREF: .rdata:10916A60↑o
                db 'MessageBoxW',0
word_10917014   dw 25Eh                 ; DATA XREF: .rdata:10916A5C↑o
                db 'SendMessageA',0
                align 4
word_10917024   dw 263h                 ; DATA XREF: .rdata:10916A58↑o
                db 'SendMessageW',0
                align 4
word_10917034   dw 0A9h                 ; DATA XREF: .rdata:off_10916A3C↑o
                db 'DispatchMessageW',0
                align 4
word_10917048   dw 2D5h                 ; DATA XREF: .rdata:10916A64↑o
                db 'TranslateMessage',0
                align 4
word_1091705C   dw 21Ch                 ; DATA XREF: .rdata:10916A68↑o
                db 'PeekMessageW',0
                align 4
word_1091706C   dw 2E9h                 ; DATA XREF: .rdata:10916A54↑o
                db 'UpdateWindow',0
                align 4
word_1091707C   dw 2B8h                 ; DATA XREF: .rdata:10916A50↑o
                db 'ShowWindow',0
                align 2
word_1091708A   dw 24Fh                 ; DATA XREF: .rdata:10916A4C↑o
                db 'RemovePropA',0
word_10917098   dw 250h                 ; DATA XREF: .rdata:10916A48↑o
                db 'RemovePropW',0
word_109170A6   dw 28Fh                 ; DATA XREF: .rdata:10916A44↑o
                db 'SetPropA',0
                align 2
word_109170B2   dw 290h                 ; DATA XREF: .rdata:10916A40↑o
                db 'SetPropW',0
                align 2
aUser32Dll      db 'USER32.dll',0       ; DATA XREF: .rdata:1091660C↑o
                align 2
word_109170CA   dw 2CAh                 ; DATA XREF: .rdata:off_10916A70↑o
                db 'g_CompiledAnims',0
aDnanimationDll db 'dnAnimation.dll',0  ; DATA XREF: .rdata:10916620↑o
word_109170EC   dw 7                    ; DATA XREF: .rdata:109166D0↑o
                db '_SetEnterSafeModeHandler',0
                align 4
word_10917108   dw 5                    ; DATA XREF: .rdata:109166CC↑o
                db '_SetAssertionFailedExHandler',0
                align 4
word_10917128   dw 6                    ; DATA XREF: .rdata:off_109166C8↑o
                db '_SetAssertionFailedHandler',0
                align 2
a3drdebuglibDll db '3DRDebugLib.dll',0  ; DATA XREF: .rdata:10916634↑o
word_10917156   dw 22Eh                 ; DATA XREF: .rdata:10916D48↑o
                db '??0Support@RBConvexPolyhedronGeometry@meq@@QAE@XZ',0
word_1091718A   dw 0BCh                 ; DATA XREF: .rdata:off_10916D3C↑o
                db '??0Frame@meq@@QAE@XZ',0
                align 2
word_109171A2   dw 110h                 ; DATA XREF: .rdata:10916D40↑o
                db '??0Point@meq@@QAE@XZ',0
                align 2
word_109171BA   dw 267h                 ; DATA XREF: .rdata:10916D44↑o
                db '??0Vector@meq@@QAE@MMM@Z',0
                align 2
aMeqonDll       db 'meqon.dll',0        ; DATA XREF: .rdata:10916648↑o
word_109171E0   dw 1Dh                  ; DATA XREF: .rdata:off_109166D8↑o
                db '_SetCrashHandlerFilter@4',0
                align 4
aBughandlerDll  db 'BugHandler.dll',0   ; DATA XREF: .rdata:1091665C↑o
                align 4
word_1091720C   dw 0F93h                ; DATA XREF: .rdata:109167C8↑o
                db '??A?$dnArray@E@@QAEAAEH@Z',0
word_10917228   dw 2889h                ; DATA XREF: .rdata:109167CC↑o
                db '?Remove@?$dnArray@E@@QAEXHH@Z',0
word_10917248   dw 1FD3h                ; DATA XREF: .rdata:109167D0↑o
                db '?GetTypedData@?$dnArray@E@@QAEPAEXZ',0
word_1091726E   dw 2E37h                ; DATA XREF: .rdata:109167D4↑o
                db '?StaticEnterSafeMode@UObject@@SAXPB_W@Z',0
word_10917298   dw 301Ah                ; DATA XREF: .rdata:109167D8↑o
                db '?appFailAssertEx@@YAXPBD0HPB_W@Z',0
                align 4
word_109172BC   dw 3019h                ; DATA XREF: .rdata:109167DC↑o
                db '?appFailAssert@@YAXPBD0H@Z',0
                align 2
word_109172DA   dw 1AE0h                ; DATA XREF: .rdata:109167E0↑o
                db '?GObjObjects@UObject@@0V?$dnArray@PAVUObject@@@@A',0
word_1091730E   dw 3B0Fh                ; DATA XREF: .rdata:109167E4↑o
                db '?winToUNICODE@@YAPA_WPA_WPBDH@Z',0
word_10917330   dw 3B0Ch                ; DATA XREF: .rdata:109167E8↑o
                db '?winGetSizeUNICODE@@YAHPBD@Z',0
                align 10h
word_10917350   dw 3129h                ; DATA XREF: .rdata:109167EC↑o
                db '?dnPackageMgr_FindPackageLoader@@YAPAVdnArchive@@PB_W@Z',0
word_1091738A   dw 13B2h                ; DATA XREF: .rdata:109167F0↑o
                db '?Add@?$dnArray@E@@QAEHHH@Z',0
                align 4
word_109173A8   dw 211Dh                ; DATA XREF: .rdata:109167F4↑o
                db '?Insert@?$dnArray@E@@QAEXHH@Z',0
word_109173C8   dw 1C30h                ; DATA XREF: .rdata:109167F8↑o
                db '?GetFName@UObject@@QBEABVdnName@@XZ',0
word_109173EE   dw 2C4Fh                ; DATA XREF: .rdata:109167FC↑o
                db '?StaticClass@UClass@@SAPAV1@XZ',0
                align 10h
word_10917410   dw 3039h                ; DATA XREF: .rdata:10916800↑o
                db '?appSaveStringToFile@@YAHABVdnString@@PB_WPAVdnFileMgr@@@Z',0
                align 2
word_1091744E   dw 651h                 ; DATA XREF: .rdata:10916804↑o
                db '??1?$dnArray@E@@QAE@XZ',0
                align 4
word_10917468   dw 3038h                ; DATA XREF: .rdata:10916808↑o
                db '?appSaveArrayToFile@@YAHABV?$dnArray@E@@PB_WPAVdnFileMgr@@@Z',0
                align 4
word_109174A8   dw 13FFh                ; DATA XREF: .rdata:1091680C↑o
                db '?AddZeroed@?$dnArray@E@@QAEHH@Z',0
word_109174CA   dw 0Ch                  ; DATA XREF: .rdata:10916810↑o
                db '??0?$dnArray@E@@QAE@XZ',0
                align 4
word_109174E4   dw 3AE6h                ; DATA XREF: .rdata:10916814↑o
                db '?s_WriteStringToFile@@YAHABVdnString@@0@Z',0
word_10917510   dw 3AE7h                ; DATA XREF: .rdata:10916818↑o
                db '?s_WriteToFile@@YAHABVdnString@@AAV?$dnArray@E@@@Z',0
                align 2
word_10917546   dw 3027h                ; DATA XREF: .rdata:1091681C↑o
                db '?appLoadFileToArray@@YAHAAV?$dnArray@E@@PB_WPAVdnFileMgr@@@Z',0
                align 2
word_10917586   dw 3028h                ; DATA XREF: .rdata:10916820↑o
                db '?appLoadFileToString@@YAHAAVdnString@@PB_WPAVdnFileMgr@@@Z',0
                align 4
word_109175C4   dw 1CA9h                ; DATA XREF: .rdata:10916824↑o
                db '?GetLanguage@UObject@@SAPB_WXZ',0
                align 2
word_109175E6   dw 3017h                ; DATA XREF: .rdata:109167C4↑o
                db '?appExit@@YAXXZ',0
word_109175F8   dw 3036h                ; DATA XREF: .rdata:1091682C↑o
                db '?appPreExit@@YAXXZ',0
                align 2
word_1091760E   dw 2B65h                ; DATA XREF: .rdata:10916830↑o
                db '?Shutdown@DRM@@YA_NXZ',0
word_10917626   dw 23A4h                ; DATA XREF: .rdata:10916834↑o
                db '?MainLoop@@YAXPAVUEngine@@K@Z',0
word_10917646   dw 2F74h                ; DATA XREF: .rdata:10916838↑o
                db '?UpdateControllerSettingsViaPrefab@@YAXH@Z',0
                align 4
word_10917674   dw 1FADh                ; DATA XREF: .rdata:1091683C↑o
                db '?GetSuperStruct@UStruct@@QBEPAV1@XZ',0
word_1091769A   dw 2353h                ; DATA XREF: .rdata:10916840↑o
                db '?LoadConfig@UObject@@QAEXHPAVUClass@@PB_WHH@Z',0
word_109176CA   dw 1BFAh                ; DATA XREF: .rdata:10916844↑o
                db '?GetDefaultObject@UClass@@QAEPAVUObject@@XZ',0
word_109176F8   dw 1B9Ch                ; DATA XREF: .rdata:10916848↑o
                db '?GetClass@UObject@@QBEPAVUClass@@XZ',0
word_1091771E   dw 1CC8h                ; DATA XREF: .rdata:1091684C↑o
                db '?GetLocalPlayerPawn@ALevelInfo@@QAEPAVAPlayerPawn@@XZ',0
word_10917756   dw 3940h                ; DATA XREF: .rdata:10916850↑o
                db '?g_ActorSemaphore@@3VdnThread_Semaphore@@A',0
                align 4
word_10917784   dw 19DBh                ; DATA XREF: .rdata:10916854↑o
                db '?ExitSplash@@YAXXZ',0
                align 2
word_1091779A   dw 20E3h                ; DATA XREF: .rdata:10916858↑o
                db '?InitEngine@@YAPAVUEngine@@K@Z',0
                align 4
word_109177BC   dw 3B0Dh                ; DATA XREF: .rdata:1091685C↑o
                db '?winToANSI@@YAPADPADPB_WH@Z',0
word_109177DA   dw 3B0Bh                ; DATA XREF: .rdata:10916860↑o
                db '?winGetSizeANSI@@YAHPB_W@Z',0
                align 4
word_109177F8   dw 0F9Ch                ; DATA XREF: .rdata:10916864↑o
                db '??BWWindow@@QBEPAUHWND__@@XZ',0
                align 4
word_10917818   dw 2373h                ; DATA XREF: .rdata:10916868↑o
                db '?LocalizeGeneral@@YA?BVdnString@@PBDPB_W1@Z',0
word_10917846   dw 2549h                ; DATA XREF: .rdata:1091686C↑o
                db '?OpenWindow@WLog@@QAEXHH@Z',0
                align 4
word_10917864   dw 1ACDh                ; DATA XREF: .rdata:10916870↑o
                db '?GLogWindow@@3PAVWLog@@A',0
                align 10h
word_10917880   dw 5E0h                 ; DATA XREF: .rdata:10916874↑o
                db '??0WLog@@QAE@PB_WAAPAVdnArchive@@VdnName@@PAVWWindow@@@Z',0
                align 4
word_109178BC   dw 1AC0h                ; DATA XREF: .rdata:10916878↑o
                db '?GExec@@3PAVFExec@@A',0
                align 4
word_109178D4   dw 2A65h                ; DATA XREF: .rdata:1091687C↑o
                db '?SetGlobalExecHook@@YAXXZ',0
word_109178F0   dw 20FCh                ; DATA XREF: .rdata:10916880↑o
                db '?InitWindowing@@YAXXZ',0
word_10917908   dw 20DBh                ; DATA XREF: .rdata:10916884↑o
                db '?InitBinkSplash@@YAXPB_WKH@Z',0
                align 4
word_10917928   dw 1AC9h                ; DATA XREF: .rdata:10916888↑o
                db '?GIsScriptable@@3HA',0
word_1091793E   dw 3024h                ; DATA XREF: .rdata:1091688C↑o
                db '?appInit@@YAXPB_W0PAVFMalloc@@PAVdnOutputDevice@@PAVdnOutputDevic'
                db 'eError@@PAVdnFeedbackContext@@PAVdnFileMgr@@P6APAVdnConfigCache@@'
                db 'XZ@Z',0
                align 4
word_109179C8   dw 1AC8h                ; DATA XREF: .rdata:10916890↑o
                db '?GIsGuarded@@3HA',0
                align 4
word_109179DC   dw 198Ch                ; DATA XREF: .rdata:10916894↑o
                db '?EngineIsDemoVersion@@YAHXZ',0
word_109179FA   dw 1ACBh                ; DATA XREF: .rdata:10916898↑o
                db '?GLaunchMutex@@3PAUHINSTANCE__@@A',0
word_10917A1E   dw 1ABBh                ; DATA XREF: .rdata:1091689C↑o
                db '?GDedicatedServerMutex@@3PAUHINSTANCE__@@A',0
                align 4
word_10917A4C   dw 15C9h                ; DATA XREF: .rdata:109168A0↑o
                db '?CrashHandler_AssertHandler@@YAXPAXPBD1HPB_W@Z',0
                align 2
word_10917A7E   dw 15CEh                ; DATA XREF: .rdata:109168A4↑o
                db '?CrashHandler_WindowedExceptionHandler@@YGJPAU_EXCEPTION_POINTERS'
                db '@@@Z',0
word_10917AC6   dw 2F3Ch                ; DATA XREF: .rdata:109168A8↑o
                db '?Unused@FCommandTarget@@UAEXXZ',0
                align 4
word_10917AE8   dw 2A97h                ; DATA XREF: .rdata:109168AC↑o
                db '?SetMinWidth@WWindow@@UAEXAAH@Z',0
word_10917B0A   dw 2A96h                ; DATA XREF: .rdata:109168B0↑o
                db '?SetMinHeight@WWindow@@UAEXAAH@Z',0
                align 2
word_10917B2E   dw 29AEh                ; DATA XREF: .rdata:109168B4↑o
                db '?Serialize@WWindow@@UAEXAAVdnArchive@@@Z',0
                align 2
word_10917B5A   dw 1E9Ah                ; DATA XREF: .rdata:109167B0↑o
                db '?GetPackageName@WLog@@UAEPB_WXZ',0
word_10917B7C   dw 1699h                ; DATA XREF: .rdata:10916794↑o
                db '?DoDestroy@WWindow@@UAEXXZ',0
                align 2
word_10917B9A   dw 200Ah                ; DATA XREF: .rdata:10916790↑o
                db '?GetWindowClassName@WLog@@UAEXPA_W@Z',0
                align 2
word_10917BC2   dw 2FF6h                ; DATA XREF: .rdata:1091678C↑o
                db '?WndProc@WLog@@UAEJIIJ@Z',0
                align 2
word_10917BDE   dw 14DFh                ; DATA XREF: .rdata:10916788↑o
                db '?CallDefaultProc@WWindow@@UAEHIIJ@Z',0
word_10917C04   dw 213Ah                ; DATA XREF: .rdata:10916784↑o
                db '?InterceptControlCommand@WWindow@@UAEHIIJ@Z',0
word_10917C32   dw 1FB2h                ; DATA XREF: .rdata:10916780↑o
                db '?GetText@WWindow@@UAE?AVdnString@@XZ',0
                align 2
word_10917C5A   dw 2AF6h                ; DATA XREF: .rdata:1091677C↑o
                db '?SetText@WWindow@@UAEXABVdnString@@@Z',0
word_10917C82   dw 2AF5h                ; DATA XREF: .rdata:10916778↑o
                db '?SetText@WLog@@UAEXPB_W@Z',0
word_10917C9E   dw 1CACh                ; DATA XREF: .rdata:10916774↑o
                db '?GetLength@WWindow@@UAEHXZ',0
                align 4
word_10917CBC   dw 24ACh                ; DATA XREF: .rdata:10916770↑o
                db '?OnCopyData@WLog@@UAEXPAUHWND__@@PAUtagCOPYDATASTRUCT@@@Z',0
word_10917CF8   dw 2520h                ; DATA XREF: .rdata:1091676C↑o
                db '?OnSetFocus@WTerminal@@UAEXPAUHWND__@@@Z',0
                align 4
word_10917D24   dw 24EDh                ; DATA XREF: .rdata:10916768↑o
                db '?OnKillFocus@WWindow@@UAEXPAUHWND__@@@Z',0
word_10917D4E   dw 2528h                ; DATA XREF: .rdata:10916764↑o
                db '?OnSize@WTerminal@@UAEXKHH@Z',0
                align 2
word_10917D6E   dw 24A9h                ; DATA XREF: .rdata:10916760↑o
                db '?OnCommand@WLog@@UAEXH@Z',0
                align 2
word_10917D8A   dw 252Ch                ; DATA XREF: .rdata:1091675C↑o
                db '?OnSysCommand@WWindow@@UAEHH@Z',0
                align 4
word_10917DAC   dw 2494h                ; DATA XREF: .rdata:10916758↑o
                db '?OnActivate@WWindow@@UAEXH@Z',0
                align 4
word_10917DCC   dw 24A0h                ; DATA XREF: .rdata:10916754↑o
                db '?OnChar@WWindow@@UAEX_W@Z',0
word_10917DE8   dw 2831h                ; DATA XREF: .rdata:10916750↑o
                db '?RecoverLostWindow@WWindow@@UAEXXZ',0
                align 2
word_10917E0E   dw 24EBh                ; DATA XREF: .rdata:1091674C↑o
                db '?OnKeyDown@WWindow@@UAEX_W@Z',0
                align 2
word_10917E2E   dw 24B4h                ; DATA XREF: .rdata:109167C0↑o
                db '?OnCut@WWindow@@UAEXXZ',0
                align 4
word_10917E48   dw 24ABh                ; DATA XREF: .rdata:10916744↑o
                db '?OnCopy@WWindow@@UAEXXZ',0
word_10917E62   dw 250Dh                ; DATA XREF: .rdata:10916740↑o
                db '?OnPaste@WWindow@@UAEXXZ',0
                align 2
word_10917E7E   dw 2522h                ; DATA XREF: .rdata:10916798↑o
                db '?OnShowWindow@WLog@@UAEXH@Z',0
word_10917E9C   dw 2532h                ; DATA XREF: .rdata:10916738↑o
                db '?OnUndo@WWindow@@UAEXXZ',0
word_10917EB6   dw 2536h                ; DATA XREF: .rdata:10916734↑o
                db '?OnVScroll@WWindow@@UAEXIJ@Z',0
                align 2
word_10917ED6   dw 24CFh                ; DATA XREF: .rdata:10916730↑o
                db '?OnHScroll@WWindow@@UAEXIJ@Z',0
                align 2
word_10917EF6   dw 24ECh                ; DATA XREF: .rdata:1091672C↑o
                db '?OnKeyUp@WWindow@@UAEXIJ@Z',0
                align 4
word_10917F14   dw 250Bh                ; DATA XREF: .rdata:10916728↑o
                db '?OnPaint@WWindow@@UAEXXZ',0
                align 10h
word_10917F30   dw 24AFh                ; DATA XREF: .rdata:10916724↑o
                db '?OnCreate@WLog@@UAEXXZ',0
                align 2
word_10917F4A   dw 24C1h                ; DATA XREF: .rdata:10916720↑o
                db '?OnDrawItem@WWindow@@UAEXPAUtagDRAWITEMSTRUCT@@@Z',0
word_10917F7E   dw 24FDh                ; DATA XREF: .rdata:1091671C↑o
                db '?OnMeasureItem@WWindow@@UAEXPAUtagMEASUREITEMSTRUCT@@@Z',0
word_10917FB8   dw 24D4h                ; DATA XREF: .rdata:10916718↑o
                db '?OnInitDialog@WWindow@@UAEXXZ',0
word_10917FD8   dw 24C5h                ; DATA XREF: .rdata:10916714↑o
                db '?OnEnterIdle@WWindow@@UAEXXZ',0
                align 4
word_10917FF8   dw 24FEh                ; DATA XREF: .rdata:10916710↑o
                db '?OnMouseEnter@WWindow@@UAEXXZ',0
word_10918018   dw 2500h                ; DATA XREF: .rdata:1091670C↑o
                db '?OnMouseLeave@WWindow@@UAEXXZ',0
word_10918038   dw 24FFh                ; DATA XREF: .rdata:10916708↑o
                db '?OnMouseHover@WWindow@@UAEXXZ',0
word_10918058   dw 252Eh                ; DATA XREF: .rdata:10916704↑o
                db '?OnTimer@WWindow@@UAEXXZ',0
                align 4
word_10918074   dw 2513h                ; DATA XREF: .rdata:10916700↑o
                db '?OnReleaseCapture@WWindow@@UAEXXZ',0
word_10918098   dw 24FBh                ; DATA XREF: .rdata:109166FC↑o
                db '?OnMdiActivate@WWindow@@UAEXH@Z',0
word_109180BA   dw 2503h                ; DATA XREF: .rdata:109166F8↑o
                db '?OnMouseMove@WWindow@@UAEXKUFPoint@@@Z',0
                align 4
word_109180E4   dw 24F4h                ; DATA XREF: .rdata:109166F4↑o
                db '?OnLeftButtonDown@WWindow@@UAEXXZ',0
word_10918108   dw 2518h                ; DATA XREF: .rdata:109166F0↑o
                db '?OnRightButtonDown@WWindow@@UAEXXZ',0
                align 2
word_1091812E   dw 24F7h                ; DATA XREF: .rdata:109166EC↑o
                db '?OnLeftButtonUp@WWindow@@UAEXXZ',0
word_10918150   dw 2519h                ; DATA XREF: .rdata:off_109166E8↑o
                db '?OnRightButtonUp@WWindow@@UAEXXZ',0
                align 4
word_10918174   dw 24CEh                ; DATA XREF: .rdata:1091673C↑o
                db '?OnFinishSplitterDrag@WWindow@@UAEXPAVWDragInterceptor@@H@Z',0
word_109181B2   dw 251Fh                ; DATA XREF: .rdata:1091679C↑o
                db '?OnSetCursor@WWindow@@UAEHXZ',0
                align 2
word_109181D2   dw 2B2Ah                ; DATA XREF: .rdata:10916748↑o
                db '?ShouldClose@WWindow@@UAEHXZ',0
                align 2
word_109181F2   dw 24A6h                ; DATA XREF: .rdata:109167A0↑o
                db '?OnClose@WLog@@UAEXXZ',0
word_1091820A   dw 24B8h                ; DATA XREF: .rdata:109167A4↑o
                db '?OnDestroy@WLog@@UAEXXZ',0
word_10918224   dw 156Dh                ; DATA XREF: .rdata:109167A8↑o
                db '?ClipOrCenterWindowToMonitor@WWindow@@UAEXPAUHWND__@@I@Z',0
                align 10h
word_10918260   dw 243Ch                ; DATA XREF: .rdata:109167AC↑o
                db '?MyDrawEdge@WWindow@@UAEXPAUHDC__@@PAUtagRECT@@H@Z',0
                align 2
word_10918296   dw 2F12h                ; DATA XREF: .rdata:10916828↑o
                db '?TypeChar@WTerminal@@UAEX_W@Z',0
word_109182B6   dw 257Ah                ; DATA XREF: .rdata:109167BC↑o
                db '?Paste@WTerminal@@UAEXXZ',0
                align 2
word_109182D2   dw 85Eh                 ; DATA XREF: .rdata:109167B8↑o
                db '??1WLog@@UAE@XZ',0
word_109182E4   dw 268h                 ; DATA XREF: .rdata:109167B4↑o
                db '??0FOutputDeviceWindowsError@@QAE@XZ',0
                align 4
aEngineDll      db 'Engine.dll',0       ; DATA XREF: .rdata:10916670↑o
                align 4
word_10918318   dw 308h                 ; DATA XREF: .rdata:10916D2C↑o
                db '?GetMalloc@@YAPAVFMalloc@@XZ',0
                align 4
word_10918338   dw 71h                  ; DATA XREF: .rdata:10916D28↑o
                db '??0dnOutputDevice@@QAE@XZ',0
word_10918354   dw 2B3h                 ; DATA XREF: .rdata:10916D24↑o
                db '?FlushRealtime@dnOutputDevice@@UAEXXZ',0
word_1091837C   dw 418h                 ; DATA XREF: .rdata:10916D20↑o
                db '?PrintfArgList@dnOutputDevice@@UAEXPA_WIPB_WPAD@Z',0
word_109183B0   dw 3CCh                 ; DATA XREF: .rdata:10916D1C↑o
                db '?Logf@dnOutputDevice@@QAAXW4EName@@PB_WZZ',0
word_109183DC   dw 580h                 ; DATA XREF: .rdata:10916D18↑o
                db '?dnTimeStamp@@YAPB_WXZ',0
                align 2
word_109183F6   dw 38h                  ; DATA XREF: .rdata:10916D14↑o
                db '??0dnFeedbackContext@@QAE@XZ',0
                align 2
word_10918416   dw 2AFh                 ; DATA XREF: .rdata:10916D10↑o
                db '?Flush@dnOutputDevice@@UAEXXZ',0
word_10918436   dw 2C3h                 ; DATA XREF: .rdata:10916D0C↑o
                db '?GLog@@3PAVdnOutputDevice@@A',0
                align 2
word_10918456   dw 0F2h                 ; DATA XREF: .rdata:10916D08↑o
                db '??1dnString@@QAE@XZ',0
word_1091846C   dw 1A5h                 ; DATA XREF: .rdata:10916D04↑o
                db '??DdnString@@QBEPB_WXZ',0
                align 2
word_10918486   dw 56Fh                 ; DATA XREF: .rdata:10916D00↑o
                db '?dnLocalizeError@@YA?BVdnString@@PBDPB_W1@Z',0
word_109184B4   dw 5BBh                 ; DATA XREF: .rdata:10916CFC↑o
                db 'GIsEditor',0
word_109184C0   dw 5B9h                 ; DATA XREF: .rdata:10916CF8↑o
                db 'GIsClient',0
word_109184CC   dw 5DAh                 ; DATA XREF: .rdata:10916CF4↑o
                db 'GUnicodeOS',0
                align 2
word_109184DA   dw 5C8h                 ; DATA XREF: .rdata:10916CF0↑o
                db 'GIsSlowTask',0
word_109184E8   dw 585h                 ; DATA XREF: .rdata:10916CEC↑o
                db '?dnWinToANSI@@YAPADPADPB_WH@Z',0
word_10918508   dw 583h                 ; DATA XREF: .rdata:10916CE8↑o
                db '?dnWinGetSizeANSI@@YAHPB_W@Z',0
                align 4
word_10918528   dw 0A3h                 ; DATA XREF: .rdata:10916CE4↑o
                db '??0dnString@@QAE@XZ',0
word_1091853E   dw 3Ah                  ; DATA XREF: .rdata:10916CE0↑o
                db '??0dnFileMgr@@QAE@XZ',0
                align 2
word_10918556   dw 410h                 ; DATA XREF: .rdata:10916CDC↑o
                db '?PreInit@dnFileMgr@@UAEXXZ',0
                align 4
word_10918574   dw 3FAh                 ; DATA XREF: .rdata:10916CD8↑o
                db '?OpenLinearFile@dnFileMgr@@UAEXPB_WHH@Z',0
word_1091859E   dw 24Dh                 ; DATA XREF: .rdata:10916CD4↑o
                db '?CloseLinearFile@dnFileMgr@@UAEXXZ',0
                align 4
word_109185C4   dw 38Dh                 ; DATA XREF: .rdata:10916CD0↑o
                db '?IsLinearFileOpen@dnFileMgr@@UAEHXZ',0
word_109185EA   dw 25Bh                 ; DATA XREF: .rdata:10916CCC↑o
                db '?CreateLinearReader@dnFileMgr@@UAEPAVdnArchive@@PB_W@Z',0
                align 4
word_10918624   dw 2A7h                 ; DATA XREF: .rdata:10916CC8↑o
                db '?FindPackageFile@dnFileMgr@@UAEHPB_WPA_W@Z',0
                align 2
word_10918652   dw 39Eh                 ; DATA XREF: .rdata:10916CC4↑o
                db '?IsValidIndex@dnArrayBase@@QBEHH@Z',0
                align 4
word_10918678   dw 3F2h                 ; DATA XREF: .rdata:10916B70↑o
                db '?Num@dnArrayBase@@QBEHXZ',0
                align 4
word_10918694   dw 5AFh                 ; DATA XREF: .rdata:10916CC0↑o
                db 'GCmdLine',0
                align 10h
word_109186A0   dw 57Bh                 ; DATA XREF: .rdata:10916CBC↑o
                db '?dnSecondsSlow@@YANXZ',0
word_109186B8   dw 5D3h                 ; DATA XREF: .rdata:10916CB8↑o
                db 'GSecondsPerCycle',0
                align 4
word_109186CC   dw 5D6h                 ; DATA XREF: .rdata:10916CB4↑o
                db 'GTimestamp',0
                align 2
word_109186DA   dw 5AEh                 ; DATA XREF: .rdata:10916CB0↑o
                db 'GCRCTable',0
word_109186E6   dw 5DCh                 ; DATA XREF: .rdata:10916CAC↑o
                db 'InitCRCTable',0
                align 2
word_109186F6   dw 13Ch                 ; DATA XREF: .rdata:10916CA8↑o
                db '??4dnString@@QAEAAV0@PB_W@Z',0
word_10918714   dw 2C6h                 ; DATA XREF: .rdata:10916CA4↑o
                db '?GNull@@3PAVdnOutputDevice@@A',0
word_10918734   dw 25h                  ; DATA XREF: .rdata:10916CA0↑o
                db '??0dnArrayBase@@QAE@XZ',0
                align 2
word_1091874E   dw 0A1h                 ; DATA XREF: .rdata:10916C9C↑o
                db '??0dnString@@QAE@PB_W@Z',0
word_10918768   dw 555h                 ; DATA XREF: .rdata:10916C98↑o
                db '?dnBaseDir@@YA?BVdnString@@XZ',0
word_10918788   dw 576h                 ; DATA XREF: .rdata:10916C94↑o
                db '?dnPackage@@YA?BVdnString@@XZ',0
word_109187A8   dw 20Bh                 ; DATA XREF: .rdata:10916C90↑o
                db '?Add@dnArrayBase@@QAEHHH@Z',0
                align 2
word_109187C6   dw 2C4h                 ; DATA XREF: .rdata:10916C8C↑o
                db '?GLogHook@@3PAVdnOutputDevice@@A',0
                align 2
word_109187EA   dw 458h                 ; DATA XREF: .rdata:10916C88↑o
                db '?SafeString@dnName@@SAPB_WW4EName@@@Z',0
word_10918812   dw 2C1h                 ; DATA XREF: .rdata:10916C84↑o
                db '?GFileManager@@3PAVdnFileMgr@@A',0
word_10918834   dw 459h                 ; DATA XREF: .rdata:10916C80↑o
                db '?SafeSuppressed@dnName@@SAHW4EName@@@Z',0
                align 2
word_1091885E   dw 5BAh                 ; DATA XREF: .rdata:10916C7C↑o
                db 'GIsCriticalError',0
                align 2
word_10918872   dw 1Ch                  ; DATA XREF: .rdata:10916C78↑o
                db '??0dnArchive@@QAE@XZ',0
                align 2
word_1091888A   dw 473h                 ; DATA XREF: .rdata:10916C74↑o
                db '?SerializeBits@dnArchive@@UAEXPAXH@Z',0
                align 2
word_109188B2   dw 475h                 ; DATA XREF: .rdata:10916C70↑o
                db '?SerializeInt@dnArchive@@UAEXAAKK@Z',0
word_109188D8   dw 414h                 ; DATA XREF: .rdata:10916C6C↑o
                db '?Preload@dnArchive@@UAEXPAVUObject@@@Z',0
                align 2
word_10918902   dw 257h                 ; DATA XREF: .rdata:10916C68↑o
                db '?CountBytes@dnArchive@@UAEXKK@Z',0
word_10918924   dw 4ADh                 ; DATA XREF: .rdata:10916B64↑o
                db '?SetMode@dnArchive@@UAEXH@Z',0
word_10918942   dw 155h                 ; DATA XREF: .rdata:10916C64↑o
                db '??6dnArchive@@UAEAAV0@AAPAVUObject@@@Z',0
                align 4
word_1091896C   dw 156h                 ; DATA XREF: .rdata:10916B6C↑o
                db '??6dnArchive@@UAEAAV0@AAVdnName@@@Z',0
word_10918992   dw 476h                 ; DATA XREF: .rdata:off_10916A78↑o
                db '?SerializeMaterial@dnArchive@@UAEHAAPAVUMaterialEx@@PAVdnName@@@Z'
                db 0
word_109189D6   dw 3DDh                 ; DATA XREF: .rdata:10916A7C↑o
                db '?MapName@dnArchive@@UAEHPAVdnName@@@Z',0
word_109189FE   dw 3DEh                 ; DATA XREF: .rdata:10916A80↑o
                db '?MapObject@dnArchive@@UAEHPAVUObject@@@Z',0
                align 2
word_10918A2A   dw 4EAh                 ; DATA XREF: .rdata:10916A84↑o
                db '?Tell64@dnArchive@@UAE_JXZ',0
                align 4
word_10918A48   dw 503h                 ; DATA XREF: .rdata:10916A88↑o
                db '?TotalSize@dnArchive@@UAEHXZ',0
                align 4
word_10918A68   dw 3B4h                 ; DATA XREF: .rdata:10916A8C↑o
                db '?LinearTell@dnArchive@@UAEKXZ',0
word_10918A88   dw 3B5h                 ; DATA XREF: .rdata:10916A90↑o
                db '?LinearTotalSize@dnArchive@@UAEKXZ',0
                align 2
word_10918AAE   dw 22Ch                 ; DATA XREF: .rdata:10916A94↑o
                db '?AtEnd@dnArchive@@UAEHXZ',0
                align 2
word_10918ACA   dw 45Ah                 ; DATA XREF: .rdata:10916A98↑o
                db '?Seek64@dnArchive@@UAEX_J@Z',0
word_10918AE8   dw 22Fh                 ; DATA XREF: .rdata:10916A9C↑o
                db '?AttachLazyLoader@dnArchive@@UAEXPAVdnLazyLoader@@@Z',0
                align 10h
word_10918B20   dw 26Eh                 ; DATA XREF: .rdata:10916AA0↑o
                db '?DetachLazyLoader@dnArchive@@UAEXPAVdnLazyLoader@@@Z',0
                align 4
word_10918B58   dw 22Dh                 ; DATA XREF: .rdata:10916AA4↑o
                db '?AttachLazyDataWorker@dnArchive@@UAEXPAVdnLazyDataWorker@@@Z',0
                align 4
word_10918B98   dw 26Ch                 ; DATA XREF: .rdata:10916AA8↑o
                db '?DetachLazyDataWorker@dnArchive@@UAEXPAVdnLazyDataWorker@@@Z',0
                align 4
word_10918BD8   dw 411h                 ; DATA XREF: .rdata:10916AAC↑o
                db '?Precache@dnArchive@@UAEXH@Z',0
                align 4
word_10918BF8   dw 2ECh                 ; DATA XREF: .rdata:10916AB0↑o
                db '?GetError@dnArchive@@UAEHXZ',0
word_10918C16   dw 374h                 ; DATA XREF: .rdata:10916AB4↑o
                db '?InitTOC@dnArchive@@UAEXPAV1@@Z',0
word_10918C38   dw 352h                 ; DATA XREF: .rdata:10916AB8↑o
                db '?HasTOC@dnArchive@@UBEHXZ',0
word_10918C54   dw 2E3h                 ; DATA XREF: .rdata:10916ABC↑o
                db '?GetCurrentPtr@dnArchive@@UAEPAEXZ',0
                align 2
word_10918C7A   dw 24Eh                 ; DATA XREF: .rdata:10916AC0↑o
                db '?Compress@dnArchive@@UAEHPAPAEAAK@Z',0
word_10918CA0   dw 3B9h                 ; DATA XREF: .rdata:10916AC4↑o
                db '?Lock@dnArchive@@UAEXXZ',0
word_10918CBA   dw 526h                 ; DATA XREF: .rdata:10916AC8↑o
                db '?UnLock@dnArchive@@UAEXXZ',0
word_10918CD6   dw 303h                 ; DATA XREF: .rdata:10916ACC↑o
                db '?GetLazyDataMode@dnArchive@@UAE?AW4dnLazyDataMode@@XZ',0
word_10918D0E   dw 4A6h                 ; DATA XREF: .rdata:10916AD0↑o
                db '?SetLazyDataMode@dnArchive@@UAEXW4dnLazyDataMode@@@Z',0
                align 2
word_10918D46   dw 210h                 ; DATA XREF: .rdata:10916AD4↑o
                db '?AddDeferredLazyItem@dnArchive@@UAEXPAVdnLazyDataWorker@@H@Z',0
                align 2
word_10918D86   dw 2B1h                 ; DATA XREF: .rdata:10916AD8↑o
                db '?FlushDeferredLazyItems@dnArchive@@UAEXXZ',0
word_10918DB2   dw 53Eh                 ; DATA XREF: .rdata:10916ADC↑o
                db '?VerifyLinear@dnArchive@@UAEXPB_W@Z',0
word_10918DD8   dw 3C6h                 ; DATA XREF: .rdata:10916AE0↑o
                db '?Logf@dnOutputDevice@@QAAXABVdnString@@ZZ',0
word_10918E04   dw 2C0h                 ; DATA XREF: .rdata:10916AE4↑o
                db '?GError@@3PAVdnOutputDeviceError@@A',0
word_10918E2A   dw 0A0h                 ; DATA XREF: .rdata:10916AE8↑o
                db '??0dnString@@QAE@PBD@Z',0
                align 4
word_10918E44   dw 0D7h                 ; DATA XREF: .rdata:10916AEC↑o
                db '??1dnArchive@@UAE@XZ',0
                align 4
word_10918E5C   dw 1Eh                  ; DATA XREF: .rdata:10916AF0↑o
                db '??0dnArchiveFileReader@@QAE@PAXPAVdnOutputDevice@@H@Z',0
word_10918E94   dw 20h                  ; DATA XREF: .rdata:10916AF4↑o
                db '??0dnArchiveFileReaderCompressedWin32@@QAE@PAXPAVdnOutputDevice@@'
                db 'H@Z',0
                align 4
word_10918EDC   dw 3CAh                 ; DATA XREF: .rdata:10916AF8↑o
                db '?Logf@dnOutputDevice@@QAAXPB_WZZ',0
                align 10h
word_10918F00   dw 469h                 ; DATA XREF: .rdata:10916AFC↑o
                db '?Serialize@dnArchiveFileReaderCompressedWin32@@UAEXPAXH@Z',0
word_10918F3C   dw 4F0h                 ; DATA XREF: .rdata:10916B00↑o
                db '?Tell@dnArchiveFileReaderCompressedWin32@@UAEHXZ',0
                align 10h
word_10918F70   dw 4EBh                 ; DATA XREF: .rdata:10916B04↑o
                db '?Tell64@dnArchiveFileReaderCompressedWin32@@UAE_JXZ',0
word_10918FA6   dw 505h                 ; DATA XREF: .rdata:10916B08↑o
                db '?TotalSize@dnArchiveFileReaderCompressedWin32@@UAEHXZ',0
word_10918FDE   dw 460h                 ; DATA XREF: .rdata:10916B0C↑o
                db '?Seek@dnArchiveFileReaderCompressedWin32@@UAEXH@Z',0
word_10919012   dw 45Bh                 ; DATA XREF: .rdata:10916B10↑o
                db '?Seek64@dnArchiveFileReaderCompressedWin32@@UAEX_J@Z',0
                align 2
word_1091904A   dw 2A9h                 ; DATA XREF: .rdata:10916B14↑o
                db '?Flush@dnArchive@@UAEXXZ',0
                align 2
word_10919066   dw 24Ah                 ; DATA XREF: .rdata:10916B18↑o
                db '?Close@dnArchiveFileReaderCompressedWin32@@UAEHXZ',0
word_1091909A   dw 375h                 ; DATA XREF: .rdata:10916B1C↑o
                db '?InitTOC@dnArchiveFileReaderCompressedWin32@@UAEXPAVdnArchive@@@Z'
                db 0
word_109190DE   dw 353h                 ; DATA XREF: .rdata:10916B20↑o
                db '?HasTOC@dnArchiveFileReaderCompressedWin32@@UBEHXZ',0
                align 4
word_10919114   dw 468h                 ; DATA XREF: .rdata:10916B24↑o
                db '?Serialize@dnArchiveFileReader@@UAEXPAXH@Z',0
                align 2
word_10919142   dw 4EFh                 ; DATA XREF: .rdata:10916B28↑o
                db '?Tell@dnArchiveFileReader@@UAEHXZ',0
word_10919166   dw 504h                 ; DATA XREF: .rdata:10916B2C↑o
                db '?TotalSize@dnArchiveFileReader@@UAEHXZ',0
                align 10h
word_10919190   dw 45Fh                 ; DATA XREF: .rdata:10916B30↑o
                db '?Seek@dnArchiveFileReader@@UAEXH@Z',0
                align 2
word_109191B6   dw 412h                 ; DATA XREF: .rdata:10916B34↑o
                db '?Precache@dnArchiveFileReader@@UAEXH@Z',0
                align 10h
word_109191E0   dw 249h                 ; DATA XREF: .rdata:10916B38↑o
                db '?Close@dnArchiveFileReader@@UAEHXZ',0
                align 2
word_10919206   dw 3BAh                 ; DATA XREF: .rdata:10916B3C↑o
                db '?Lock@dnArchiveFileReader@@UAEXXZ',0
word_1091922A   dw 527h                 ; DATA XREF: .rdata:10916B40↑o
                db '?UnLock@dnArchiveFileReader@@UAEXXZ',0
word_10919250   dw 0D8h                 ; DATA XREF: .rdata:10916B44↑o
                db '??1dnArchiveFileReader@@UAE@XZ',0
                align 2
word_10919272   dw 0D9h                 ; DATA XREF: .rdata:10916B48↑o
                db '??1dnArchiveFileReaderCompressedWin32@@UAE@XZ',0
word_109192A2   dw 22h                  ; DATA XREF: .rdata:10916B4C↑o
                db '??0dnArchiveFileWriterCompressedWin32@@QAE@PAXPAVdnOutputDevice@@'
                db 'HH@Z',0
word_109192EA   dw 46Ah                 ; DATA XREF: .rdata:10916B50↑o
                db '?Serialize@dnArchiveFileWriterCompressedWin32@@UAEXPAXH@Z',0
word_10919326   dw 4F1h                 ; DATA XREF: .rdata:10916B54↑o
                db '?Tell@dnArchiveFileWriterCompressedWin32@@UAEHXZ',0
                align 2
word_1091935A   dw 461h                 ; DATA XREF: .rdata:10916B58↑o
                db '?Seek@dnArchiveFileWriterCompressedWin32@@UAEXH@Z',0
word_1091938E   dw 2AAh                 ; DATA XREF: .rdata:10916B5C↑o
                db '?Flush@dnArchiveFileWriterCompressedWin32@@UAEXXZ',0
word_109193C2   dw 24Bh                 ; DATA XREF: .rdata:10916B60↑o
                db '?Close@dnArchiveFileWriterCompressedWin32@@UAEHXZ',0
word_109193F6   dw 376h                 ; DATA XREF: .rdata:10916D30↑o
                db '?InitTOC@dnArchiveFileWriterCompressedWin32@@UAEXPAVdnArchive@@@Z'
                db 0
word_1091943A   dw 354h                 ; DATA XREF: .rdata:10916B68↑o
                db '?HasTOC@dnArchiveFileWriterCompressedWin32@@UBEHXZ',0
                align 10h
word_10919470   dw 0DAh                 ; DATA XREF: .rdata:10916C60↑o
                db '??1dnArchiveFileWriterCompressedWin32@@UAE@XZ',0
word_109194A0   dw 2E6h                 ; DATA XREF: .rdata:10916D34↑o
                db '?GetData@dnArrayBase@@QAEPAXXZ',0
                align 2
word_109194C2   dw 388h                 ; DATA XREF: .rdata:10916B74↑o
                db '?IsError@dnArchive@@QAEHXZ',0
                align 10h
word_109194E0   dw 42Eh                 ; DATA XREF: .rdata:10916B78↑o
                db '?Remove@dnArrayBase@@QAEXHHH@Z',0
                align 2
word_10919502   dw 67h                  ; DATA XREF: .rdata:10916B7C↑o
                db '??0dnName@@QAE@W4EName@@@Z',0
                align 10h
word_10919520   dw 15Bh                 ; DATA XREF: .rdata:10916B80↑o
                db '??8dnName@@QBEHABV0@@Z',0
                align 2
word_1091953A   dw 287h                 ; DATA XREF: .rdata:10916B84↑o
                db '?Empty@dnArrayBase@@QAEXHH@Z',0
                align 2
word_1091955A   dw 97h                  ; DATA XREF: .rdata:10916B88↑o
                db '??0dnString@@QAE@ABV0@@Z',0
                align 2
word_10919576   dw 0DBh                 ; DATA XREF: .rdata:10916B8C↑o
                db '??1dnArrayBase@@QAE@XZ',0
                align 10h
word_10919590   dw 23h                  ; DATA XREF: .rdata:10916B90↑o
                db '??0dnArrayBase@@IAE@HH@Z',0
                align 4
word_109195AC   dw 1DAh                 ; DATA XREF: .rdata:10916B94↑o
                db '??YdnString@@QAEAAV0@PB_W@Z',0
word_109195CA   dw 13Bh                 ; DATA XREF: .rdata:10916B98↑o
                db '??4dnString@@QAEAAV0@ABV0@@Z',0
                align 2
word_109195EA   dw 3A8h                 ; DATA XREF: .rdata:10916B9C↑o
                db '?Left@dnString@@QBE?AV1@H@Z',0
word_10919608   dw 35Eh                 ; DATA XREF: .rdata:10916BA0↑o
                db '?InStr@dnString@@QBEHPB_WH@Z',0
                align 4
word_10919628   dw 554h                 ; DATA XREF: .rdata:10916BA4↑o
                db '?dnBaseContentDir@@YA?BVdnString@@XZ',0
                align 10h
word_10919650   dw 5FAh                 ; DATA XREF: .rdata:10916BA8↑o
                db 'g_UCCAllowDLCFiles',0
                align 2
word_10919666   dw 5CAh                 ; DATA XREF: .rdata:10916BAC↑o
                db 'GIsUCC',0
                align 10h
word_10919670   dw 1A3h                 ; DATA XREF: .rdata:10916BB0↑o
                db '??DdnString@@QBE?AV0@ABV0@@Z',0
                align 10h
word_10919690   dw 1A4h                 ; DATA XREF: .rdata:10916BB4↑o
                db '??DdnString@@QBE?AV0@PB_W@Z',0
word_109196AE   dw 0D4h                 ; DATA XREF: .rdata:10916BB8↑o
                db '??1FFilename@@QAE@XZ',0
                align 2
word_109196C6   dw 0Ch                  ; DATA XREF: .rdata:10916BBC↑o
                db '??0FFilename@@QAE@XZ',0
                align 2
word_109196DE   dw 0FEh                 ; DATA XREF: .rdata:10916BC0↑o
                db '??4FFilename@@QAEAAV0@ABV0@@Z',0
word_109196FE   dw 0Ah                  ; DATA XREF: .rdata:10916BC4↑o
                db '??0FFilename@@QAE@PB_W@Z',0
                align 2
word_1091971A   dw 4D1h                 ; DATA XREF: .rdata:10916BC8↑o
                db '?Shrink@dnArrayBase@@QAEXH@Z',0
                align 2
word_1091973A   dw 220h                 ; DATA XREF: .rdata:10916BCC↑o
                db '?AddZeroed@dnArrayBase@@QAEHHH@Z',0
                align 2
word_1091975E   dw 258h                 ; DATA XREF: .rdata:10916BD0↑o
                db '?CountBytes@dnArrayBase@@QAEXAAVdnArchive@@H@Z',0
                align 10h
word_10919790   dw 150h                 ; DATA XREF: .rdata:10916BD4↑o
                db '??6@YAAAVdnArchive@@AAV0@AAVdnString@@@Z',0
                align 4
word_109197BC   dw 160h                 ; DATA XREF: .rdata:10916BD8↑o
                db '??8dnString@@QBEHABV0@@Z',0
                align 4
word_109197D8   dw 1D9h                 ; DATA XREF: .rdata:10916BDC↑o
                db '??YdnString@@QAEAAV0@ABV0@@Z',0
                align 4
word_109197F8   dw 416h                 ; DATA XREF: .rdata:10916BE0↑o
                db '?Printf@dnString@@SA?AV1@PB_WZZ',0
word_1091981A   dw 288h                 ; DATA XREF: .rdata:10916BE4↑o
                db '?Empty@dnString@@QAEXH@Z',0
                align 2
word_10919836   dw 3C2h                 ; DATA XREF: .rdata:10916BE8↑o
                db '?Log@dnOutputDevice@@QAEXPB_W@Z',0
word_10919858   dw 2EEh                 ; DATA XREF: .rdata:10916BEC↑o
                db '?GetExtension@FFilename@@QBE?AVdnString@@H@Z',0
                align 4
word_10919888   dw 9                    ; DATA XREF: .rdata:10916BF0↑o
                db '??0FFilename@@QAE@ABVdnString@@@Z',0
word_109198AC   dw 423h                 ; DATA XREF: .rdata:10916BF4↑o
                db '?Realloc@dnArrayBase@@IAEXH@Z',0
word_109198CC   dw 38Eh                 ; DATA XREF: .rdata:10916BF8↑o
                db '?IsLoading@dnArchive@@QAEHXZ',0
                align 4
word_109198EC   dw 14Eh                 ; DATA XREF: .rdata:10916BFC↑o
                db '??6@YAAAVdnArchive@@AAV0@AAVdnCompactIndex@@@Z',0
                align 2
word_1091991E   dw 161h                 ; DATA XREF: .rdata:10916C00↑o
                db '??8dnString@@QBEHPB_W@Z',0
word_10919938   dw 4FCh                 ; DATA XREF: .rdata:10916C04↑o
                db '?ToLower@dnString@@QAEPB_WXZ',0
                align 4
word_10919958   dw 2E0h                 ; DATA XREF: .rdata:10916C08↑o
                db '?GetCleanFilename@FFilename@@QBE?AVdnString@@XZ',0
word_1091998A   dw 0D5h                 ; DATA XREF: .rdata:10916C0C↑o
                db '??1FNameAsStringProxyArchive@@UAE@XZ',0
                align 2
word_109199B2   dw 11h                  ; DATA XREF: .rdata:10916C10↑o
                db '??0FNameAsStringProxyArchive@@QAE@AAVdnArchive@@@Z',0
                align 4
word_109199E8   dw 170h                 ; DATA XREF: .rdata:10916C14↑o
                db '??9dnString@@QBEHPB_W@Z',0
word_10919A02   dw 2D7h                 ; DATA XREF: .rdata:10916C18↑o
                db '?GetBaseFilename@FFilename@@QBE?AVdnString@@H@Z',0
word_10919A34   dw 2C9h                 ; DATA XREF: .rdata:10916C1C↑o
                db '?GWarn@@3PAVdnFeedbackContext@@A',0
                align 4
word_10919A58   dw 5C3h                 ; DATA XREF: .rdata:10916C20↑o
                db 'GIsRequestingExit',0
word_10919A6C   dw 324h                 ; DATA XREF: .rdata:10916C24↑o
                db '?GetPtr@dnString@@QAEPB_WXZ',0
word_10919A8A   dw 52Ah                 ; DATA XREF: .rdata:10916C28↑o
                db '?UnLock@dnThread_Semaphore@@QAEXXZ',0
                align 10h
word_10919AB0   dw 3BDh                 ; DATA XREF: .rdata:10916C2C↑o
                db '?Lock@dnThread_Semaphore@@QAEXXZ',0
                align 4
word_10919AD4   dw 5B1h                 ; DATA XREF: .rdata:10916C30↑o
                db 'GEngine',0
word_10919ADE   dw 1AEh                 ; DATA XREF: .rdata:10916C34↑o
                db '??HdnString@@QBE?AV0@ABV0@@Z',0
                align 2
word_10919AFE   dw 3C3h                 ; DATA XREF: .rdata:10916C38↑o
                db '?Log@dnOutputDevice@@QAEXW4EName@@ABVdnString@@@Z',0
word_10919B32   dw 66h                  ; DATA XREF: .rdata:10916C3C↑o
                db '??0dnName@@QAE@PB_WW4EFindName@@@Z',0
                align 4
word_10919B58   dw 5CEh                 ; DATA XREF: .rdata:10916C40↑o
                db 'GLazyLoad',0
word_10919B64   dw 5C7h                 ; DATA XREF: .rdata:10916C44↑o
                db 'GIsServer',0
word_10919B70   dw 2BEh                 ; DATA XREF: .rdata:10916C48↑o
                db '?GConfig@@3PAVdnConfigCache@@A',0
                align 2
word_10919B92   dw 5C9h                 ; DATA XREF: .rdata:10916C4C↑o
                db 'GIsStarted',0
                align 10h
word_10919BA0   dw 5E4h                 ; DATA XREF: .rdata:10916C50↑o
                db 'dnInitAssertMgr',0
word_10919BB2   dw 242h                 ; DATA XREF: .rdata:10916C54↑o
                db '?Clear@dnArrayBase@@QAEXXZ',0
                align 10h
word_10919BD0   dw 16Fh                 ; DATA XREF: .rdata:10916C58↑o
                db '??9dnString@@QBEHABV0@@Z',0
                align 4
word_10919BEC   dw 3ACh                 ; DATA XREF: .rdata:10916C5C↑o
                db '?Len@dnString@@QBEHXZ',0
aDncommonDll    db 'dnCommon.dll',0     ; DATA XREF: .rdata:10916684↑o
                align 2
aComctl32Dll    db 'COMCTL32.dll',0     ; DATA XREF: .rdata:10916698↑o
                align 10h
word_10919C20   dw 538h                 ; DATA XREF: .rdata:109169F8↑o
                db 'rand',0
                align 4
word_10919C28   dw 73h                  ; DATA XREF: .rdata:10916994↑o
                db '__CxxFrameHandler3',0
                align 2
word_10919C3E   dw 410h                 ; DATA XREF: .rdata:10916998↑o
                db '_vsnwprintf',0
word_10919C4C   dw 32Bh                 ; DATA XREF: .rdata:1091699C↑o
                db '_purecall',0
word_10919C58   dw 592h                 ; DATA XREF: .rdata:109169A0↑o
                db 'wcsncpy',0
word_10919C62   dw 587h                 ; DATA XREF: .rdata:109169A4↑o
                db 'wcschr',0
                align 4
word_10919C6C   dw 431h                 ; DATA XREF: .rdata:109169A8↑o
                db '_wcsicmp',0
                align 4
word_10919C78   dw 43Bh                 ; DATA XREF: .rdata:109169AC↑o
                db '_wcsnicmp',0
word_10919C84   dw 52Ah                 ; DATA XREF: .rdata:109169B0↑o
                db 'memset',0
                align 2
word_10919C8E   dw 59Ah                 ; DATA XREF: .rdata:109169B4↑o
                db 'wcsstr',0
                align 4
word_10919C98   dw 526h                 ; DATA XREF: .rdata:109169B8↑o
                db 'memcpy',0
                align 2
word_10919CA2   dw 591h                 ; DATA XREF: .rdata:10916A08↑o
                db 'wcsncmp',0
word_10919CAC   dw 4A9h                 ; DATA XREF: .rdata:10916A34↑o
                db '_wtoi',0
word_10919CB4   dw 4BEh                 ; DATA XREF: .rdata:10916A30↑o
                db 'atof',0
                align 4
aMsvcr90Dll     db 'MSVCR90.dll',0      ; DATA XREF: .rdata:109166AC↑o
word_10919CC8   dw 3E6h                 ; DATA XREF: .rdata:10916A2C↑o
                db '_unlock',0
word_10919CD2   dw 96h                  ; DATA XREF: .rdata:10916A28↑o
                db '__dllonexit',0
word_10919CE0   dw 16Ah                 ; DATA XREF: .rdata:10916A24↑o
                db '_encode_pointer',0
word_10919CF2   dw 276h                 ; DATA XREF: .rdata:10916A20↑o
                db '_lock',0
word_10919CFA   dw 31Ch                 ; DATA XREF: .rdata:10916A1C↑o
                db '_onexit',0
word_10919D04   dw 160h                 ; DATA XREF: .rdata:10916A18↑o
                db '_decode_pointer',0
word_10919D16   dw 115h                 ; DATA XREF: .rdata:10916A14↑o
                db '_amsg_exit',0
                align 4
word_10919D24   dw 9Fh                  ; DATA XREF: .rdata:10916A10↑o
                db '__getmainargs',0
word_10919D34   dw 12Ch                 ; DATA XREF: .rdata:10916A0C↑o
                db '_cexit',0
                align 2
word_10919D3E   dw 17Ch                 ; DATA XREF: .rdata:10916A04↑o
                db '_exit',0
word_10919D46   dw 66h                  ; DATA XREF: .rdata:10916A00↑o
                db '_XcptFilter',0
word_10919D54   dw 225h                 ; DATA XREF: .rdata:109169FC↑o
                db '_ismbblead',0
                align 2
word_10919D62   dw 4CCh                 ; DATA XREF: .rdata:off_10916990↑o
                db 'exit',0
                align 2
word_10919D6A   dw 0FDh                 ; DATA XREF: .rdata:109169F4↑o
                db '_acmdln',0
word_10919D74   dw 204h                 ; DATA XREF: .rdata:109169F0↑o
                db '_initterm',0
word_10919D80   dw 205h                 ; DATA XREF: .rdata:109169EC↑o
                db '_initterm_e',0
word_10919D8E   dw 13Ch                 ; DATA XREF: .rdata:109169E8↑o
                db '_configthreadlocale',0
word_10919DA4   dw 0E3h                 ; DATA XREF: .rdata:109169E4↑o
                db '__setusermatherr',0
                align 4
word_10919DB8   dw 10Bh                 ; DATA XREF: .rdata:109169E0↑o
                db '_adjust_fdiv',0
                align 4
word_10919DC8   dw 0CBh                 ; DATA XREF: .rdata:109169DC↑o
                db '__p__commode',0
                align 4
word_10919DD8   dw 0CFh                 ; DATA XREF: .rdata:109169D8↑o
                db '__p__fmode',0
                align 2
word_10919DE6   dw 0E0h                 ; DATA XREF: .rdata:109169D4↑o
                db '__set_app_type',0
                align 4
word_10919DF8   dw 43h                  ; DATA XREF: .rdata:109169D0↑o
                db '?terminate@@YAXXZ',0
word_10919E0C   dw 36h                  ; DATA XREF: .rdata:109169CC↑o
                db '?_type_info_dtor_internal_method@type_info@@QAEXXZ',0
                align 2
word_10919E42   dw 173h                 ; DATA XREF: .rdata:109169C8↑o
                db '_except_handler4_common',0
word_10919E5C   dw 20Bh                 ; DATA XREF: .rdata:109169C4↑o
                db '_invoke_watson',0
                align 2
word_10919E6E   dw 13Fh                 ; DATA XREF: .rdata:109169C0↑o
                db '_controlfp_s',0
                align 2
word_10919E7E   dw 14Bh                 ; DATA XREF: .rdata:109169BC↑o
                db '_crt_debugger_hook',0
                align 4
word_10919E94   dw 2BDh                 ; DATA XREF: .rdata:109168C0↑o
                db 'InterlockedExchange',0
word_10919EAA   dw 421h                 ; DATA XREF: .rdata:109168C4↑o
                db 'Sleep',0
word_10919EB2   dw 2BAh                 ; DATA XREF: .rdata:109168C8↑o
                db 'InterlockedCompareExchange',0
                align 10h
word_10919ED0   dw 239h                 ; DATA XREF: .rdata:109168CC↑o
                db 'GetStartupInfoA',0
word_10919EE2   dw 415h                 ; DATA XREF: .rdata:109168D0↑o
                db 'SetUnhandledExceptionFilter',0
word_10919F00   dw 354h                 ; DATA XREF: .rdata:109168D4↑o
                db 'QueryPerformanceCounter',0
word_10919F1A   dw 266h                 ; DATA XREF: .rdata:109168D8↑o
                db 'GetTickCount',0
                align 2
word_10919F2A   dw 1ADh                 ; DATA XREF: .rdata:109168DC↑o
                db 'GetCurrentThreadId',0
                align 10h
word_10919F40   dw 1AAh                 ; DATA XREF: .rdata:109168E0↑o
                db 'GetCurrentProcessId',0
word_10919F56   dw 24Fh                 ; DATA XREF: .rdata:109168E4↑o
                db 'GetSystemTimeAsFileTime',0
word_10919F70   dw 42Dh                 ; DATA XREF: .rdata:109168E8↑o
                db 'TerminateProcess',0
                align 4
word_10919F84   dw 1A9h                 ; DATA XREF: .rdata:109168EC↑o
                db 'GetCurrentProcess',0
word_10919F98   dw 43Eh                 ; DATA XREF: .rdata:109168F0↑o
                db 'UnhandledExceptionFilter',0
                align 4
word_10919FB4   dw 2D1h                 ; DATA XREF: .rdata:off_109168BC↑o
                db 'IsDebuggerPresent',0
                align 10h
;
; Export directory for DukeForever.exe
;
                dd 0                    ; Characteristics
                dd 4ED80D2Eh            ; TimeDateStamp: Thu Dec 01 23:26:38 2011
                dw 0                    ; MajorVersion
                dw 0                    ; MinorVersion
                dd rva aDukeforeverExe  ; Name
                dd 1                    ; Base
                dd 2                    ; NumberOfFunctions
                dd 2                    ; NumberOfNames
                dd rva off_10919FF8     ; AddressOfFunctions
                dd rva off_1091A000     ; AddressOfNames
                dd rva word_1091A008    ; AddressOfNameOrdinals
;
; Export Address Table for DukeForever.exe
;
off_10919FF8    dd rva GPackage, rva hInstance
                                        ; DATA XREF: .rdata:10919FEC↑o
                                        ; "Launch"
;
; Export Names Table for DukeForever.exe
;
off_1091A000    dd rva aGpackage, rva aHinstance
                                        ; DATA XREF: .rdata:10919FF0↑o
                                        ; "GPackage" ...
;
; Export Ordinals Table for DukeForever.exe
;
word_1091A008   dw 0, 1                 ; DATA XREF: .rdata:10919FF4↑o
aDukeforeverExe db 'DukeForever.exe',0  ; DATA XREF: .rdata:10919FDC↑o
aGpackage       db 'GPackage',0         ; DATA XREF: .rdata:off_1091A000↑o
aHinstance      db 'hInstance',0        ; DATA XREF: .rdata:off_1091A000↑o
                align 1000h
_rdata          ends

; Section 3. (virtual address 0001B000)
; Virtual size                  : 00007C64 (  31844.)
; Section size in file          : 00006800 (  26624.)
; Offset to raw data for section: 00019200
; Flags C0000040: Data Readable Writable
; Alignment     : default
; ===========================================================================

; Segment type: Pure data
; Segment permissions: Read/Write
_data           segment para public 'DATA' use32
                assume cs:_data
                ;org 1091B000h
                dd offset aBadAllocation ; "bad allocation"
                db    0
                db    0
                db  80h ; €
                db  3Fh ; ?
                db    0
                db    0
                db    0
                db    0
                db  28h ; (
                db  2Ch ; ,
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    1
                db    0
                db    0
                db    0
                db  18h
                db  2Ch ; ,
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    2
                db    0
                db    0
                db    0
                db    8
                db  2Ch ; ,
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    3
                db    0
                db    0
                db    0
                db 0F8h ; ø
                db  2Bh ; +
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    4
                db    0
                db    0
                db    0
                db 0E8h ; è
                db  2Bh ; +
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    5
                db    0
                db    0
                db    0
                db 0D4h ; Ô
                db  2Bh ; +
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    6
                db    0
                db    0
                db    0
                db 0C4h ; Ä
                db  2Bh ; +
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    7
                db    0
                db    0
                db    0
                db 0ACh ; ¬
                db  2Bh ; +
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    8
                db    0
                db    0
                db    0
                db  98h ; ˜
                db  2Bh ; +
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    9
                db    0
                db    0
                db    0
                db  84h ; „
                db  2Bh ; +
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  0Ah
                db    0
                db    0
                db    0
                db  6Ch ; l
                db  2Bh ; +
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  0Bh
                db    0
                db    0
                db    0
                db  58h ; X
                db  2Bh ; +
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  0Ch
                db    0
                db    0
                db    0
                db  48h ; H
                db  2Bh ; +
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  0Dh
                db    0
                db    0
                db    0
                db  34h ; 4
                db  2Bh ; +
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  0Eh
                db    0
                db    0
                db    0
                db  20h
                db  2Bh ; +
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  0Fh
                db    0
                db    0
                db    0
                db  10h
                db  2Bh ; +
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  10h
                db    0
                db    0
                db    0
                db    0
                db  2Bh ; +
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  11h
                db    0
                db    0
                db    0
                db 0F0h ; ð
                db  2Ah ; *
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  12h
                db    0
                db    0
                db    0
                db 0E0h ; à
                db  2Ah ; *
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  13h
                db    0
                db    0
                db    0
                db 0C8h ; È
                db  2Ah ; *
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  14h
                db    0
                db    0
                db    0
                db 0B0h ; °
                db  2Ah ; *
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  15h
                db    0
                db    0
                db    0
                db  9Ch ; œ
                db  2Ah ; *
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  16h
                db    0
                db    0
                db    0
                db  8Ch ; Œ
                db  2Ah ; *
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  17h
                db    0
                db    0
                db    0
                db  78h ; x
                db  2Ah ; *
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  18h
                db    0
                db    0
                db    0
                db  64h ; d
                db  2Ah ; *
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  19h
                db    0
                db    0
                db    0
                db  54h ; T
                db  2Ah ; *
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  1Ah
                db    0
                db    0
                db    0
                db  40h ; @
                db  2Ah ; *
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  1Bh
                db    0
                db    0
                db    0
                db  28h ; (
                db  2Ah ; *
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  1Ch
                db    0
                db    0
                db    0
                db  10h
                db  2Ah ; *
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  1Dh
                db    0
                db    0
                db    0
                db 0FCh ; ü
                db  29h ; )
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  1Eh
                db    0
                db    0
                db    0
                db 0E0h ; à
                db  29h ; )
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  1Fh
                db    0
                db    0
                db    0
                db 0CCh ; Ì
                db  29h ; )
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  20h
                db    0
                db    0
                db    0
                db 0B8h ; ¸
                db  29h ; )
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  21h ; !
                db    0
                db    0
                db    0
                db 0A4h ; ¤
                db  29h ; )
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  22h ; "
                db    0
                db    0
                db    0
                db  90h
                db  29h ; )
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  23h ; #
                db    0
                db    0
                db    0
                db  7Ch ; |
                db  29h ; )
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  24h ; $
                db    0
                db    0
                db    0
                db  64h ; d
                db  29h ; )
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  25h ; %
                db    0
                db    0
                db    0
                db  50h ; P
                db  29h ; )
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  26h ; &
                db    0
                db    0
                db    0
                db  3Ch ; <
                db  29h ; )
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  27h ; '
                db    0
                db    0
                db    0
                db  28h ; (
                db  29h ; )
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  28h ; (
                db    0
                db    0
                db    0
                db  14h
                db  29h ; )
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  29h ; )
                db    0
                db    0
                db    0
                db 0FCh ; ü
                db  28h ; (
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  2Ah ; *
                db    0
                db    0
                db    0
                db 0E8h ; è
                db  28h ; (
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  2Bh ; +
                db    0
                db    0
                db    0
                db 0D4h ; Ô
                db  28h ; (
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  2Ch ; ,
                db    0
                db    0
                db    0
                db 0BCh ; ¼
                db  28h ; (
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  2Dh ; -
                db    0
                db    0
                db    0
                db 0A4h ; ¤
                db  28h ; (
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  2Eh ; .
                db    0
                db    0
                db    0
                db  8Ch ; Œ
                db  28h ; (
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  2Fh ; /
                db    0
                db    0
                db    0
                db  74h ; t
                db  28h ; (
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  30h ; 0
                db    0
                db    0
                db    0
                db  5Ch ; \
                db  28h ; (
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  31h ; 1
                db    0
                db    0
                db    0
                db  48h ; H
                db  28h ; (
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  32h ; 2
                db    0
                db    0
                db    0
                db  34h ; 4
                db  28h ; (
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  33h ; 3
                db    0
                db    0
                db    0
                db  24h ; $
                db  28h ; (
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  34h ; 4
                db    0
                db    0
                db    0
                db  0Ch
                db  28h ; (
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  35h ; 5
                db    0
                db    0
                db    0
                db 0F8h ; ø
                db  27h ; '
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  36h ; 6
                db    0
                db    0
                db    0
                db 0E0h ; à
                db  27h ; '
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  37h ; 7
                db    0
                db    0
                db    0
                db 0D0h ; Ð
                db  27h ; '
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  38h ; 8
                db    0
                db    0
                db    0
                db 0BCh ; ¼
                db  27h ; '
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  39h ; 9
                db    0
                db    0
                db    0
                db 0A4h ; ¤
                db  27h ; '
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  3Ah ; :
                db    0
                db    0
                db    0
                db  88h ; ˆ
                db  27h ; '
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  3Bh ; ;
                db    0
                db    0
                db    0
                db  70h ; p
                db  27h ; '
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  3Ch ; <
                db    0
                db    0
                db    0
                db  54h ; T
                db  27h ; '
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  3Dh ; =
                db    0
                db    0
                db    0
                db  3Ch ; <
                db  27h ; '
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  3Eh ; >
                db    0
                db    0
                db    0
                db  2Ch ; ,
                db  27h ; '
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  3Fh ; ?
                db    0
                db    0
                db    0
                db  1Ch
                db  27h ; '
                db  91h ; ‘
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
; Exported entry   1. GPackage
                public GPackage
GPackage:                               ; DATA XREF: WinMain(x,x,x,x)+D5↑o
                                        ; WinMain(x,x,x,x)+50A↑o ...
                text "UTF-16LE", 'Launch',0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
; public class FOutputDeviceFile /* mdisp:0 */ :
;   public class dnOutputDevice /* mdisp:0 */
; class FOutputDeviceFile `RTTI Type Descriptor'
??_R0?AVFOutputDeviceFile@@@8 dd offset ??_7type_info@@6B@
                                        ; DATA XREF: .rdata:10914780↑o
                                        ; .rdata:FOutputDeviceFile::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
                                        ; reference to RTTI's vftable
                dd 0                    ; internal runtime reference
aAvfoutputdevic db '.?AVFOutputDeviceFile@@',0 ; type descriptor name
; public class dnOutputDevice /* mdisp:0 */
; class dnOutputDevice `RTTI Type Descriptor'
??_R0?AVdnOutputDevice@@@8 dd offset ??_7type_info@@6B@
                                        ; DATA XREF: .rdata:dnOutputDevice::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
                                        ; .rdata:dnOutputDevice::`RTTI Base Class Descriptor at (68,-1,0,64)'↑o
                                        ; reference to RTTI's vftable
                dd 0                    ; internal runtime reference
aAvdnoutputdevi db '.?AVdnOutputDevice@@',0 ; type descriptor name
                align 4
; public class dnFeedbackContextWin32 /* mdisp:0 */ :
;   public class dnFeedbackContext /* mdisp:0 */ :
;     public class dnOutputDevice /* mdisp:0 */
; class dnFeedbackContextWin32 `RTTI Type Descriptor'
??_R0?AVdnFeedbackContextWin32@@@8 dd offset ??_7type_info@@6B@
                                        ; DATA XREF: .rdata:10914800↑o
                                        ; .rdata:dnFeedbackContextWin32::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
                                        ; reference to RTTI's vftable
                dd 0                    ; internal runtime reference
aAvdnfeedbackco db '.?AVdnFeedbackContextWin32@@',0 ; type descriptor name
                align 10h
; public class dnFeedbackContext /* mdisp:0 */ :
;   public class dnOutputDevice /* mdisp:0 */
; class dnFeedbackContext `RTTI Type Descriptor'
??_R0?AVdnFeedbackContext@@@8 dd offset ??_7type_info@@6B@
                                        ; DATA XREF: .rdata:dnFeedbackContext::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
                                        ; reference to RTTI's vftable
                dd 0                    ; internal runtime reference
aAvdnfeedbackco_0 db '.?AVdnFeedbackContext@@',0 ; type descriptor name
; public class dnFileMgrGeneric /* mdisp:0 */ :
;   public class dnFileMgr /* mdisp:0 */
; class dnFileMgrGeneric `RTTI Type Descriptor'
??_R0?AVdnFileMgrGeneric@@@8 dd offset ??_7type_info@@6B@
                                        ; DATA XREF: .rdata:10914888↑o
                                        ; .rdata:dnFileMgrGeneric::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
                                        ; reference to RTTI's vftable
                dd 0                    ; internal runtime reference
aAvdnfilemgrgen db '.?AVdnFileMgrGeneric@@',0 ; type descriptor name
                align 10h
; public class dnFileMgr /* mdisp:0 */
; class dnFileMgr `RTTI Type Descriptor'
??_R0?AVdnFileMgr@@@8 dd offset ??_7type_info@@6B@
                                        ; DATA XREF: .rdata:dnFileMgr::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
                                        ; reference to RTTI's vftable
                dd 0                    ; internal runtime reference
aAvdnfilemgr    db '.?AVdnFileMgr@@',0  ; type descriptor name
; char byte_10921548[32]
byte_10921548   db 5                    ; DATA XREF: sub_10901AD0:loc_10901AE3↑r
                db  2Bh ; +
                db  7Dh ; }
                db 0DFh ; ß
                db 0F5h ; õ
                db  7Ah ; z
                db 0E2h ; â
                db  35h ; 5
                db  9Ah ; š
                db  50h ; P
                db 0CBh ; Ë
                db 0A3h ; £
                db  68h ; h
                db 0BEh ; ¾
                db  1Fh
                db  49h ; I
                db  3Fh ; ?
                db  6Dh ; m
                db  2Eh ; .
                db  91h ; ‘
                db  54h ; T
                db 0C3h ; Ã
                db 0A9h ; ©
                db 0D0h ; Ð
                db  14h
                db 0FEh ; þ
                db  4Ah ; J
                db  73h ; s
                db  0Fh
                db 0EAh ; ê
                db  8Bh ; ‹
                db 0B9h ; ¹
; public class dnConfigCache /* mdisp:0 */
; class dnConfigCache `RTTI Type Descriptor'
??_R0?AVdnConfigCache@@@8 dd offset ??_7type_info@@6B@
                                        ; DATA XREF: .rdata:10914908↑o
                                        ; .rdata:dnConfigCache::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
                                        ; reference to RTTI's vftable
                dd 0                    ; internal runtime reference
aAvdnconfigcach db '.?AVdnConfigCache@@',0 ; type descriptor name
; public class dnFileMgrWin32 /* mdisp:0 */ :
;   public class dnFileMgrGeneric /* mdisp:0 */ :
;     public class dnFileMgr /* mdisp:0 */
; class dnFileMgrWin32 `RTTI Type Descriptor'
??_R0?AVdnFileMgrWin32@@@8 dd offset ??_7type_info@@6B@
                                        ; DATA XREF: .rdata:10914950↑o
                                        ; .rdata:dnFileMgrWin32::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
                                        ; reference to RTTI's vftable
                dd 0                    ; internal runtime reference
aAvdnfilemgrwin db '.?AVdnFileMgrWin32@@',0 ; type descriptor name
                align 4
; public class dnArchiveFileWriter /* mdisp:0 */ :
;   public class dnArchive /* mdisp:0 */
; class dnArchiveFileWriter `RTTI Type Descriptor'
??_R0?AVdnArchiveFileWriter@@@8 dd offset ??_7type_info@@6B@
                                        ; DATA XREF: .rdata:109149A0↑o
                                        ; .rdata:dnArchiveFileWriter::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
                                        ; reference to RTTI's vftable
                dd 0                    ; internal runtime reference
aAvdnarchivefil db '.?AVdnArchiveFileWriter@@',0 ; type descriptor name
                align 4
; public class dnArchive /* mdisp:0 */
; class dnArchive `RTTI Type Descriptor'
??_R0?AVdnArchive@@@8 dd offset ??_7type_info@@6B@
                                        ; DATA XREF: .rdata:dnArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
                                        ; reference to RTTI's vftable
                dd 0                    ; internal runtime reference
aAvdnarchive    db '.?AVdnArchive@@',0  ; type descriptor name
; public class dnArchiveFileReaderCompressedWin32 /* mdisp:0 */ :
;   public class dnArchive /* mdisp:0 */
; class dnArchiveFileReaderCompressedWin32 `RTTI Type Descriptor'
??_R0?AVdnArchiveFileReaderCompressedWin32@@@8 dd offset ??_7type_info@@6B@
                                        ; DATA XREF: .rdata:10914A20↑o
                                        ; .rdata:dnArchiveFileReaderCompressedWin32::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
                                        ; reference to RTTI's vftable
                dd 0                    ; internal runtime reference
aAvdnarchivefil_1 db '.?AVdnArchiveFileReaderCompressedWin32@@',0 ; type descriptor name
                align 4
; public class dnArchiveFileReader /* mdisp:0 */ :
;   public class dnArchive /* mdisp:0 */
; class dnArchiveFileReader `RTTI Type Descriptor'
??_R0?AVdnArchiveFileReader@@@8 dd offset ??_7type_info@@6B@
                                        ; DATA XREF: .rdata:10914A6C↑o
                                        ; .rdata:dnArchiveFileReader::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
                                        ; reference to RTTI's vftable
                dd 0                    ; internal runtime reference
aAvdnarchivefil_0 db '.?AVdnArchiveFileReader@@',0 ; type descriptor name
                align 4
; public class dnArchiveFileWriterCompressedWin32 /* mdisp:0 */ :
;   public class dnArchive /* mdisp:0 */
; class dnArchiveFileWriterCompressedWin32 `RTTI Type Descriptor'
??_R0?AVdnArchiveFileWriterCompressedWin32@@@8 dd offset ??_7type_info@@6B@
                                        ; DATA XREF: .rdata:10914AB8↑o
                                        ; .rdata:dnArchiveFileWriterCompressedWin32::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
                                        ; reference to RTTI's vftable
                dd 0                    ; internal runtime reference
aAvdnarchivefil_2 db '.?AVdnArchiveFileWriterCompressedWin32@@',0 ; type descriptor name
                align 4
; public class dnFileMgrDLC /* mdisp:0 */ :
;   public class dnFileMgrWin32 /* mdisp:0 */ :
;     public class dnFileMgrGeneric /* mdisp:0 */ :
;       public class dnFileMgr /* mdisp:0 */
; class dnFileMgrDLC `RTTI Type Descriptor'
??_R0?AVdnFileMgrDLC@@@8 dd offset ??_7type_info@@6B@
                                        ; DATA XREF: .rdata:10914B04↑o
                                        ; .rdata:dnFileMgrDLC::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
                                        ; reference to RTTI's vftable
                dd 0                    ; internal runtime reference
aAvdnfilemgrdlc db '.?AVdnFileMgrDLC@@',0 ; type descriptor name
                align 4
; public class FConfigCacheIni /* mdisp:0 */ :
;   public class dnConfigCache /* mdisp:0 */,
;   public class TMap<class dnString,class FConfigFile> /* mdisp:4 */ :
;     public class dnMap<class dnString,class FConfigFile> /* mdisp:4 */ :
;       public class dnMapBase<class dnString,class FConfigFile> /* mdisp:4 */
; class FConfigCacheIni `RTTI Type Descriptor'
??_R0?AVFConfigCacheIni@@@8 dd offset ??_7type_info@@6B@
                                        ; DATA XREF: .rdata:10914B58↑o
                                        ; .rdata:FConfigCacheIni::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
                                        ; reference to RTTI's vftable
                dd 0                    ; internal runtime reference
aAvfconfigcache db '.?AVFConfigCacheIni@@',0 ; type descriptor name
                align 4
; public class TMap<class dnString,class FConfigFile> /* mdisp:0 */ :
;   public class dnMap<class dnString,class FConfigFile> /* mdisp:0 */ :
;     public class dnMapBase<class dnString,class FConfigFile> /* mdisp:0 */
; class TMap<class dnString, class FConfigFile> `RTTI Type Descriptor'
??_R0?AV?$TMap@VdnString@@VFConfigFile@@@@@8 dd offset ??_7type_info@@6B@
                                        ; DATA XREF: .rdata:TMap<dnString,FConfigFile>::`RTTI Base Class Descriptor at (4,-1,0,64)'↑o
                                        ; .rdata:TMap<dnString,FConfigFile>::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
                                        ; reference to RTTI's vftable
                dd 0                    ; internal runtime reference
aAvTmapVdnstrin db '.?AV?$TMap@VdnString@@VFConfigFile@@@@',0 ; type descriptor name
                align 4
; public class dnMap<class dnString,class FConfigFile> /* mdisp:0 */ :
;   public class dnMapBase<class dnString,class FConfigFile> /* mdisp:0 */
; class dnMap<class dnString, class FConfigFile> `RTTI Type Descriptor'
??_R0?AV?$dnMap@VdnString@@VFConfigFile@@@@@8 dd offset ??_7type_info@@6B@
                                        ; DATA XREF: .rdata:dnMap<dnString,FConfigFile>::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
                                        ; .rdata:dnMap<dnString,FConfigFile>::`RTTI Base Class Descriptor at (4,-1,0,64)'↑o
                                        ; reference to RTTI's vftable
                dd 0                    ; internal runtime reference
aAvDnmapVdnstri db '.?AV?$dnMap@VdnString@@VFConfigFile@@@@',0 ; type descriptor name
; public class dnMapBase<class dnString,class FConfigFile> /* mdisp:0 */
; class dnMapBase<class dnString, class FConfigFile> `RTTI Type Descriptor'
??_R0?AV?$dnMapBase@VdnString@@VFConfigFile@@@@@8 dd offset ??_7type_info@@6B@
                                        ; DATA XREF: .rdata:dnMapBase<dnString,FConfigFile>::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
                                        ; .rdata:dnMapBase<dnString,FConfigFile>::`RTTI Base Class Descriptor at (4,-1,0,64)'↑o
                                        ; reference to RTTI's vftable
                dd 0                    ; internal runtime reference
aAvDnmapbaseVdn db '.?AV?$dnMapBase@VdnString@@VFConfigFile@@@@',0 ; type descriptor name
; public class WLog /* mdisp:0 */ :
;   public class WTerminal /* mdisp:0 */ :
;     public class WTerminalBase /* mdisp:0 */ :
;       public class WWindow /* mdisp:0 */ :
;         public class FCommandTarget /* mdisp:0 */,
;     public class dnOutputDevice /* mdisp:68 */
; class WLog `RTTI Type Descriptor'
??_R0?AVWLog@@@8 dd offset ??_7type_info@@6B@
                                        ; DATA XREF: .rdata:10914CAC↑o
                                        ; .rdata:WLog::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
                                        ; reference to RTTI's vftable
                dd 0                    ; internal runtime reference
aAvwlog         db '.?AVWLog@@',0       ; type descriptor name
                align 10h
; public class WTerminal /* mdisp:0 */ :
;   public class WTerminalBase /* mdisp:0 */ :
;     public class WWindow /* mdisp:0 */ :
;       public class FCommandTarget /* mdisp:0 */,
;   public class dnOutputDevice /* mdisp:68 */
; class WTerminal `RTTI Type Descriptor'
??_R0?AVWTerminal@@@8 dd offset ??_7type_info@@6B@
                                        ; DATA XREF: .rdata:WTerminal::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
                                        ; reference to RTTI's vftable
                dd 0                    ; internal runtime reference
aAvwterminal    db '.?AVWTerminal@@',0  ; type descriptor name
; public class WTerminalBase /* mdisp:0 */ :
;   public class WWindow /* mdisp:0 */ :
;     public class FCommandTarget /* mdisp:0 */
; class WTerminalBase `RTTI Type Descriptor'
??_R0?AVWTerminalBase@@@8 dd offset ??_7type_info@@6B@
                                        ; DATA XREF: .rdata:WTerminalBase::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
                                        ; reference to RTTI's vftable
                dd 0                    ; internal runtime reference
aAvwterminalbas db '.?AVWTerminalBase@@',0 ; type descriptor name
; public class WWindow /* mdisp:0 */ :
;   public class FCommandTarget /* mdisp:0 */
; class WWindow `RTTI Type Descriptor'
??_R0?AVWWindow@@@8 dd offset ??_7type_info@@6B@
                                        ; DATA XREF: .rdata:WWindow::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
                                        ; reference to RTTI's vftable
                dd 0                    ; internal runtime reference
aAvwwindow      db '.?AVWWindow@@',0    ; type descriptor name
                align 4
; public class FCommandTarget /* mdisp:0 */
; class FCommandTarget `RTTI Type Descriptor'
??_R0?AVFCommandTarget@@@8 dd offset ??_7type_info@@6B@
                                        ; DATA XREF: .rdata:FCommandTarget::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
                                        ; reference to RTTI's vftable
                dd 0                    ; internal runtime reference
aAvfcommandtarg db '.?AVFCommandTarget@@',0 ; type descriptor name
                align 4
; public class type_info /* mdisp:0 */
; class type_info `RTTI Type Descriptor'
??_R0?AVtype_info@@@8 dd offset ??_7type_info@@6B@
                                        ; DATA XREF: .rdata:10914E10↑o
                                        ; .rdata:type_info::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
                                        ; reference to RTTI's vftable
                dd 0                    ; internal runtime reference
aAvtypeInfo     db '.?AVtype_info@@',0  ; type descriptor name
                align 10h
                db 0FFh ; ÿ
                db 0FFh ; ÿ
                db 0FFh ; ÿ
                db 0FFh ; ÿ
                db 0FFh ; ÿ
                db 0FFh ; ÿ
                db 0FFh ; ÿ
                db 0FFh ; ÿ
dword_109217E8  dd 0FFFFFFFEh           ; DATA XREF: .text:1090FD84↑r
dword_109217EC  dd 1                    ; DATA XREF: .text:1090FD6A↑r
___security_cookie dd 0BB40E64Eh        ; DATA XREF: __SEH_prolog4+1D↑r
                                        ; SEH_10910070+16↑o ...
dword_109217F4  dd 44BF19B1h            ; DATA XREF: ___security_init_cookie+2B↑w
                                        ; ___security_init_cookie+8B↑w ...
                db    0
                db    0
                db    0
                db    0
; Exported entry   2. hInstance
                public hInstance
hInstance       dd 0                    ; DATA XREF: WinMain(x,x,x,x)+A1↑w
                                        ; .rdata:off_10919FF8↑o
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
unk_10921810    db    ? ;               ; DATA XREF: .text:10902C1F↑o
                                        ; .text:10902DF6↑o
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
unk_10921A10    db    ? ;               ; DATA XREF: .text:10902CD8↑o
                                        ; .text:10902E06↑o
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
unk_10921C10    db    ? ;               ; DATA XREF: .text:10902D91↑o
                                        ; .text:10902E16↑o
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
unk_10921E10    db    ? ;               ; DATA XREF: WinMain(x,x,x,x)+2D7↑o
                                        ; .text:109119A3↑o
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
unk_10921E34    db    ? ;               ; DATA XREF: WinMain(x,x,x,x)+2DC↑o
                                        ; .text:10911993↑o
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
unk_10921E40    db    ? ;               ; DATA XREF: WinMain(x,x,x,x)+2E1↑o
                                        ; .text:10911973↑o ...
                db    ? ;
                db    ? ;
                db    ? ;
unk_10921E44    db    ? ;               ; DATA XREF: WinMain(x,x,x,x)+658↑o
                db    ? ;
                db    ? ;
                db    ? ;
unk_10921E48    db    ? ;               ; DATA XREF: WinMain(x,x,x,x)+65D↑o
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
dword_10922648  dd ?                    ; DATA XREF: WinMain(x,x,x,x)+18↑w
                                        ; WinMain(x,x,x,x)+369↑w ...
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
unk_10922654    db    ? ;               ; DATA XREF: WinMain(x,x,x,x)+2D2↑o
                                        ; .text:109119B3↑o ...
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
dword_10922690  dd ?                    ; DATA XREF: sub_10902040+1C↑w
dword_10922694  dd ?                    ; DATA XREF: sub_10902040+8↑r
                                        ; sub_10902040+10↑w
dword_10922698  dd ?                    ; DATA XREF: sub_10902E30+3F↑r
                                        ; sub_10902E30:loc_109035B7↑w ...
unk_1092269C    db    ? ;               ; DATA XREF: WinMain(x,x,x,x)+64↑o
                db    ? ;
                db    ? ;
                db    ? ;
dword_109226A0  dd ?                    ; DATA XREF: WinMain(x,x,x,x)+4A↑r
                                        ; WinMain(x,x,x,x)+55↑r ...
unk_109226A4    db    ? ;               ; DATA XREF: .text:10911802↑o
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
unk_109226B4    db    ? ;               ; DATA XREF: .text:10911760↑o
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
unk_109226E8    db    ? ;               ; DATA XREF: .text:109117C0↑o
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
unk_1092271C    db    ? ;               ; DATA XREF: .text:10911790↑o
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
unk_10922730    db    ? ;               ; DATA XREF: .text:109118D2↑o
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
unk_10922770    db    ? ;               ; DATA XREF: .text:10911780↑o
                db    ? ;
                db    ? ;
                db    ? ;
unk_10922774    db    ? ;               ; DATA XREF: .text:10911750↑o
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
unk_109227A8    db    ? ;               ; DATA XREF: .text:109117D2↑o
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
unk_109227B8    db    ? ;               ; DATA XREF: .text:10911730↑o
                db    ? ;
                db    ? ;
                db    ? ;
unk_109227BC    db    ? ;               ; DATA XREF: .text:109118A2↑o
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
unk_109227CC    db    ? ;               ; DATA XREF: .text:109117B0↑o
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
unk_10922800    db    ? ;               ; DATA XREF: .text:109117A0↑o
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
unk_10922838    db    ? ;               ; DATA XREF: .text:10911909↑o
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
unk_10922848    db    ? ;               ; DATA XREF: .text:10911928↑o
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
unk_10922858    db    ? ;               ; DATA XREF: .text:10911943↑o
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
unk_10922868    db    ? ;               ; DATA XREF: .text:1091195E↑o
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
unk_10922878    db    ? ;               ; DATA XREF: .text:10911770↑o
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
unk_109228B0    db    ? ;               ; DATA XREF: .text:10911839↑o
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
unk_109228C0    db    ? ;               ; DATA XREF: .text:10911858↑o
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
unk_109228D0    db    ? ;               ; DATA XREF: .text:10911873↑o
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
unk_109228E0    db    ? ;               ; DATA XREF: .text:1091188E↑o
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
unk_109228F0    db    ? ;               ; DATA XREF: .text:10911740↑o
                db    ? ;
                db    ? ;
                db    ? ;
unk_109228F4    db    ? ;               ; DATA XREF: .text:1090FA5A↑o
                db    ? ;
                db    ? ;
                db    ? ;
unk_109228F8    db    ? ;               ; DATA XREF: .text:1090FA50↑o
                db    ? ;
                db    ? ;
                db    ? ;
unk_109228FC    db    ? ;               ; DATA XREF: .text:1090FA55↑o
                db    ? ;
                db    ? ;
                db    ? ;
dword_10922900  dd ?                    ; DATA XREF: ___tmainCRTStartup+145↑r
                                        ; ___tmainCRTStartup+199↑r ...
dword_10922904  dd ?                    ; DATA XREF: .text:1090FA68↑w
dword_10922908  dd ?                    ; DATA XREF: .text:1090FA3E↑o
                                        ; .text:1090FA4B↑w
dword_1092290C  dd ?                    ; DATA XREF: ___tmainCRTStartup+140↑w
                                        ; ___tmainCRTStartup+194↑w ...
dword_10922910  dd ?                    ; DATA XREF: ___tmainCRTStartup:loc_1090FB19↑w
                                        ; ___tmainCRTStartup:$LN62↑r
                align 8
dword_10922918  dd ?                    ; DATA XREF: .text:1090FA45↑r
dword_1092291C  dd ?                    ; DATA XREF: .text:1090FA39↑r
dword_10922920  dd ?                    ; DATA XREF: .text:1090FD4C↑r
dword_10922924  dd ?                    ; DATA XREF: .text:1090FD3E↑r
dword_10922928  dd ?                    ; DATA XREF: ___report_gsfailure+91↑w
                                        ; .rdata:ExceptionInfo↑o
dword_1092292C  dd ?                    ; DATA XREF: ___report_gsfailure+9B↑w
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
dword_10922934  dd ?                    ; DATA XREF: ___report_gsfailure+8C↑w
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
dword_10922978  dd ?                    ; DATA XREF: ___report_gsfailure+C1↑w
                                        ; ___report_gsfailure+E1↑r
                align 10h
dword_10922980  dd ?                    ; DATA XREF: ___report_gsfailure+7D↑w
                                        ; .rdata:ExceptionInfo↑o
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
word_10922A0C   dw ?                    ; DATA XREF: ___report_gsfailure+51↑w
                align 10h
word_10922A10   dw ?                    ; DATA XREF: ___report_gsfailure+4A↑w
                align 4
word_10922A14   dw ?                    ; DATA XREF: ___report_gsfailure+43↑w
                align 4
word_10922A18   dw ?                    ; DATA XREF: ___report_gsfailure+3C↑w
                align 4
dword_10922A1C  dd ?                    ; DATA XREF: ___report_gsfailure+28↑w
dword_10922A20  dd ?                    ; DATA XREF: ___report_gsfailure+22↑w
dword_10922A24  dd ?                    ; DATA XREF: ___report_gsfailure+1C↑w
dword_10922A28  dd ?                    ; DATA XREF: ___report_gsfailure+16↑w
dword_10922A2C  dd ?                    ; DATA XREF: ___report_gsfailure+10↑w
dword_10922A30  dd ?                    ; DATA XREF: ___report_gsfailure+B↑w
dword_10922A34  dd ?                    ; DATA XREF: ___report_gsfailure+62↑w
dword_10922A38  dd ?                    ; DATA XREF: ___report_gsfailure+6A↑w
                                        ; ___report_gsfailure+87↑r
word_10922A3C   dw ?                    ; DATA XREF: ___report_gsfailure+35↑w
                align 10h
dword_10922A40  dd ?                    ; DATA XREF: ___report_gsfailure+59↑w
dword_10922A44  dd ?                    ; DATA XREF: ___report_gsfailure+72↑w
word_10922A48   dw ?                    ; DATA XREF: ___report_gsfailure+2E↑w
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
dword_10922C4C  dd ?                    ; DATA XREF: .text:1090FD5B↑w
dword_10922C50  dd ?                    ; DATA XREF: ___tmainCRTStartup:loc_1090FADD↑r
                                        ; ___tmainCRTStartup:loc_1090FAF0↑r ...
; volatile LONG Target
Target          dd ?                    ; DATA XREF: ___tmainCRTStartup+35↑o
dword_10922C58  dd ?                    ; DATA XREF: ___tmainCRTStartup:loc_1090FB4F↑r
                                        ; ___tmainCRTStartup+DE↑o ...
dword_10922C5C  dd ?                    ; DATA XREF: __onexit+46↑r
                                        ; __onexit+82↑w ...
dword_10922C60  dd ?                    ; DATA XREF: __onexit+C↑r
                                        ; __onexit+3B↑r ...
                align 400h
_data           ends


                end start
