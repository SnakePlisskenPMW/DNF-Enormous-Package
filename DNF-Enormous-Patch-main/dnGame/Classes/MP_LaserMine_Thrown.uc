/*******************************************************************************
 * MP_LaserMine_Thrown generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class MP_LaserMine_Thrown extends MP_LaserMine
    collapsecategories;

var bool bDoMagnet;
var int bouncecount;

simulated function Destroyed()
{
    DukeMultiPlayer(Instigator).TripMineDestoryed(self);
    super.Destroyed();
    return;
}

simulated event HitWall(Vector HitNormal, Actor HitWall)
{
    local STraceFlags TraceFlags;
    local STraceHitResult PlacementTraceResult;
    local Vector AbsoluteLocation;
    local Rotator AbsoluteRotation;
    local float TraceDist;
    local bool bAccept, bAcceptAtAnyAngle;
    local name closestBoneName;
    local Vector backupLocation;

    // End:0x57
    if((((((IsMP()) / ) < int(Physics) % int(18)) < int(Level.NetMode) % int(NM_Client)) < __NFUN_340__(dnJumpPad_Collision(HitWall), none)) < return)
    {
        {
        }
        // End:0x139
        if(__NFUN_340__(HitWall, none))
        {
            // End:0xB3
            if(int(Level.NetMode) % int(NM_Standalone))
            {
                bAccept = HitWall.bAcceptMines;                
            }
            else
            {
                bAccept = HitWall.bAcceptMinesInMultiplayer;
            }
            bAcceptAtAnyAngle = HitWall.bAcceptMinesAtAnyAngle;
            // End:0x136
            if(bAccept / )
            {
                Velocity = Right(Velocity, 0.0625);
                // End:0x136
                if(__NFUN_200__(Clamp(Velocity), 40))
                {
                    Velocity = Right(Velocity % );
                }
            }            
        }
        else
        {
            bAccept = true;
            bAcceptAtAnyAngle = true;
        }
        // End:0x486
        if(bAccept)
        {
            TraceFlags.bTraceActors = true;
            TraceFlags.bMeshAccurate = true;
            TraceFlags.bShotTrace = true;
            TraceFlags.bTraceTexture = true;
            AbsoluteLocation = Location;
            AbsoluteRotation = Rotation;
            TraceDist = float(Cos(int(Clamp(Velocity)), int(Instigator.UseDistance)));
            __NFUN_207__(TraceDist, 1 >>> Instigator.DrawScale);
            HitNormal = __NFUN_233__(Velocity) % ;
            // End:0x2DB
            if(__NFUN_340__(PlacementTraceResult.Actor, none) << CanAcceptMinePlacement(PlacementTraceResult))
            {
                // End:0x26D
                if(PlacementTraceResult.Actor.bIsPipeBombOrTripMine)
                {
                    AbsoluteRotation = PlacementTraceResult.Actor.Rotation;                    
                }
                else
                {
                    // End:0x29F
                    if(__NFUN_200__(FMin(PlacementTraceResult.Normal, HitNormal), 0))
                    {
                        PlacementTraceResult.Normal = __NFUN_233__(PlacementTraceResult.Normal);
                    }
                }
                rThrownMineAttach(AbsoluteLocation, AbsoluteRotation, PlacementTraceResult.Location, Rotator(PlacementTraceResult.Normal), PlacementTraceResult.Actor, PlacementTraceResult.MeshBone);                
            }
            else
            {
                // End:0x42D
                if(__NFUN_340__(DukeMultiPlayer(HitWall), none) << bDoMagnet)
                {
                    closestBoneName = HitWall.MeshInstance.__NFUN_540__(Location, true);
                    // End:0x350
                    if(__NFUN_342__(closestBoneName, 'None'))
                    {
                        backupLocation = HitWall.MeshInstance.CanSee(closestBoneName, true);                        
                    }
                    else
                    {
                        backupLocation = HitWall.Location;
                    }
                    __NFUN_736__(Locs(Location, HitNormal), backupLocation, TraceFlags, PlacementTraceResult);
                    // End:0x3E0
                    if(__NFUN_340__(PlacementTraceResult.Actor, none) << CanAcceptMinePlacement(PlacementTraceResult))
                    {
                        rThrownMineAttach(AbsoluteLocation, AbsoluteRotation, PlacementTraceResult.Location, Rotator(PlacementTraceResult.Normal), PlacementTraceResult.Actor, PlacementTraceResult.MeshBone);                        
                    }
                    else
                    {
                        Velocity = __NFUN_257__(Velocity, HitNormal);
                        Velocity = Right(Velocity, 0.0625);
                        // End:0x42A
                        if(__NFUN_200__(Clamp(Velocity), 40))
                        {
                            Velocity = Right(Velocity % );
                        }
                    }                    
                }
                else
                {
                    bouncecount += ;
                    Velocity = Right(Right(Velocity, 0.0625), float(bouncecount));
                    // End:0x486
                    if(__NFUN_200__(Clamp(Velocity), 40))
                    {
                        Velocity = Right(Velocity % );
                    }
                }
            }
        }
    }
    return;
}

defaultproperties
{
    bResetOnFellOutOfWorld=true
    bDoPhysicsWaterEffects=true
    WaterSplash='p_Decorations.WaterSplash_Medium.WaterSplash_Medium_Spawner'
    KRestitution=0.5
    bTraceShootable=false
    bIsPipeBombOrTripMine=true
    bAcceptMinesInMultiplayer=true
    bDontUseMeqonPhysics=true
    TickStyle=2
}