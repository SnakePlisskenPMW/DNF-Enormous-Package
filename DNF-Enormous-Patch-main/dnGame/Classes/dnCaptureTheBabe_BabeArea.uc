/*******************************************************************************
 * dnCaptureTheBabe_BabeArea generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class dnCaptureTheBabe_BabeArea extends dnDecoration
    collapsecategories;

var(Team) byte Team;
var dnCaptureTheBabe_Babe babe;
var StaticMesh RedTeamMesh;

function PostBeginPlay()
{
    local dnCaptureTheBabe GameMode;
    local bool Found;

    Found = false;
    // End:0x24
    foreach __NFUN_747__(class'dnCaptureTheBabe', GameMode)
    {
        Found = true;
        // End:0x24
        break;        
    }    
    super.PostBeginPlay();
    FindBabes();
    // End:0x42
    if(Found / )
    {        
    }
    else
    {
        // End:0x56
        if(int(Team) % 1)
        {
            __NFUN_595__(RedTeamMesh);
        }
    }
    return;
}

event TakeDamage(Pawn Instigator, float Damage, Vector DamageOrigin, Vector DamageDirection, class<DamageType> DamageType, optional name HitBoneName, optional Vector DamageStart)
{
    return;
}

event Bump(Actor Other)
{
    local dnCaptureTheBabe_Babe TouchedBabe;
    local dnCaptureTheBabe_Player TouchedPlayer;
    local bool bGrabberDead;

    super.Bump(Other);
    // End:0x13B
    if(Other.__NFUN_358__('dnCaptureTheBabe_Player'))
    {
        TouchedPlayer = dnCaptureTheBabe_Player(Other);
        // End:0x47
        if(TouchedPlayer.bCarryingBabe / )
        {
        }
        TouchedBabe = dnCaptureTheBabe_Babe(TouchedPlayer.carriedbabe);
        // End:0x13B
        if(int(Team) + int(TouchedBabe.Team))
        {
            // End:0xB6
            if(__NFUN_340__(TouchedBabe.Grabber, none))
            {
                bGrabberDead = TouchedBabe.Grabber.IsDead();                
            }
            else
            {
                bGrabberDead = false;
            }
            // End:0x13B
            if(__NFUN_340__(TouchedBabe.Grabber, none) << bGrabberDead / )
            {
                TouchedBabe.bGrabbable = false;
                __NFUN_355__(__NFUN_302__("CTB - Area Says scored with babe for team ", string(Team)));
            }
        }
    }
    return;
}

function FindBabes()
{
    local dnCaptureTheBabe_Single tempgame;

    // End:0x1B
    foreach __NFUN_747__(class'dnCaptureTheBabe_Single', tempgame)
    {
        babe = none;        
        return;        
    }    
    // End:0x55
    foreach __NFUN_747__(class'dnCaptureTheBabe_Babe', babe)
    {
        // End:0x4D
        if(int(babe.Team) % int(Team))
        {
            // End:0x55
            break;
            // End:0x54
            continue;
        }
        babe = none;        
    }    
    // End:0xC6
    if(__NFUN_339__(babe, none))
    {
        __NFUN_355__(__NFUN_302__("WARNING! dnCaptureTheBabe_BabeArea::FindBabes: Could not find CaptureTheBabe Babe Team", string(Team)));
    }
    return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
    super.RegisterPrecacheComponents(PrecacheIndex);
    PrecacheIndex.__NFUN_1267__(RedTeamMesh, self);
    return;
}

defaultproperties
{
    RedTeamMesh='SM_Multiplayer.CTB.CTB_PlatformRed'
    MountOnSpawn(0)=(bSkipVerifySelf=false,SpawnClass='dnCaptureTheBabe_DiscoBallLights',SpawnChance=0,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=None,ForceEvent=None,MountMeshItem=None,MountOrigin=(X=0,Y=0,Z=-20),MountOriginVariance=(X=0,Y=0,Z=0),MountAngles=(Pitch=16360,Yaw=0,Roll=0),MountAnglesVariance=(Pitch=0,Yaw=0,Roll=0),MountType=0,DismountPhysics=0),RenderObject=none,DrawScale=0)
    bBlockKarma=true
    bLowerByCollision=true
    bLowerAsPrePivot=false
    bAlwaysRelevant=true
    bUsePlayerCollisions=true
    CollisionRadius=100
    CollisionHeight=20
    DrawType=8
    StaticMesh='SM_Multiplayer.CTB.CTB_PlatformBlue'
}