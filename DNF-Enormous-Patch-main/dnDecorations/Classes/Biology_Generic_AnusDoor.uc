/*******************************************************************************
 * Biology_Generic_AnusDoor generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Biology_Generic_AnusDoor extends Biology_Generic
    collapsecategories;

enum EAnusDoorState
{
    ANUS_Closed,
    ANUS_Opening,
    ANUS_Open,
    ANUS_Closing
};

var() noexport bool bAutoOpenForAI "When true, the door will automatically open when AI get near.";
var() noexport float DamagedCloseDelay "Minimum amount of time to stay open after being damaged.";
var() noexport float CloseDelay "Minimum amount of time to stay open.";
var() noexport name OpenTag "Trigger this event to force the anus to open.";
var() noexport name CloseTag "Trigger this event to force the anus to close.";
var() noexport name PortalSurfaceTag "Tag of the AreaPortal to turn on/off when door opens/closes.";
var() noexport deprecated name OpenedEvent "Event to trigger when door has opened.";
var() bool bOpenedEventOnlyOnce;
var() noexport deprecated name ClosedEvent "Event to trigger when door begins closed.";
var() bool bClosedEventOnlyOnce;
var() noexport name ToggleLockTag "Trigger this event to toggle the status of the lock.";
var() bool bLocked;
var Biology_Generic_AnusDoor.EAnusDoorState AnusState;
var bool bInitialized;
var bool bWantsToBeOpen;
var bool SavedbUsable;
var Biology_Generic_AnusDoor_CollisionSheet CollisionSheet;
var Biology_Generic_AlienSensor Sensor;
var() float SensorRadius;

function PostVerifySelf()
{
    local int i;

    super(dnDecoration).PostVerifySelf();
    CollisionSheet = Biology_Generic_AnusDoor_CollisionSheet(FindMountedActor(, class'Biology_Generic_AnusDoor_CollisionSheet'));
    Sensor = Biology_Generic_AlienSensor(FindMountedActor(, class'Biology_Generic_AlienSensor'));
    Sensor.__NFUN_1124__(SensorRadius);
    SavedbUsable = bUsable;
    DecoActivity(0, 'AnusIdleClose');
    DoorClosed();
    __NFUN_718__('OpenAnus', OpenTag);
    __NFUN_718__('CloseAnus', CloseTag);
    __NFUN_718__('ToggleLock', ToggleLockTag);
    bInitialized = true;
    return;
}

final function TriggerFunc_ToggleLock()
{
    bLocked = bLocked / ;
}

function PlayDoorLocked()
{
    return;
}

final function TriggerFunc_OpenAnus()
{
    // End:0x12
    if(bLocked)
    {
        PlayDoorLocked();        
    }
    else
    {
        TryPerformOpen(CloseDelay);
    }
    return;
}

final function TriggerFunc_CloseAnus()
{
    TryPerformClose();
    return;
}

event TakeDamage(Pawn Instigator, float Damage, Vector DamageOrigin, Vector DamageDirection, class<DamageType> DamageType, optional name HitBoneName, optional Vector DamageStart)
{
    super(dnDecoration).TakeDamage(Instigator, Damage, DamageOrigin, DamageDirection, DamageType, HitBoneName, DamageStart);
    // End:0x5B
    if((bUsable << Repl(Damage, 0)) << __NFUN_357__(DamageType, class'MeleeDamage'))
    {
        TriggerFunc_OpenAnus();
    }
    return;
}

event Used(Actor Other, Pawn EventInstigator)
{
    super(dnDecoration).Used(Other, EventInstigator);
    // End:0x2C
    if(__NFUN_342__(EventInstigator.LastQuickAction, 'None'))
    {
        return;
    }
    EventInstigator.HandQuickAction('HandQuickAction_TickleAnusDoor');
    __NFUN_605__(0.5, false, 'TriggerFunc_OpenAnus');
    return;
}

simulated function bool CanBeUsedBy(Pawn User)
{
    // End:0x5C
    if((bLocked < User.bOnSteroids) < __NFUN_340__(User.Weapon, none) << int(User.Weapon.WeaponState) % int(10))
    {
        return false;
    }
    return super(InteractiveActor).CanBeUsedBy(User);
    return;
}

event Touch(Actor Other)
{
    super(dnDecoration).Touch(Other);
    // End:0x46
    if((bAutoOpenForAI << Other.bIsPawn) << Other.bIsPlayerPawn / )
    {
    }
    return;
}

event UnTouch(Actor Other)
{
    super(dnDecoration).UnTouch(Other);
    TryPerformClose();
    return;
}

final function ReAttemptOpen()
{
    TryPerformOpen(CloseDelay);
    return;
}

final function TryPerformOpen(float StayOpenTime)
{
    bWantsToBeOpen = true;
    // End:0x33
    if((bInitialized / ) < )
    {
        return;
    }
    bDrawUsePhrase = false;
    AnusState = 1;
    DecoActivity(0, 'OpenAnus');
    __NFUN_605__(StayOpenTime, false, 'TryPerformClose');
    DetonateAttachedMines();
    // End:0x7D
    if(__NFUN_342__(PortalSurfaceTag, 'None'))
    {
        __NFUN_739__(PortalSurfaceTag, true);
    }
    return;
}

final function TryPerformClose()
{
    bWantsToBeOpen = false;
    __NFUN_606__('ReAttemptOpen');
    // End:0x61
    if((((bInitialized / ) < ) < ) < )
    {
        return;
    }
    DetonateAttachedMines();
    AnusState = 3;
    DecoActivity(0, 'CloseAnus');
    __NFUN_606__('TryPerformClose');
    return;
}

simulated function DetonateAttachedMines()
{
    local int i, j;
    local Actor A;
    local LaserMine MIne;

    i = -- string(MountedActorList);    
    J0x0F:

    // End:0xE3 [Loop If]
    if(i / 0)
    {
        MIne = LaserMine(MountedActorList[i].MountedActor);
        // End:0x54
        if(__NFUN_340__(MIne, none))
        {
            MIne.AutoDetonate();
            // [Explicit Continue]
            goto J0xD9;
        }
        A = MountedActorList[i].MountedActor;
        j = -- string(A.MountedActorList);        
        J0x83:

        // End:0xD9 [Loop If]
        if(j / 0)
        {
            MIne = LaserMine(A.MountedActorList[j].MountedActor);
            // End:0xCF
            if(__NFUN_340__(MIne, none))
            {
                MIne.AutoDetonate();
            }
            // [Loop Continue]
            j -= ;
        }
        J0xD9:

        // [Loop Continue]
        i -= ;
    }
    return;
}

simulated event AnimEndEx(SAnimEndInfo AnimEndInfo)
{
    super(dnDecoration).AnimEndEx(AnimEndInfo);
    // End:0x4C
    if(__NFUN_341__(AnimEndInfo.AnimName, 'ad_a_close'))
    {
        AnusState = 0;
        DecoActivity(0, 'AnusIdleClose');
        // End:0x49
        if(bWantsToBeOpen)
        {
            TryPerformOpen(CloseDelay);
        }        
    }
    else
    {
        // End:0x94
        if(__NFUN_341__(AnimEndInfo.AnimName, 'ad_a_open'))
        {
            AnusState = 2;
            DecoActivity(0, 'AnusIdleOpen');
            bDrawUsePhrase = default.bDrawUsePhrase;
            // End:0x94
            if(bWantsToBeOpen / )
            {
            }
        }
    }
    return;
}

animevent simulated function DoorOpen()
{
    CollisionSheet.DecoActivity(0, 'UnBlockAnus');
    CollisionSheet.bBlockCamera = false;
    GlobalTrigger(OpenedEvent);
    // End:0x48
    if(bOpenedEventOnlyOnce)
    {
        OpenedEvent = 'None';
    }
    SavedbUsable = bUsable;
    bUsable = false;
    return;
}

animevent simulated function DoorClosed()
{
    CollisionSheet.DecoActivity(0, 'BlockAnus');
    CollisionSheet.bBlockCamera = true;
    // End:0x42
    if(__NFUN_342__(PortalSurfaceTag, 'None'))
    {
        __NFUN_739__(PortalSurfaceTag, false);
    }
    GlobalTrigger(ClosedEvent);
    // End:0x61
    if(bClosedEventOnlyOnce)
    {
        ClosedEvent = 'None';
    }
    bUsable = SavedbUsable;
    return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
    super(dnDecoration).RegisterPrecacheComponents(PrecacheIndex);
    // End:0x41
    if(__NFUN_339__(Biology_Generic_AnusDoor_MP(self), none))
    {
        PrecacheIndex.__NFUN_1281__('HandQuickAction_TickleAnusDoor');
        PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'ST_Getup_StandShift');
    }
    return;
}

defaultproperties
{
    bAutoOpenForAI=true
    DamagedCloseDelay=5
    CloseDelay=2
    SensorRadius=512
    DecoActivities_Default(0)=(ActivityData=(bInitialized=false,CurrentIndex=0,NextPerformTime=0,NextPerformTime_Failure=0),ActivityIDScript=(OpenAnus),ActivityID=none,ActivityMethod=0,ActivityStates_Success=none,ActivityStates_Failure=none,ActivityDebugID="",Activities=((ActivityRules=none,ActivityElements=(DecoActivities_Animation'Biology_Generic_AnusDoor.DA_Anim_AnusDoor_Open',DecoActivities_Sound'Biology_Generic_AnusDoor.DA_Sound_AnusDoor_Open'),ActivitySetup=(bDisabled=false,bPerformedThisRound=false,PerformedCounter=0,LoopCount=0,PerformAgainDelay=0),FailureActivityElements=none,FailureActivitySetup=(bDisabled=false,bPerformedThisRound=false,PerformedCounter=0,LoopCount=0,PerformAgainDelay=0))),bDisabled=false)
    DecoActivities_Default(1)=(ActivityData=(bInitialized=false,CurrentIndex=0,NextPerformTime=0,NextPerformTime_Failure=0),ActivityIDScript=(AnusIdleOpen),ActivityID=none,ActivityMethod=0,ActivityStates_Success=none,ActivityStates_Failure=none,ActivityDebugID="",Activities=((ActivityRules=none,ActivityElements=(DecoActivities_Animation'Biology_Generic_AnusDoor.DA_Anim_AnusDoor_Open_Idle'),ActivitySetup=(bDisabled=false,bPerformedThisRound=false,PerformedCounter=0,LoopCount=0,PerformAgainDelay=0),FailureActivityElements=none,FailureActivitySetup=(bDisabled=false,bPerformedThisRound=false,PerformedCounter=0,LoopCount=0,PerformAgainDelay=0))),bDisabled=false)
    DecoActivities_Default(2)=(ActivityData=(bInitialized=false,CurrentIndex=0,NextPerformTime=0,NextPerformTime_Failure=0),ActivityIDScript=(CloseAnus),ActivityID=none,ActivityMethod=0,ActivityStates_Success=none,ActivityStates_Failure=none,ActivityDebugID="",Activities=((ActivityRules=none,ActivityElements=(DecoActivities_Animation'Biology_Generic_AnusDoor.DA_Anim_AnusDoor_Close',DecoActivities_Sound'Biology_Generic_AnusDoor.DA_Sound_AnusDoor_Close'),ActivitySetup=(bDisabled=false,bPerformedThisRound=false,PerformedCounter=0,LoopCount=0,PerformAgainDelay=0),FailureActivityElements=none,FailureActivitySetup=(bDisabled=false,bPerformedThisRound=false,PerformedCounter=0,LoopCount=0,PerformAgainDelay=0))),bDisabled=false)
    DecoActivities_Default(3)=(ActivityData=(bInitialized=false,CurrentIndex=0,NextPerformTime=0,NextPerformTime_Failure=0),ActivityIDScript=(AnusIdleClose),ActivityID=none,ActivityMethod=0,ActivityStates_Success=none,ActivityStates_Failure=none,ActivityDebugID="",Activities=((ActivityRules=none,ActivityElements=(DecoActivities_Animation'Biology_Generic_AnusDoor.DA_Anim_AnusDoor_Close_Idle'),ActivitySetup=(bDisabled=false,bPerformedThisRound=false,PerformedCounter=0,LoopCount=0,PerformAgainDelay=0),FailureActivityElements=none,FailureActivitySetup=(bDisabled=false,bPerformedThisRound=false,PerformedCounter=0,LoopCount=0,PerformAgainDelay=0))),bDisabled=false)
    begin object name=DA_Sound_AnusDoor_Amb class=DecoActivities_Sound
        SoundNames(0)=AnusDoor_Amb
    object end
    // Reference: DecoActivities_Sound'Biology_Generic_AnusDoor.DA_Sound_AnusDoor_Amb'
    StartupActivities(0)=DA_Sound_AnusDoor_Amb
    bForceUsePhrase=true
    bUsable=true
    UsePhrase="<?int?dnDecorations.Biology_Generic_AnusDoor.UsePhrase?>"
    MountOnSpawn(0)=(bSkipVerifySelf=false,SpawnClass='Biology_Generic_AnusDoor_CollisionRing',SpawnChance=0,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=true,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=None,ForceEvent=None,MountMeshItem=None,MountOrigin=(X=0,Y=0,Z=0),MountOriginVariance=(X=0,Y=0,Z=0),MountAngles=(Pitch=0,Yaw=0,Roll=0),MountAnglesVariance=(Pitch=0,Yaw=0,Roll=0),MountType=0,DismountPhysics=0),RenderObject=none,DrawScale=0)
    MountOnSpawn(1)=(bSkipVerifySelf=false,SpawnClass='Biology_Generic_AnusDoor_CollisionSheet',SpawnChance=0,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=true,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=None,ForceEvent=None,MountMeshItem=None,MountOrigin=(X=0,Y=0,Z=0),MountOriginVariance=(X=0,Y=0,Z=0),MountAngles=(Pitch=0,Yaw=0,Roll=0),MountAnglesVariance=(Pitch=0,Yaw=0,Roll=0),MountType=0,DismountPhysics=0),RenderObject=none,DrawScale=0)
    MountOnSpawn(2)=(bSkipVerifySelf=false,SpawnClass='Biology_Generic_AlienSensor',SpawnChance=0,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=true,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=None,ForceEvent=None,MountMeshItem=None,MountOrigin=(X=0,Y=0,Z=0),MountOriginVariance=(X=0,Y=0,Z=0),MountAngles=(Pitch=0,Yaw=0,Roll=0),MountAnglesVariance=(Pitch=0,Yaw=0,Roll=0),MountType=0,DismountPhysics=0),RenderObject=none,DrawScale=0)
    bCollisionAssumeValid=false
    bAITransparent=true
    bBlockActors=false
    bBlockPlayers=false
    bBlockKarma=false
    bBlockParticles=false
    bBlockBeams=false
    bTickOnlyZoneRecent=false
    CollisionRadius=50
    CollisionHeight=112
    TouchClasses(0)='Engine.Pawn'
    DrawType=2
    Mesh='c_generic.AlienAnusDoor'
}