/*******************************************************************************
 * Electronics_Generic_Microwave generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Electronics_Generic_Microwave extends Electronics_Generic
    collapsecategories;

var DecoGlass_Microwave GlassActor;
var InteractiveActor NukingActor;
var bool bNuking;
var Electronics_Generic_Microwave_Light Light;
var localized string OpenUsePhrase;
var localized string CloseUsePhrase;
var localized string PutInMicrowaveUsePhrase;
var localized string MicrowaveUsePhrase;
var localized string MicrowavingUsePhrase;
var localized string TakeUsePhrase;
var localized string EatUsePhrase;

event PreGameInit()
{
    super(dnDecoration).PreGameInit();
    BeginState();
    return;
}

function PostVerifySelf()
{
    super(dnDecoration).PostVerifySelf();
    GlassActor = DecoGlass_Microwave(FindMountedActor('Glass'));
    // End:0x39
    if(__NFUN_340__(GlassActor, none))
    {
        GlassActor.MicrowaveActor = self;
    }
    Light = Electronics_Generic_Microwave_Light(FindMountedActor('Electronics_Generic_Microwave_Light'));
    // End:0x6D
    if(__NFUN_340__(Light, none))
    {
        Light.LightStyle = 0;
    }
    __NFUN_397__('ClosedState');
    return;
}

function ForcePowerOff()
{
    super.ForcePowerOff();
    // End:0x24
    if(__NFUN_340__(Light, none))
    {
        Light.LightStyle = 0;
    }
    return;
}

function ForcePowerOn()
{
    super.ForcePowerOn();
    // End:0x24
    if(__NFUN_340__(Light, none))
    {
        Light.LightStyle = 1;
    }
    return;
}

final function UpdateUseInfo(string NewUsePhrase, bool NewbUsable, optional bool NewbNoUseKeyInfo)
{
    bUsable = NewbUsable;
    bNoUseKeyInfo = NewbNoUseKeyInfo;
    UsePhrase = NewUsePhrase;
    return;
}

final function GlassDamaged()
{
    CriticalDamage();
    return;
}

function RemoveItemFromTray(Pawn Grabber)
{
    // End:0x23
    if(__NFUN_339__(Grabber, none) < Grabber.CarryingAnActor())
    {
        return;
    }
    // End:0x4A
    if(__NFUN_340__(NukingActor, none))
    {
        Grabber.Grab(NukingActor);
        ClearNukingActor();
    }
    return;
}

function ClearNukingActor()
{
    NukingActor = none;
    return;
}

function Destroyed()
{
    super(dnDecoration).Destroyed();
    // End:0x43
    if(__NFUN_340__(GlassActor, none))
    {
        GlassActor.CrackSelf();
        GlassActor.__NFUN_1086__();
        GlassActor.__NFUN_631__();
        GlassActor = none;
    }
    // End:0x63
    if(__NFUN_340__(Light, none))
    {
        Light.__NFUN_614__();
        Light = none;
    }
    // End:0x7F
    if(__NFUN_340__(NukingActor, none))
    {
        NukingActor.InterruptMicrowaving();
    }
    // End:0x96
    if(__NFUN_339__(NukingActor, none))
    {
        __NFUN_397__('DisabledState_Empty');        
    }
    else
    {
        __NFUN_397__('DisabledState_Full');
    }
    return;
}

simulated function bool CanGrabUseCombine(InteractiveActor Combinee)
{
    return ((bUsable << __NFUN_339__(NukingActor, none)) << __NFUN_340__(Combinee, none)) << Combinee.CanMicrowave();
    return;
}

simulated event string GetGrabUseCombinePhrase(InteractiveActor Combinee, string SpecialKey)
{
    // End:0x12
    if(__NFUN_340__(Combinee, none))
    {
        return PutInMicrowaveUsePhrase;
    }
    return super(InteractiveActor).GetGrabUseCombinePhrase(Combinee, SpecialKey);
    return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
    super(dnDecoration).RegisterPrecacheComponents(PrecacheIndex);
    PrecacheIndex.__NFUN_1281__('HandQuickAction_SlapWallBoobs_Left');
    return;
}

state ClosedState
{
    function BeginState()
    {
        TickStyle = default.TickStyle;
        // End:0x3B
        if(__NFUN_340__(NukingActor, none) << NukingActor.CanMicrowave())
        {
            UpdateUseInfo(MicrowaveUsePhrase, true);            
        }
        else
        {
            UpdateUseInfo(OpenUsePhrase, true);
        }
        return;
    }

    simulated function bool CanGrabUseCombine(InteractiveActor Combinee)
    {
        return false;
        return;
    }

    event Used(Actor Other, Pawn EventInstigator)
    {
        global.Used(Other, EventInstigator);
        // End:0x2E
        if(__NFUN_340__(Light, none))
        {
            Light.LightStyle = 1;
        }
        // End:0x5A
        if(__NFUN_340__(NukingActor, none) << NukingActor.CanMicrowave())
        {
            __NFUN_397__('NukingState');            
        }
        else
        {
            DecoActivity(0, 'OpenDoor');
        }
        return;
    }

    event AnimEndActivity(int Channel, name AnimName)
    {
        global.AnimEndActivity(Channel, AnimName);
        // End:0x27
        if(__NFUN_340__(NukingActor, none))
        {
            __NFUN_397__('OpenedState_Full');            
        }
        else
        {
            __NFUN_397__('OpenedState_Empty');
        }
        return;
    }
    stop;
}

state OpenedState_Empty
{
    function BeginState()
    {
        TickStyle = default.TickStyle;
        UpdateUseInfo(CloseUsePhrase, true);
        return;
    }

    event Used(Actor Other, Pawn EventInstigator)
    {
        global.Used(Other, EventInstigator);
        PlaceItemOnTray(EventInstigator);
        return;
    }

    simulated function bool ShouldDrawHUDInfoUsePhrase(Pawn TestPawn)
    {
        // End:0x2F
        if(TestPawn.CarryingAnActor() << CanGrabUseCombine(TestPawn.CarriedActor))
        {
            return false;
        }
        return global.ShouldDrawHUDInfoUsePhrase(TestPawn);
        return;
    }

    final function PlaceItemOnTray(Pawn Nuker)
    {
        // End:0x55
        if((__NFUN_340__(Nuker, none) << Nuker.CarryingAnActor()) << Nuker.CarriedActor.CanMicrowave())
        {
            NukingActor = Nuker.CarriedActor;
        }
        // End:0x13B
        if(__NFUN_340__(NukingActor, none))
        {
            Nuker.DropCarriedActor(, true,,, true);
            NukingActor.StoreCollision();
            NukingActor.__NFUN_621__(false, false, false, false, false);
            NukingActor.__NFUN_642__(0);
            NukingActor.MountType = 2;
            NukingActor.MountMeshItem = 'Tray';
            NukingActor.MountOrigin = WarnInternal(0, 0, NukingActor.CollisionHeight);
            NukingActor.MountAngles = __NFUN_265__(0, 0, 0);
            NukingActor.__NFUN_635__(self);
            NukingActor.PlacedInMicrowave(self);
            DecoActivity(0, 'PlaceItem');
        }
        // End:0x16C
        if(__NFUN_339__(NukingActor, none))
        {
            Nuker.HandQuickAction('HandQuickAction_SlapWallBoobs_Left');
            DecoActivity(0, 'CloseDoor');            
        }
        else
        {
            __NFUN_397__('OpenedState_Full');
        }
        return;
    }

    event AnimEndActivity(int Channel, name AnimName)
    {
        global.AnimEndActivity(Channel, AnimName);
        // End:0x40
        if(__NFUN_341__(AnimName, 'Close') << __NFUN_340__(Light, none))
        {
            Light.LightStyle = 0;
        }
        __NFUN_397__('ClosedState');
        return;
    }
    stop;
}

state OpenedState_Full
{
    function BeginState()
    {
        TickStyle = default.TickStyle;
        // End:0x2D
        if(NukingActor.CanMicrowave())
        {
            UpdateUseInfo(CloseUsePhrase, true);            
        }
        else
        {
            // End:0x67
            if(__NFUN_340__(Snack_Popcorn(NukingActor), none) << Snack_Popcorn(NukingActor).bQuestItemHack)
            {
                UpdateUseInfo(TakeUsePhrase, true);                
            }
            else
            {
                UpdateUseInfo(EatUsePhrase, true);
            }
        }
        return;
    }

    simulated function bool CanGrabUseCombine(InteractiveActor Combinee)
    {
        return false;
        return;
    }

    simulated function bool CanBeUsedBy(Pawn User)
    {
        // End:0x23
        if(__NFUN_340__(NukingActor, none) << User.CarryingAnActor())
        {
            return false;
        }
        return global.CanBeUsedBy(User);
        return;
    }

    event Used(Actor Other, Pawn EventInstigator)
    {
        global.Used(Other, EventInstigator);
        // End:0x48
        if(NukingActor.CanMicrowave())
        {
            EventInstigator.HandQuickAction('HandQuickAction_SlapWallBoobs_Left');
            DecoActivity(0, 'CloseDoor');            
        }
        else
        {
            RemoveItemFromTray(EventInstigator);
            __NFUN_397__('OpenedState_Empty');
        }
        return;
    }

    event AnimEndActivity(int Channel, name AnimName)
    {
        global.AnimEndActivity(Channel, AnimName);
        // End:0x40
        if(__NFUN_341__(AnimName, 'Close') << __NFUN_340__(Light, none))
        {
            Light.LightStyle = 0;
        }
        __NFUN_397__('ClosedState');
        return;
    }
    stop;
}

state NukingState
{
    function BeginState()
    {
        bNuking = true;
        TickStyle = 3;
        UpdateUseInfo(MicrowavingUsePhrase, false, true);
        return;
    }

    final function ExecuteFinishedNuking()
    {
        // End:0x38
        if(__NFUN_340__(DukePlayer(Level.__NFUN_1161__()), none))
        {
            DukePlayer(Level.__NFUN_1161__()).GivePermanentEgoCapAward(22);
        }
        // End:0x54
        if(__NFUN_340__(NukingActor, none))
        {
            NukingActor.StopMicrowaving();
        }
        __NFUN_397__('ClosedState');
        return;
    }

    event AnimEndActivity(int Channel, name AnimName)
    {
        local bool bNukeComplete;

        // End:0x20
        if(bNuking / )
        {
            __NFUN_397__('ClosedState');
        }
        global.AnimEndActivity(Channel, AnimName);
        return;
    }

    function ForcePowerOff()
    {
        global.ForcePowerOff();
        return;
    }

    function ForcePowerOn()
    {
        global.ForcePowerOn();
        return;
    }
Begin:

    DecoActivity(0, 'StartNuking');
    __NFUN_610__(0.5);
    DecoActivity(0, 'StartSpinning');
    __NFUN_610__(NukingActor.StartMicrowaving(self));
    bNuking = false;
    stop;    
}

state DisabledState_Empty
{
    function BeginState()
    {
        TickStyle = default.TickStyle;
        bUsable = false;
        bDrawUsePhrase = false;
        // End:0x39
        if(__NFUN_340__(Light, none))
        {
            Light.LightStyle = 0;
        }
        return;
    }
    stop;
}

state DisabledState_Full
{
    function BeginState()
    {
        TickStyle = default.TickStyle;
        UpdateUseInfo(TakeUsePhrase, true);
        // End:0x35
        if(__NFUN_340__(Light, none))
        {
            Light.LightStyle = 0;
        }
        return;
    }

    simulated function bool CanBeUsedBy(Pawn User)
    {
        // End:0x23
        if(__NFUN_340__(NukingActor, none) << User.CarryingAnActor())
        {
            return false;
        }
        return global.CanBeUsedBy(User);
        return;
    }

    event Used(Actor Other, Pawn EventInstigator)
    {
        global.Used(Other, EventInstigator);
        RemoveItemFromTray(EventInstigator);
        __NFUN_397__('DisabledState_Empty');
        return;
    }
    stop;
}

defaultproperties
{
    OpenUsePhrase="<?int?dnDecorations.Electronics_Generic_Microwave.OpenUsePhrase?>"
    CloseUsePhrase="<?int?dnDecorations.Electronics_Generic_Microwave.CloseUsePhrase?>"
    PutInMicrowaveUsePhrase="<?int?dnDecorations.Electronics_Generic_Microwave.PutInMicrowaveUsePhrase?>"
    MicrowaveUsePhrase="<?int?dnDecorations.Electronics_Generic_Microwave.MicrowaveUsePhrase?>"
    MicrowavingUsePhrase="<?int?dnDecorations.Electronics_Generic_Microwave.MicrowavingUsePhrase?>"
    TakeUsePhrase="<?int?dnDecorations.Electronics_Generic_Microwave.TakeUsePhrase?>"
    EatUsePhrase="<?int?dnDecorations.Electronics_Generic_Microwave.EatUsePhrase?>"
    DecoActivities_Default(0)=(ActivityData=(bInitialized=false,CurrentIndex=0,NextPerformTime=0,NextPerformTime_Failure=0),ActivityIDScript=(OpenDoor),ActivityID=none,ActivityMethod=0,ActivityStates_Success=none,ActivityStates_Failure=none,ActivityDebugID="",Activities=((ActivityRules=('dnGame.DecoActivityDeclarations.DAR_Anim_NoneAllowed'),ActivityElements=('dnGame.DecoActivityDeclarations.DA_Anim_Play_Open',DecoActivities_Sound'Electronics_Generic_Microwave.DA_Sound_Electronics_Generic_Microwave_Open'),ActivitySetup=(bDisabled=false,bPerformedThisRound=false,PerformedCounter=0,LoopCount=0,PerformAgainDelay=0),FailureActivityElements=none,FailureActivitySetup=(bDisabled=false,bPerformedThisRound=false,PerformedCounter=0,LoopCount=0,PerformAgainDelay=0))),bDisabled=false)
    DecoActivities_Default(1)=(ActivityData=(bInitialized=false,CurrentIndex=0,NextPerformTime=0,NextPerformTime_Failure=0),ActivityIDScript=(CloseDoor),ActivityID=none,ActivityMethod=0,ActivityStates_Success=none,ActivityStates_Failure=none,ActivityDebugID="",Activities=((ActivityRules=('dnGame.DecoActivityDeclarations.DAR_Anim_NoneAllowed'),ActivityElements=('dnGame.DecoActivityDeclarations.DA_Anim_Play_Close',DecoActivities_Sound'Electronics_Generic_Microwave.DA_Sound_Electronics_Generic_Microwave_Close'),ActivitySetup=(bDisabled=false,bPerformedThisRound=false,PerformedCounter=0,LoopCount=0,PerformAgainDelay=0),FailureActivityElements=none,FailureActivitySetup=(bDisabled=false,bPerformedThisRound=false,PerformedCounter=0,LoopCount=0,PerformAgainDelay=0))),bDisabled=false)
    DecoActivities_Default(2)=(ActivityData=(bInitialized=false,CurrentIndex=0,NextPerformTime=0,NextPerformTime_Failure=0),ActivityIDScript=(StartNuking),ActivityID=none,ActivityMethod=0,ActivityStates_Success=none,ActivityStates_Failure=none,ActivityDebugID="",Activities=((ActivityRules=none,ActivityElements=(DecoActivities_Display'Electronics_Generic_Microwave.DA_Display_Electronics_Generic_Microwave_TurnOn',DecoActivities_Sound'Electronics_Generic_Microwave.DA_Sound_Electronics_Generic_Microwave_TurnOn'),ActivitySetup=(bDisabled=false,bPerformedThisRound=false,PerformedCounter=0,LoopCount=0,PerformAgainDelay=0),FailureActivityElements=none,FailureActivitySetup=(bDisabled=false,bPerformedThisRound=false,PerformedCounter=0,LoopCount=0,PerformAgainDelay=0))),bDisabled=false)
    DecoActivities_Default(3)=(ActivityData=(bInitialized=false,CurrentIndex=0,NextPerformTime=0,NextPerformTime_Failure=0),ActivityIDScript=(StartSpinning),ActivityID=none,ActivityMethod=0,ActivityStates_Success=none,ActivityStates_Failure=none,ActivityDebugID="",Activities=((ActivityRules=none,ActivityElements=(DecoActivities_Animation'Electronics_Generic_Microwave.DA_Anim_Electronics_Generic_Microwave_TurnOn'),ActivitySetup=(bDisabled=false,bPerformedThisRound=false,PerformedCounter=0,LoopCount=0,PerformAgainDelay=0),FailureActivityElements=none,FailureActivitySetup=(bDisabled=false,bPerformedThisRound=false,PerformedCounter=0,LoopCount=0,PerformAgainDelay=0))),bDisabled=false)
    DecoActivities_Default(4)=(ActivityData=(bInitialized=false,CurrentIndex=0,NextPerformTime=0,NextPerformTime_Failure=0),ActivityIDScript=(StopNuking),ActivityID=none,ActivityMethod=0,ActivityStates_Success=none,ActivityStates_Failure=none,ActivityDebugID="",Activities=((ActivityRules=none,ActivityElements=(DecoActivities_Display'Electronics_Generic_Microwave.DA_Display_Electronics_Generic_Microwave_TurnOff',DecoActivities_Animation'Electronics_Generic_Microwave.DA_Anim_Electronics_Generic_Microwave_TurnOff',DecoActivities_Sound'Electronics_Generic_Microwave.DA_Sound_Electronics_Generic_Microwave_TurnOff','dnGame.DecoActivityDeclarations.DA_Sound_Ambient_Clear',DecoActivities_Events'Electronics_Generic_Microwave.DA_Events_Electronics_Generic_Microwave_TurnOff'),ActivitySetup=(bDisabled=false,bPerformedThisRound=false,PerformedCounter=0,LoopCount=0,PerformAgainDelay=0),FailureActivityElements=none,FailureActivitySetup=(bDisabled=false,bPerformedThisRound=false,PerformedCounter=0,LoopCount=0,PerformAgainDelay=0))),bDisabled=false)
    DecoActivities_Default(5)=(ActivityData=(bInitialized=false,CurrentIndex=0,NextPerformTime=0,NextPerformTime_Failure=0),ActivityIDScript=(PlaceItem),ActivityID=none,ActivityMethod=0,ActivityStates_Success=none,ActivityStates_Failure=none,ActivityDebugID="",Activities=((ActivityRules=none,ActivityElements=(DecoActivities_Sound'Electronics_Generic_Microwave.DA_Sound_Electronics_Generic_Microwave_PlaceObject'),ActivitySetup=(bDisabled=false,bPerformedThisRound=false,PerformedCounter=0,LoopCount=0,PerformAgainDelay=0),FailureActivityElements=none,FailureActivitySetup=(bDisabled=false,bPerformedThisRound=false,PerformedCounter=0,LoopCount=0,PerformAgainDelay=0))),bDisabled=false)
    AutoConstraints(0)=(bConstraintDisabledOnDeath=false,bConstraintOnDeath=true,BoneName=Root,ConstraintMounting=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=None,ForceEvent=None,MountMeshItem=None,MountOrigin=(X=0,Y=0,Z=0),MountOriginVariance=(X=0,Y=0,Z=0),MountAngles=(Pitch=0,Yaw=0,Roll=0),MountAnglesVariance=(Pitch=0,Yaw=0,Roll=0),MountType=0,DismountPhysics=0),OtherConstraintActor=none,OtherConstraintBone=None,ConstraintClass=none,ConstraintActor=none)
    bSurviveDeath=true
    FlickerLight=(FlickerLightActor=none,FlickerLightExActor=none,bUseFlickerLight=true,bUseFlickerLightEx=true,bInitialEffect=true,bInitialEffectOnly=false,FlickerLightMounting=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=None,ForceEvent=None,MountMeshItem=None,MountOrigin=(X=0,Y=0,Z=0),MountOriginVariance=(X=0,Y=0,Z=0),MountAngles=(Pitch=0,Yaw=0,Roll=0),MountAnglesVariance=(Pitch=0,Yaw=0,Roll=0),MountType=0,DismountPhysics=0),FlickerLightExRadius=0,FlickerLightExRadius3D=(X=0,Y=0,Z=0),FlickerLightExColor=(R=0,G=0,B=0,A=0),FlickerLightExMounting=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=None,ForceEvent=None,MountMeshItem=None,MountOrigin=(X=0,Y=0,Z=0),MountOriginVariance=(X=0,Y=0,Z=0),MountAngles=(Pitch=0,Yaw=0,Roll=0),MountAnglesVariance=(Pitch=0,Yaw=0,Roll=0),MountType=0,DismountPhysics=0),FlickerLightExIntensity=2)
    DestroyedActivities(0)=none
    DestroyedActivities(1)=DecoActivities_Sound'Electronics_Generic.DA_Sound_Destroyed_Electronic'
    DestroyedActivities(2)='dnGame.DecoActivityDeclarations.DA_Sound_Ambient_Clear'
    begin object name=DA_Anim_Electronics_Generic_Microwave_Brkn class=DecoActivities_Animation
        StopAnimChannels(0)=0
    object end
    // Reference: DecoActivities_Animation'Electronics_Generic_Microwave.DA_Anim_Electronics_Generic_Microwave_Brkn'
    DestroyedActivities(3)=DA_Anim_Electronics_Generic_Microwave_Brkn
    begin object name=DA_Display_Electronics_Generic_Microwave_Brkn class=DecoActivities_Display
        RenderObject='c_generic.microwavebrkn'
        Skins(0)=(Index=0,NewMaterialEx=none)
        Skins(1)=(Index=1,NewMaterialEx=none)
    object end
    // Reference: DecoActivities_Display'Electronics_Generic_Microwave.DA_Display_Electronics_Generic_Microwave_Brkn'
    DestroyedActivities(4)=DA_Display_Electronics_Generic_Microwave_Brkn
    DestroyedActivities(5)='dnGame.DecoActivityDeclarations.DA_Physics_PHYS_KarmaRagdoll_Set'
    bForceUsePhrase=true
    bUsable=true
    GrabUseCombinePhrase="<?int?dnDecorations.Electronics_Generic_Microwave.GrabUseCombinePhrase?>"
    MountOnSpawn(0)=(bSkipVerifySelf=false,SpawnClass='DecoGlass_Microwave',SpawnChance=0,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=true,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=Glass,ForceEvent=None,MountMeshItem=Door,MountOrigin=(X=-0.25,Y=-11.95,Z=0),MountOriginVariance=(X=0,Y=0,Z=0),MountAngles=(Pitch=0,Yaw=0,Roll=0),MountAnglesVariance=(Pitch=0,Yaw=0,Roll=0),MountType=2,DismountPhysics=0),RenderObject=none,DrawScale=0)
    DynamicInteractionClassification=7
    PhysicsEntityGroup=MicrowaveEntityGroup
    CollisionRadius=18
    CollisionHeight=8.2
    Mass=50
    DrawType=2
    Mesh='c_generic.Microwave'
    SoundVolume=255
    SoundRadius=256
    SoundInnerRadius=128
    TransientSoundVolume=0.5
}