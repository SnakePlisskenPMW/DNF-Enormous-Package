/*******************************************************************************
 * dnCorpsePinata generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class dnCorpsePinata extends dnDecorativeCorpse
    collapsecategories;

struct SWebbedBone
{
    var() noexport name BoneName "This is the name of the bone that you want to attach webbing to.";
    var() noexport deprecated Actor WorldAttachPoint "Point this to an Actor placed in the world as an attach point for the webbing.";
    var KBSJoint WorldBSJoint;
    var KarmaActor HelperNode1;
    var KLinear LinearJoint;
    var KLinearSpringDamper SpringDamper;
    var KarmaActor HelperNode2;
    var KBSJoint BoneBSJoint;
    var Details_Generic_CorpseWebbing_Pinata Webbing;
};

var() noexport SWebbedBone WebbedBones[3] "Array of bones you want to attach to the world with webbing.";
var() noexport class<Pickup> PickupTypes[3] "List of pickups to drop in sequence.  Leave a slot empty if you don't want something for each break.";
var() noexport float DamageThrottle "Amount of time to wait between accepting damage.";
var MotionPrefab PickupMotionPrefab;
var bool bTimeout;
var bool bAttached;
var int PickupIndex;

simulated event PreBeginPlay()
{
    local int i;
    local Vector AttachLoc, BoneLoc, Dir;

    super(RenderActor).PreBeginPlay();
    // End:0x5B4
    if(__NFUN_340__(__NFUN_568__(), none))
    {
        i = 0;
        J0x17:

        // End:0x5B4 [Loop If]
        if(-i)
        {            
            // End:0x5B
            if(MeshInstance.FindRandomDest(WebbedBones[i].BoneName) / )
            {
            }
            BoneLoc = MeshInstance.CanSee(WebbedBones[i].BoneName, true);
            // End:0xB9
            if(__NFUN_340__(WebbedBones[i].WorldAttachPoint, none))
            {
                AttachLoc = WebbedBones[i].WorldAttachPoint.Location;                
            }
            else
            {
                AttachLoc = BoneLoc;
            }
            Dir = __NFUN_239__(BoneLoc, AttachLoc) % ;
            WebbedBones[i].WorldBSJoint = KBSJoint(KarmaSetupConstraint(class'KBSJoint', WebbedBones[i].HelperNode1));
            // End:0x189
            if(__NFUN_340__(WebbedBones[i].WorldBSJoint, none))
            {
                WebbedBones[i].WorldBSJoint.__NFUN_645__(AttachLoc);
                KarmaEnableConstraint(WebbedBones[i].WorldBSJoint);
            }
            WebbedBones[i].HelperNode2 = __NFUN_615__(class'Details_Generic_PhysicsHelperNode', self,, BoneLoc, __NFUN_265__(0, 0, 0), false, true);
            WebbedBones[i].LinearJoint = KLinear(KarmaSetupConstraint(class'KLinear', WebbedBones[i].HelperNode1,, WebbedBones[i].HelperNode2));
            // End:0x2A3
            if(__NFUN_340__(WebbedBones[i].LinearJoint, none))
            {
                WebbedBones[i].LinearJoint.__NFUN_645__(WebbedBones[i].HelperNode1.Location);
                /* Statement decompilation error: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
                    
                */

                // [Loop Continue]
                /*@Error*/;
                // Failed to format nests!:System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at UELib.Core.UStruct.UByteCodeDecompiler.DecompileNests(Boolean outputAllRemainingNests)
   at UELib.Core.UStruct.UByteCodeDecompiler.Decompile()
                // 9 & Type:If Position:0x5AA
                // Failed to format remaining nests!:System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at UELib.Core.UStruct.UByteCodeDecompiler.DecompileNests(Boolean outputAllRemainingNests)
   at UELib.Core.UStruct.UByteCodeDecompiler.Decompile()
                // 9 & Type:If Position:0x5AA
}

simulated event TakeDamage(Pawn Instigator, float Damage, Vector DamageOrigin, Vector DamageDirection, class<DamageType> DamageType, optional name HitBoneName, optional Vector DamageStart)
{
    local int i;
    local array<int> Options;

    i = 0;
    J0x07:

    // End:0x47 [Loop If]
    if(-i)
    {        
        // End:0x3D
        if(__NFUN_340__(WebbedBones[i].Webbing, none))
        {
            Options[Options.Add(1)] = i;
        }
        // [Loop Continue]
        i += ;
    }
    // End:0x67
    if(string(Options) ** 0)
    {
        DestroyBoneWebbing(Options[Sin(string(Options))]);
    }
    return;
}

final simulated function DestroyBoneWebbing(int WebbingSlot)
{
    local class<Pickup> PickupType;
    local Pickup Pickup;

    // End:0x19
    if(__NFUN_339__(WebbedBones[WebbingSlot].Webbing, none))
    {
        return;
    }
    // End:0x24
    if(bTimeout)
    {
        return;
    }
    bTimeout = true;
    __NFUN_605__(DamageThrottle, false, 'ClearTimeout');
    FindAndPlaySound('PinataWeb_Break');
    WebbedBones[WebbingSlot].WorldBSJoint.__NFUN_642__(0);
    WebbedBones[WebbingSlot].LinearJoint.__NFUN_642__(0);
    WebbedBones[WebbingSlot].SpringDamper.__NFUN_642__(0);
    WebbedBones[WebbingSlot].BoneBSJoint.__NFUN_642__(0);
    WebbedBones[WebbingSlot].WorldBSJoint.bSilentDestroy = true;
    WebbedBones[WebbingSlot].WorldBSJoint.__NFUN_614__();
    WebbedBones[WebbingSlot].WorldBSJoint = none;
    WebbedBones[WebbingSlot].HelperNode1.bSilentDestroy = true;
    WebbedBones[WebbingSlot].HelperNode1.__NFUN_614__();
    WebbedBones[WebbingSlot].HelperNode1 = none;
    WebbedBones[WebbingSlot].LinearJoint.bSilentDestroy = true;
    WebbedBones[WebbingSlot].LinearJoint.__NFUN_614__();
    WebbedBones[WebbingSlot].LinearJoint = none;
    WebbedBones[WebbingSlot].SpringDamper.bSilentDestroy = true;
    WebbedBones[WebbingSlot].SpringDamper.__NFUN_614__();
    WebbedBones[WebbingSlot].SpringDamper = none;
    WebbedBones[WebbingSlot].HelperNode2.bSilentDestroy = true;
    WebbedBones[WebbingSlot].HelperNode2.__NFUN_614__();
    WebbedBones[WebbingSlot].HelperNode2 = none;
    WebbedBones[WebbingSlot].BoneBSJoint.bSilentDestroy = true;
    WebbedBones[WebbingSlot].BoneBSJoint.__NFUN_614__();
    WebbedBones[WebbingSlot].BoneBSJoint = none;
    WebbedBones[WebbingSlot].Webbing.bSilentDestroy = true;
    WebbedBones[WebbingSlot].Webbing.__NFUN_614__();
    WebbedBones[WebbingSlot].Webbing = none;
    // End:0x322
    if(__NFUN_340__(PickupTypes[PickupIndex], none))
    {
        Pickup = __NFUN_615__(PickupTypes[PickupIndex], self,, Locs(Location, WarnInternal(0, 0, PickupTypes[PickupIndex].default.CollisionHeight)),, false, true);
        // End:0x322
        if(__NFUN_340__(Pickup, none))
        {
            Pickup.__NFUN_816__(PhysicsEntityGroup);
            Pickup.__NFUN_835__(self, PickupMotionPrefab);
        }
    }
    // End:0x34D
    PickupIndex += ;
    {
        __NFUN_812__(7);
        FindAndStopSound('PinataWeb_Stretch');
        bAttached = false;
    }
    return;
}

event Tick(float DeltaSeconds)
{
    local float Scale;

    super(CorpseBase).Tick(DeltaSeconds);
    // End:0x34
    if(bAttached << Repl(-Clamp(Velocity), 10))
    {
        FindAndPlaySound('PinataWeb_Stretch');
    }
    Scale = DeltaSeconds >>> 0.02;
    // End:0x6A
    if(Repl(Scale, 1))
    {
        GravityScale = default.GravityScale >>> Scale;        
    }
    else
    {
        GravityScale = default.GravityScale;
    }
    return;
}

final simulated function ClearTimeout()
{
    bTimeout = false;
    return;
}

simulated event bool OnEvalBonesHelper()
{
    local float DesiredHeadScale;

    DesiredHeadScale = Level.HeadScaleModifier;
    // End:0x53
    if(__NFUN_206__(DesiredHeadScale, 1) << __NFUN_340__(__NFUN_568__(), none))
    {
        MeshInstance.__NFUN_539__('neck', WarnInternal(DesiredHeadScale, DesiredHeadScale, DesiredHeadScale));
    }
    return true;
    return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
    super(CorpseBase).RegisterPrecacheComponents(PrecacheIndex);
    PrecacheIndex.__NFUN_1266__(class'Details_Generic_PhysicsHelperNode');
    PrecacheIndex.__NFUN_1266__(class'Details_Generic_CorpseWebbing_Pinata');
    PrecacheIndex.__NFUN_1277__(VoicePack, 'PinataWeb_Break');
    PrecacheIndex.__NFUN_1277__(VoicePack, 'PinataWeb_Stretch');
    return;
}

defaultproperties
{
    WebbedBones[0]=(BoneName=LeftArm,WorldAttachPoint=none,WorldBSJoint=none,HelperNode1=none,LinearJoint=none,SpringDamper=none,HelperNode2=none,BoneBSJoint=none,Webbing=none)
    WebbedBones[1]=(BoneName=RightForeArmRoll,WorldAttachPoint=none,WorldBSJoint=none,HelperNode1=none,LinearJoint=none,SpringDamper=none,HelperNode2=none,BoneBSJoint=none,Webbing=none)
    WebbedBones[2]=(BoneName=LeftLeg,WorldAttachPoint=none,WorldBSJoint=none,HelperNode1=none,LinearJoint=none,SpringDamper=none,HelperNode2=none,BoneBSJoint=none,Webbing=none)
    DamageThrottle=0.5
    begin object name=dnCorpsePinata_PickupMotionPrefab class=MotionPrefab
        bUseDamageInfo=false
        bUseParentVelocity=false
        bUseParentRotationRate=false
        Velocity=(X=0,Y=0,Z=150)
        VelocityVariance=(X=300,Y=300,Z=0)
    object end
    // Reference: MotionPrefab'dnCorpsePinata.dnCorpsePinata_PickupMotionPrefab'
    PickupMotionPrefab=dnCorpsePinata_PickupMotionPrefab
    bAttached=true
    bStartEnabled=true
    bIgnoresPhysicsDamage=false
    DynamicInteractionClassification=0
    bHasEvalBonesHelper=true
    bGoryActor=true
    CollisionRadius=45
    CollisionHeight=45
    Mesh='c_characters.corpse_pinyata'
    VoicePack='SoundConfig.Interactive.VoicePack_Biology'
}