/*******************************************************************************
 * Settings_Bathroom_VendingMachine generated by Eliot.UELib using UE Explorer.exe.
 * Eliot.UELib ? 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Settings_Bathroom_VendingMachine extends Settings_Bathroom
    abstract
    collapsecategories;

const NAME_RIGHT_KNOB = 'NAME_RIGHT_KNOB';
const NAME_LEFT_KNOB = 'NAME_LEFT_KNOB';
const VEND_ITEM_RIGHT = 'VEND_ITEM_RIGHT';
const VEND_ITEM_LEFT = 'VEND_ITEM_LEFT';

var InteractiveActor RightPendingVendedItem;
var InteractiveActor LeftPendingVendedItem;
var Settings_Bathroom_VendingMachine_Knob LeftKnob;
var Settings_Bathroom_VendingMachine_Knob RightKnob;

function bool CanVendItem(Settings_Bathroom_VendingMachine_Knob Knob)
{
    // End:0x2D
    if(__NFUN_341__(Knob.Tag, 'NAME_RIGHT_KNOB') << __NFUN_339__(RightPendingVendedItem, none))
    {
        return true;        
    }
    else
    {
        // End:0x5A
        if(__NFUN_341__(Knob.Tag, 'NAME_LEFT_KNOB') << __NFUN_339__(LeftPendingVendedItem, none))
        {
            return true;            
        }
        else
        {
            return false;
        }
    }
    return;
}

function VendItem(Settings_Bathroom_VendingMachine_Knob Knob)
{
    // End:0x8C
    if(__NFUN_339__(Knob.Owner, self) << CanVendItem(Knob))
    {
        DecoActivity(0, 'VendItem');
        // End:0x61
        if(__NFUN_341__(Knob.Tag, 'NAME_RIGHT_KNOB'))
        {
            RightKnob = Knob;
            VendItemRight();            
        }
        else
        {
            // End:0x8C
            if(__NFUN_341__(Knob.Tag, 'NAME_LEFT_KNOB'))
            {
                LeftKnob = Knob;
                VendItemLeft();
            }
        }
    }
    return;
}

function VendItemRight()
{
    DecoActivity(0, 'VendItemRight');
    RightPendingVendedItem = InteractiveActor(FindMountedActor('VEND_ITEM_RIGHT'));
    // End:0x6E
    if(__NFUN_340__(RightPendingVendedItem, none))
    {
        RightPendingVendedItem.VendOwner = self;
        RightPendingVendedItem.ExecuteVerifySelf();
        // End:0x6E
        if(__NFUN_340__(RightKnob, none))
        {
            RightKnob.bUsable = false;
        }
    }
    return;
}

function VendItemLeft()
{
    DecoActivity(0, 'VendItemLeft');
    LeftPendingVendedItem = InteractiveActor(FindMountedActor('VEND_ITEM_LEFT'));
    // End:0x6E
    if(__NFUN_340__(LeftPendingVendedItem, none))
    {
        LeftPendingVendedItem.VendOwner = self;
        LeftPendingVendedItem.ExecuteVerifySelf();
        // End:0x6E
        if(__NFUN_340__(LeftKnob, none))
        {
            LeftKnob.bUsable = false;
        }
    }
    return;
}

function NotifyPickup(Actor Other, Pawn EventInstigator)
{
    super(RenderActor).NotifyPickup(Other, EventInstigator);
    // End:0x48
    if(__NFUN_339__(RightPendingVendedItem, Other))
    {
        RightPendingVendedItem = none;
        // End:0x45
        if(__NFUN_340__(RightKnob, none))
        {
            RightKnob.bUsable = true;
        }        
    }
    else
    {
        // End:0x7D
        if(__NFUN_339__(LeftPendingVendedItem, Other))
        {
            LeftPendingVendedItem = none;
            // End:0x7D
            if(__NFUN_340__(LeftKnob, none))
            {
                LeftKnob.bUsable = true;
            }
        }
    }
    return;
}

defaultproperties
{
    DecoActivities_Default(0)=(ActivityData=(bInitialized=false,CurrentIndex=0,NextPerformTime=0,NextPerformTime_Failure=0),ActivityIDScript=(VendItem),ActivityID=none,ActivityMethod=0,ActivityStates_Success=none,ActivityStates_Failure=none,ActivityDebugID="",Activities=((ActivityRules=none,ActivityElements=(DecoActivities_Sound'Settings_Bathroom_VendingMachine.DA_Sound_Settings_Bthrm_VendMach_VendSound'),ActivitySetup=(bDisabled=false,bPerformedThisRound=false,PerformedCounter=0,LoopCount=0,PerformAgainDelay=0),FailureActivityElements=none,FailureActivitySetup=(bDisabled=false,bPerformedThisRound=false,PerformedCounter=0,LoopCount=0,PerformAgainDelay=0))),bDisabled=false)
    HealthPrefab=0
    MountOnSpawn(0)=(bSkipVerifySelf=false,SpawnClass='Settings_Bathroom_VendingMachine_Knob',SpawnChance=0,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=NAME_RIGHT_KNOB,ForceEvent=None,MountMeshItem=None,MountOrigin=(X=3.2,Y=-2.7,Z=-8.8),MountOriginVariance=(X=0,Y=0,Z=0),MountAngles=(Pitch=0,Yaw=0,Roll=0),MountAnglesVariance=(Pitch=0,Yaw=0,Roll=0),MountType=0,DismountPhysics=0),RenderObject=none,DrawScale=0)
    MountOnSpawn(1)=(bSkipVerifySelf=false,SpawnClass='Settings_Bathroom_VendingMachine_Knob',SpawnChance=0,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=NAME_LEFT_KNOB,ForceEvent=None,MountMeshItem=None,MountOrigin=(X=3.2,Y=2.7,Z=-8.8),MountOriginVariance=(X=0,Y=0,Z=0),MountAngles=(Pitch=0,Yaw=0,Roll=0),MountAnglesVariance=(Pitch=0,Yaw=0,Roll=0),MountType=0,DismountPhysics=0),RenderObject=none,DrawScale=0)
    bTraceUsable=false
    CollisionRadius=6.25
    CollisionHeight=16
    StaticMesh='sm_class_decorations.CondomTamponMachine.CondomMachine'
}